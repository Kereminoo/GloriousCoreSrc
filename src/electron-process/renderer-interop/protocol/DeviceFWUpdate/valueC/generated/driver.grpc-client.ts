// @generated by protobuf-ts 2.9.4 with parameter client_grpc1,optimize_code_size,use_proto_field_name
// @generated from protobuf file "driver.proto" (package "driver", syntax proto3)
// tslint:disable
import { DriverGrpc } from "./driver";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { UpgradeInfo } from "./driver";
import type { ResUpgradeInfo } from "./driver";
import type { UpgradeDevInfo } from "./driver";
import type { WeatherRes } from "./driver";
import type { WeatherReq } from "./driver";
import type { Version } from "./driver";
import type { AllList } from "./driver";
import type { GetAll } from "./driver";
import type { Item } from "./driver";
import type { GetItem } from "./driver";
import type { DeleteItem } from "./driver";
import type { InsertDb } from "./driver";
import type { WirelessLoopStatus } from "./driver";
import type { MicrophoneMuteStatus } from "./driver";
import type { MuteMicrophone } from "./driver";
import type { Progress } from "./driver";
import type { OTAUpgrade } from "./driver";
import type { SetLight } from "./driver";
import type { ResRead } from "./driver";
import type { ReadMsg } from "./driver";
import type { ResSend } from "./driver";
import type { SendMsg } from "./driver";
import type { SystemInfo } from "./driver";
import type { VenderMsg } from "./driver";
import type { DeviceList } from "./driver";
import type { Empty } from "./driver";
import * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service driver.DriverGrpc
 */
export interface IDriverGrpcClient {
    /**
     * 监听设备插入拔出等
     *
     * @generated from protobuf rpc: watchDevList(driver.Empty) returns (stream driver.DeviceList);
     */
    watchDevList(input: Empty, metadata?: grpc.Metadata, options?: grpc.CallOptions): grpc.ClientReadableStream<DeviceList>;
    watchDevList(input: Empty, options?: grpc.CallOptions): grpc.ClientReadableStream<DeviceList>;
    /**
     * 监听设备主动上报信息
     *
     * @generated from protobuf rpc: watchVender(driver.Empty) returns (stream driver.VenderMsg);
     */
    watchVender(input: Empty, metadata?: grpc.Metadata, options?: grpc.CallOptions): grpc.ClientReadableStream<VenderMsg>;
    watchVender(input: Empty, options?: grpc.CallOptions): grpc.ClientReadableStream<VenderMsg>;
    /**
     * 获取系统相关信息. cpu 温度需要管理员权限
     *
     * @generated from protobuf rpc: watchSystemInfo(driver.Empty) returns (stream driver.SystemInfo);
     */
    watchSystemInfo(input: Empty, metadata?: grpc.Metadata, options?: grpc.CallOptions): grpc.ClientReadableStream<SystemInfo>;
    watchSystemInfo(input: Empty, options?: grpc.CallOptions): grpc.ClientReadableStream<SystemInfo>;
    /**
     * 发送RY协议,该api封装了2.4g以及蓝牙通讯的细节
     *
     * @generated from protobuf rpc: sendMsg(driver.SendMsg) returns (driver.ResSend);
     */
    sendMsg(input: SendMsg, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ResSend) => void): grpc.ClientUnaryCall;
    sendMsg(input: SendMsg, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: ResSend) => void): grpc.ClientUnaryCall;
    sendMsg(input: SendMsg, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ResSend) => void): grpc.ClientUnaryCall;
    sendMsg(input: SendMsg, callback: (err: grpc.ServiceError | null, value?: ResSend) => void): grpc.ClientUnaryCall;
    /**
     * 读取RY协议,该api封装了2.4g以及蓝牙通讯的细节
     *
     * @generated from protobuf rpc: readMsg(driver.ReadMsg) returns (driver.ResRead);
     */
    readMsg(input: ReadMsg, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ResRead) => void): grpc.ClientUnaryCall;
    readMsg(input: ReadMsg, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: ResRead) => void): grpc.ClientUnaryCall;
    readMsg(input: ReadMsg, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ResRead) => void): grpc.ClientUnaryCall;
    readMsg(input: ReadMsg, callback: (err: grpc.ServiceError | null, value?: ResRead) => void): grpc.ClientUnaryCall;
    /**
     * 发送hid协议,未包装RY的协议,一般升级固件时使用
     *
     * @generated from protobuf rpc: sendRawFeature(driver.SendMsg) returns (driver.ResSend);
     */
    sendRawFeature(input: SendMsg, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ResSend) => void): grpc.ClientUnaryCall;
    sendRawFeature(input: SendMsg, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: ResSend) => void): grpc.ClientUnaryCall;
    sendRawFeature(input: SendMsg, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ResSend) => void): grpc.ClientUnaryCall;
    sendRawFeature(input: SendMsg, callback: (err: grpc.ServiceError | null, value?: ResSend) => void): grpc.ClientUnaryCall;
    /**
     * 读取hid协议,未包装RY的协议,一般升级固件时使用
     *
     * @generated from protobuf rpc: readRawFeature(driver.ReadMsg) returns (driver.ResRead);
     */
    readRawFeature(input: ReadMsg, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ResRead) => void): grpc.ClientUnaryCall;
    readRawFeature(input: ReadMsg, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: ResRead) => void): grpc.ClientUnaryCall;
    readRawFeature(input: ReadMsg, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ResRead) => void): grpc.ClientUnaryCall;
    readRawFeature(input: ReadMsg, callback: (err: grpc.ServiceError | null, value?: ResRead) => void): grpc.ClientUnaryCall;
    /**
     * 设置灯效,驱动设置灯效的时候同步调用该接口,来启动/关闭音乐律动,光影
     *
     * @generated from protobuf rpc: setLightType(driver.SetLight) returns (driver.Empty);
     */
    setLightType(input: SetLight, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Empty) => void): grpc.ClientUnaryCall;
    setLightType(input: SetLight, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: Empty) => void): grpc.ClientUnaryCall;
    setLightType(input: SetLight, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Empty) => void): grpc.ClientUnaryCall;
    setLightType(input: SetLight, callback: (err: grpc.ServiceError | null, value?: Empty) => void): grpc.ClientUnaryCall;
    /**
     * 蓝牙芯片升级,基本上用不到
     *
     * @generated from protobuf rpc: upgradeOTAGATT(driver.OTAUpgrade) returns (stream driver.Progress);
     */
    upgradeOTAGATT(input: OTAUpgrade, metadata?: grpc.Metadata, options?: grpc.CallOptions): grpc.ClientReadableStream<Progress>;
    upgradeOTAGATT(input: OTAUpgrade, options?: grpc.CallOptions): grpc.ClientReadableStream<Progress>;
    /**
     * 开关系统麦克风(仅支持windows)
     *
     * @generated from protobuf rpc: muteMicrophone(driver.MuteMicrophone) returns (driver.ResSend);
     */
    muteMicrophone(input: MuteMicrophone, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ResSend) => void): grpc.ClientUnaryCall;
    muteMicrophone(input: MuteMicrophone, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: ResSend) => void): grpc.ClientUnaryCall;
    muteMicrophone(input: MuteMicrophone, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ResSend) => void): grpc.ClientUnaryCall;
    muteMicrophone(input: MuteMicrophone, callback: (err: grpc.ServiceError | null, value?: ResSend) => void): grpc.ClientUnaryCall;
    /**
     * 开关系统麦克风(仅支持windows)
     *
     * @generated from protobuf rpc: toggleMicrophoneMute(driver.Empty) returns (driver.ResSend);
     */
    toggleMicrophoneMute(input: Empty, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ResSend) => void): grpc.ClientUnaryCall;
    toggleMicrophoneMute(input: Empty, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: ResSend) => void): grpc.ClientUnaryCall;
    toggleMicrophoneMute(input: Empty, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ResSend) => void): grpc.ClientUnaryCall;
    toggleMicrophoneMute(input: Empty, callback: (err: grpc.ServiceError | null, value?: ResSend) => void): grpc.ClientUnaryCall;
    /**
     * 获取系统麦克风开关状态(仅支持windows)
     *
     * @generated from protobuf rpc: getMicrophoneMute(driver.Empty) returns (driver.MicrophoneMuteStatus);
     */
    getMicrophoneMute(input: Empty, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: MicrophoneMuteStatus) => void): grpc.ClientUnaryCall;
    getMicrophoneMute(input: Empty, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: MicrophoneMuteStatus) => void): grpc.ClientUnaryCall;
    getMicrophoneMute(input: Empty, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: MicrophoneMuteStatus) => void): grpc.ClientUnaryCall;
    getMicrophoneMute(input: Empty, callback: (err: grpc.ServiceError | null, value?: MicrophoneMuteStatus) => void): grpc.ClientUnaryCall;
    /**
     * 开关2.4g以及蓝牙的轮训,开启驱动时打开,驱动最小化或者关闭的时候需要关闭,来提升设备性能
     *
     * @generated from protobuf rpc: changeWirelessLoopStatus(driver.WirelessLoopStatus) returns (driver.Empty);
     */
    changeWirelessLoopStatus(input: WirelessLoopStatus, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Empty) => void): grpc.ClientUnaryCall;
    changeWirelessLoopStatus(input: WirelessLoopStatus, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: Empty) => void): grpc.ClientUnaryCall;
    changeWirelessLoopStatus(input: WirelessLoopStatus, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Empty) => void): grpc.ClientUnaryCall;
    changeWirelessLoopStatus(input: WirelessLoopStatus, callback: (err: grpc.ServiceError | null, value?: Empty) => void): grpc.ClientUnaryCall;
    /**
     * 数据库方法,与设备无关可以忽略
     *
     * @generated from protobuf rpc: insertDb(driver.InsertDb) returns (driver.ResSend);
     */
    insertDb(input: InsertDb, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ResSend) => void): grpc.ClientUnaryCall;
    insertDb(input: InsertDb, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: ResSend) => void): grpc.ClientUnaryCall;
    insertDb(input: InsertDb, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ResSend) => void): grpc.ClientUnaryCall;
    insertDb(input: InsertDb, callback: (err: grpc.ServiceError | null, value?: ResSend) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: deleteItemFromDb(driver.DeleteItem) returns (driver.ResSend);
     */
    deleteItemFromDb(input: DeleteItem, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ResSend) => void): grpc.ClientUnaryCall;
    deleteItemFromDb(input: DeleteItem, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: ResSend) => void): grpc.ClientUnaryCall;
    deleteItemFromDb(input: DeleteItem, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ResSend) => void): grpc.ClientUnaryCall;
    deleteItemFromDb(input: DeleteItem, callback: (err: grpc.ServiceError | null, value?: ResSend) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: getItemFromDb(driver.GetItem) returns (driver.Item);
     */
    getItemFromDb(input: GetItem, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Item) => void): grpc.ClientUnaryCall;
    getItemFromDb(input: GetItem, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: Item) => void): grpc.ClientUnaryCall;
    getItemFromDb(input: GetItem, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Item) => void): grpc.ClientUnaryCall;
    getItemFromDb(input: GetItem, callback: (err: grpc.ServiceError | null, value?: Item) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: getAllKeysFromDb(driver.GetAll) returns (driver.AllList);
     */
    getAllKeysFromDb(input: GetAll, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: AllList) => void): grpc.ClientUnaryCall;
    getAllKeysFromDb(input: GetAll, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: AllList) => void): grpc.ClientUnaryCall;
    getAllKeysFromDb(input: GetAll, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: AllList) => void): grpc.ClientUnaryCall;
    getAllKeysFromDb(input: GetAll, callback: (err: grpc.ServiceError | null, value?: AllList) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: getAllValuesFromDb(driver.GetAll) returns (driver.AllList);
     */
    getAllValuesFromDb(input: GetAll, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: AllList) => void): grpc.ClientUnaryCall;
    getAllValuesFromDb(input: GetAll, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: AllList) => void): grpc.ClientUnaryCall;
    getAllValuesFromDb(input: GetAll, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: AllList) => void): grpc.ClientUnaryCall;
    getAllValuesFromDb(input: GetAll, callback: (err: grpc.ServiceError | null, value?: AllList) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: cleanDev(driver.ReadMsg) returns (driver.ResSend);
     */
    cleanDev(input: ReadMsg, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ResSend) => void): grpc.ClientUnaryCall;
    cleanDev(input: ReadMsg, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: ResSend) => void): grpc.ClientUnaryCall;
    cleanDev(input: ReadMsg, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ResSend) => void): grpc.ClientUnaryCall;
    cleanDev(input: ReadMsg, callback: (err: grpc.ServiceError | null, value?: ResSend) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: getVersion(driver.Empty) returns (driver.Version);
     */
    getVersion(input: Empty, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Version) => void): grpc.ClientUnaryCall;
    getVersion(input: Empty, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: Version) => void): grpc.ClientUnaryCall;
    getVersion(input: Empty, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Version) => void): grpc.ClientUnaryCall;
    getVersion(input: Empty, callback: (err: grpc.ServiceError | null, value?: Version) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: getWeather(driver.WeatherReq) returns (driver.WeatherRes);
     */
    getWeather(input: WeatherReq, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: WeatherRes) => void): grpc.ClientUnaryCall;
    getWeather(input: WeatherReq, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: WeatherRes) => void): grpc.ClientUnaryCall;
    getWeather(input: WeatherReq, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: WeatherRes) => void): grpc.ClientUnaryCall;
    getWeather(input: WeatherReq, callback: (err: grpc.ServiceError | null, value?: WeatherRes) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: getUpgradeInfo(driver.UpgradeDevInfo) returns (driver.ResUpgradeInfo);
     */
    getUpgradeInfo(input: UpgradeDevInfo, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ResUpgradeInfo) => void): grpc.ClientUnaryCall;
    getUpgradeInfo(input: UpgradeDevInfo, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: ResUpgradeInfo) => void): grpc.ClientUnaryCall;
    getUpgradeInfo(input: UpgradeDevInfo, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ResUpgradeInfo) => void): grpc.ClientUnaryCall;
    getUpgradeInfo(input: UpgradeDevInfo, callback: (err: grpc.ServiceError | null, value?: ResUpgradeInfo) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: upgradeDev(driver.UpgradeInfo) returns (stream driver.Progress);
     */
    upgradeDev(input: UpgradeInfo, metadata?: grpc.Metadata, options?: grpc.CallOptions): grpc.ClientReadableStream<Progress>;
    upgradeDev(input: UpgradeInfo, options?: grpc.CallOptions): grpc.ClientReadableStream<Progress>;
}
/**
 * @generated from protobuf service driver.DriverGrpc
 */
export class DriverGrpcClient extends grpc.Client implements IDriverGrpcClient {
    private readonly _binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions>;
    constructor(address: string, credentials: grpc.ChannelCredentials, options: grpc.ClientOptions = {}, binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions> = {}) {
        super(address, credentials, options);
        this._binaryOptions = binaryOptions;
    }
    /**
     * 监听设备插入拔出等
     *
     * @generated from protobuf rpc: watchDevList(driver.Empty) returns (stream driver.DeviceList);
     */
    watchDevList(input: Empty, metadata?: grpc.Metadata | grpc.CallOptions, options?: grpc.CallOptions): grpc.ClientReadableStream<DeviceList> {
        const method = DriverGrpc.methods[0];
        return this.makeServerStreamRequest<Empty, DeviceList>(`/${DriverGrpc.typeName}/${method.name}`, (value: Empty): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): DeviceList => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), options);
    }
    /**
     * 监听设备主动上报信息
     *
     * @generated from protobuf rpc: watchVender(driver.Empty) returns (stream driver.VenderMsg);
     */
    watchVender(input: Empty, metadata?: grpc.Metadata | grpc.CallOptions, options?: grpc.CallOptions): grpc.ClientReadableStream<VenderMsg> {
        const method = DriverGrpc.methods[1];
        return this.makeServerStreamRequest<Empty, VenderMsg>(`/${DriverGrpc.typeName}/${method.name}`, (value: Empty): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): VenderMsg => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), options);
    }
    /**
     * 获取系统相关信息. cpu 温度需要管理员权限
     *
     * @generated from protobuf rpc: watchSystemInfo(driver.Empty) returns (stream driver.SystemInfo);
     */
    watchSystemInfo(input: Empty, metadata?: grpc.Metadata | grpc.CallOptions, options?: grpc.CallOptions): grpc.ClientReadableStream<SystemInfo> {
        const method = DriverGrpc.methods[2];
        return this.makeServerStreamRequest<Empty, SystemInfo>(`/${DriverGrpc.typeName}/${method.name}`, (value: Empty): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): SystemInfo => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), options);
    }
    /**
     * 发送RY协议,该api封装了2.4g以及蓝牙通讯的细节
     *
     * @generated from protobuf rpc: sendMsg(driver.SendMsg) returns (driver.ResSend);
     */
    sendMsg(input: SendMsg, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ResSend) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ResSend) => void), callback?: ((err: grpc.ServiceError | null, value?: ResSend) => void)): grpc.ClientUnaryCall {
        const method = DriverGrpc.methods[3];
        return this.makeUnaryRequest<SendMsg, ResSend>(`/${DriverGrpc.typeName}/${method.name}`, (value: SendMsg): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): ResSend => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * 读取RY协议,该api封装了2.4g以及蓝牙通讯的细节
     *
     * @generated from protobuf rpc: readMsg(driver.ReadMsg) returns (driver.ResRead);
     */
    readMsg(input: ReadMsg, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ResRead) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ResRead) => void), callback?: ((err: grpc.ServiceError | null, value?: ResRead) => void)): grpc.ClientUnaryCall {
        const method = DriverGrpc.methods[4];
        return this.makeUnaryRequest<ReadMsg, ResRead>(`/${DriverGrpc.typeName}/${method.name}`, (value: ReadMsg): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): ResRead => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * 发送hid协议,未包装RY的协议,一般升级固件时使用
     *
     * @generated from protobuf rpc: sendRawFeature(driver.SendMsg) returns (driver.ResSend);
     */
    sendRawFeature(input: SendMsg, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ResSend) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ResSend) => void), callback?: ((err: grpc.ServiceError | null, value?: ResSend) => void)): grpc.ClientUnaryCall {
        const method = DriverGrpc.methods[5];
        return this.makeUnaryRequest<SendMsg, ResSend>(`/${DriverGrpc.typeName}/${method.name}`, (value: SendMsg): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): ResSend => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * 读取hid协议,未包装RY的协议,一般升级固件时使用
     *
     * @generated from protobuf rpc: readRawFeature(driver.ReadMsg) returns (driver.ResRead);
     */
    readRawFeature(input: ReadMsg, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ResRead) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ResRead) => void), callback?: ((err: grpc.ServiceError | null, value?: ResRead) => void)): grpc.ClientUnaryCall {
        const method = DriverGrpc.methods[6];
        return this.makeUnaryRequest<ReadMsg, ResRead>(`/${DriverGrpc.typeName}/${method.name}`, (value: ReadMsg): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): ResRead => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * 设置灯效,驱动设置灯效的时候同步调用该接口,来启动/关闭音乐律动,光影
     *
     * @generated from protobuf rpc: setLightType(driver.SetLight) returns (driver.Empty);
     */
    setLightType(input: SetLight, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Empty) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Empty) => void), callback?: ((err: grpc.ServiceError | null, value?: Empty) => void)): grpc.ClientUnaryCall {
        const method = DriverGrpc.methods[7];
        return this.makeUnaryRequest<SetLight, Empty>(`/${DriverGrpc.typeName}/${method.name}`, (value: SetLight): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): Empty => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * 蓝牙芯片升级,基本上用不到
     *
     * @generated from protobuf rpc: upgradeOTAGATT(driver.OTAUpgrade) returns (stream driver.Progress);
     */
    upgradeOTAGATT(input: OTAUpgrade, metadata?: grpc.Metadata | grpc.CallOptions, options?: grpc.CallOptions): grpc.ClientReadableStream<Progress> {
        const method = DriverGrpc.methods[8];
        return this.makeServerStreamRequest<OTAUpgrade, Progress>(`/${DriverGrpc.typeName}/${method.name}`, (value: OTAUpgrade): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): Progress => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), options);
    }
    /**
     * 开关系统麦克风(仅支持windows)
     *
     * @generated from protobuf rpc: muteMicrophone(driver.MuteMicrophone) returns (driver.ResSend);
     */
    muteMicrophone(input: MuteMicrophone, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ResSend) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ResSend) => void), callback?: ((err: grpc.ServiceError | null, value?: ResSend) => void)): grpc.ClientUnaryCall {
        const method = DriverGrpc.methods[9];
        return this.makeUnaryRequest<MuteMicrophone, ResSend>(`/${DriverGrpc.typeName}/${method.name}`, (value: MuteMicrophone): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): ResSend => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * 开关系统麦克风(仅支持windows)
     *
     * @generated from protobuf rpc: toggleMicrophoneMute(driver.Empty) returns (driver.ResSend);
     */
    toggleMicrophoneMute(input: Empty, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ResSend) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ResSend) => void), callback?: ((err: grpc.ServiceError | null, value?: ResSend) => void)): grpc.ClientUnaryCall {
        const method = DriverGrpc.methods[10];
        return this.makeUnaryRequest<Empty, ResSend>(`/${DriverGrpc.typeName}/${method.name}`, (value: Empty): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): ResSend => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * 获取系统麦克风开关状态(仅支持windows)
     *
     * @generated from protobuf rpc: getMicrophoneMute(driver.Empty) returns (driver.MicrophoneMuteStatus);
     */
    getMicrophoneMute(input: Empty, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: MicrophoneMuteStatus) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: MicrophoneMuteStatus) => void), callback?: ((err: grpc.ServiceError | null, value?: MicrophoneMuteStatus) => void)): grpc.ClientUnaryCall {
        const method = DriverGrpc.methods[11];
        return this.makeUnaryRequest<Empty, MicrophoneMuteStatus>(`/${DriverGrpc.typeName}/${method.name}`, (value: Empty): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): MicrophoneMuteStatus => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * 开关2.4g以及蓝牙的轮训,开启驱动时打开,驱动最小化或者关闭的时候需要关闭,来提升设备性能
     *
     * @generated from protobuf rpc: changeWirelessLoopStatus(driver.WirelessLoopStatus) returns (driver.Empty);
     */
    changeWirelessLoopStatus(input: WirelessLoopStatus, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Empty) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Empty) => void), callback?: ((err: grpc.ServiceError | null, value?: Empty) => void)): grpc.ClientUnaryCall {
        const method = DriverGrpc.methods[12];
        return this.makeUnaryRequest<WirelessLoopStatus, Empty>(`/${DriverGrpc.typeName}/${method.name}`, (value: WirelessLoopStatus): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): Empty => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * 数据库方法,与设备无关可以忽略
     *
     * @generated from protobuf rpc: insertDb(driver.InsertDb) returns (driver.ResSend);
     */
    insertDb(input: InsertDb, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ResSend) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ResSend) => void), callback?: ((err: grpc.ServiceError | null, value?: ResSend) => void)): grpc.ClientUnaryCall {
        const method = DriverGrpc.methods[13];
        return this.makeUnaryRequest<InsertDb, ResSend>(`/${DriverGrpc.typeName}/${method.name}`, (value: InsertDb): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): ResSend => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: deleteItemFromDb(driver.DeleteItem) returns (driver.ResSend);
     */
    deleteItemFromDb(input: DeleteItem, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ResSend) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ResSend) => void), callback?: ((err: grpc.ServiceError | null, value?: ResSend) => void)): grpc.ClientUnaryCall {
        const method = DriverGrpc.methods[14];
        return this.makeUnaryRequest<DeleteItem, ResSend>(`/${DriverGrpc.typeName}/${method.name}`, (value: DeleteItem): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): ResSend => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: getItemFromDb(driver.GetItem) returns (driver.Item);
     */
    getItemFromDb(input: GetItem, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Item) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Item) => void), callback?: ((err: grpc.ServiceError | null, value?: Item) => void)): grpc.ClientUnaryCall {
        const method = DriverGrpc.methods[15];
        return this.makeUnaryRequest<GetItem, Item>(`/${DriverGrpc.typeName}/${method.name}`, (value: GetItem): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): Item => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: getAllKeysFromDb(driver.GetAll) returns (driver.AllList);
     */
    getAllKeysFromDb(input: GetAll, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: AllList) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: AllList) => void), callback?: ((err: grpc.ServiceError | null, value?: AllList) => void)): grpc.ClientUnaryCall {
        const method = DriverGrpc.methods[16];
        return this.makeUnaryRequest<GetAll, AllList>(`/${DriverGrpc.typeName}/${method.name}`, (value: GetAll): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): AllList => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: getAllValuesFromDb(driver.GetAll) returns (driver.AllList);
     */
    getAllValuesFromDb(input: GetAll, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: AllList) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: AllList) => void), callback?: ((err: grpc.ServiceError | null, value?: AllList) => void)): grpc.ClientUnaryCall {
        const method = DriverGrpc.methods[17];
        return this.makeUnaryRequest<GetAll, AllList>(`/${DriverGrpc.typeName}/${method.name}`, (value: GetAll): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): AllList => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: cleanDev(driver.ReadMsg) returns (driver.ResSend);
     */
    cleanDev(input: ReadMsg, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ResSend) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ResSend) => void), callback?: ((err: grpc.ServiceError | null, value?: ResSend) => void)): grpc.ClientUnaryCall {
        const method = DriverGrpc.methods[18];
        return this.makeUnaryRequest<ReadMsg, ResSend>(`/${DriverGrpc.typeName}/${method.name}`, (value: ReadMsg): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): ResSend => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: getVersion(driver.Empty) returns (driver.Version);
     */
    getVersion(input: Empty, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Version) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Version) => void), callback?: ((err: grpc.ServiceError | null, value?: Version) => void)): grpc.ClientUnaryCall {
        const method = DriverGrpc.methods[19];
        return this.makeUnaryRequest<Empty, Version>(`/${DriverGrpc.typeName}/${method.name}`, (value: Empty): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): Version => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: getWeather(driver.WeatherReq) returns (driver.WeatherRes);
     */
    getWeather(input: WeatherReq, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: WeatherRes) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: WeatherRes) => void), callback?: ((err: grpc.ServiceError | null, value?: WeatherRes) => void)): grpc.ClientUnaryCall {
        const method = DriverGrpc.methods[20];
        return this.makeUnaryRequest<WeatherReq, WeatherRes>(`/${DriverGrpc.typeName}/${method.name}`, (value: WeatherReq): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): WeatherRes => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: getUpgradeInfo(driver.UpgradeDevInfo) returns (driver.ResUpgradeInfo);
     */
    getUpgradeInfo(input: UpgradeDevInfo, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ResUpgradeInfo) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ResUpgradeInfo) => void), callback?: ((err: grpc.ServiceError | null, value?: ResUpgradeInfo) => void)): grpc.ClientUnaryCall {
        const method = DriverGrpc.methods[21];
        return this.makeUnaryRequest<UpgradeDevInfo, ResUpgradeInfo>(`/${DriverGrpc.typeName}/${method.name}`, (value: UpgradeDevInfo): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): ResUpgradeInfo => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: upgradeDev(driver.UpgradeInfo) returns (stream driver.Progress);
     */
    upgradeDev(input: UpgradeInfo, metadata?: grpc.Metadata | grpc.CallOptions, options?: grpc.CallOptions): grpc.ClientReadableStream<Progress> {
        const method = DriverGrpc.methods[22];
        return this.makeServerStreamRequest<UpgradeInfo, Progress>(`/${DriverGrpc.typeName}/${method.name}`, (value: UpgradeInfo): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): Progress => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), options);
    }
}
