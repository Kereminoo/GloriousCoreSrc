syntax = "proto3";

package driver;
// 程序是一个32位的grpc的服务 https://grpc.io/ . 绑定本机3814端口 , 同时支持
// http1.x 和 http2. 可以使用 https://github.com/bloomrpc/bloomrpc/releases
// 进行测试 音律和光影 只支持 win10及以上版本.如需兼容更低版本需要自行实现

service DriverGrpc {
  // 监听设备插入拔出等
  rpc watchDevList(Empty) returns (stream DeviceList);
  // 监听设备主动上报信息
  rpc watchVender(Empty) returns (stream VenderMsg);
  // 获取系统相关信息. cpu 温度需要管理员权限
  rpc watchSystemInfo(Empty) returns (stream SystemInfo);
  // 发送RY协议,该api封装了2.4g以及蓝牙通讯的细节
  rpc sendMsg(SendMsg) returns (ResSend);
  // 读取RY协议,该api封装了2.4g以及蓝牙通讯的细节
  rpc readMsg(ReadMsg) returns (ResRead);
  // 发送hid协议,未包装RY的协议,一般升级固件时使用
  rpc sendRawFeature(SendMsg) returns (ResSend);
  // 读取hid协议,未包装RY的协议,一般升级固件时使用
  rpc readRawFeature(ReadMsg) returns (ResRead);
  // 设置灯效,驱动设置灯效的时候同步调用该接口,来启动/关闭音乐律动,光影
  rpc setLightType(SetLight) returns (Empty);
  // 蓝牙芯片升级,基本上用不到
  rpc upgradeOTAGATT(OTAUpgrade) returns (stream Progress);
  // 开关系统麦克风(仅支持windows)
  rpc muteMicrophone(MuteMicrophone) returns (ResSend);
  // 开关系统麦克风(仅支持windows)
  rpc toggleMicrophoneMute(Empty) returns (ResSend);
  // 获取系统麦克风开关状态(仅支持windows)
  rpc getMicrophoneMute(Empty) returns (MicrophoneMuteStatus);
  // 开关2.4g以及蓝牙的轮训,开启驱动时打开,驱动最小化或者关闭的时候需要关闭,来提升设备性能
  rpc changeWirelessLoopStatus(WirelessLoopStatus) returns (Empty);
  // 数据库方法,与设备无关可以忽略
  rpc insertDb(InsertDb) returns (ResSend);
  rpc deleteItemFromDb(DeleteItem) returns (ResSend);
  rpc getItemFromDb(GetItem) returns (Item);
  rpc getAllKeysFromDb(GetAll) returns (AllList);
  rpc getAllValuesFromDb(GetAll) returns (AllList);
  rpc cleanDev(ReadMsg) returns (ResSend);
  rpc getVersion(Empty) returns (Version);
  rpc getWeather(WeatherReq) returns (WeatherRes);
  rpc getUpgradeInfo(UpgradeDevInfo) returns (ResUpgradeInfo);
  rpc upgradeDev(UpgradeInfo) returns (stream Progress);
}

message WeatherReq {
  string language = 1;
  string address = 2;
}
message WeatherRes { string res = 1; }

message Version {
  string baseVersion = 1;
  string timeStamp = 2;
}

message WirelessLoopStatus { bool lock = 1; }
message InsertDb {
  string dbPath = 1;
  bytes key = 2;
  bytes value = 3;
}
message DeleteItem {
  string dbPath = 1;
  bytes key = 2;
}
message GetItem {
  string dbPath = 1;
  bytes key = 2;
}
message Item {
  bytes value = 1;
  string err_str = 2;
}

message GetAll { string dbPath = 1; }
message AllList {
  repeated bytes data = 1;
  string err_str = 2;
}

message MicrophoneMuteStatus {
  bool is_mute = 1;
  string err = 2;
}
message MuteMicrophone { bool need_mute = 1; }
message OTAUpgrade {
  string devPath = 1;
  bytes file_buf = 2;
}
message Progress {
  float progress = 1;
  string err = 2;
}
enum DangleDevType {
  DangleDevTypeNone = 0;
  Keyboard = 1;
  Mouse = 2;
}
message Empty {}
message ResSend { string err = 1; }
message ResRead {
  string err = 1;
  bytes msg = 2;
}
enum CheckSumType {
  Bit7 = 0;
  Bit8 = 1;
  None = 2;
}
message SendMsg {
  string devicePath = 1;
  bytes msg = 2;
  CheckSumType checkSumType = 3;
  DangleDevType dangleDevType = 4;
}
message ReadMsg { string devicePath = 1; }

enum DeviceListChangeType {
  Init = 0;
  Add = 1;
  Remove = 2;
  Change = 3;
}

message DeviceList {
  repeated DJDev devList = 1;
  DeviceListChangeType type = 2;
}

message DJDev {
  oneof oneofDev {
    Device dev = 1;
    DangleCommon dangleCommonDev = 2;
  }
}

enum DeviceType {
  YZWKeyboard = 0;
  YZWBoot = 1;
  YZWVender = 2;
}

message Device {
  DeviceType devType = 1;
  bool is24 = 2;
  string path = 3;
  int32 id = 4;
  uint32 battery = 5;
  bool isOnline = 6;
  uint32 vid = 7;
  uint32 pid = 8;
}

message Status24 {
  uint32 battery = 1;
  bool is_online = 2;
}

message DangleStatus {
  oneof dangleDev {
    Empty empty = 1;
    Status24 status = 2;
  }
}

message DangleCommon {
  DangleStatus keyboard = 1;
  DangleStatus mouse = 2;
  string path = 3;
  uint32 keyboard_id = 5;
  uint32 mouse_id = 6;
  uint32 vid = 7;
  uint32 pid = 8;
}

message VenderMsg { bytes msg = 1; }

message SystemInfo {
  uint64 disk_space_total = 1;
  uint64 disk_spce_available = 2;
  uint64 net_work_total_up = 3;
  uint64 net_work_total_down = 4;
  float cpu_temperater = 5;
  uint64 mem_total = 6;
  uint64 mem_used = 7;
  float cpu_usage = 8;
}

enum LightType {
  Music2 = 0;
  Screen = 1;
  Other = 2;
}

message SetLight {
  string devicePath = 1;
  LightType lightType = 2;
  uint32 screen_id = 3;
  DangleDevType dangleDevType = 4;
}

enum UpgradeMethod {
  YZW = 0;
  YZW24 = 1;
  YC3016A = 2;
  OLED = 3;
  MLED = 4;
  MOUSE = 5;
  DANGLE1K = 6;
  MOUSE8K = 7;
  MOUSE8KRF = 8;
  DANGLE4K = 9;
  DANGLE4KRF = 10;
  KEYBOARD8K = 11;
  KEYBOARD8KRF = 12;
  NORDICDANGLE = 13;
  NORDICKEYBOARD = 14;
  FLASH = 15;
  BK100 = 16;
  TOUCHSCREEN = 17;
}

message UpgradeDevInfo {
  uint32 dev_id = 1;
  uint32 vid = 2;
  uint32 pid = 3;
  string devicePath = 4;
}

message ResUpgradeInfo {
  string err_str = 1;
  string res = 2;
}

message UpgradeInfo {
  UpgradeDevInfo dev = 1;
  string version_str = 2;
  string file_path = 3;
  repeated UpgradeMethod upgrade_method = 5;
}
