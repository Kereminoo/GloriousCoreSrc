function _mergeNamespaces(n2, m2) {
  for (var i2 = 0; i2 < m2.length; i2++) {
    const e = m2[i2];
    if (typeof e !== "string" && !Array.isArray(e)) {
      for (const k2 in e) {
        if (k2 !== "default" && !(k2 in n2)) {
          const d2 = Object.getOwnPropertyDescriptor(e, k2);
          if (d2) {
            Object.defineProperty(n2, k2, d2.get ? d2 : {
              enumerable: true,
              get: () => e[k2]
            });
          }
        }
      }
    }
  }
  return Object.freeze(Object.defineProperty(n2, Symbol.toStringTag, { value: "Module" }));
}
function getDefaultExportFromCjs(x2) {
  return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
}
var jsxRuntime = { exports: {} };
var reactJsxRuntime_production_min = {};
var react = { exports: {} };
var react_production_min = {};
/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var l$1 = Symbol.for("react.element"), n$1 = Symbol.for("react.portal"), p$3 = Symbol.for("react.fragment"), q$2 = Symbol.for("react.strict_mode"), r = Symbol.for("react.profiler"), t = Symbol.for("react.provider"), u$1 = Symbol.for("react.context"), v$2 = Symbol.for("react.forward_ref"), w = Symbol.for("react.suspense"), x = Symbol.for("react.memo"), y$1 = Symbol.for("react.lazy"), z$1 = Symbol.iterator;
function A$1(a) {
  if (null === a || "object" !== typeof a)
    return null;
  a = z$1 && a[z$1] || a["@@iterator"];
  return "function" === typeof a ? a : null;
}
var B$1 = { isMounted: function() {
  return false;
}, enqueueForceUpdate: function() {
}, enqueueReplaceState: function() {
}, enqueueSetState: function() {
} }, C$1 = Object.assign, D$1 = {};
function E$1(a, b2, e) {
  this.props = a;
  this.context = b2;
  this.refs = D$1;
  this.updater = e || B$1;
}
E$1.prototype.isReactComponent = {};
E$1.prototype.setState = function(a, b2) {
  if ("object" !== typeof a && "function" !== typeof a && null != a)
    throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
  this.updater.enqueueSetState(this, a, b2, "setState");
};
E$1.prototype.forceUpdate = function(a) {
  this.updater.enqueueForceUpdate(this, a, "forceUpdate");
};
function F$1() {
}
F$1.prototype = E$1.prototype;
function G$1(a, b2, e) {
  this.props = a;
  this.context = b2;
  this.refs = D$1;
  this.updater = e || B$1;
}
var H$1 = G$1.prototype = new F$1();
H$1.constructor = G$1;
C$1(H$1, E$1.prototype);
H$1.isPureReactComponent = true;
var I$2 = Array.isArray, J$1 = Object.prototype.hasOwnProperty, K$1 = { current: null }, L$2 = { key: true, ref: true, __self: true, __source: true };
function M$1(a, b2, e) {
  var d2, c2 = {}, k2 = null, h2 = null;
  if (null != b2)
    for (d2 in void 0 !== b2.ref && (h2 = b2.ref), void 0 !== b2.key && (k2 = "" + b2.key), b2)
      J$1.call(b2, d2) && !L$2.hasOwnProperty(d2) && (c2[d2] = b2[d2]);
  var g2 = arguments.length - 2;
  if (1 === g2)
    c2.children = e;
  else if (1 < g2) {
    for (var f2 = Array(g2), m2 = 0; m2 < g2; m2++)
      f2[m2] = arguments[m2 + 2];
    c2.children = f2;
  }
  if (a && a.defaultProps)
    for (d2 in g2 = a.defaultProps, g2)
      void 0 === c2[d2] && (c2[d2] = g2[d2]);
  return { $$typeof: l$1, type: a, key: k2, ref: h2, props: c2, _owner: K$1.current };
}
function N$1(a, b2) {
  return { $$typeof: l$1, type: a.type, key: b2, ref: a.ref, props: a.props, _owner: a._owner };
}
function O$1(a) {
  return "object" === typeof a && null !== a && a.$$typeof === l$1;
}
function escape(a) {
  var b2 = { "=": "=0", ":": "=2" };
  return "$" + a.replace(/[=:]/g, function(a2) {
    return b2[a2];
  });
}
var P$1 = /\/+/g;
function Q$2(a, b2) {
  return "object" === typeof a && null !== a && null != a.key ? escape("" + a.key) : b2.toString(36);
}
function R$1(a, b2, e, d2, c2) {
  var k2 = typeof a;
  if ("undefined" === k2 || "boolean" === k2)
    a = null;
  var h2 = false;
  if (null === a)
    h2 = true;
  else
    switch (k2) {
      case "string":
      case "number":
        h2 = true;
        break;
      case "object":
        switch (a.$$typeof) {
          case l$1:
          case n$1:
            h2 = true;
        }
    }
  if (h2)
    return h2 = a, c2 = c2(h2), a = "" === d2 ? "." + Q$2(h2, 0) : d2, I$2(c2) ? (e = "", null != a && (e = a.replace(P$1, "$&/") + "/"), R$1(c2, b2, e, "", function(a2) {
      return a2;
    })) : null != c2 && (O$1(c2) && (c2 = N$1(c2, e + (!c2.key || h2 && h2.key === c2.key ? "" : ("" + c2.key).replace(P$1, "$&/") + "/") + a)), b2.push(c2)), 1;
  h2 = 0;
  d2 = "" === d2 ? "." : d2 + ":";
  if (I$2(a))
    for (var g2 = 0; g2 < a.length; g2++) {
      k2 = a[g2];
      var f2 = d2 + Q$2(k2, g2);
      h2 += R$1(k2, b2, e, f2, c2);
    }
  else if (f2 = A$1(a), "function" === typeof f2)
    for (a = f2.call(a), g2 = 0; !(k2 = a.next()).done; )
      k2 = k2.value, f2 = d2 + Q$2(k2, g2++), h2 += R$1(k2, b2, e, f2, c2);
  else if ("object" === k2)
    throw b2 = String(a), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b2 ? "object with keys {" + Object.keys(a).join(", ") + "}" : b2) + "). If you meant to render a collection of children, use an array instead.");
  return h2;
}
function S$2(a, b2, e) {
  if (null == a)
    return a;
  var d2 = [], c2 = 0;
  R$1(a, d2, "", "", function(a2) {
    return b2.call(e, a2, c2++);
  });
  return d2;
}
function T$2(a) {
  if (-1 === a._status) {
    var b2 = a._result;
    b2 = b2();
    b2.then(function(b3) {
      if (0 === a._status || -1 === a._status)
        a._status = 1, a._result = b3;
    }, function(b3) {
      if (0 === a._status || -1 === a._status)
        a._status = 2, a._result = b3;
    });
    -1 === a._status && (a._status = 0, a._result = b2);
  }
  if (1 === a._status)
    return a._result.default;
  throw a._result;
}
var U$2 = { current: null }, V$2 = { transition: null }, W$1 = { ReactCurrentDispatcher: U$2, ReactCurrentBatchConfig: V$2, ReactCurrentOwner: K$1 };
react_production_min.Children = { map: S$2, forEach: function(a, b2, e) {
  S$2(a, function() {
    b2.apply(this, arguments);
  }, e);
}, count: function(a) {
  var b2 = 0;
  S$2(a, function() {
    b2++;
  });
  return b2;
}, toArray: function(a) {
  return S$2(a, function(a2) {
    return a2;
  }) || [];
}, only: function(a) {
  if (!O$1(a))
    throw Error("React.Children.only expected to receive a single React element child.");
  return a;
} };
react_production_min.Component = E$1;
react_production_min.Fragment = p$3;
react_production_min.Profiler = r;
react_production_min.PureComponent = G$1;
react_production_min.StrictMode = q$2;
react_production_min.Suspense = w;
react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W$1;
react_production_min.cloneElement = function(a, b2, e) {
  if (null === a || void 0 === a)
    throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a + ".");
  var d2 = C$1({}, a.props), c2 = a.key, k2 = a.ref, h2 = a._owner;
  if (null != b2) {
    void 0 !== b2.ref && (k2 = b2.ref, h2 = K$1.current);
    void 0 !== b2.key && (c2 = "" + b2.key);
    if (a.type && a.type.defaultProps)
      var g2 = a.type.defaultProps;
    for (f2 in b2)
      J$1.call(b2, f2) && !L$2.hasOwnProperty(f2) && (d2[f2] = void 0 === b2[f2] && void 0 !== g2 ? g2[f2] : b2[f2]);
  }
  var f2 = arguments.length - 2;
  if (1 === f2)
    d2.children = e;
  else if (1 < f2) {
    g2 = Array(f2);
    for (var m2 = 0; m2 < f2; m2++)
      g2[m2] = arguments[m2 + 2];
    d2.children = g2;
  }
  return { $$typeof: l$1, type: a.type, key: c2, ref: k2, props: d2, _owner: h2 };
};
react_production_min.createContext = function(a) {
  a = { $$typeof: u$1, _currentValue: a, _currentValue2: a, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null };
  a.Provider = { $$typeof: t, _context: a };
  return a.Consumer = a;
};
react_production_min.createElement = M$1;
react_production_min.createFactory = function(a) {
  var b2 = M$1.bind(null, a);
  b2.type = a;
  return b2;
};
react_production_min.createRef = function() {
  return { current: null };
};
react_production_min.forwardRef = function(a) {
  return { $$typeof: v$2, render: a };
};
react_production_min.isValidElement = O$1;
react_production_min.lazy = function(a) {
  return { $$typeof: y$1, _payload: { _status: -1, _result: a }, _init: T$2 };
};
react_production_min.memo = function(a, b2) {
  return { $$typeof: x, type: a, compare: void 0 === b2 ? null : b2 };
};
react_production_min.startTransition = function(a) {
  var b2 = V$2.transition;
  V$2.transition = {};
  try {
    a();
  } finally {
    V$2.transition = b2;
  }
};
react_production_min.unstable_act = function() {
  throw Error("act(...) is not supported in production builds of React.");
};
react_production_min.useCallback = function(a, b2) {
  return U$2.current.useCallback(a, b2);
};
react_production_min.useContext = function(a) {
  return U$2.current.useContext(a);
};
react_production_min.useDebugValue = function() {
};
react_production_min.useDeferredValue = function(a) {
  return U$2.current.useDeferredValue(a);
};
react_production_min.useEffect = function(a, b2) {
  return U$2.current.useEffect(a, b2);
};
react_production_min.useId = function() {
  return U$2.current.useId();
};
react_production_min.useImperativeHandle = function(a, b2, e) {
  return U$2.current.useImperativeHandle(a, b2, e);
};
react_production_min.useInsertionEffect = function(a, b2) {
  return U$2.current.useInsertionEffect(a, b2);
};
react_production_min.useLayoutEffect = function(a, b2) {
  return U$2.current.useLayoutEffect(a, b2);
};
react_production_min.useMemo = function(a, b2) {
  return U$2.current.useMemo(a, b2);
};
react_production_min.useReducer = function(a, b2, e) {
  return U$2.current.useReducer(a, b2, e);
};
react_production_min.useRef = function(a) {
  return U$2.current.useRef(a);
};
react_production_min.useState = function(a) {
  return U$2.current.useState(a);
};
react_production_min.useSyncExternalStore = function(a, b2, e) {
  return U$2.current.useSyncExternalStore(a, b2, e);
};
react_production_min.useTransition = function() {
  return U$2.current.useTransition();
};
react_production_min.version = "18.2.0";
{
  react.exports = react_production_min;
}
var reactExports = react.exports;
const React = /* @__PURE__ */ getDefaultExportFromCjs(reactExports);
const React$1 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: React
}, [reactExports]);
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var f$1 = reactExports, k = Symbol.for("react.element"), l = Symbol.for("react.fragment"), m$2 = Object.prototype.hasOwnProperty, n = f$1.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, p$2 = { key: true, ref: true, __self: true, __source: true };
function q$1(c2, a, g2) {
  var b2, d2 = {}, e = null, h2 = null;
  void 0 !== g2 && (e = "" + g2);
  void 0 !== a.key && (e = "" + a.key);
  void 0 !== a.ref && (h2 = a.ref);
  for (b2 in a)
    m$2.call(a, b2) && !p$2.hasOwnProperty(b2) && (d2[b2] = a[b2]);
  if (c2 && c2.defaultProps)
    for (b2 in a = c2.defaultProps, a)
      void 0 === d2[b2] && (d2[b2] = a[b2]);
  return { $$typeof: k, type: c2, key: e, ref: h2, props: d2, _owner: n.current };
}
reactJsxRuntime_production_min.Fragment = l;
reactJsxRuntime_production_min.jsx = q$1;
reactJsxRuntime_production_min.jsxs = q$1;
{
  jsxRuntime.exports = reactJsxRuntime_production_min;
}
var jsxRuntimeExports = jsxRuntime.exports;
var client = {};
var reactDom = { exports: {} };
var reactDom_production_min = {};
var scheduler = { exports: {} };
var scheduler_production_min = {};
/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
(function(exports) {
  function f2(a, b2) {
    var c2 = a.length;
    a.push(b2);
    a:
      for (; 0 < c2; ) {
        var d2 = c2 - 1 >>> 1, e = a[d2];
        if (0 < g2(e, b2))
          a[d2] = b2, a[c2] = e, c2 = d2;
        else
          break a;
      }
  }
  function h2(a) {
    return 0 === a.length ? null : a[0];
  }
  function k2(a) {
    if (0 === a.length)
      return null;
    var b2 = a[0], c2 = a.pop();
    if (c2 !== b2) {
      a[0] = c2;
      a:
        for (var d2 = 0, e = a.length, w2 = e >>> 1; d2 < w2; ) {
          var m2 = 2 * (d2 + 1) - 1, C2 = a[m2], n2 = m2 + 1, x2 = a[n2];
          if (0 > g2(C2, c2))
            n2 < e && 0 > g2(x2, C2) ? (a[d2] = x2, a[n2] = c2, d2 = n2) : (a[d2] = C2, a[m2] = c2, d2 = m2);
          else if (n2 < e && 0 > g2(x2, c2))
            a[d2] = x2, a[n2] = c2, d2 = n2;
          else
            break a;
        }
    }
    return b2;
  }
  function g2(a, b2) {
    var c2 = a.sortIndex - b2.sortIndex;
    return 0 !== c2 ? c2 : a.id - b2.id;
  }
  if ("object" === typeof performance && "function" === typeof performance.now) {
    var l2 = performance;
    exports.unstable_now = function() {
      return l2.now();
    };
  } else {
    var p2 = Date, q2 = p2.now();
    exports.unstable_now = function() {
      return p2.now() - q2;
    };
  }
  var r2 = [], t2 = [], u2 = 1, v2 = null, y2 = 3, z2 = false, A2 = false, B2 = false, D2 = "function" === typeof setTimeout ? setTimeout : null, E2 = "function" === typeof clearTimeout ? clearTimeout : null, F2 = "undefined" !== typeof setImmediate ? setImmediate : null;
  "undefined" !== typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending && navigator.scheduling.isInputPending.bind(navigator.scheduling);
  function G2(a) {
    for (var b2 = h2(t2); null !== b2; ) {
      if (null === b2.callback)
        k2(t2);
      else if (b2.startTime <= a)
        k2(t2), b2.sortIndex = b2.expirationTime, f2(r2, b2);
      else
        break;
      b2 = h2(t2);
    }
  }
  function H2(a) {
    B2 = false;
    G2(a);
    if (!A2)
      if (null !== h2(r2))
        A2 = true, I2(J2);
      else {
        var b2 = h2(t2);
        null !== b2 && K2(H2, b2.startTime - a);
      }
  }
  function J2(a, b2) {
    A2 = false;
    B2 && (B2 = false, E2(L2), L2 = -1);
    z2 = true;
    var c2 = y2;
    try {
      G2(b2);
      for (v2 = h2(r2); null !== v2 && (!(v2.expirationTime > b2) || a && !M2()); ) {
        var d2 = v2.callback;
        if ("function" === typeof d2) {
          v2.callback = null;
          y2 = v2.priorityLevel;
          var e = d2(v2.expirationTime <= b2);
          b2 = exports.unstable_now();
          "function" === typeof e ? v2.callback = e : v2 === h2(r2) && k2(r2);
          G2(b2);
        } else
          k2(r2);
        v2 = h2(r2);
      }
      if (null !== v2)
        var w2 = true;
      else {
        var m2 = h2(t2);
        null !== m2 && K2(H2, m2.startTime - b2);
        w2 = false;
      }
      return w2;
    } finally {
      v2 = null, y2 = c2, z2 = false;
    }
  }
  var N2 = false, O2 = null, L2 = -1, P2 = 5, Q2 = -1;
  function M2() {
    return exports.unstable_now() - Q2 < P2 ? false : true;
  }
  function R2() {
    if (null !== O2) {
      var a = exports.unstable_now();
      Q2 = a;
      var b2 = true;
      try {
        b2 = O2(true, a);
      } finally {
        b2 ? S2() : (N2 = false, O2 = null);
      }
    } else
      N2 = false;
  }
  var S2;
  if ("function" === typeof F2)
    S2 = function() {
      F2(R2);
    };
  else if ("undefined" !== typeof MessageChannel) {
    var T2 = new MessageChannel(), U2 = T2.port2;
    T2.port1.onmessage = R2;
    S2 = function() {
      U2.postMessage(null);
    };
  } else
    S2 = function() {
      D2(R2, 0);
    };
  function I2(a) {
    O2 = a;
    N2 || (N2 = true, S2());
  }
  function K2(a, b2) {
    L2 = D2(function() {
      a(exports.unstable_now());
    }, b2);
  }
  exports.unstable_IdlePriority = 5;
  exports.unstable_ImmediatePriority = 1;
  exports.unstable_LowPriority = 4;
  exports.unstable_NormalPriority = 3;
  exports.unstable_Profiling = null;
  exports.unstable_UserBlockingPriority = 2;
  exports.unstable_cancelCallback = function(a) {
    a.callback = null;
  };
  exports.unstable_continueExecution = function() {
    A2 || z2 || (A2 = true, I2(J2));
  };
  exports.unstable_forceFrameRate = function(a) {
    0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P2 = 0 < a ? Math.floor(1e3 / a) : 5;
  };
  exports.unstable_getCurrentPriorityLevel = function() {
    return y2;
  };
  exports.unstable_getFirstCallbackNode = function() {
    return h2(r2);
  };
  exports.unstable_next = function(a) {
    switch (y2) {
      case 1:
      case 2:
      case 3:
        var b2 = 3;
        break;
      default:
        b2 = y2;
    }
    var c2 = y2;
    y2 = b2;
    try {
      return a();
    } finally {
      y2 = c2;
    }
  };
  exports.unstable_pauseExecution = function() {
  };
  exports.unstable_requestPaint = function() {
  };
  exports.unstable_runWithPriority = function(a, b2) {
    switch (a) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        break;
      default:
        a = 3;
    }
    var c2 = y2;
    y2 = a;
    try {
      return b2();
    } finally {
      y2 = c2;
    }
  };
  exports.unstable_scheduleCallback = function(a, b2, c2) {
    var d2 = exports.unstable_now();
    "object" === typeof c2 && null !== c2 ? (c2 = c2.delay, c2 = "number" === typeof c2 && 0 < c2 ? d2 + c2 : d2) : c2 = d2;
    switch (a) {
      case 1:
        var e = -1;
        break;
      case 2:
        e = 250;
        break;
      case 5:
        e = 1073741823;
        break;
      case 4:
        e = 1e4;
        break;
      default:
        e = 5e3;
    }
    e = c2 + e;
    a = { id: u2++, callback: b2, priorityLevel: a, startTime: c2, expirationTime: e, sortIndex: -1 };
    c2 > d2 ? (a.sortIndex = c2, f2(t2, a), null === h2(r2) && a === h2(t2) && (B2 ? (E2(L2), L2 = -1) : B2 = true, K2(H2, c2 - d2))) : (a.sortIndex = e, f2(r2, a), A2 || z2 || (A2 = true, I2(J2)));
    return a;
  };
  exports.unstable_shouldYield = M2;
  exports.unstable_wrapCallback = function(a) {
    var b2 = y2;
    return function() {
      var c2 = y2;
      y2 = b2;
      try {
        return a.apply(this, arguments);
      } finally {
        y2 = c2;
      }
    };
  };
})(scheduler_production_min);
{
  scheduler.exports = scheduler_production_min;
}
var schedulerExports = scheduler.exports;
/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var aa = reactExports, ca = schedulerExports;
function p$1(a) {
  for (var b2 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c2 = 1; c2 < arguments.length; c2++)
    b2 += "&args[]=" + encodeURIComponent(arguments[c2]);
  return "Minified React error #" + a + "; visit " + b2 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}
var da = /* @__PURE__ */ new Set(), ea = {};
function fa(a, b2) {
  ha(a, b2);
  ha(a + "Capture", b2);
}
function ha(a, b2) {
  ea[a] = b2;
  for (a = 0; a < b2.length; a++)
    da.add(b2[a]);
}
var ia = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement), ja = Object.prototype.hasOwnProperty, ka = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, la = {}, ma = {};
function oa(a) {
  if (ja.call(ma, a))
    return true;
  if (ja.call(la, a))
    return false;
  if (ka.test(a))
    return ma[a] = true;
  la[a] = true;
  return false;
}
function pa(a, b2, c2, d2) {
  if (null !== c2 && 0 === c2.type)
    return false;
  switch (typeof b2) {
    case "function":
    case "symbol":
      return true;
    case "boolean":
      if (d2)
        return false;
      if (null !== c2)
        return !c2.acceptsBooleans;
      a = a.toLowerCase().slice(0, 5);
      return "data-" !== a && "aria-" !== a;
    default:
      return false;
  }
}
function qa(a, b2, c2, d2) {
  if (null === b2 || "undefined" === typeof b2 || pa(a, b2, c2, d2))
    return true;
  if (d2)
    return false;
  if (null !== c2)
    switch (c2.type) {
      case 3:
        return !b2;
      case 4:
        return false === b2;
      case 5:
        return isNaN(b2);
      case 6:
        return isNaN(b2) || 1 > b2;
    }
  return false;
}
function v$1(a, b2, c2, d2, e, f2, g2) {
  this.acceptsBooleans = 2 === b2 || 3 === b2 || 4 === b2;
  this.attributeName = d2;
  this.attributeNamespace = e;
  this.mustUseProperty = c2;
  this.propertyName = a;
  this.type = b2;
  this.sanitizeURL = f2;
  this.removeEmptyString = g2;
}
var z = {};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a) {
  z[a] = new v$1(a, 0, false, a, null, false, false);
});
[["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a) {
  var b2 = a[0];
  z[b2] = new v$1(b2, 1, false, a[1], null, false, false);
});
["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a) {
  z[a] = new v$1(a, 2, false, a.toLowerCase(), null, false, false);
});
["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a) {
  z[a] = new v$1(a, 2, false, a, null, false, false);
});
"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a) {
  z[a] = new v$1(a, 3, false, a.toLowerCase(), null, false, false);
});
["checked", "multiple", "muted", "selected"].forEach(function(a) {
  z[a] = new v$1(a, 3, true, a, null, false, false);
});
["capture", "download"].forEach(function(a) {
  z[a] = new v$1(a, 4, false, a, null, false, false);
});
["cols", "rows", "size", "span"].forEach(function(a) {
  z[a] = new v$1(a, 6, false, a, null, false, false);
});
["rowSpan", "start"].forEach(function(a) {
  z[a] = new v$1(a, 5, false, a.toLowerCase(), null, false, false);
});
var ra = /[\-:]([a-z])/g;
function sa(a) {
  return a[1].toUpperCase();
}
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a) {
  var b2 = a.replace(
    ra,
    sa
  );
  z[b2] = new v$1(b2, 1, false, a, null, false, false);
});
"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a) {
  var b2 = a.replace(ra, sa);
  z[b2] = new v$1(b2, 1, false, a, "http://www.w3.org/1999/xlink", false, false);
});
["xml:base", "xml:lang", "xml:space"].forEach(function(a) {
  var b2 = a.replace(ra, sa);
  z[b2] = new v$1(b2, 1, false, a, "http://www.w3.org/XML/1998/namespace", false, false);
});
["tabIndex", "crossOrigin"].forEach(function(a) {
  z[a] = new v$1(a, 1, false, a.toLowerCase(), null, false, false);
});
z.xlinkHref = new v$1("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
["src", "href", "action", "formAction"].forEach(function(a) {
  z[a] = new v$1(a, 1, false, a.toLowerCase(), null, true, true);
});
function ta(a, b2, c2, d2) {
  var e = z.hasOwnProperty(b2) ? z[b2] : null;
  if (null !== e ? 0 !== e.type : d2 || !(2 < b2.length) || "o" !== b2[0] && "O" !== b2[0] || "n" !== b2[1] && "N" !== b2[1])
    qa(b2, c2, e, d2) && (c2 = null), d2 || null === e ? oa(b2) && (null === c2 ? a.removeAttribute(b2) : a.setAttribute(b2, "" + c2)) : e.mustUseProperty ? a[e.propertyName] = null === c2 ? 3 === e.type ? false : "" : c2 : (b2 = e.attributeName, d2 = e.attributeNamespace, null === c2 ? a.removeAttribute(b2) : (e = e.type, c2 = 3 === e || 4 === e && true === c2 ? "" : "" + c2, d2 ? a.setAttributeNS(d2, b2, c2) : a.setAttribute(b2, c2)));
}
var ua = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, va = Symbol.for("react.element"), wa = Symbol.for("react.portal"), ya = Symbol.for("react.fragment"), za = Symbol.for("react.strict_mode"), Aa = Symbol.for("react.profiler"), Ba = Symbol.for("react.provider"), Ca = Symbol.for("react.context"), Da = Symbol.for("react.forward_ref"), Ea = Symbol.for("react.suspense"), Fa = Symbol.for("react.suspense_list"), Ga = Symbol.for("react.memo"), Ha = Symbol.for("react.lazy");
var Ia = Symbol.for("react.offscreen");
var Ja = Symbol.iterator;
function Ka(a) {
  if (null === a || "object" !== typeof a)
    return null;
  a = Ja && a[Ja] || a["@@iterator"];
  return "function" === typeof a ? a : null;
}
var A = Object.assign, La;
function Ma(a) {
  if (void 0 === La)
    try {
      throw Error();
    } catch (c2) {
      var b2 = c2.stack.trim().match(/\n( *(at )?)/);
      La = b2 && b2[1] || "";
    }
  return "\n" + La + a;
}
var Na = false;
function Oa(a, b2) {
  if (!a || Na)
    return "";
  Na = true;
  var c2 = Error.prepareStackTrace;
  Error.prepareStackTrace = void 0;
  try {
    if (b2)
      if (b2 = function() {
        throw Error();
      }, Object.defineProperty(b2.prototype, "props", { set: function() {
        throw Error();
      } }), "object" === typeof Reflect && Reflect.construct) {
        try {
          Reflect.construct(b2, []);
        } catch (l2) {
          var d2 = l2;
        }
        Reflect.construct(a, [], b2);
      } else {
        try {
          b2.call();
        } catch (l2) {
          d2 = l2;
        }
        a.call(b2.prototype);
      }
    else {
      try {
        throw Error();
      } catch (l2) {
        d2 = l2;
      }
      a();
    }
  } catch (l2) {
    if (l2 && d2 && "string" === typeof l2.stack) {
      for (var e = l2.stack.split("\n"), f2 = d2.stack.split("\n"), g2 = e.length - 1, h2 = f2.length - 1; 1 <= g2 && 0 <= h2 && e[g2] !== f2[h2]; )
        h2--;
      for (; 1 <= g2 && 0 <= h2; g2--, h2--)
        if (e[g2] !== f2[h2]) {
          if (1 !== g2 || 1 !== h2) {
            do
              if (g2--, h2--, 0 > h2 || e[g2] !== f2[h2]) {
                var k2 = "\n" + e[g2].replace(" at new ", " at ");
                a.displayName && k2.includes("<anonymous>") && (k2 = k2.replace("<anonymous>", a.displayName));
                return k2;
              }
            while (1 <= g2 && 0 <= h2);
          }
          break;
        }
    }
  } finally {
    Na = false, Error.prepareStackTrace = c2;
  }
  return (a = a ? a.displayName || a.name : "") ? Ma(a) : "";
}
function Pa(a) {
  switch (a.tag) {
    case 5:
      return Ma(a.type);
    case 16:
      return Ma("Lazy");
    case 13:
      return Ma("Suspense");
    case 19:
      return Ma("SuspenseList");
    case 0:
    case 2:
    case 15:
      return a = Oa(a.type, false), a;
    case 11:
      return a = Oa(a.type.render, false), a;
    case 1:
      return a = Oa(a.type, true), a;
    default:
      return "";
  }
}
function Qa(a) {
  if (null == a)
    return null;
  if ("function" === typeof a)
    return a.displayName || a.name || null;
  if ("string" === typeof a)
    return a;
  switch (a) {
    case ya:
      return "Fragment";
    case wa:
      return "Portal";
    case Aa:
      return "Profiler";
    case za:
      return "StrictMode";
    case Ea:
      return "Suspense";
    case Fa:
      return "SuspenseList";
  }
  if ("object" === typeof a)
    switch (a.$$typeof) {
      case Ca:
        return (a.displayName || "Context") + ".Consumer";
      case Ba:
        return (a._context.displayName || "Context") + ".Provider";
      case Da:
        var b2 = a.render;
        a = a.displayName;
        a || (a = b2.displayName || b2.name || "", a = "" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
        return a;
      case Ga:
        return b2 = a.displayName || null, null !== b2 ? b2 : Qa(a.type) || "Memo";
      case Ha:
        b2 = a._payload;
        a = a._init;
        try {
          return Qa(a(b2));
        } catch (c2) {
        }
    }
  return null;
}
function Ra(a) {
  var b2 = a.type;
  switch (a.tag) {
    case 24:
      return "Cache";
    case 9:
      return (b2.displayName || "Context") + ".Consumer";
    case 10:
      return (b2._context.displayName || "Context") + ".Provider";
    case 18:
      return "DehydratedFragment";
    case 11:
      return a = b2.render, a = a.displayName || a.name || "", b2.displayName || ("" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
    case 7:
      return "Fragment";
    case 5:
      return b2;
    case 4:
      return "Portal";
    case 3:
      return "Root";
    case 6:
      return "Text";
    case 16:
      return Qa(b2);
    case 8:
      return b2 === za ? "StrictMode" : "Mode";
    case 22:
      return "Offscreen";
    case 12:
      return "Profiler";
    case 21:
      return "Scope";
    case 13:
      return "Suspense";
    case 19:
      return "SuspenseList";
    case 25:
      return "TracingMarker";
    case 1:
    case 0:
    case 17:
    case 2:
    case 14:
    case 15:
      if ("function" === typeof b2)
        return b2.displayName || b2.name || null;
      if ("string" === typeof b2)
        return b2;
  }
  return null;
}
function Sa(a) {
  switch (typeof a) {
    case "boolean":
    case "number":
    case "string":
    case "undefined":
      return a;
    case "object":
      return a;
    default:
      return "";
  }
}
function Ta(a) {
  var b2 = a.type;
  return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b2 || "radio" === b2);
}
function Ua(a) {
  var b2 = Ta(a) ? "checked" : "value", c2 = Object.getOwnPropertyDescriptor(a.constructor.prototype, b2), d2 = "" + a[b2];
  if (!a.hasOwnProperty(b2) && "undefined" !== typeof c2 && "function" === typeof c2.get && "function" === typeof c2.set) {
    var e = c2.get, f2 = c2.set;
    Object.defineProperty(a, b2, { configurable: true, get: function() {
      return e.call(this);
    }, set: function(a2) {
      d2 = "" + a2;
      f2.call(this, a2);
    } });
    Object.defineProperty(a, b2, { enumerable: c2.enumerable });
    return { getValue: function() {
      return d2;
    }, setValue: function(a2) {
      d2 = "" + a2;
    }, stopTracking: function() {
      a._valueTracker = null;
      delete a[b2];
    } };
  }
}
function Va(a) {
  a._valueTracker || (a._valueTracker = Ua(a));
}
function Wa(a) {
  if (!a)
    return false;
  var b2 = a._valueTracker;
  if (!b2)
    return true;
  var c2 = b2.getValue();
  var d2 = "";
  a && (d2 = Ta(a) ? a.checked ? "true" : "false" : a.value);
  a = d2;
  return a !== c2 ? (b2.setValue(a), true) : false;
}
function Xa(a) {
  a = a || ("undefined" !== typeof document ? document : void 0);
  if ("undefined" === typeof a)
    return null;
  try {
    return a.activeElement || a.body;
  } catch (b2) {
    return a.body;
  }
}
function Ya(a, b2) {
  var c2 = b2.checked;
  return A({}, b2, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: null != c2 ? c2 : a._wrapperState.initialChecked });
}
function Za(a, b2) {
  var c2 = null == b2.defaultValue ? "" : b2.defaultValue, d2 = null != b2.checked ? b2.checked : b2.defaultChecked;
  c2 = Sa(null != b2.value ? b2.value : c2);
  a._wrapperState = { initialChecked: d2, initialValue: c2, controlled: "checkbox" === b2.type || "radio" === b2.type ? null != b2.checked : null != b2.value };
}
function ab(a, b2) {
  b2 = b2.checked;
  null != b2 && ta(a, "checked", b2, false);
}
function bb(a, b2) {
  ab(a, b2);
  var c2 = Sa(b2.value), d2 = b2.type;
  if (null != c2)
    if ("number" === d2) {
      if (0 === c2 && "" === a.value || a.value != c2)
        a.value = "" + c2;
    } else
      a.value !== "" + c2 && (a.value = "" + c2);
  else if ("submit" === d2 || "reset" === d2) {
    a.removeAttribute("value");
    return;
  }
  b2.hasOwnProperty("value") ? cb(a, b2.type, c2) : b2.hasOwnProperty("defaultValue") && cb(a, b2.type, Sa(b2.defaultValue));
  null == b2.checked && null != b2.defaultChecked && (a.defaultChecked = !!b2.defaultChecked);
}
function db(a, b2, c2) {
  if (b2.hasOwnProperty("value") || b2.hasOwnProperty("defaultValue")) {
    var d2 = b2.type;
    if (!("submit" !== d2 && "reset" !== d2 || void 0 !== b2.value && null !== b2.value))
      return;
    b2 = "" + a._wrapperState.initialValue;
    c2 || b2 === a.value || (a.value = b2);
    a.defaultValue = b2;
  }
  c2 = a.name;
  "" !== c2 && (a.name = "");
  a.defaultChecked = !!a._wrapperState.initialChecked;
  "" !== c2 && (a.name = c2);
}
function cb(a, b2, c2) {
  if ("number" !== b2 || Xa(a.ownerDocument) !== a)
    null == c2 ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c2 && (a.defaultValue = "" + c2);
}
var eb = Array.isArray;
function fb(a, b2, c2, d2) {
  a = a.options;
  if (b2) {
    b2 = {};
    for (var e = 0; e < c2.length; e++)
      b2["$" + c2[e]] = true;
    for (c2 = 0; c2 < a.length; c2++)
      e = b2.hasOwnProperty("$" + a[c2].value), a[c2].selected !== e && (a[c2].selected = e), e && d2 && (a[c2].defaultSelected = true);
  } else {
    c2 = "" + Sa(c2);
    b2 = null;
    for (e = 0; e < a.length; e++) {
      if (a[e].value === c2) {
        a[e].selected = true;
        d2 && (a[e].defaultSelected = true);
        return;
      }
      null !== b2 || a[e].disabled || (b2 = a[e]);
    }
    null !== b2 && (b2.selected = true);
  }
}
function gb(a, b2) {
  if (null != b2.dangerouslySetInnerHTML)
    throw Error(p$1(91));
  return A({}, b2, { value: void 0, defaultValue: void 0, children: "" + a._wrapperState.initialValue });
}
function hb(a, b2) {
  var c2 = b2.value;
  if (null == c2) {
    c2 = b2.children;
    b2 = b2.defaultValue;
    if (null != c2) {
      if (null != b2)
        throw Error(p$1(92));
      if (eb(c2)) {
        if (1 < c2.length)
          throw Error(p$1(93));
        c2 = c2[0];
      }
      b2 = c2;
    }
    null == b2 && (b2 = "");
    c2 = b2;
  }
  a._wrapperState = { initialValue: Sa(c2) };
}
function ib(a, b2) {
  var c2 = Sa(b2.value), d2 = Sa(b2.defaultValue);
  null != c2 && (c2 = "" + c2, c2 !== a.value && (a.value = c2), null == b2.defaultValue && a.defaultValue !== c2 && (a.defaultValue = c2));
  null != d2 && (a.defaultValue = "" + d2);
}
function jb(a) {
  var b2 = a.textContent;
  b2 === a._wrapperState.initialValue && "" !== b2 && null !== b2 && (a.value = b2);
}
function kb(a) {
  switch (a) {
    case "svg":
      return "http://www.w3.org/2000/svg";
    case "math":
      return "http://www.w3.org/1998/Math/MathML";
    default:
      return "http://www.w3.org/1999/xhtml";
  }
}
function lb(a, b2) {
  return null == a || "http://www.w3.org/1999/xhtml" === a ? kb(b2) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b2 ? "http://www.w3.org/1999/xhtml" : a;
}
var mb, nb = function(a) {
  return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function(b2, c2, d2, e) {
    MSApp.execUnsafeLocalFunction(function() {
      return a(b2, c2, d2, e);
    });
  } : a;
}(function(a, b2) {
  if ("http://www.w3.org/2000/svg" !== a.namespaceURI || "innerHTML" in a)
    a.innerHTML = b2;
  else {
    mb = mb || document.createElement("div");
    mb.innerHTML = "<svg>" + b2.valueOf().toString() + "</svg>";
    for (b2 = mb.firstChild; a.firstChild; )
      a.removeChild(a.firstChild);
    for (; b2.firstChild; )
      a.appendChild(b2.firstChild);
  }
});
function ob(a, b2) {
  if (b2) {
    var c2 = a.firstChild;
    if (c2 && c2 === a.lastChild && 3 === c2.nodeType) {
      c2.nodeValue = b2;
      return;
    }
  }
  a.textContent = b2;
}
var pb = {
  animationIterationCount: true,
  aspectRatio: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridArea: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
}, qb = ["Webkit", "ms", "Moz", "O"];
Object.keys(pb).forEach(function(a) {
  qb.forEach(function(b2) {
    b2 = b2 + a.charAt(0).toUpperCase() + a.substring(1);
    pb[b2] = pb[a];
  });
});
function rb(a, b2, c2) {
  return null == b2 || "boolean" === typeof b2 || "" === b2 ? "" : c2 || "number" !== typeof b2 || 0 === b2 || pb.hasOwnProperty(a) && pb[a] ? ("" + b2).trim() : b2 + "px";
}
function sb(a, b2) {
  a = a.style;
  for (var c2 in b2)
    if (b2.hasOwnProperty(c2)) {
      var d2 = 0 === c2.indexOf("--"), e = rb(c2, b2[c2], d2);
      "float" === c2 && (c2 = "cssFloat");
      d2 ? a.setProperty(c2, e) : a[c2] = e;
    }
}
var tb = A({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
function ub(a, b2) {
  if (b2) {
    if (tb[a] && (null != b2.children || null != b2.dangerouslySetInnerHTML))
      throw Error(p$1(137, a));
    if (null != b2.dangerouslySetInnerHTML) {
      if (null != b2.children)
        throw Error(p$1(60));
      if ("object" !== typeof b2.dangerouslySetInnerHTML || !("__html" in b2.dangerouslySetInnerHTML))
        throw Error(p$1(61));
    }
    if (null != b2.style && "object" !== typeof b2.style)
      throw Error(p$1(62));
  }
}
function vb(a, b2) {
  if (-1 === a.indexOf("-"))
    return "string" === typeof b2.is;
  switch (a) {
    case "annotation-xml":
    case "color-profile":
    case "font-face":
    case "font-face-src":
    case "font-face-uri":
    case "font-face-format":
    case "font-face-name":
    case "missing-glyph":
      return false;
    default:
      return true;
  }
}
var wb = null;
function xb(a) {
  a = a.target || a.srcElement || window;
  a.correspondingUseElement && (a = a.correspondingUseElement);
  return 3 === a.nodeType ? a.parentNode : a;
}
var yb = null, zb = null, Ab = null;
function Bb(a) {
  if (a = Cb(a)) {
    if ("function" !== typeof yb)
      throw Error(p$1(280));
    var b2 = a.stateNode;
    b2 && (b2 = Db(b2), yb(a.stateNode, a.type, b2));
  }
}
function Eb(a) {
  zb ? Ab ? Ab.push(a) : Ab = [a] : zb = a;
}
function Fb() {
  if (zb) {
    var a = zb, b2 = Ab;
    Ab = zb = null;
    Bb(a);
    if (b2)
      for (a = 0; a < b2.length; a++)
        Bb(b2[a]);
  }
}
function Gb(a, b2) {
  return a(b2);
}
function Hb() {
}
var Ib = false;
function Jb(a, b2, c2) {
  if (Ib)
    return a(b2, c2);
  Ib = true;
  try {
    return Gb(a, b2, c2);
  } finally {
    if (Ib = false, null !== zb || null !== Ab)
      Hb(), Fb();
  }
}
function Kb(a, b2) {
  var c2 = a.stateNode;
  if (null === c2)
    return null;
  var d2 = Db(c2);
  if (null === d2)
    return null;
  c2 = d2[b2];
  a:
    switch (b2) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
      case "onMouseEnter":
        (d2 = !d2.disabled) || (a = a.type, d2 = !("button" === a || "input" === a || "select" === a || "textarea" === a));
        a = !d2;
        break a;
      default:
        a = false;
    }
  if (a)
    return null;
  if (c2 && "function" !== typeof c2)
    throw Error(p$1(231, b2, typeof c2));
  return c2;
}
var Lb = false;
if (ia)
  try {
    var Mb = {};
    Object.defineProperty(Mb, "passive", { get: function() {
      Lb = true;
    } });
    window.addEventListener("test", Mb, Mb);
    window.removeEventListener("test", Mb, Mb);
  } catch (a) {
    Lb = false;
  }
function Nb(a, b2, c2, d2, e, f2, g2, h2, k2) {
  var l2 = Array.prototype.slice.call(arguments, 3);
  try {
    b2.apply(c2, l2);
  } catch (m2) {
    this.onError(m2);
  }
}
var Ob = false, Pb = null, Qb = false, Rb = null, Sb = { onError: function(a) {
  Ob = true;
  Pb = a;
} };
function Tb(a, b2, c2, d2, e, f2, g2, h2, k2) {
  Ob = false;
  Pb = null;
  Nb.apply(Sb, arguments);
}
function Ub(a, b2, c2, d2, e, f2, g2, h2, k2) {
  Tb.apply(this, arguments);
  if (Ob) {
    if (Ob) {
      var l2 = Pb;
      Ob = false;
      Pb = null;
    } else
      throw Error(p$1(198));
    Qb || (Qb = true, Rb = l2);
  }
}
function Vb(a) {
  var b2 = a, c2 = a;
  if (a.alternate)
    for (; b2.return; )
      b2 = b2.return;
  else {
    a = b2;
    do
      b2 = a, 0 !== (b2.flags & 4098) && (c2 = b2.return), a = b2.return;
    while (a);
  }
  return 3 === b2.tag ? c2 : null;
}
function Wb(a) {
  if (13 === a.tag) {
    var b2 = a.memoizedState;
    null === b2 && (a = a.alternate, null !== a && (b2 = a.memoizedState));
    if (null !== b2)
      return b2.dehydrated;
  }
  return null;
}
function Xb(a) {
  if (Vb(a) !== a)
    throw Error(p$1(188));
}
function Yb(a) {
  var b2 = a.alternate;
  if (!b2) {
    b2 = Vb(a);
    if (null === b2)
      throw Error(p$1(188));
    return b2 !== a ? null : a;
  }
  for (var c2 = a, d2 = b2; ; ) {
    var e = c2.return;
    if (null === e)
      break;
    var f2 = e.alternate;
    if (null === f2) {
      d2 = e.return;
      if (null !== d2) {
        c2 = d2;
        continue;
      }
      break;
    }
    if (e.child === f2.child) {
      for (f2 = e.child; f2; ) {
        if (f2 === c2)
          return Xb(e), a;
        if (f2 === d2)
          return Xb(e), b2;
        f2 = f2.sibling;
      }
      throw Error(p$1(188));
    }
    if (c2.return !== d2.return)
      c2 = e, d2 = f2;
    else {
      for (var g2 = false, h2 = e.child; h2; ) {
        if (h2 === c2) {
          g2 = true;
          c2 = e;
          d2 = f2;
          break;
        }
        if (h2 === d2) {
          g2 = true;
          d2 = e;
          c2 = f2;
          break;
        }
        h2 = h2.sibling;
      }
      if (!g2) {
        for (h2 = f2.child; h2; ) {
          if (h2 === c2) {
            g2 = true;
            c2 = f2;
            d2 = e;
            break;
          }
          if (h2 === d2) {
            g2 = true;
            d2 = f2;
            c2 = e;
            break;
          }
          h2 = h2.sibling;
        }
        if (!g2)
          throw Error(p$1(189));
      }
    }
    if (c2.alternate !== d2)
      throw Error(p$1(190));
  }
  if (3 !== c2.tag)
    throw Error(p$1(188));
  return c2.stateNode.current === c2 ? a : b2;
}
function Zb(a) {
  a = Yb(a);
  return null !== a ? $b(a) : null;
}
function $b(a) {
  if (5 === a.tag || 6 === a.tag)
    return a;
  for (a = a.child; null !== a; ) {
    var b2 = $b(a);
    if (null !== b2)
      return b2;
    a = a.sibling;
  }
  return null;
}
var ac = ca.unstable_scheduleCallback, bc = ca.unstable_cancelCallback, cc = ca.unstable_shouldYield, dc = ca.unstable_requestPaint, B = ca.unstable_now, ec = ca.unstable_getCurrentPriorityLevel, fc = ca.unstable_ImmediatePriority, gc = ca.unstable_UserBlockingPriority, hc = ca.unstable_NormalPriority, ic = ca.unstable_LowPriority, jc = ca.unstable_IdlePriority, kc = null, lc = null;
function mc(a) {
  if (lc && "function" === typeof lc.onCommitFiberRoot)
    try {
      lc.onCommitFiberRoot(kc, a, void 0, 128 === (a.current.flags & 128));
    } catch (b2) {
    }
}
var oc = Math.clz32 ? Math.clz32 : nc, pc = Math.log, qc = Math.LN2;
function nc(a) {
  a >>>= 0;
  return 0 === a ? 32 : 31 - (pc(a) / qc | 0) | 0;
}
var rc = 64, sc = 4194304;
function tc(a) {
  switch (a & -a) {
    case 1:
      return 1;
    case 2:
      return 2;
    case 4:
      return 4;
    case 8:
      return 8;
    case 16:
      return 16;
    case 32:
      return 32;
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
      return a & 4194240;
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
    case 67108864:
      return a & 130023424;
    case 134217728:
      return 134217728;
    case 268435456:
      return 268435456;
    case 536870912:
      return 536870912;
    case 1073741824:
      return 1073741824;
    default:
      return a;
  }
}
function uc(a, b2) {
  var c2 = a.pendingLanes;
  if (0 === c2)
    return 0;
  var d2 = 0, e = a.suspendedLanes, f2 = a.pingedLanes, g2 = c2 & 268435455;
  if (0 !== g2) {
    var h2 = g2 & ~e;
    0 !== h2 ? d2 = tc(h2) : (f2 &= g2, 0 !== f2 && (d2 = tc(f2)));
  } else
    g2 = c2 & ~e, 0 !== g2 ? d2 = tc(g2) : 0 !== f2 && (d2 = tc(f2));
  if (0 === d2)
    return 0;
  if (0 !== b2 && b2 !== d2 && 0 === (b2 & e) && (e = d2 & -d2, f2 = b2 & -b2, e >= f2 || 16 === e && 0 !== (f2 & 4194240)))
    return b2;
  0 !== (d2 & 4) && (d2 |= c2 & 16);
  b2 = a.entangledLanes;
  if (0 !== b2)
    for (a = a.entanglements, b2 &= d2; 0 < b2; )
      c2 = 31 - oc(b2), e = 1 << c2, d2 |= a[c2], b2 &= ~e;
  return d2;
}
function vc(a, b2) {
  switch (a) {
    case 1:
    case 2:
    case 4:
      return b2 + 250;
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
      return b2 + 5e3;
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
    case 67108864:
      return -1;
    case 134217728:
    case 268435456:
    case 536870912:
    case 1073741824:
      return -1;
    default:
      return -1;
  }
}
function wc(a, b2) {
  for (var c2 = a.suspendedLanes, d2 = a.pingedLanes, e = a.expirationTimes, f2 = a.pendingLanes; 0 < f2; ) {
    var g2 = 31 - oc(f2), h2 = 1 << g2, k2 = e[g2];
    if (-1 === k2) {
      if (0 === (h2 & c2) || 0 !== (h2 & d2))
        e[g2] = vc(h2, b2);
    } else
      k2 <= b2 && (a.expiredLanes |= h2);
    f2 &= ~h2;
  }
}
function xc(a) {
  a = a.pendingLanes & -1073741825;
  return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;
}
function yc() {
  var a = rc;
  rc <<= 1;
  0 === (rc & 4194240) && (rc = 64);
  return a;
}
function zc(a) {
  for (var b2 = [], c2 = 0; 31 > c2; c2++)
    b2.push(a);
  return b2;
}
function Ac(a, b2, c2) {
  a.pendingLanes |= b2;
  536870912 !== b2 && (a.suspendedLanes = 0, a.pingedLanes = 0);
  a = a.eventTimes;
  b2 = 31 - oc(b2);
  a[b2] = c2;
}
function Bc(a, b2) {
  var c2 = a.pendingLanes & ~b2;
  a.pendingLanes = b2;
  a.suspendedLanes = 0;
  a.pingedLanes = 0;
  a.expiredLanes &= b2;
  a.mutableReadLanes &= b2;
  a.entangledLanes &= b2;
  b2 = a.entanglements;
  var d2 = a.eventTimes;
  for (a = a.expirationTimes; 0 < c2; ) {
    var e = 31 - oc(c2), f2 = 1 << e;
    b2[e] = 0;
    d2[e] = -1;
    a[e] = -1;
    c2 &= ~f2;
  }
}
function Cc(a, b2) {
  var c2 = a.entangledLanes |= b2;
  for (a = a.entanglements; c2; ) {
    var d2 = 31 - oc(c2), e = 1 << d2;
    e & b2 | a[d2] & b2 && (a[d2] |= b2);
    c2 &= ~e;
  }
}
var C = 0;
function Dc(a) {
  a &= -a;
  return 1 < a ? 4 < a ? 0 !== (a & 268435455) ? 16 : 536870912 : 4 : 1;
}
var Ec, Fc, Gc, Hc, Ic, Jc = false, Kc = [], Lc = null, Mc = null, Nc = null, Oc = /* @__PURE__ */ new Map(), Pc = /* @__PURE__ */ new Map(), Qc = [], Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
function Sc(a, b2) {
  switch (a) {
    case "focusin":
    case "focusout":
      Lc = null;
      break;
    case "dragenter":
    case "dragleave":
      Mc = null;
      break;
    case "mouseover":
    case "mouseout":
      Nc = null;
      break;
    case "pointerover":
    case "pointerout":
      Oc.delete(b2.pointerId);
      break;
    case "gotpointercapture":
    case "lostpointercapture":
      Pc.delete(b2.pointerId);
  }
}
function Tc(a, b2, c2, d2, e, f2) {
  if (null === a || a.nativeEvent !== f2)
    return a = { blockedOn: b2, domEventName: c2, eventSystemFlags: d2, nativeEvent: f2, targetContainers: [e] }, null !== b2 && (b2 = Cb(b2), null !== b2 && Fc(b2)), a;
  a.eventSystemFlags |= d2;
  b2 = a.targetContainers;
  null !== e && -1 === b2.indexOf(e) && b2.push(e);
  return a;
}
function Uc(a, b2, c2, d2, e) {
  switch (b2) {
    case "focusin":
      return Lc = Tc(Lc, a, b2, c2, d2, e), true;
    case "dragenter":
      return Mc = Tc(Mc, a, b2, c2, d2, e), true;
    case "mouseover":
      return Nc = Tc(Nc, a, b2, c2, d2, e), true;
    case "pointerover":
      var f2 = e.pointerId;
      Oc.set(f2, Tc(Oc.get(f2) || null, a, b2, c2, d2, e));
      return true;
    case "gotpointercapture":
      return f2 = e.pointerId, Pc.set(f2, Tc(Pc.get(f2) || null, a, b2, c2, d2, e)), true;
  }
  return false;
}
function Vc(a) {
  var b2 = Wc(a.target);
  if (null !== b2) {
    var c2 = Vb(b2);
    if (null !== c2) {
      if (b2 = c2.tag, 13 === b2) {
        if (b2 = Wb(c2), null !== b2) {
          a.blockedOn = b2;
          Ic(a.priority, function() {
            Gc(c2);
          });
          return;
        }
      } else if (3 === b2 && c2.stateNode.current.memoizedState.isDehydrated) {
        a.blockedOn = 3 === c2.tag ? c2.stateNode.containerInfo : null;
        return;
      }
    }
  }
  a.blockedOn = null;
}
function Xc(a) {
  if (null !== a.blockedOn)
    return false;
  for (var b2 = a.targetContainers; 0 < b2.length; ) {
    var c2 = Yc(a.domEventName, a.eventSystemFlags, b2[0], a.nativeEvent);
    if (null === c2) {
      c2 = a.nativeEvent;
      var d2 = new c2.constructor(c2.type, c2);
      wb = d2;
      c2.target.dispatchEvent(d2);
      wb = null;
    } else
      return b2 = Cb(c2), null !== b2 && Fc(b2), a.blockedOn = c2, false;
    b2.shift();
  }
  return true;
}
function Zc(a, b2, c2) {
  Xc(a) && c2.delete(b2);
}
function $c() {
  Jc = false;
  null !== Lc && Xc(Lc) && (Lc = null);
  null !== Mc && Xc(Mc) && (Mc = null);
  null !== Nc && Xc(Nc) && (Nc = null);
  Oc.forEach(Zc);
  Pc.forEach(Zc);
}
function ad(a, b2) {
  a.blockedOn === b2 && (a.blockedOn = null, Jc || (Jc = true, ca.unstable_scheduleCallback(ca.unstable_NormalPriority, $c)));
}
function bd(a) {
  function b2(b3) {
    return ad(b3, a);
  }
  if (0 < Kc.length) {
    ad(Kc[0], a);
    for (var c2 = 1; c2 < Kc.length; c2++) {
      var d2 = Kc[c2];
      d2.blockedOn === a && (d2.blockedOn = null);
    }
  }
  null !== Lc && ad(Lc, a);
  null !== Mc && ad(Mc, a);
  null !== Nc && ad(Nc, a);
  Oc.forEach(b2);
  Pc.forEach(b2);
  for (c2 = 0; c2 < Qc.length; c2++)
    d2 = Qc[c2], d2.blockedOn === a && (d2.blockedOn = null);
  for (; 0 < Qc.length && (c2 = Qc[0], null === c2.blockedOn); )
    Vc(c2), null === c2.blockedOn && Qc.shift();
}
var cd = ua.ReactCurrentBatchConfig, dd = true;
function ed(a, b2, c2, d2) {
  var e = C, f2 = cd.transition;
  cd.transition = null;
  try {
    C = 1, fd(a, b2, c2, d2);
  } finally {
    C = e, cd.transition = f2;
  }
}
function gd(a, b2, c2, d2) {
  var e = C, f2 = cd.transition;
  cd.transition = null;
  try {
    C = 4, fd(a, b2, c2, d2);
  } finally {
    C = e, cd.transition = f2;
  }
}
function fd(a, b2, c2, d2) {
  if (dd) {
    var e = Yc(a, b2, c2, d2);
    if (null === e)
      hd(a, b2, d2, id, c2), Sc(a, d2);
    else if (Uc(e, a, b2, c2, d2))
      d2.stopPropagation();
    else if (Sc(a, d2), b2 & 4 && -1 < Rc.indexOf(a)) {
      for (; null !== e; ) {
        var f2 = Cb(e);
        null !== f2 && Ec(f2);
        f2 = Yc(a, b2, c2, d2);
        null === f2 && hd(a, b2, d2, id, c2);
        if (f2 === e)
          break;
        e = f2;
      }
      null !== e && d2.stopPropagation();
    } else
      hd(a, b2, d2, null, c2);
  }
}
var id = null;
function Yc(a, b2, c2, d2) {
  id = null;
  a = xb(d2);
  a = Wc(a);
  if (null !== a)
    if (b2 = Vb(a), null === b2)
      a = null;
    else if (c2 = b2.tag, 13 === c2) {
      a = Wb(b2);
      if (null !== a)
        return a;
      a = null;
    } else if (3 === c2) {
      if (b2.stateNode.current.memoizedState.isDehydrated)
        return 3 === b2.tag ? b2.stateNode.containerInfo : null;
      a = null;
    } else
      b2 !== a && (a = null);
  id = a;
  return null;
}
function jd(a) {
  switch (a) {
    case "cancel":
    case "click":
    case "close":
    case "contextmenu":
    case "copy":
    case "cut":
    case "auxclick":
    case "dblclick":
    case "dragend":
    case "dragstart":
    case "drop":
    case "focusin":
    case "focusout":
    case "input":
    case "invalid":
    case "keydown":
    case "keypress":
    case "keyup":
    case "mousedown":
    case "mouseup":
    case "paste":
    case "pause":
    case "play":
    case "pointercancel":
    case "pointerdown":
    case "pointerup":
    case "ratechange":
    case "reset":
    case "resize":
    case "seeked":
    case "submit":
    case "touchcancel":
    case "touchend":
    case "touchstart":
    case "volumechange":
    case "change":
    case "selectionchange":
    case "textInput":
    case "compositionstart":
    case "compositionend":
    case "compositionupdate":
    case "beforeblur":
    case "afterblur":
    case "beforeinput":
    case "blur":
    case "fullscreenchange":
    case "focus":
    case "hashchange":
    case "popstate":
    case "select":
    case "selectstart":
      return 1;
    case "drag":
    case "dragenter":
    case "dragexit":
    case "dragleave":
    case "dragover":
    case "mousemove":
    case "mouseout":
    case "mouseover":
    case "pointermove":
    case "pointerout":
    case "pointerover":
    case "scroll":
    case "toggle":
    case "touchmove":
    case "wheel":
    case "mouseenter":
    case "mouseleave":
    case "pointerenter":
    case "pointerleave":
      return 4;
    case "message":
      switch (ec()) {
        case fc:
          return 1;
        case gc:
          return 4;
        case hc:
        case ic:
          return 16;
        case jc:
          return 536870912;
        default:
          return 16;
      }
    default:
      return 16;
  }
}
var kd = null, ld = null, md = null;
function nd() {
  if (md)
    return md;
  var a, b2 = ld, c2 = b2.length, d2, e = "value" in kd ? kd.value : kd.textContent, f2 = e.length;
  for (a = 0; a < c2 && b2[a] === e[a]; a++)
    ;
  var g2 = c2 - a;
  for (d2 = 1; d2 <= g2 && b2[c2 - d2] === e[f2 - d2]; d2++)
    ;
  return md = e.slice(a, 1 < d2 ? 1 - d2 : void 0);
}
function od(a) {
  var b2 = a.keyCode;
  "charCode" in a ? (a = a.charCode, 0 === a && 13 === b2 && (a = 13)) : a = b2;
  10 === a && (a = 13);
  return 32 <= a || 13 === a ? a : 0;
}
function pd() {
  return true;
}
function qd() {
  return false;
}
function rd(a) {
  function b2(b3, d2, e, f2, g2) {
    this._reactName = b3;
    this._targetInst = e;
    this.type = d2;
    this.nativeEvent = f2;
    this.target = g2;
    this.currentTarget = null;
    for (var c2 in a)
      a.hasOwnProperty(c2) && (b3 = a[c2], this[c2] = b3 ? b3(f2) : f2[c2]);
    this.isDefaultPrevented = (null != f2.defaultPrevented ? f2.defaultPrevented : false === f2.returnValue) ? pd : qd;
    this.isPropagationStopped = qd;
    return this;
  }
  A(b2.prototype, { preventDefault: function() {
    this.defaultPrevented = true;
    var a2 = this.nativeEvent;
    a2 && (a2.preventDefault ? a2.preventDefault() : "unknown" !== typeof a2.returnValue && (a2.returnValue = false), this.isDefaultPrevented = pd);
  }, stopPropagation: function() {
    var a2 = this.nativeEvent;
    a2 && (a2.stopPropagation ? a2.stopPropagation() : "unknown" !== typeof a2.cancelBubble && (a2.cancelBubble = true), this.isPropagationStopped = pd);
  }, persist: function() {
  }, isPersistent: pd });
  return b2;
}
var sd = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a) {
  return a.timeStamp || Date.now();
}, defaultPrevented: 0, isTrusted: 0 }, td = rd(sd), ud = A({}, sd, { view: 0, detail: 0 }), vd = rd(ud), wd, xd, yd, Ad = A({}, ud, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: zd, button: 0, buttons: 0, relatedTarget: function(a) {
  return void 0 === a.relatedTarget ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;
}, movementX: function(a) {
  if ("movementX" in a)
    return a.movementX;
  a !== yd && (yd && "mousemove" === a.type ? (wd = a.screenX - yd.screenX, xd = a.screenY - yd.screenY) : xd = wd = 0, yd = a);
  return wd;
}, movementY: function(a) {
  return "movementY" in a ? a.movementY : xd;
} }), Bd = rd(Ad), Cd = A({}, Ad, { dataTransfer: 0 }), Dd = rd(Cd), Ed = A({}, ud, { relatedTarget: 0 }), Fd = rd(Ed), Gd = A({}, sd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 }), Hd = rd(Gd), Id = A({}, sd, { clipboardData: function(a) {
  return "clipboardData" in a ? a.clipboardData : window.clipboardData;
} }), Jd = rd(Id), Kd = A({}, sd, { data: 0 }), Ld = rd(Kd), Md = {
  Esc: "Escape",
  Spacebar: " ",
  Left: "ArrowLeft",
  Up: "ArrowUp",
  Right: "ArrowRight",
  Down: "ArrowDown",
  Del: "Delete",
  Win: "OS",
  Menu: "ContextMenu",
  Apps: "ContextMenu",
  Scroll: "ScrollLock",
  MozPrintableKey: "Unidentified"
}, Nd = {
  8: "Backspace",
  9: "Tab",
  12: "Clear",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  19: "Pause",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  45: "Insert",
  46: "Delete",
  112: "F1",
  113: "F2",
  114: "F3",
  115: "F4",
  116: "F5",
  117: "F6",
  118: "F7",
  119: "F8",
  120: "F9",
  121: "F10",
  122: "F11",
  123: "F12",
  144: "NumLock",
  145: "ScrollLock",
  224: "Meta"
}, Od = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
function Pd(a) {
  var b2 = this.nativeEvent;
  return b2.getModifierState ? b2.getModifierState(a) : (a = Od[a]) ? !!b2[a] : false;
}
function zd() {
  return Pd;
}
var Qd = A({}, ud, { key: function(a) {
  if (a.key) {
    var b2 = Md[a.key] || a.key;
    if ("Unidentified" !== b2)
      return b2;
  }
  return "keypress" === a.type ? (a = od(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Nd[a.keyCode] || "Unidentified" : "";
}, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: zd, charCode: function(a) {
  return "keypress" === a.type ? od(a) : 0;
}, keyCode: function(a) {
  return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
}, which: function(a) {
  return "keypress" === a.type ? od(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
} }), Rd = rd(Qd), Sd = A({}, Ad, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 }), Td = rd(Sd), Ud = A({}, ud, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: zd }), Vd = rd(Ud), Wd = A({}, sd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 }), Xd = rd(Wd), Yd = A({}, Ad, {
  deltaX: function(a) {
    return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
  },
  deltaY: function(a) {
    return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
  },
  deltaZ: 0,
  deltaMode: 0
}), Zd = rd(Yd), $d = [9, 13, 27, 32], ae = ia && "CompositionEvent" in window, be = null;
ia && "documentMode" in document && (be = document.documentMode);
var ce = ia && "TextEvent" in window && !be, de = ia && (!ae || be && 8 < be && 11 >= be), ee = String.fromCharCode(32), fe = false;
function ge(a, b2) {
  switch (a) {
    case "keyup":
      return -1 !== $d.indexOf(b2.keyCode);
    case "keydown":
      return 229 !== b2.keyCode;
    case "keypress":
    case "mousedown":
    case "focusout":
      return true;
    default:
      return false;
  }
}
function he(a) {
  a = a.detail;
  return "object" === typeof a && "data" in a ? a.data : null;
}
var ie = false;
function je(a, b2) {
  switch (a) {
    case "compositionend":
      return he(b2);
    case "keypress":
      if (32 !== b2.which)
        return null;
      fe = true;
      return ee;
    case "textInput":
      return a = b2.data, a === ee && fe ? null : a;
    default:
      return null;
  }
}
function ke(a, b2) {
  if (ie)
    return "compositionend" === a || !ae && ge(a, b2) ? (a = nd(), md = ld = kd = null, ie = false, a) : null;
  switch (a) {
    case "paste":
      return null;
    case "keypress":
      if (!(b2.ctrlKey || b2.altKey || b2.metaKey) || b2.ctrlKey && b2.altKey) {
        if (b2.char && 1 < b2.char.length)
          return b2.char;
        if (b2.which)
          return String.fromCharCode(b2.which);
      }
      return null;
    case "compositionend":
      return de && "ko" !== b2.locale ? null : b2.data;
    default:
      return null;
  }
}
var le = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
function me(a) {
  var b2 = a && a.nodeName && a.nodeName.toLowerCase();
  return "input" === b2 ? !!le[a.type] : "textarea" === b2 ? true : false;
}
function ne(a, b2, c2, d2) {
  Eb(d2);
  b2 = oe(b2, "onChange");
  0 < b2.length && (c2 = new td("onChange", "change", null, c2, d2), a.push({ event: c2, listeners: b2 }));
}
var pe = null, qe = null;
function re(a) {
  se(a, 0);
}
function te(a) {
  var b2 = ue(a);
  if (Wa(b2))
    return a;
}
function ve(a, b2) {
  if ("change" === a)
    return b2;
}
var we = false;
if (ia) {
  var xe;
  if (ia) {
    var ye = "oninput" in document;
    if (!ye) {
      var ze = document.createElement("div");
      ze.setAttribute("oninput", "return;");
      ye = "function" === typeof ze.oninput;
    }
    xe = ye;
  } else
    xe = false;
  we = xe && (!document.documentMode || 9 < document.documentMode);
}
function Ae() {
  pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
}
function Be(a) {
  if ("value" === a.propertyName && te(qe)) {
    var b2 = [];
    ne(b2, qe, a, xb(a));
    Jb(re, b2);
  }
}
function Ce(a, b2, c2) {
  "focusin" === a ? (Ae(), pe = b2, qe = c2, pe.attachEvent("onpropertychange", Be)) : "focusout" === a && Ae();
}
function De(a) {
  if ("selectionchange" === a || "keyup" === a || "keydown" === a)
    return te(qe);
}
function Ee(a, b2) {
  if ("click" === a)
    return te(b2);
}
function Fe(a, b2) {
  if ("input" === a || "change" === a)
    return te(b2);
}
function Ge(a, b2) {
  return a === b2 && (0 !== a || 1 / a === 1 / b2) || a !== a && b2 !== b2;
}
var He = "function" === typeof Object.is ? Object.is : Ge;
function Ie(a, b2) {
  if (He(a, b2))
    return true;
  if ("object" !== typeof a || null === a || "object" !== typeof b2 || null === b2)
    return false;
  var c2 = Object.keys(a), d2 = Object.keys(b2);
  if (c2.length !== d2.length)
    return false;
  for (d2 = 0; d2 < c2.length; d2++) {
    var e = c2[d2];
    if (!ja.call(b2, e) || !He(a[e], b2[e]))
      return false;
  }
  return true;
}
function Je(a) {
  for (; a && a.firstChild; )
    a = a.firstChild;
  return a;
}
function Ke(a, b2) {
  var c2 = Je(a);
  a = 0;
  for (var d2; c2; ) {
    if (3 === c2.nodeType) {
      d2 = a + c2.textContent.length;
      if (a <= b2 && d2 >= b2)
        return { node: c2, offset: b2 - a };
      a = d2;
    }
    a: {
      for (; c2; ) {
        if (c2.nextSibling) {
          c2 = c2.nextSibling;
          break a;
        }
        c2 = c2.parentNode;
      }
      c2 = void 0;
    }
    c2 = Je(c2);
  }
}
function Le(a, b2) {
  return a && b2 ? a === b2 ? true : a && 3 === a.nodeType ? false : b2 && 3 === b2.nodeType ? Le(a, b2.parentNode) : "contains" in a ? a.contains(b2) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b2) & 16) : false : false;
}
function Me$1() {
  for (var a = window, b2 = Xa(); b2 instanceof a.HTMLIFrameElement; ) {
    try {
      var c2 = "string" === typeof b2.contentWindow.location.href;
    } catch (d2) {
      c2 = false;
    }
    if (c2)
      a = b2.contentWindow;
    else
      break;
    b2 = Xa(a.document);
  }
  return b2;
}
function Ne$1(a) {
  var b2 = a && a.nodeName && a.nodeName.toLowerCase();
  return b2 && ("input" === b2 && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b2 || "true" === a.contentEditable);
}
function Oe(a) {
  var b2 = Me$1(), c2 = a.focusedElem, d2 = a.selectionRange;
  if (b2 !== c2 && c2 && c2.ownerDocument && Le(c2.ownerDocument.documentElement, c2)) {
    if (null !== d2 && Ne$1(c2)) {
      if (b2 = d2.start, a = d2.end, void 0 === a && (a = b2), "selectionStart" in c2)
        c2.selectionStart = b2, c2.selectionEnd = Math.min(a, c2.value.length);
      else if (a = (b2 = c2.ownerDocument || document) && b2.defaultView || window, a.getSelection) {
        a = a.getSelection();
        var e = c2.textContent.length, f2 = Math.min(d2.start, e);
        d2 = void 0 === d2.end ? f2 : Math.min(d2.end, e);
        !a.extend && f2 > d2 && (e = d2, d2 = f2, f2 = e);
        e = Ke(c2, f2);
        var g2 = Ke(
          c2,
          d2
        );
        e && g2 && (1 !== a.rangeCount || a.anchorNode !== e.node || a.anchorOffset !== e.offset || a.focusNode !== g2.node || a.focusOffset !== g2.offset) && (b2 = b2.createRange(), b2.setStart(e.node, e.offset), a.removeAllRanges(), f2 > d2 ? (a.addRange(b2), a.extend(g2.node, g2.offset)) : (b2.setEnd(g2.node, g2.offset), a.addRange(b2)));
      }
    }
    b2 = [];
    for (a = c2; a = a.parentNode; )
      1 === a.nodeType && b2.push({ element: a, left: a.scrollLeft, top: a.scrollTop });
    "function" === typeof c2.focus && c2.focus();
    for (c2 = 0; c2 < b2.length; c2++)
      a = b2[c2], a.element.scrollLeft = a.left, a.element.scrollTop = a.top;
  }
}
var Pe = ia && "documentMode" in document && 11 >= document.documentMode, Qe = null, Re = null, Se = null, Te = false;
function Ue(a, b2, c2) {
  var d2 = c2.window === c2 ? c2.document : 9 === c2.nodeType ? c2 : c2.ownerDocument;
  Te || null == Qe || Qe !== Xa(d2) || (d2 = Qe, "selectionStart" in d2 && Ne$1(d2) ? d2 = { start: d2.selectionStart, end: d2.selectionEnd } : (d2 = (d2.ownerDocument && d2.ownerDocument.defaultView || window).getSelection(), d2 = { anchorNode: d2.anchorNode, anchorOffset: d2.anchorOffset, focusNode: d2.focusNode, focusOffset: d2.focusOffset }), Se && Ie(Se, d2) || (Se = d2, d2 = oe(Re, "onSelect"), 0 < d2.length && (b2 = new td("onSelect", "select", null, b2, c2), a.push({ event: b2, listeners: d2 }), b2.target = Qe)));
}
function Ve(a, b2) {
  var c2 = {};
  c2[a.toLowerCase()] = b2.toLowerCase();
  c2["Webkit" + a] = "webkit" + b2;
  c2["Moz" + a] = "moz" + b2;
  return c2;
}
var We = { animationend: Ve("Animation", "AnimationEnd"), animationiteration: Ve("Animation", "AnimationIteration"), animationstart: Ve("Animation", "AnimationStart"), transitionend: Ve("Transition", "TransitionEnd") }, Xe = {}, Ye = {};
ia && (Ye = document.createElement("div").style, "AnimationEvent" in window || (delete We.animationend.animation, delete We.animationiteration.animation, delete We.animationstart.animation), "TransitionEvent" in window || delete We.transitionend.transition);
function Ze(a) {
  if (Xe[a])
    return Xe[a];
  if (!We[a])
    return a;
  var b2 = We[a], c2;
  for (c2 in b2)
    if (b2.hasOwnProperty(c2) && c2 in Ye)
      return Xe[a] = b2[c2];
  return a;
}
var $e = Ze("animationend"), af = Ze("animationiteration"), bf = Ze("animationstart"), cf = Ze("transitionend"), df = /* @__PURE__ */ new Map(), ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
function ff(a, b2) {
  df.set(a, b2);
  fa(b2, [a]);
}
for (var gf = 0; gf < ef.length; gf++) {
  var hf = ef[gf], jf = hf.toLowerCase(), kf = hf[0].toUpperCase() + hf.slice(1);
  ff(jf, "on" + kf);
}
ff($e, "onAnimationEnd");
ff(af, "onAnimationIteration");
ff(bf, "onAnimationStart");
ff("dblclick", "onDoubleClick");
ff("focusin", "onFocus");
ff("focusout", "onBlur");
ff(cf, "onTransitionEnd");
ha("onMouseEnter", ["mouseout", "mouseover"]);
ha("onMouseLeave", ["mouseout", "mouseover"]);
ha("onPointerEnter", ["pointerout", "pointerover"]);
ha("onPointerLeave", ["pointerout", "pointerover"]);
fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
fa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
var lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), mf = new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
function nf(a, b2, c2) {
  var d2 = a.type || "unknown-event";
  a.currentTarget = c2;
  Ub(d2, b2, void 0, a);
  a.currentTarget = null;
}
function se(a, b2) {
  b2 = 0 !== (b2 & 4);
  for (var c2 = 0; c2 < a.length; c2++) {
    var d2 = a[c2], e = d2.event;
    d2 = d2.listeners;
    a: {
      var f2 = void 0;
      if (b2)
        for (var g2 = d2.length - 1; 0 <= g2; g2--) {
          var h2 = d2[g2], k2 = h2.instance, l2 = h2.currentTarget;
          h2 = h2.listener;
          if (k2 !== f2 && e.isPropagationStopped())
            break a;
          nf(e, h2, l2);
          f2 = k2;
        }
      else
        for (g2 = 0; g2 < d2.length; g2++) {
          h2 = d2[g2];
          k2 = h2.instance;
          l2 = h2.currentTarget;
          h2 = h2.listener;
          if (k2 !== f2 && e.isPropagationStopped())
            break a;
          nf(e, h2, l2);
          f2 = k2;
        }
    }
  }
  if (Qb)
    throw a = Rb, Qb = false, Rb = null, a;
}
function D(a, b2) {
  var c2 = b2[of];
  void 0 === c2 && (c2 = b2[of] = /* @__PURE__ */ new Set());
  var d2 = a + "__bubble";
  c2.has(d2) || (pf(b2, a, 2, false), c2.add(d2));
}
function qf(a, b2, c2) {
  var d2 = 0;
  b2 && (d2 |= 4);
  pf(c2, a, d2, b2);
}
var rf = "_reactListening" + Math.random().toString(36).slice(2);
function sf(a) {
  if (!a[rf]) {
    a[rf] = true;
    da.forEach(function(b3) {
      "selectionchange" !== b3 && (mf.has(b3) || qf(b3, false, a), qf(b3, true, a));
    });
    var b2 = 9 === a.nodeType ? a : a.ownerDocument;
    null === b2 || b2[rf] || (b2[rf] = true, qf("selectionchange", false, b2));
  }
}
function pf(a, b2, c2, d2) {
  switch (jd(b2)) {
    case 1:
      var e = ed;
      break;
    case 4:
      e = gd;
      break;
    default:
      e = fd;
  }
  c2 = e.bind(null, b2, c2, a);
  e = void 0;
  !Lb || "touchstart" !== b2 && "touchmove" !== b2 && "wheel" !== b2 || (e = true);
  d2 ? void 0 !== e ? a.addEventListener(b2, c2, { capture: true, passive: e }) : a.addEventListener(b2, c2, true) : void 0 !== e ? a.addEventListener(b2, c2, { passive: e }) : a.addEventListener(b2, c2, false);
}
function hd(a, b2, c2, d2, e) {
  var f2 = d2;
  if (0 === (b2 & 1) && 0 === (b2 & 2) && null !== d2)
    a:
      for (; ; ) {
        if (null === d2)
          return;
        var g2 = d2.tag;
        if (3 === g2 || 4 === g2) {
          var h2 = d2.stateNode.containerInfo;
          if (h2 === e || 8 === h2.nodeType && h2.parentNode === e)
            break;
          if (4 === g2)
            for (g2 = d2.return; null !== g2; ) {
              var k2 = g2.tag;
              if (3 === k2 || 4 === k2) {
                if (k2 = g2.stateNode.containerInfo, k2 === e || 8 === k2.nodeType && k2.parentNode === e)
                  return;
              }
              g2 = g2.return;
            }
          for (; null !== h2; ) {
            g2 = Wc(h2);
            if (null === g2)
              return;
            k2 = g2.tag;
            if (5 === k2 || 6 === k2) {
              d2 = f2 = g2;
              continue a;
            }
            h2 = h2.parentNode;
          }
        }
        d2 = d2.return;
      }
  Jb(function() {
    var d3 = f2, e2 = xb(c2), g3 = [];
    a: {
      var h3 = df.get(a);
      if (void 0 !== h3) {
        var k3 = td, n2 = a;
        switch (a) {
          case "keypress":
            if (0 === od(c2))
              break a;
          case "keydown":
          case "keyup":
            k3 = Rd;
            break;
          case "focusin":
            n2 = "focus";
            k3 = Fd;
            break;
          case "focusout":
            n2 = "blur";
            k3 = Fd;
            break;
          case "beforeblur":
          case "afterblur":
            k3 = Fd;
            break;
          case "click":
            if (2 === c2.button)
              break a;
          case "auxclick":
          case "dblclick":
          case "mousedown":
          case "mousemove":
          case "mouseup":
          case "mouseout":
          case "mouseover":
          case "contextmenu":
            k3 = Bd;
            break;
          case "drag":
          case "dragend":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "dragstart":
          case "drop":
            k3 = Dd;
            break;
          case "touchcancel":
          case "touchend":
          case "touchmove":
          case "touchstart":
            k3 = Vd;
            break;
          case $e:
          case af:
          case bf:
            k3 = Hd;
            break;
          case cf:
            k3 = Xd;
            break;
          case "scroll":
            k3 = vd;
            break;
          case "wheel":
            k3 = Zd;
            break;
          case "copy":
          case "cut":
          case "paste":
            k3 = Jd;
            break;
          case "gotpointercapture":
          case "lostpointercapture":
          case "pointercancel":
          case "pointerdown":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "pointerup":
            k3 = Td;
        }
        var t2 = 0 !== (b2 & 4), J2 = !t2 && "scroll" === a, x2 = t2 ? null !== h3 ? h3 + "Capture" : null : h3;
        t2 = [];
        for (var w2 = d3, u2; null !== w2; ) {
          u2 = w2;
          var F2 = u2.stateNode;
          5 === u2.tag && null !== F2 && (u2 = F2, null !== x2 && (F2 = Kb(w2, x2), null != F2 && t2.push(tf(w2, F2, u2))));
          if (J2)
            break;
          w2 = w2.return;
        }
        0 < t2.length && (h3 = new k3(h3, n2, null, c2, e2), g3.push({ event: h3, listeners: t2 }));
      }
    }
    if (0 === (b2 & 7)) {
      a: {
        h3 = "mouseover" === a || "pointerover" === a;
        k3 = "mouseout" === a || "pointerout" === a;
        if (h3 && c2 !== wb && (n2 = c2.relatedTarget || c2.fromElement) && (Wc(n2) || n2[uf]))
          break a;
        if (k3 || h3) {
          h3 = e2.window === e2 ? e2 : (h3 = e2.ownerDocument) ? h3.defaultView || h3.parentWindow : window;
          if (k3) {
            if (n2 = c2.relatedTarget || c2.toElement, k3 = d3, n2 = n2 ? Wc(n2) : null, null !== n2 && (J2 = Vb(n2), n2 !== J2 || 5 !== n2.tag && 6 !== n2.tag))
              n2 = null;
          } else
            k3 = null, n2 = d3;
          if (k3 !== n2) {
            t2 = Bd;
            F2 = "onMouseLeave";
            x2 = "onMouseEnter";
            w2 = "mouse";
            if ("pointerout" === a || "pointerover" === a)
              t2 = Td, F2 = "onPointerLeave", x2 = "onPointerEnter", w2 = "pointer";
            J2 = null == k3 ? h3 : ue(k3);
            u2 = null == n2 ? h3 : ue(n2);
            h3 = new t2(F2, w2 + "leave", k3, c2, e2);
            h3.target = J2;
            h3.relatedTarget = u2;
            F2 = null;
            Wc(e2) === d3 && (t2 = new t2(x2, w2 + "enter", n2, c2, e2), t2.target = u2, t2.relatedTarget = J2, F2 = t2);
            J2 = F2;
            if (k3 && n2)
              b: {
                t2 = k3;
                x2 = n2;
                w2 = 0;
                for (u2 = t2; u2; u2 = vf(u2))
                  w2++;
                u2 = 0;
                for (F2 = x2; F2; F2 = vf(F2))
                  u2++;
                for (; 0 < w2 - u2; )
                  t2 = vf(t2), w2--;
                for (; 0 < u2 - w2; )
                  x2 = vf(x2), u2--;
                for (; w2--; ) {
                  if (t2 === x2 || null !== x2 && t2 === x2.alternate)
                    break b;
                  t2 = vf(t2);
                  x2 = vf(x2);
                }
                t2 = null;
              }
            else
              t2 = null;
            null !== k3 && wf(g3, h3, k3, t2, false);
            null !== n2 && null !== J2 && wf(g3, J2, n2, t2, true);
          }
        }
      }
      a: {
        h3 = d3 ? ue(d3) : window;
        k3 = h3.nodeName && h3.nodeName.toLowerCase();
        if ("select" === k3 || "input" === k3 && "file" === h3.type)
          var na = ve;
        else if (me(h3))
          if (we)
            na = Fe;
          else {
            na = De;
            var xa = Ce;
          }
        else
          (k3 = h3.nodeName) && "input" === k3.toLowerCase() && ("checkbox" === h3.type || "radio" === h3.type) && (na = Ee);
        if (na && (na = na(a, d3))) {
          ne(g3, na, c2, e2);
          break a;
        }
        xa && xa(a, h3, d3);
        "focusout" === a && (xa = h3._wrapperState) && xa.controlled && "number" === h3.type && cb(h3, "number", h3.value);
      }
      xa = d3 ? ue(d3) : window;
      switch (a) {
        case "focusin":
          if (me(xa) || "true" === xa.contentEditable)
            Qe = xa, Re = d3, Se = null;
          break;
        case "focusout":
          Se = Re = Qe = null;
          break;
        case "mousedown":
          Te = true;
          break;
        case "contextmenu":
        case "mouseup":
        case "dragend":
          Te = false;
          Ue(g3, c2, e2);
          break;
        case "selectionchange":
          if (Pe)
            break;
        case "keydown":
        case "keyup":
          Ue(g3, c2, e2);
      }
      var $a;
      if (ae)
        b: {
          switch (a) {
            case "compositionstart":
              var ba = "onCompositionStart";
              break b;
            case "compositionend":
              ba = "onCompositionEnd";
              break b;
            case "compositionupdate":
              ba = "onCompositionUpdate";
              break b;
          }
          ba = void 0;
        }
      else
        ie ? ge(a, c2) && (ba = "onCompositionEnd") : "keydown" === a && 229 === c2.keyCode && (ba = "onCompositionStart");
      ba && (de && "ko" !== c2.locale && (ie || "onCompositionStart" !== ba ? "onCompositionEnd" === ba && ie && ($a = nd()) : (kd = e2, ld = "value" in kd ? kd.value : kd.textContent, ie = true)), xa = oe(d3, ba), 0 < xa.length && (ba = new Ld(ba, a, null, c2, e2), g3.push({ event: ba, listeners: xa }), $a ? ba.data = $a : ($a = he(c2), null !== $a && (ba.data = $a))));
      if ($a = ce ? je(a, c2) : ke(a, c2))
        d3 = oe(d3, "onBeforeInput"), 0 < d3.length && (e2 = new Ld("onBeforeInput", "beforeinput", null, c2, e2), g3.push({ event: e2, listeners: d3 }), e2.data = $a);
    }
    se(g3, b2);
  });
}
function tf(a, b2, c2) {
  return { instance: a, listener: b2, currentTarget: c2 };
}
function oe(a, b2) {
  for (var c2 = b2 + "Capture", d2 = []; null !== a; ) {
    var e = a, f2 = e.stateNode;
    5 === e.tag && null !== f2 && (e = f2, f2 = Kb(a, c2), null != f2 && d2.unshift(tf(a, f2, e)), f2 = Kb(a, b2), null != f2 && d2.push(tf(a, f2, e)));
    a = a.return;
  }
  return d2;
}
function vf(a) {
  if (null === a)
    return null;
  do
    a = a.return;
  while (a && 5 !== a.tag);
  return a ? a : null;
}
function wf(a, b2, c2, d2, e) {
  for (var f2 = b2._reactName, g2 = []; null !== c2 && c2 !== d2; ) {
    var h2 = c2, k2 = h2.alternate, l2 = h2.stateNode;
    if (null !== k2 && k2 === d2)
      break;
    5 === h2.tag && null !== l2 && (h2 = l2, e ? (k2 = Kb(c2, f2), null != k2 && g2.unshift(tf(c2, k2, h2))) : e || (k2 = Kb(c2, f2), null != k2 && g2.push(tf(c2, k2, h2))));
    c2 = c2.return;
  }
  0 !== g2.length && a.push({ event: b2, listeners: g2 });
}
var xf = /\r\n?/g, yf = /\u0000|\uFFFD/g;
function zf(a) {
  return ("string" === typeof a ? a : "" + a).replace(xf, "\n").replace(yf, "");
}
function Af(a, b2, c2) {
  b2 = zf(b2);
  if (zf(a) !== b2 && c2)
    throw Error(p$1(425));
}
function Bf() {
}
var Cf = null, Df = null;
function Ef(a, b2) {
  return "textarea" === a || "noscript" === a || "string" === typeof b2.children || "number" === typeof b2.children || "object" === typeof b2.dangerouslySetInnerHTML && null !== b2.dangerouslySetInnerHTML && null != b2.dangerouslySetInnerHTML.__html;
}
var Ff = "function" === typeof setTimeout ? setTimeout : void 0, Gf = "function" === typeof clearTimeout ? clearTimeout : void 0, Hf = "function" === typeof Promise ? Promise : void 0, Jf = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof Hf ? function(a) {
  return Hf.resolve(null).then(a).catch(If);
} : Ff;
function If(a) {
  setTimeout(function() {
    throw a;
  });
}
function Kf(a, b2) {
  var c2 = b2, d2 = 0;
  do {
    var e = c2.nextSibling;
    a.removeChild(c2);
    if (e && 8 === e.nodeType)
      if (c2 = e.data, "/$" === c2) {
        if (0 === d2) {
          a.removeChild(e);
          bd(b2);
          return;
        }
        d2--;
      } else
        "$" !== c2 && "$?" !== c2 && "$!" !== c2 || d2++;
    c2 = e;
  } while (c2);
  bd(b2);
}
function Lf(a) {
  for (; null != a; a = a.nextSibling) {
    var b2 = a.nodeType;
    if (1 === b2 || 3 === b2)
      break;
    if (8 === b2) {
      b2 = a.data;
      if ("$" === b2 || "$!" === b2 || "$?" === b2)
        break;
      if ("/$" === b2)
        return null;
    }
  }
  return a;
}
function Mf(a) {
  a = a.previousSibling;
  for (var b2 = 0; a; ) {
    if (8 === a.nodeType) {
      var c2 = a.data;
      if ("$" === c2 || "$!" === c2 || "$?" === c2) {
        if (0 === b2)
          return a;
        b2--;
      } else
        "/$" === c2 && b2++;
    }
    a = a.previousSibling;
  }
  return null;
}
var Nf = Math.random().toString(36).slice(2), Of = "__reactFiber$" + Nf, Pf = "__reactProps$" + Nf, uf = "__reactContainer$" + Nf, of = "__reactEvents$" + Nf, Qf = "__reactListeners$" + Nf, Rf = "__reactHandles$" + Nf;
function Wc(a) {
  var b2 = a[Of];
  if (b2)
    return b2;
  for (var c2 = a.parentNode; c2; ) {
    if (b2 = c2[uf] || c2[Of]) {
      c2 = b2.alternate;
      if (null !== b2.child || null !== c2 && null !== c2.child)
        for (a = Mf(a); null !== a; ) {
          if (c2 = a[Of])
            return c2;
          a = Mf(a);
        }
      return b2;
    }
    a = c2;
    c2 = a.parentNode;
  }
  return null;
}
function Cb(a) {
  a = a[Of] || a[uf];
  return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;
}
function ue(a) {
  if (5 === a.tag || 6 === a.tag)
    return a.stateNode;
  throw Error(p$1(33));
}
function Db(a) {
  return a[Pf] || null;
}
var Sf = [], Tf = -1;
function Uf(a) {
  return { current: a };
}
function E(a) {
  0 > Tf || (a.current = Sf[Tf], Sf[Tf] = null, Tf--);
}
function G(a, b2) {
  Tf++;
  Sf[Tf] = a.current;
  a.current = b2;
}
var Vf = {}, H = Uf(Vf), Wf = Uf(false), Xf = Vf;
function Yf(a, b2) {
  var c2 = a.type.contextTypes;
  if (!c2)
    return Vf;
  var d2 = a.stateNode;
  if (d2 && d2.__reactInternalMemoizedUnmaskedChildContext === b2)
    return d2.__reactInternalMemoizedMaskedChildContext;
  var e = {}, f2;
  for (f2 in c2)
    e[f2] = b2[f2];
  d2 && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b2, a.__reactInternalMemoizedMaskedChildContext = e);
  return e;
}
function Zf(a) {
  a = a.childContextTypes;
  return null !== a && void 0 !== a;
}
function $f() {
  E(Wf);
  E(H);
}
function ag(a, b2, c2) {
  if (H.current !== Vf)
    throw Error(p$1(168));
  G(H, b2);
  G(Wf, c2);
}
function bg(a, b2, c2) {
  var d2 = a.stateNode;
  b2 = b2.childContextTypes;
  if ("function" !== typeof d2.getChildContext)
    return c2;
  d2 = d2.getChildContext();
  for (var e in d2)
    if (!(e in b2))
      throw Error(p$1(108, Ra(a) || "Unknown", e));
  return A({}, c2, d2);
}
function cg(a) {
  a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Vf;
  Xf = H.current;
  G(H, a);
  G(Wf, Wf.current);
  return true;
}
function dg(a, b2, c2) {
  var d2 = a.stateNode;
  if (!d2)
    throw Error(p$1(169));
  c2 ? (a = bg(a, b2, Xf), d2.__reactInternalMemoizedMergedChildContext = a, E(Wf), E(H), G(H, a)) : E(Wf);
  G(Wf, c2);
}
var eg = null, fg = false, gg = false;
function hg(a) {
  null === eg ? eg = [a] : eg.push(a);
}
function ig(a) {
  fg = true;
  hg(a);
}
function jg() {
  if (!gg && null !== eg) {
    gg = true;
    var a = 0, b2 = C;
    try {
      var c2 = eg;
      for (C = 1; a < c2.length; a++) {
        var d2 = c2[a];
        do
          d2 = d2(true);
        while (null !== d2);
      }
      eg = null;
      fg = false;
    } catch (e) {
      throw null !== eg && (eg = eg.slice(a + 1)), ac(fc, jg), e;
    } finally {
      C = b2, gg = false;
    }
  }
  return null;
}
var kg = [], lg = 0, mg = null, ng = 0, og = [], pg = 0, qg = null, rg = 1, sg = "";
function tg(a, b2) {
  kg[lg++] = ng;
  kg[lg++] = mg;
  mg = a;
  ng = b2;
}
function ug(a, b2, c2) {
  og[pg++] = rg;
  og[pg++] = sg;
  og[pg++] = qg;
  qg = a;
  var d2 = rg;
  a = sg;
  var e = 32 - oc(d2) - 1;
  d2 &= ~(1 << e);
  c2 += 1;
  var f2 = 32 - oc(b2) + e;
  if (30 < f2) {
    var g2 = e - e % 5;
    f2 = (d2 & (1 << g2) - 1).toString(32);
    d2 >>= g2;
    e -= g2;
    rg = 1 << 32 - oc(b2) + e | c2 << e | d2;
    sg = f2 + a;
  } else
    rg = 1 << f2 | c2 << e | d2, sg = a;
}
function vg(a) {
  null !== a.return && (tg(a, 1), ug(a, 1, 0));
}
function wg(a) {
  for (; a === mg; )
    mg = kg[--lg], kg[lg] = null, ng = kg[--lg], kg[lg] = null;
  for (; a === qg; )
    qg = og[--pg], og[pg] = null, sg = og[--pg], og[pg] = null, rg = og[--pg], og[pg] = null;
}
var xg = null, yg = null, I$1 = false, zg = null;
function Ag(a, b2) {
  var c2 = Bg(5, null, null, 0);
  c2.elementType = "DELETED";
  c2.stateNode = b2;
  c2.return = a;
  b2 = a.deletions;
  null === b2 ? (a.deletions = [c2], a.flags |= 16) : b2.push(c2);
}
function Cg(a, b2) {
  switch (a.tag) {
    case 5:
      var c2 = a.type;
      b2 = 1 !== b2.nodeType || c2.toLowerCase() !== b2.nodeName.toLowerCase() ? null : b2;
      return null !== b2 ? (a.stateNode = b2, xg = a, yg = Lf(b2.firstChild), true) : false;
    case 6:
      return b2 = "" === a.pendingProps || 3 !== b2.nodeType ? null : b2, null !== b2 ? (a.stateNode = b2, xg = a, yg = null, true) : false;
    case 13:
      return b2 = 8 !== b2.nodeType ? null : b2, null !== b2 ? (c2 = null !== qg ? { id: rg, overflow: sg } : null, a.memoizedState = { dehydrated: b2, treeContext: c2, retryLane: 1073741824 }, c2 = Bg(18, null, null, 0), c2.stateNode = b2, c2.return = a, a.child = c2, xg = a, yg = null, true) : false;
    default:
      return false;
  }
}
function Dg(a) {
  return 0 !== (a.mode & 1) && 0 === (a.flags & 128);
}
function Eg(a) {
  if (I$1) {
    var b2 = yg;
    if (b2) {
      var c2 = b2;
      if (!Cg(a, b2)) {
        if (Dg(a))
          throw Error(p$1(418));
        b2 = Lf(c2.nextSibling);
        var d2 = xg;
        b2 && Cg(a, b2) ? Ag(d2, c2) : (a.flags = a.flags & -4097 | 2, I$1 = false, xg = a);
      }
    } else {
      if (Dg(a))
        throw Error(p$1(418));
      a.flags = a.flags & -4097 | 2;
      I$1 = false;
      xg = a;
    }
  }
}
function Fg(a) {
  for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag; )
    a = a.return;
  xg = a;
}
function Gg(a) {
  if (a !== xg)
    return false;
  if (!I$1)
    return Fg(a), I$1 = true, false;
  var b2;
  (b2 = 3 !== a.tag) && !(b2 = 5 !== a.tag) && (b2 = a.type, b2 = "head" !== b2 && "body" !== b2 && !Ef(a.type, a.memoizedProps));
  if (b2 && (b2 = yg)) {
    if (Dg(a))
      throw Hg(), Error(p$1(418));
    for (; b2; )
      Ag(a, b2), b2 = Lf(b2.nextSibling);
  }
  Fg(a);
  if (13 === a.tag) {
    a = a.memoizedState;
    a = null !== a ? a.dehydrated : null;
    if (!a)
      throw Error(p$1(317));
    a: {
      a = a.nextSibling;
      for (b2 = 0; a; ) {
        if (8 === a.nodeType) {
          var c2 = a.data;
          if ("/$" === c2) {
            if (0 === b2) {
              yg = Lf(a.nextSibling);
              break a;
            }
            b2--;
          } else
            "$" !== c2 && "$!" !== c2 && "$?" !== c2 || b2++;
        }
        a = a.nextSibling;
      }
      yg = null;
    }
  } else
    yg = xg ? Lf(a.stateNode.nextSibling) : null;
  return true;
}
function Hg() {
  for (var a = yg; a; )
    a = Lf(a.nextSibling);
}
function Ig() {
  yg = xg = null;
  I$1 = false;
}
function Jg(a) {
  null === zg ? zg = [a] : zg.push(a);
}
var Kg = ua.ReactCurrentBatchConfig;
function Lg(a, b2) {
  if (a && a.defaultProps) {
    b2 = A({}, b2);
    a = a.defaultProps;
    for (var c2 in a)
      void 0 === b2[c2] && (b2[c2] = a[c2]);
    return b2;
  }
  return b2;
}
var Mg = Uf(null), Ng = null, Og = null, Pg = null;
function Qg() {
  Pg = Og = Ng = null;
}
function Rg(a) {
  var b2 = Mg.current;
  E(Mg);
  a._currentValue = b2;
}
function Sg(a, b2, c2) {
  for (; null !== a; ) {
    var d2 = a.alternate;
    (a.childLanes & b2) !== b2 ? (a.childLanes |= b2, null !== d2 && (d2.childLanes |= b2)) : null !== d2 && (d2.childLanes & b2) !== b2 && (d2.childLanes |= b2);
    if (a === c2)
      break;
    a = a.return;
  }
}
function Tg(a, b2) {
  Ng = a;
  Pg = Og = null;
  a = a.dependencies;
  null !== a && null !== a.firstContext && (0 !== (a.lanes & b2) && (Ug = true), a.firstContext = null);
}
function Vg(a) {
  var b2 = a._currentValue;
  if (Pg !== a)
    if (a = { context: a, memoizedValue: b2, next: null }, null === Og) {
      if (null === Ng)
        throw Error(p$1(308));
      Og = a;
      Ng.dependencies = { lanes: 0, firstContext: a };
    } else
      Og = Og.next = a;
  return b2;
}
var Wg = null;
function Xg(a) {
  null === Wg ? Wg = [a] : Wg.push(a);
}
function Yg(a, b2, c2, d2) {
  var e = b2.interleaved;
  null === e ? (c2.next = c2, Xg(b2)) : (c2.next = e.next, e.next = c2);
  b2.interleaved = c2;
  return Zg(a, d2);
}
function Zg(a, b2) {
  a.lanes |= b2;
  var c2 = a.alternate;
  null !== c2 && (c2.lanes |= b2);
  c2 = a;
  for (a = a.return; null !== a; )
    a.childLanes |= b2, c2 = a.alternate, null !== c2 && (c2.childLanes |= b2), c2 = a, a = a.return;
  return 3 === c2.tag ? c2.stateNode : null;
}
var $g = false;
function ah(a) {
  a.updateQueue = { baseState: a.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
}
function bh(a, b2) {
  a = a.updateQueue;
  b2.updateQueue === a && (b2.updateQueue = { baseState: a.baseState, firstBaseUpdate: a.firstBaseUpdate, lastBaseUpdate: a.lastBaseUpdate, shared: a.shared, effects: a.effects });
}
function ch(a, b2) {
  return { eventTime: a, lane: b2, tag: 0, payload: null, callback: null, next: null };
}
function dh(a, b2, c2) {
  var d2 = a.updateQueue;
  if (null === d2)
    return null;
  d2 = d2.shared;
  if (0 !== (K & 2)) {
    var e = d2.pending;
    null === e ? b2.next = b2 : (b2.next = e.next, e.next = b2);
    d2.pending = b2;
    return Zg(a, c2);
  }
  e = d2.interleaved;
  null === e ? (b2.next = b2, Xg(d2)) : (b2.next = e.next, e.next = b2);
  d2.interleaved = b2;
  return Zg(a, c2);
}
function eh(a, b2, c2) {
  b2 = b2.updateQueue;
  if (null !== b2 && (b2 = b2.shared, 0 !== (c2 & 4194240))) {
    var d2 = b2.lanes;
    d2 &= a.pendingLanes;
    c2 |= d2;
    b2.lanes = c2;
    Cc(a, c2);
  }
}
function fh(a, b2) {
  var c2 = a.updateQueue, d2 = a.alternate;
  if (null !== d2 && (d2 = d2.updateQueue, c2 === d2)) {
    var e = null, f2 = null;
    c2 = c2.firstBaseUpdate;
    if (null !== c2) {
      do {
        var g2 = { eventTime: c2.eventTime, lane: c2.lane, tag: c2.tag, payload: c2.payload, callback: c2.callback, next: null };
        null === f2 ? e = f2 = g2 : f2 = f2.next = g2;
        c2 = c2.next;
      } while (null !== c2);
      null === f2 ? e = f2 = b2 : f2 = f2.next = b2;
    } else
      e = f2 = b2;
    c2 = { baseState: d2.baseState, firstBaseUpdate: e, lastBaseUpdate: f2, shared: d2.shared, effects: d2.effects };
    a.updateQueue = c2;
    return;
  }
  a = c2.lastBaseUpdate;
  null === a ? c2.firstBaseUpdate = b2 : a.next = b2;
  c2.lastBaseUpdate = b2;
}
function gh(a, b2, c2, d2) {
  var e = a.updateQueue;
  $g = false;
  var f2 = e.firstBaseUpdate, g2 = e.lastBaseUpdate, h2 = e.shared.pending;
  if (null !== h2) {
    e.shared.pending = null;
    var k2 = h2, l2 = k2.next;
    k2.next = null;
    null === g2 ? f2 = l2 : g2.next = l2;
    g2 = k2;
    var m2 = a.alternate;
    null !== m2 && (m2 = m2.updateQueue, h2 = m2.lastBaseUpdate, h2 !== g2 && (null === h2 ? m2.firstBaseUpdate = l2 : h2.next = l2, m2.lastBaseUpdate = k2));
  }
  if (null !== f2) {
    var q2 = e.baseState;
    g2 = 0;
    m2 = l2 = k2 = null;
    h2 = f2;
    do {
      var r2 = h2.lane, y2 = h2.eventTime;
      if ((d2 & r2) === r2) {
        null !== m2 && (m2 = m2.next = {
          eventTime: y2,
          lane: 0,
          tag: h2.tag,
          payload: h2.payload,
          callback: h2.callback,
          next: null
        });
        a: {
          var n2 = a, t2 = h2;
          r2 = b2;
          y2 = c2;
          switch (t2.tag) {
            case 1:
              n2 = t2.payload;
              if ("function" === typeof n2) {
                q2 = n2.call(y2, q2, r2);
                break a;
              }
              q2 = n2;
              break a;
            case 3:
              n2.flags = n2.flags & -65537 | 128;
            case 0:
              n2 = t2.payload;
              r2 = "function" === typeof n2 ? n2.call(y2, q2, r2) : n2;
              if (null === r2 || void 0 === r2)
                break a;
              q2 = A({}, q2, r2);
              break a;
            case 2:
              $g = true;
          }
        }
        null !== h2.callback && 0 !== h2.lane && (a.flags |= 64, r2 = e.effects, null === r2 ? e.effects = [h2] : r2.push(h2));
      } else
        y2 = { eventTime: y2, lane: r2, tag: h2.tag, payload: h2.payload, callback: h2.callback, next: null }, null === m2 ? (l2 = m2 = y2, k2 = q2) : m2 = m2.next = y2, g2 |= r2;
      h2 = h2.next;
      if (null === h2)
        if (h2 = e.shared.pending, null === h2)
          break;
        else
          r2 = h2, h2 = r2.next, r2.next = null, e.lastBaseUpdate = r2, e.shared.pending = null;
    } while (1);
    null === m2 && (k2 = q2);
    e.baseState = k2;
    e.firstBaseUpdate = l2;
    e.lastBaseUpdate = m2;
    b2 = e.shared.interleaved;
    if (null !== b2) {
      e = b2;
      do
        g2 |= e.lane, e = e.next;
      while (e !== b2);
    } else
      null === f2 && (e.shared.lanes = 0);
    hh |= g2;
    a.lanes = g2;
    a.memoizedState = q2;
  }
}
function ih(a, b2, c2) {
  a = b2.effects;
  b2.effects = null;
  if (null !== a)
    for (b2 = 0; b2 < a.length; b2++) {
      var d2 = a[b2], e = d2.callback;
      if (null !== e) {
        d2.callback = null;
        d2 = c2;
        if ("function" !== typeof e)
          throw Error(p$1(191, e));
        e.call(d2);
      }
    }
}
var jh = new aa.Component().refs;
function kh(a, b2, c2, d2) {
  b2 = a.memoizedState;
  c2 = c2(d2, b2);
  c2 = null === c2 || void 0 === c2 ? b2 : A({}, b2, c2);
  a.memoizedState = c2;
  0 === a.lanes && (a.updateQueue.baseState = c2);
}
var nh = { isMounted: function(a) {
  return (a = a._reactInternals) ? Vb(a) === a : false;
}, enqueueSetState: function(a, b2, c2) {
  a = a._reactInternals;
  var d2 = L$1(), e = lh(a), f2 = ch(d2, e);
  f2.payload = b2;
  void 0 !== c2 && null !== c2 && (f2.callback = c2);
  b2 = dh(a, f2, e);
  null !== b2 && (mh(b2, a, e, d2), eh(b2, a, e));
}, enqueueReplaceState: function(a, b2, c2) {
  a = a._reactInternals;
  var d2 = L$1(), e = lh(a), f2 = ch(d2, e);
  f2.tag = 1;
  f2.payload = b2;
  void 0 !== c2 && null !== c2 && (f2.callback = c2);
  b2 = dh(a, f2, e);
  null !== b2 && (mh(b2, a, e, d2), eh(b2, a, e));
}, enqueueForceUpdate: function(a, b2) {
  a = a._reactInternals;
  var c2 = L$1(), d2 = lh(a), e = ch(c2, d2);
  e.tag = 2;
  void 0 !== b2 && null !== b2 && (e.callback = b2);
  b2 = dh(a, e, d2);
  null !== b2 && (mh(b2, a, d2, c2), eh(b2, a, d2));
} };
function oh(a, b2, c2, d2, e, f2, g2) {
  a = a.stateNode;
  return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d2, f2, g2) : b2.prototype && b2.prototype.isPureReactComponent ? !Ie(c2, d2) || !Ie(e, f2) : true;
}
function ph(a, b2, c2) {
  var d2 = false, e = Vf;
  var f2 = b2.contextType;
  "object" === typeof f2 && null !== f2 ? f2 = Vg(f2) : (e = Zf(b2) ? Xf : H.current, d2 = b2.contextTypes, f2 = (d2 = null !== d2 && void 0 !== d2) ? Yf(a, e) : Vf);
  b2 = new b2(c2, f2);
  a.memoizedState = null !== b2.state && void 0 !== b2.state ? b2.state : null;
  b2.updater = nh;
  a.stateNode = b2;
  b2._reactInternals = a;
  d2 && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f2);
  return b2;
}
function qh(a, b2, c2, d2) {
  a = b2.state;
  "function" === typeof b2.componentWillReceiveProps && b2.componentWillReceiveProps(c2, d2);
  "function" === typeof b2.UNSAFE_componentWillReceiveProps && b2.UNSAFE_componentWillReceiveProps(c2, d2);
  b2.state !== a && nh.enqueueReplaceState(b2, b2.state, null);
}
function rh(a, b2, c2, d2) {
  var e = a.stateNode;
  e.props = c2;
  e.state = a.memoizedState;
  e.refs = jh;
  ah(a);
  var f2 = b2.contextType;
  "object" === typeof f2 && null !== f2 ? e.context = Vg(f2) : (f2 = Zf(b2) ? Xf : H.current, e.context = Yf(a, f2));
  e.state = a.memoizedState;
  f2 = b2.getDerivedStateFromProps;
  "function" === typeof f2 && (kh(a, b2, f2, c2), e.state = a.memoizedState);
  "function" === typeof b2.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b2 = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b2 !== e.state && nh.enqueueReplaceState(e, e.state, null), gh(a, c2, e, d2), e.state = a.memoizedState);
  "function" === typeof e.componentDidMount && (a.flags |= 4194308);
}
function sh(a, b2, c2) {
  a = c2.ref;
  if (null !== a && "function" !== typeof a && "object" !== typeof a) {
    if (c2._owner) {
      c2 = c2._owner;
      if (c2) {
        if (1 !== c2.tag)
          throw Error(p$1(309));
        var d2 = c2.stateNode;
      }
      if (!d2)
        throw Error(p$1(147, a));
      var e = d2, f2 = "" + a;
      if (null !== b2 && null !== b2.ref && "function" === typeof b2.ref && b2.ref._stringRef === f2)
        return b2.ref;
      b2 = function(a2) {
        var b3 = e.refs;
        b3 === jh && (b3 = e.refs = {});
        null === a2 ? delete b3[f2] : b3[f2] = a2;
      };
      b2._stringRef = f2;
      return b2;
    }
    if ("string" !== typeof a)
      throw Error(p$1(284));
    if (!c2._owner)
      throw Error(p$1(290, a));
  }
  return a;
}
function th(a, b2) {
  a = Object.prototype.toString.call(b2);
  throw Error(p$1(31, "[object Object]" === a ? "object with keys {" + Object.keys(b2).join(", ") + "}" : a));
}
function uh(a) {
  var b2 = a._init;
  return b2(a._payload);
}
function vh(a) {
  function b2(b3, c3) {
    if (a) {
      var d3 = b3.deletions;
      null === d3 ? (b3.deletions = [c3], b3.flags |= 16) : d3.push(c3);
    }
  }
  function c2(c3, d3) {
    if (!a)
      return null;
    for (; null !== d3; )
      b2(c3, d3), d3 = d3.sibling;
    return null;
  }
  function d2(a2, b3) {
    for (a2 = /* @__PURE__ */ new Map(); null !== b3; )
      null !== b3.key ? a2.set(b3.key, b3) : a2.set(b3.index, b3), b3 = b3.sibling;
    return a2;
  }
  function e(a2, b3) {
    a2 = wh(a2, b3);
    a2.index = 0;
    a2.sibling = null;
    return a2;
  }
  function f2(b3, c3, d3) {
    b3.index = d3;
    if (!a)
      return b3.flags |= 1048576, c3;
    d3 = b3.alternate;
    if (null !== d3)
      return d3 = d3.index, d3 < c3 ? (b3.flags |= 2, c3) : d3;
    b3.flags |= 2;
    return c3;
  }
  function g2(b3) {
    a && null === b3.alternate && (b3.flags |= 2);
    return b3;
  }
  function h2(a2, b3, c3, d3) {
    if (null === b3 || 6 !== b3.tag)
      return b3 = xh(c3, a2.mode, d3), b3.return = a2, b3;
    b3 = e(b3, c3);
    b3.return = a2;
    return b3;
  }
  function k2(a2, b3, c3, d3) {
    var f3 = c3.type;
    if (f3 === ya)
      return m2(a2, b3, c3.props.children, d3, c3.key);
    if (null !== b3 && (b3.elementType === f3 || "object" === typeof f3 && null !== f3 && f3.$$typeof === Ha && uh(f3) === b3.type))
      return d3 = e(b3, c3.props), d3.ref = sh(a2, b3, c3), d3.return = a2, d3;
    d3 = yh(c3.type, c3.key, c3.props, null, a2.mode, d3);
    d3.ref = sh(a2, b3, c3);
    d3.return = a2;
    return d3;
  }
  function l2(a2, b3, c3, d3) {
    if (null === b3 || 4 !== b3.tag || b3.stateNode.containerInfo !== c3.containerInfo || b3.stateNode.implementation !== c3.implementation)
      return b3 = zh(c3, a2.mode, d3), b3.return = a2, b3;
    b3 = e(b3, c3.children || []);
    b3.return = a2;
    return b3;
  }
  function m2(a2, b3, c3, d3, f3) {
    if (null === b3 || 7 !== b3.tag)
      return b3 = Ah(c3, a2.mode, d3, f3), b3.return = a2, b3;
    b3 = e(b3, c3);
    b3.return = a2;
    return b3;
  }
  function q2(a2, b3, c3) {
    if ("string" === typeof b3 && "" !== b3 || "number" === typeof b3)
      return b3 = xh("" + b3, a2.mode, c3), b3.return = a2, b3;
    if ("object" === typeof b3 && null !== b3) {
      switch (b3.$$typeof) {
        case va:
          return c3 = yh(b3.type, b3.key, b3.props, null, a2.mode, c3), c3.ref = sh(a2, null, b3), c3.return = a2, c3;
        case wa:
          return b3 = zh(b3, a2.mode, c3), b3.return = a2, b3;
        case Ha:
          var d3 = b3._init;
          return q2(a2, d3(b3._payload), c3);
      }
      if (eb(b3) || Ka(b3))
        return b3 = Ah(b3, a2.mode, c3, null), b3.return = a2, b3;
      th(a2, b3);
    }
    return null;
  }
  function r2(a2, b3, c3, d3) {
    var e2 = null !== b3 ? b3.key : null;
    if ("string" === typeof c3 && "" !== c3 || "number" === typeof c3)
      return null !== e2 ? null : h2(a2, b3, "" + c3, d3);
    if ("object" === typeof c3 && null !== c3) {
      switch (c3.$$typeof) {
        case va:
          return c3.key === e2 ? k2(a2, b3, c3, d3) : null;
        case wa:
          return c3.key === e2 ? l2(a2, b3, c3, d3) : null;
        case Ha:
          return e2 = c3._init, r2(
            a2,
            b3,
            e2(c3._payload),
            d3
          );
      }
      if (eb(c3) || Ka(c3))
        return null !== e2 ? null : m2(a2, b3, c3, d3, null);
      th(a2, c3);
    }
    return null;
  }
  function y2(a2, b3, c3, d3, e2) {
    if ("string" === typeof d3 && "" !== d3 || "number" === typeof d3)
      return a2 = a2.get(c3) || null, h2(b3, a2, "" + d3, e2);
    if ("object" === typeof d3 && null !== d3) {
      switch (d3.$$typeof) {
        case va:
          return a2 = a2.get(null === d3.key ? c3 : d3.key) || null, k2(b3, a2, d3, e2);
        case wa:
          return a2 = a2.get(null === d3.key ? c3 : d3.key) || null, l2(b3, a2, d3, e2);
        case Ha:
          var f3 = d3._init;
          return y2(a2, b3, c3, f3(d3._payload), e2);
      }
      if (eb(d3) || Ka(d3))
        return a2 = a2.get(c3) || null, m2(b3, a2, d3, e2, null);
      th(b3, d3);
    }
    return null;
  }
  function n2(e2, g3, h3, k3) {
    for (var l3 = null, m3 = null, u2 = g3, w2 = g3 = 0, x2 = null; null !== u2 && w2 < h3.length; w2++) {
      u2.index > w2 ? (x2 = u2, u2 = null) : x2 = u2.sibling;
      var n3 = r2(e2, u2, h3[w2], k3);
      if (null === n3) {
        null === u2 && (u2 = x2);
        break;
      }
      a && u2 && null === n3.alternate && b2(e2, u2);
      g3 = f2(n3, g3, w2);
      null === m3 ? l3 = n3 : m3.sibling = n3;
      m3 = n3;
      u2 = x2;
    }
    if (w2 === h3.length)
      return c2(e2, u2), I$1 && tg(e2, w2), l3;
    if (null === u2) {
      for (; w2 < h3.length; w2++)
        u2 = q2(e2, h3[w2], k3), null !== u2 && (g3 = f2(u2, g3, w2), null === m3 ? l3 = u2 : m3.sibling = u2, m3 = u2);
      I$1 && tg(e2, w2);
      return l3;
    }
    for (u2 = d2(e2, u2); w2 < h3.length; w2++)
      x2 = y2(u2, e2, w2, h3[w2], k3), null !== x2 && (a && null !== x2.alternate && u2.delete(null === x2.key ? w2 : x2.key), g3 = f2(x2, g3, w2), null === m3 ? l3 = x2 : m3.sibling = x2, m3 = x2);
    a && u2.forEach(function(a2) {
      return b2(e2, a2);
    });
    I$1 && tg(e2, w2);
    return l3;
  }
  function t2(e2, g3, h3, k3) {
    var l3 = Ka(h3);
    if ("function" !== typeof l3)
      throw Error(p$1(150));
    h3 = l3.call(h3);
    if (null == h3)
      throw Error(p$1(151));
    for (var u2 = l3 = null, m3 = g3, w2 = g3 = 0, x2 = null, n3 = h3.next(); null !== m3 && !n3.done; w2++, n3 = h3.next()) {
      m3.index > w2 ? (x2 = m3, m3 = null) : x2 = m3.sibling;
      var t3 = r2(e2, m3, n3.value, k3);
      if (null === t3) {
        null === m3 && (m3 = x2);
        break;
      }
      a && m3 && null === t3.alternate && b2(e2, m3);
      g3 = f2(t3, g3, w2);
      null === u2 ? l3 = t3 : u2.sibling = t3;
      u2 = t3;
      m3 = x2;
    }
    if (n3.done)
      return c2(
        e2,
        m3
      ), I$1 && tg(e2, w2), l3;
    if (null === m3) {
      for (; !n3.done; w2++, n3 = h3.next())
        n3 = q2(e2, n3.value, k3), null !== n3 && (g3 = f2(n3, g3, w2), null === u2 ? l3 = n3 : u2.sibling = n3, u2 = n3);
      I$1 && tg(e2, w2);
      return l3;
    }
    for (m3 = d2(e2, m3); !n3.done; w2++, n3 = h3.next())
      n3 = y2(m3, e2, w2, n3.value, k3), null !== n3 && (a && null !== n3.alternate && m3.delete(null === n3.key ? w2 : n3.key), g3 = f2(n3, g3, w2), null === u2 ? l3 = n3 : u2.sibling = n3, u2 = n3);
    a && m3.forEach(function(a2) {
      return b2(e2, a2);
    });
    I$1 && tg(e2, w2);
    return l3;
  }
  function J2(a2, d3, f3, h3) {
    "object" === typeof f3 && null !== f3 && f3.type === ya && null === f3.key && (f3 = f3.props.children);
    if ("object" === typeof f3 && null !== f3) {
      switch (f3.$$typeof) {
        case va:
          a: {
            for (var k3 = f3.key, l3 = d3; null !== l3; ) {
              if (l3.key === k3) {
                k3 = f3.type;
                if (k3 === ya) {
                  if (7 === l3.tag) {
                    c2(a2, l3.sibling);
                    d3 = e(l3, f3.props.children);
                    d3.return = a2;
                    a2 = d3;
                    break a;
                  }
                } else if (l3.elementType === k3 || "object" === typeof k3 && null !== k3 && k3.$$typeof === Ha && uh(k3) === l3.type) {
                  c2(a2, l3.sibling);
                  d3 = e(l3, f3.props);
                  d3.ref = sh(a2, l3, f3);
                  d3.return = a2;
                  a2 = d3;
                  break a;
                }
                c2(a2, l3);
                break;
              } else
                b2(a2, l3);
              l3 = l3.sibling;
            }
            f3.type === ya ? (d3 = Ah(f3.props.children, a2.mode, h3, f3.key), d3.return = a2, a2 = d3) : (h3 = yh(f3.type, f3.key, f3.props, null, a2.mode, h3), h3.ref = sh(a2, d3, f3), h3.return = a2, a2 = h3);
          }
          return g2(a2);
        case wa:
          a: {
            for (l3 = f3.key; null !== d3; ) {
              if (d3.key === l3)
                if (4 === d3.tag && d3.stateNode.containerInfo === f3.containerInfo && d3.stateNode.implementation === f3.implementation) {
                  c2(a2, d3.sibling);
                  d3 = e(d3, f3.children || []);
                  d3.return = a2;
                  a2 = d3;
                  break a;
                } else {
                  c2(a2, d3);
                  break;
                }
              else
                b2(a2, d3);
              d3 = d3.sibling;
            }
            d3 = zh(f3, a2.mode, h3);
            d3.return = a2;
            a2 = d3;
          }
          return g2(a2);
        case Ha:
          return l3 = f3._init, J2(a2, d3, l3(f3._payload), h3);
      }
      if (eb(f3))
        return n2(a2, d3, f3, h3);
      if (Ka(f3))
        return t2(a2, d3, f3, h3);
      th(a2, f3);
    }
    return "string" === typeof f3 && "" !== f3 || "number" === typeof f3 ? (f3 = "" + f3, null !== d3 && 6 === d3.tag ? (c2(a2, d3.sibling), d3 = e(d3, f3), d3.return = a2, a2 = d3) : (c2(a2, d3), d3 = xh(f3, a2.mode, h3), d3.return = a2, a2 = d3), g2(a2)) : c2(a2, d3);
  }
  return J2;
}
var Bh = vh(true), Ch = vh(false), Dh = {}, Eh = Uf(Dh), Fh = Uf(Dh), Gh = Uf(Dh);
function Hh(a) {
  if (a === Dh)
    throw Error(p$1(174));
  return a;
}
function Ih(a, b2) {
  G(Gh, b2);
  G(Fh, a);
  G(Eh, Dh);
  a = b2.nodeType;
  switch (a) {
    case 9:
    case 11:
      b2 = (b2 = b2.documentElement) ? b2.namespaceURI : lb(null, "");
      break;
    default:
      a = 8 === a ? b2.parentNode : b2, b2 = a.namespaceURI || null, a = a.tagName, b2 = lb(b2, a);
  }
  E(Eh);
  G(Eh, b2);
}
function Jh() {
  E(Eh);
  E(Fh);
  E(Gh);
}
function Kh(a) {
  Hh(Gh.current);
  var b2 = Hh(Eh.current);
  var c2 = lb(b2, a.type);
  b2 !== c2 && (G(Fh, a), G(Eh, c2));
}
function Lh(a) {
  Fh.current === a && (E(Eh), E(Fh));
}
var M = Uf(0);
function Mh(a) {
  for (var b2 = a; null !== b2; ) {
    if (13 === b2.tag) {
      var c2 = b2.memoizedState;
      if (null !== c2 && (c2 = c2.dehydrated, null === c2 || "$?" === c2.data || "$!" === c2.data))
        return b2;
    } else if (19 === b2.tag && void 0 !== b2.memoizedProps.revealOrder) {
      if (0 !== (b2.flags & 128))
        return b2;
    } else if (null !== b2.child) {
      b2.child.return = b2;
      b2 = b2.child;
      continue;
    }
    if (b2 === a)
      break;
    for (; null === b2.sibling; ) {
      if (null === b2.return || b2.return === a)
        return null;
      b2 = b2.return;
    }
    b2.sibling.return = b2.return;
    b2 = b2.sibling;
  }
  return null;
}
var Nh = [];
function Oh() {
  for (var a = 0; a < Nh.length; a++)
    Nh[a]._workInProgressVersionPrimary = null;
  Nh.length = 0;
}
var Ph = ua.ReactCurrentDispatcher, Qh = ua.ReactCurrentBatchConfig, Rh = 0, N = null, O = null, P = null, Sh = false, Th = false, Uh = 0, Vh = 0;
function Q$1() {
  throw Error(p$1(321));
}
function Wh(a, b2) {
  if (null === b2)
    return false;
  for (var c2 = 0; c2 < b2.length && c2 < a.length; c2++)
    if (!He(a[c2], b2[c2]))
      return false;
  return true;
}
function Xh(a, b2, c2, d2, e, f2) {
  Rh = f2;
  N = b2;
  b2.memoizedState = null;
  b2.updateQueue = null;
  b2.lanes = 0;
  Ph.current = null === a || null === a.memoizedState ? Yh : Zh;
  a = c2(d2, e);
  if (Th) {
    f2 = 0;
    do {
      Th = false;
      Uh = 0;
      if (25 <= f2)
        throw Error(p$1(301));
      f2 += 1;
      P = O = null;
      b2.updateQueue = null;
      Ph.current = $h;
      a = c2(d2, e);
    } while (Th);
  }
  Ph.current = ai;
  b2 = null !== O && null !== O.next;
  Rh = 0;
  P = O = N = null;
  Sh = false;
  if (b2)
    throw Error(p$1(300));
  return a;
}
function bi() {
  var a = 0 !== Uh;
  Uh = 0;
  return a;
}
function ci() {
  var a = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
  null === P ? N.memoizedState = P = a : P = P.next = a;
  return P;
}
function di() {
  if (null === O) {
    var a = N.alternate;
    a = null !== a ? a.memoizedState : null;
  } else
    a = O.next;
  var b2 = null === P ? N.memoizedState : P.next;
  if (null !== b2)
    P = b2, O = a;
  else {
    if (null === a)
      throw Error(p$1(310));
    O = a;
    a = { memoizedState: O.memoizedState, baseState: O.baseState, baseQueue: O.baseQueue, queue: O.queue, next: null };
    null === P ? N.memoizedState = P = a : P = P.next = a;
  }
  return P;
}
function ei(a, b2) {
  return "function" === typeof b2 ? b2(a) : b2;
}
function fi(a) {
  var b2 = di(), c2 = b2.queue;
  if (null === c2)
    throw Error(p$1(311));
  c2.lastRenderedReducer = a;
  var d2 = O, e = d2.baseQueue, f2 = c2.pending;
  if (null !== f2) {
    if (null !== e) {
      var g2 = e.next;
      e.next = f2.next;
      f2.next = g2;
    }
    d2.baseQueue = e = f2;
    c2.pending = null;
  }
  if (null !== e) {
    f2 = e.next;
    d2 = d2.baseState;
    var h2 = g2 = null, k2 = null, l2 = f2;
    do {
      var m2 = l2.lane;
      if ((Rh & m2) === m2)
        null !== k2 && (k2 = k2.next = { lane: 0, action: l2.action, hasEagerState: l2.hasEagerState, eagerState: l2.eagerState, next: null }), d2 = l2.hasEagerState ? l2.eagerState : a(d2, l2.action);
      else {
        var q2 = {
          lane: m2,
          action: l2.action,
          hasEagerState: l2.hasEagerState,
          eagerState: l2.eagerState,
          next: null
        };
        null === k2 ? (h2 = k2 = q2, g2 = d2) : k2 = k2.next = q2;
        N.lanes |= m2;
        hh |= m2;
      }
      l2 = l2.next;
    } while (null !== l2 && l2 !== f2);
    null === k2 ? g2 = d2 : k2.next = h2;
    He(d2, b2.memoizedState) || (Ug = true);
    b2.memoizedState = d2;
    b2.baseState = g2;
    b2.baseQueue = k2;
    c2.lastRenderedState = d2;
  }
  a = c2.interleaved;
  if (null !== a) {
    e = a;
    do
      f2 = e.lane, N.lanes |= f2, hh |= f2, e = e.next;
    while (e !== a);
  } else
    null === e && (c2.lanes = 0);
  return [b2.memoizedState, c2.dispatch];
}
function gi(a) {
  var b2 = di(), c2 = b2.queue;
  if (null === c2)
    throw Error(p$1(311));
  c2.lastRenderedReducer = a;
  var d2 = c2.dispatch, e = c2.pending, f2 = b2.memoizedState;
  if (null !== e) {
    c2.pending = null;
    var g2 = e = e.next;
    do
      f2 = a(f2, g2.action), g2 = g2.next;
    while (g2 !== e);
    He(f2, b2.memoizedState) || (Ug = true);
    b2.memoizedState = f2;
    null === b2.baseQueue && (b2.baseState = f2);
    c2.lastRenderedState = f2;
  }
  return [f2, d2];
}
function hi() {
}
function ii(a, b2) {
  var c2 = N, d2 = di(), e = b2(), f2 = !He(d2.memoizedState, e);
  f2 && (d2.memoizedState = e, Ug = true);
  d2 = d2.queue;
  ji(ki.bind(null, c2, d2, a), [a]);
  if (d2.getSnapshot !== b2 || f2 || null !== P && P.memoizedState.tag & 1) {
    c2.flags |= 2048;
    li(9, mi.bind(null, c2, d2, e, b2), void 0, null);
    if (null === R)
      throw Error(p$1(349));
    0 !== (Rh & 30) || ni(c2, b2, e);
  }
  return e;
}
function ni(a, b2, c2) {
  a.flags |= 16384;
  a = { getSnapshot: b2, value: c2 };
  b2 = N.updateQueue;
  null === b2 ? (b2 = { lastEffect: null, stores: null }, N.updateQueue = b2, b2.stores = [a]) : (c2 = b2.stores, null === c2 ? b2.stores = [a] : c2.push(a));
}
function mi(a, b2, c2, d2) {
  b2.value = c2;
  b2.getSnapshot = d2;
  oi(b2) && pi(a);
}
function ki(a, b2, c2) {
  return c2(function() {
    oi(b2) && pi(a);
  });
}
function oi(a) {
  var b2 = a.getSnapshot;
  a = a.value;
  try {
    var c2 = b2();
    return !He(a, c2);
  } catch (d2) {
    return true;
  }
}
function pi(a) {
  var b2 = Zg(a, 1);
  null !== b2 && mh(b2, a, 1, -1);
}
function qi(a) {
  var b2 = ci();
  "function" === typeof a && (a = a());
  b2.memoizedState = b2.baseState = a;
  a = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: ei, lastRenderedState: a };
  b2.queue = a;
  a = a.dispatch = ri.bind(null, N, a);
  return [b2.memoizedState, a];
}
function li(a, b2, c2, d2) {
  a = { tag: a, create: b2, destroy: c2, deps: d2, next: null };
  b2 = N.updateQueue;
  null === b2 ? (b2 = { lastEffect: null, stores: null }, N.updateQueue = b2, b2.lastEffect = a.next = a) : (c2 = b2.lastEffect, null === c2 ? b2.lastEffect = a.next = a : (d2 = c2.next, c2.next = a, a.next = d2, b2.lastEffect = a));
  return a;
}
function si() {
  return di().memoizedState;
}
function ti(a, b2, c2, d2) {
  var e = ci();
  N.flags |= a;
  e.memoizedState = li(1 | b2, c2, void 0, void 0 === d2 ? null : d2);
}
function ui(a, b2, c2, d2) {
  var e = di();
  d2 = void 0 === d2 ? null : d2;
  var f2 = void 0;
  if (null !== O) {
    var g2 = O.memoizedState;
    f2 = g2.destroy;
    if (null !== d2 && Wh(d2, g2.deps)) {
      e.memoizedState = li(b2, c2, f2, d2);
      return;
    }
  }
  N.flags |= a;
  e.memoizedState = li(1 | b2, c2, f2, d2);
}
function vi(a, b2) {
  return ti(8390656, 8, a, b2);
}
function ji(a, b2) {
  return ui(2048, 8, a, b2);
}
function wi(a, b2) {
  return ui(4, 2, a, b2);
}
function xi(a, b2) {
  return ui(4, 4, a, b2);
}
function yi(a, b2) {
  if ("function" === typeof b2)
    return a = a(), b2(a), function() {
      b2(null);
    };
  if (null !== b2 && void 0 !== b2)
    return a = a(), b2.current = a, function() {
      b2.current = null;
    };
}
function zi(a, b2, c2) {
  c2 = null !== c2 && void 0 !== c2 ? c2.concat([a]) : null;
  return ui(4, 4, yi.bind(null, b2, a), c2);
}
function Ai() {
}
function Bi(a, b2) {
  var c2 = di();
  b2 = void 0 === b2 ? null : b2;
  var d2 = c2.memoizedState;
  if (null !== d2 && null !== b2 && Wh(b2, d2[1]))
    return d2[0];
  c2.memoizedState = [a, b2];
  return a;
}
function Ci(a, b2) {
  var c2 = di();
  b2 = void 0 === b2 ? null : b2;
  var d2 = c2.memoizedState;
  if (null !== d2 && null !== b2 && Wh(b2, d2[1]))
    return d2[0];
  a = a();
  c2.memoizedState = [a, b2];
  return a;
}
function Di(a, b2, c2) {
  if (0 === (Rh & 21))
    return a.baseState && (a.baseState = false, Ug = true), a.memoizedState = c2;
  He(c2, b2) || (c2 = yc(), N.lanes |= c2, hh |= c2, a.baseState = true);
  return b2;
}
function Ei(a, b2) {
  var c2 = C;
  C = 0 !== c2 && 4 > c2 ? c2 : 4;
  a(true);
  var d2 = Qh.transition;
  Qh.transition = {};
  try {
    a(false), b2();
  } finally {
    C = c2, Qh.transition = d2;
  }
}
function Fi() {
  return di().memoizedState;
}
function Gi(a, b2, c2) {
  var d2 = lh(a);
  c2 = { lane: d2, action: c2, hasEagerState: false, eagerState: null, next: null };
  if (Hi(a))
    Ii(b2, c2);
  else if (c2 = Yg(a, b2, c2, d2), null !== c2) {
    var e = L$1();
    mh(c2, a, d2, e);
    Ji(c2, b2, d2);
  }
}
function ri(a, b2, c2) {
  var d2 = lh(a), e = { lane: d2, action: c2, hasEagerState: false, eagerState: null, next: null };
  if (Hi(a))
    Ii(b2, e);
  else {
    var f2 = a.alternate;
    if (0 === a.lanes && (null === f2 || 0 === f2.lanes) && (f2 = b2.lastRenderedReducer, null !== f2))
      try {
        var g2 = b2.lastRenderedState, h2 = f2(g2, c2);
        e.hasEagerState = true;
        e.eagerState = h2;
        if (He(h2, g2)) {
          var k2 = b2.interleaved;
          null === k2 ? (e.next = e, Xg(b2)) : (e.next = k2.next, k2.next = e);
          b2.interleaved = e;
          return;
        }
      } catch (l2) {
      } finally {
      }
    c2 = Yg(a, b2, e, d2);
    null !== c2 && (e = L$1(), mh(c2, a, d2, e), Ji(c2, b2, d2));
  }
}
function Hi(a) {
  var b2 = a.alternate;
  return a === N || null !== b2 && b2 === N;
}
function Ii(a, b2) {
  Th = Sh = true;
  var c2 = a.pending;
  null === c2 ? b2.next = b2 : (b2.next = c2.next, c2.next = b2);
  a.pending = b2;
}
function Ji(a, b2, c2) {
  if (0 !== (c2 & 4194240)) {
    var d2 = b2.lanes;
    d2 &= a.pendingLanes;
    c2 |= d2;
    b2.lanes = c2;
    Cc(a, c2);
  }
}
var ai = { readContext: Vg, useCallback: Q$1, useContext: Q$1, useEffect: Q$1, useImperativeHandle: Q$1, useInsertionEffect: Q$1, useLayoutEffect: Q$1, useMemo: Q$1, useReducer: Q$1, useRef: Q$1, useState: Q$1, useDebugValue: Q$1, useDeferredValue: Q$1, useTransition: Q$1, useMutableSource: Q$1, useSyncExternalStore: Q$1, useId: Q$1, unstable_isNewReconciler: false }, Yh = { readContext: Vg, useCallback: function(a, b2) {
  ci().memoizedState = [a, void 0 === b2 ? null : b2];
  return a;
}, useContext: Vg, useEffect: vi, useImperativeHandle: function(a, b2, c2) {
  c2 = null !== c2 && void 0 !== c2 ? c2.concat([a]) : null;
  return ti(
    4194308,
    4,
    yi.bind(null, b2, a),
    c2
  );
}, useLayoutEffect: function(a, b2) {
  return ti(4194308, 4, a, b2);
}, useInsertionEffect: function(a, b2) {
  return ti(4, 2, a, b2);
}, useMemo: function(a, b2) {
  var c2 = ci();
  b2 = void 0 === b2 ? null : b2;
  a = a();
  c2.memoizedState = [a, b2];
  return a;
}, useReducer: function(a, b2, c2) {
  var d2 = ci();
  b2 = void 0 !== c2 ? c2(b2) : b2;
  d2.memoizedState = d2.baseState = b2;
  a = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: a, lastRenderedState: b2 };
  d2.queue = a;
  a = a.dispatch = Gi.bind(null, N, a);
  return [d2.memoizedState, a];
}, useRef: function(a) {
  var b2 = ci();
  a = { current: a };
  return b2.memoizedState = a;
}, useState: qi, useDebugValue: Ai, useDeferredValue: function(a) {
  return ci().memoizedState = a;
}, useTransition: function() {
  var a = qi(false), b2 = a[0];
  a = Ei.bind(null, a[1]);
  ci().memoizedState = a;
  return [b2, a];
}, useMutableSource: function() {
}, useSyncExternalStore: function(a, b2, c2) {
  var d2 = N, e = ci();
  if (I$1) {
    if (void 0 === c2)
      throw Error(p$1(407));
    c2 = c2();
  } else {
    c2 = b2();
    if (null === R)
      throw Error(p$1(349));
    0 !== (Rh & 30) || ni(d2, b2, c2);
  }
  e.memoizedState = c2;
  var f2 = { value: c2, getSnapshot: b2 };
  e.queue = f2;
  vi(ki.bind(
    null,
    d2,
    f2,
    a
  ), [a]);
  d2.flags |= 2048;
  li(9, mi.bind(null, d2, f2, c2, b2), void 0, null);
  return c2;
}, useId: function() {
  var a = ci(), b2 = R.identifierPrefix;
  if (I$1) {
    var c2 = sg;
    var d2 = rg;
    c2 = (d2 & ~(1 << 32 - oc(d2) - 1)).toString(32) + c2;
    b2 = ":" + b2 + "R" + c2;
    c2 = Uh++;
    0 < c2 && (b2 += "H" + c2.toString(32));
    b2 += ":";
  } else
    c2 = Vh++, b2 = ":" + b2 + "r" + c2.toString(32) + ":";
  return a.memoizedState = b2;
}, unstable_isNewReconciler: false }, Zh = {
  readContext: Vg,
  useCallback: Bi,
  useContext: Vg,
  useEffect: ji,
  useImperativeHandle: zi,
  useInsertionEffect: wi,
  useLayoutEffect: xi,
  useMemo: Ci,
  useReducer: fi,
  useRef: si,
  useState: function() {
    return fi(ei);
  },
  useDebugValue: Ai,
  useDeferredValue: function(a) {
    var b2 = di();
    return Di(b2, O.memoizedState, a);
  },
  useTransition: function() {
    var a = fi(ei)[0], b2 = di().memoizedState;
    return [a, b2];
  },
  useMutableSource: hi,
  useSyncExternalStore: ii,
  useId: Fi,
  unstable_isNewReconciler: false
}, $h = { readContext: Vg, useCallback: Bi, useContext: Vg, useEffect: ji, useImperativeHandle: zi, useInsertionEffect: wi, useLayoutEffect: xi, useMemo: Ci, useReducer: gi, useRef: si, useState: function() {
  return gi(ei);
}, useDebugValue: Ai, useDeferredValue: function(a) {
  var b2 = di();
  return null === O ? b2.memoizedState = a : Di(b2, O.memoizedState, a);
}, useTransition: function() {
  var a = gi(ei)[0], b2 = di().memoizedState;
  return [a, b2];
}, useMutableSource: hi, useSyncExternalStore: ii, useId: Fi, unstable_isNewReconciler: false };
function Ki(a, b2) {
  try {
    var c2 = "", d2 = b2;
    do
      c2 += Pa(d2), d2 = d2.return;
    while (d2);
    var e = c2;
  } catch (f2) {
    e = "\nError generating stack: " + f2.message + "\n" + f2.stack;
  }
  return { value: a, source: b2, stack: e, digest: null };
}
function Li(a, b2, c2) {
  return { value: a, source: null, stack: null != c2 ? c2 : null, digest: null != b2 ? b2 : null };
}
function Mi(a, b2) {
  try {
    console.error(b2.value);
  } catch (c2) {
    setTimeout(function() {
      throw c2;
    });
  }
}
var Ni = "function" === typeof WeakMap ? WeakMap : Map;
function Oi(a, b2, c2) {
  c2 = ch(-1, c2);
  c2.tag = 3;
  c2.payload = { element: null };
  var d2 = b2.value;
  c2.callback = function() {
    Pi || (Pi = true, Qi = d2);
    Mi(a, b2);
  };
  return c2;
}
function Ri(a, b2, c2) {
  c2 = ch(-1, c2);
  c2.tag = 3;
  var d2 = a.type.getDerivedStateFromError;
  if ("function" === typeof d2) {
    var e = b2.value;
    c2.payload = function() {
      return d2(e);
    };
    c2.callback = function() {
      Mi(a, b2);
    };
  }
  var f2 = a.stateNode;
  null !== f2 && "function" === typeof f2.componentDidCatch && (c2.callback = function() {
    Mi(a, b2);
    "function" !== typeof d2 && (null === Si ? Si = /* @__PURE__ */ new Set([this]) : Si.add(this));
    var c3 = b2.stack;
    this.componentDidCatch(b2.value, { componentStack: null !== c3 ? c3 : "" });
  });
  return c2;
}
function Ti(a, b2, c2) {
  var d2 = a.pingCache;
  if (null === d2) {
    d2 = a.pingCache = new Ni();
    var e = /* @__PURE__ */ new Set();
    d2.set(b2, e);
  } else
    e = d2.get(b2), void 0 === e && (e = /* @__PURE__ */ new Set(), d2.set(b2, e));
  e.has(c2) || (e.add(c2), a = Ui.bind(null, a, b2, c2), b2.then(a, a));
}
function Vi(a) {
  do {
    var b2;
    if (b2 = 13 === a.tag)
      b2 = a.memoizedState, b2 = null !== b2 ? null !== b2.dehydrated ? true : false : true;
    if (b2)
      return a;
    a = a.return;
  } while (null !== a);
  return null;
}
function Wi(a, b2, c2, d2, e) {
  if (0 === (a.mode & 1))
    return a === b2 ? a.flags |= 65536 : (a.flags |= 128, c2.flags |= 131072, c2.flags &= -52805, 1 === c2.tag && (null === c2.alternate ? c2.tag = 17 : (b2 = ch(-1, 1), b2.tag = 2, dh(c2, b2, 1))), c2.lanes |= 1), a;
  a.flags |= 65536;
  a.lanes = e;
  return a;
}
var Xi = ua.ReactCurrentOwner, Ug = false;
function Yi(a, b2, c2, d2) {
  b2.child = null === a ? Ch(b2, null, c2, d2) : Bh(b2, a.child, c2, d2);
}
function Zi(a, b2, c2, d2, e) {
  c2 = c2.render;
  var f2 = b2.ref;
  Tg(b2, e);
  d2 = Xh(a, b2, c2, d2, f2, e);
  c2 = bi();
  if (null !== a && !Ug)
    return b2.updateQueue = a.updateQueue, b2.flags &= -2053, a.lanes &= ~e, $i(a, b2, e);
  I$1 && c2 && vg(b2);
  b2.flags |= 1;
  Yi(a, b2, d2, e);
  return b2.child;
}
function aj(a, b2, c2, d2, e) {
  if (null === a) {
    var f2 = c2.type;
    if ("function" === typeof f2 && !bj(f2) && void 0 === f2.defaultProps && null === c2.compare && void 0 === c2.defaultProps)
      return b2.tag = 15, b2.type = f2, cj(a, b2, f2, d2, e);
    a = yh(c2.type, null, d2, b2, b2.mode, e);
    a.ref = b2.ref;
    a.return = b2;
    return b2.child = a;
  }
  f2 = a.child;
  if (0 === (a.lanes & e)) {
    var g2 = f2.memoizedProps;
    c2 = c2.compare;
    c2 = null !== c2 ? c2 : Ie;
    if (c2(g2, d2) && a.ref === b2.ref)
      return $i(a, b2, e);
  }
  b2.flags |= 1;
  a = wh(f2, d2);
  a.ref = b2.ref;
  a.return = b2;
  return b2.child = a;
}
function cj(a, b2, c2, d2, e) {
  if (null !== a) {
    var f2 = a.memoizedProps;
    if (Ie(f2, d2) && a.ref === b2.ref)
      if (Ug = false, b2.pendingProps = d2 = f2, 0 !== (a.lanes & e))
        0 !== (a.flags & 131072) && (Ug = true);
      else
        return b2.lanes = a.lanes, $i(a, b2, e);
  }
  return dj(a, b2, c2, d2, e);
}
function ej(a, b2, c2) {
  var d2 = b2.pendingProps, e = d2.children, f2 = null !== a ? a.memoizedState : null;
  if ("hidden" === d2.mode)
    if (0 === (b2.mode & 1))
      b2.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, G(fj, gj), gj |= c2;
    else {
      if (0 === (c2 & 1073741824))
        return a = null !== f2 ? f2.baseLanes | c2 : c2, b2.lanes = b2.childLanes = 1073741824, b2.memoizedState = { baseLanes: a, cachePool: null, transitions: null }, b2.updateQueue = null, G(fj, gj), gj |= a, null;
      b2.memoizedState = { baseLanes: 0, cachePool: null, transitions: null };
      d2 = null !== f2 ? f2.baseLanes : c2;
      G(fj, gj);
      gj |= d2;
    }
  else
    null !== f2 ? (d2 = f2.baseLanes | c2, b2.memoizedState = null) : d2 = c2, G(fj, gj), gj |= d2;
  Yi(a, b2, e, c2);
  return b2.child;
}
function hj(a, b2) {
  var c2 = b2.ref;
  if (null === a && null !== c2 || null !== a && a.ref !== c2)
    b2.flags |= 512, b2.flags |= 2097152;
}
function dj(a, b2, c2, d2, e) {
  var f2 = Zf(c2) ? Xf : H.current;
  f2 = Yf(b2, f2);
  Tg(b2, e);
  c2 = Xh(a, b2, c2, d2, f2, e);
  d2 = bi();
  if (null !== a && !Ug)
    return b2.updateQueue = a.updateQueue, b2.flags &= -2053, a.lanes &= ~e, $i(a, b2, e);
  I$1 && d2 && vg(b2);
  b2.flags |= 1;
  Yi(a, b2, c2, e);
  return b2.child;
}
function ij(a, b2, c2, d2, e) {
  if (Zf(c2)) {
    var f2 = true;
    cg(b2);
  } else
    f2 = false;
  Tg(b2, e);
  if (null === b2.stateNode)
    jj(a, b2), ph(b2, c2, d2), rh(b2, c2, d2, e), d2 = true;
  else if (null === a) {
    var g2 = b2.stateNode, h2 = b2.memoizedProps;
    g2.props = h2;
    var k2 = g2.context, l2 = c2.contextType;
    "object" === typeof l2 && null !== l2 ? l2 = Vg(l2) : (l2 = Zf(c2) ? Xf : H.current, l2 = Yf(b2, l2));
    var m2 = c2.getDerivedStateFromProps, q2 = "function" === typeof m2 || "function" === typeof g2.getSnapshotBeforeUpdate;
    q2 || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h2 !== d2 || k2 !== l2) && qh(b2, g2, d2, l2);
    $g = false;
    var r2 = b2.memoizedState;
    g2.state = r2;
    gh(b2, d2, g2, e);
    k2 = b2.memoizedState;
    h2 !== d2 || r2 !== k2 || Wf.current || $g ? ("function" === typeof m2 && (kh(b2, c2, m2, d2), k2 = b2.memoizedState), (h2 = $g || oh(b2, c2, h2, d2, r2, k2, l2)) ? (q2 || "function" !== typeof g2.UNSAFE_componentWillMount && "function" !== typeof g2.componentWillMount || ("function" === typeof g2.componentWillMount && g2.componentWillMount(), "function" === typeof g2.UNSAFE_componentWillMount && g2.UNSAFE_componentWillMount()), "function" === typeof g2.componentDidMount && (b2.flags |= 4194308)) : ("function" === typeof g2.componentDidMount && (b2.flags |= 4194308), b2.memoizedProps = d2, b2.memoizedState = k2), g2.props = d2, g2.state = k2, g2.context = l2, d2 = h2) : ("function" === typeof g2.componentDidMount && (b2.flags |= 4194308), d2 = false);
  } else {
    g2 = b2.stateNode;
    bh(a, b2);
    h2 = b2.memoizedProps;
    l2 = b2.type === b2.elementType ? h2 : Lg(b2.type, h2);
    g2.props = l2;
    q2 = b2.pendingProps;
    r2 = g2.context;
    k2 = c2.contextType;
    "object" === typeof k2 && null !== k2 ? k2 = Vg(k2) : (k2 = Zf(c2) ? Xf : H.current, k2 = Yf(b2, k2));
    var y2 = c2.getDerivedStateFromProps;
    (m2 = "function" === typeof y2 || "function" === typeof g2.getSnapshotBeforeUpdate) || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h2 !== q2 || r2 !== k2) && qh(b2, g2, d2, k2);
    $g = false;
    r2 = b2.memoizedState;
    g2.state = r2;
    gh(b2, d2, g2, e);
    var n2 = b2.memoizedState;
    h2 !== q2 || r2 !== n2 || Wf.current || $g ? ("function" === typeof y2 && (kh(b2, c2, y2, d2), n2 = b2.memoizedState), (l2 = $g || oh(b2, c2, l2, d2, r2, n2, k2) || false) ? (m2 || "function" !== typeof g2.UNSAFE_componentWillUpdate && "function" !== typeof g2.componentWillUpdate || ("function" === typeof g2.componentWillUpdate && g2.componentWillUpdate(d2, n2, k2), "function" === typeof g2.UNSAFE_componentWillUpdate && g2.UNSAFE_componentWillUpdate(d2, n2, k2)), "function" === typeof g2.componentDidUpdate && (b2.flags |= 4), "function" === typeof g2.getSnapshotBeforeUpdate && (b2.flags |= 1024)) : ("function" !== typeof g2.componentDidUpdate || h2 === a.memoizedProps && r2 === a.memoizedState || (b2.flags |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h2 === a.memoizedProps && r2 === a.memoizedState || (b2.flags |= 1024), b2.memoizedProps = d2, b2.memoizedState = n2), g2.props = d2, g2.state = n2, g2.context = k2, d2 = l2) : ("function" !== typeof g2.componentDidUpdate || h2 === a.memoizedProps && r2 === a.memoizedState || (b2.flags |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h2 === a.memoizedProps && r2 === a.memoizedState || (b2.flags |= 1024), d2 = false);
  }
  return kj(a, b2, c2, d2, f2, e);
}
function kj(a, b2, c2, d2, e, f2) {
  hj(a, b2);
  var g2 = 0 !== (b2.flags & 128);
  if (!d2 && !g2)
    return e && dg(b2, c2, false), $i(a, b2, f2);
  d2 = b2.stateNode;
  Xi.current = b2;
  var h2 = g2 && "function" !== typeof c2.getDerivedStateFromError ? null : d2.render();
  b2.flags |= 1;
  null !== a && g2 ? (b2.child = Bh(b2, a.child, null, f2), b2.child = Bh(b2, null, h2, f2)) : Yi(a, b2, h2, f2);
  b2.memoizedState = d2.state;
  e && dg(b2, c2, true);
  return b2.child;
}
function lj(a) {
  var b2 = a.stateNode;
  b2.pendingContext ? ag(a, b2.pendingContext, b2.pendingContext !== b2.context) : b2.context && ag(a, b2.context, false);
  Ih(a, b2.containerInfo);
}
function mj(a, b2, c2, d2, e) {
  Ig();
  Jg(e);
  b2.flags |= 256;
  Yi(a, b2, c2, d2);
  return b2.child;
}
var nj = { dehydrated: null, treeContext: null, retryLane: 0 };
function oj(a) {
  return { baseLanes: a, cachePool: null, transitions: null };
}
function pj(a, b2, c2) {
  var d2 = b2.pendingProps, e = M.current, f2 = false, g2 = 0 !== (b2.flags & 128), h2;
  (h2 = g2) || (h2 = null !== a && null === a.memoizedState ? false : 0 !== (e & 2));
  if (h2)
    f2 = true, b2.flags &= -129;
  else if (null === a || null !== a.memoizedState)
    e |= 1;
  G(M, e & 1);
  if (null === a) {
    Eg(b2);
    a = b2.memoizedState;
    if (null !== a && (a = a.dehydrated, null !== a))
      return 0 === (b2.mode & 1) ? b2.lanes = 1 : "$!" === a.data ? b2.lanes = 8 : b2.lanes = 1073741824, null;
    g2 = d2.children;
    a = d2.fallback;
    return f2 ? (d2 = b2.mode, f2 = b2.child, g2 = { mode: "hidden", children: g2 }, 0 === (d2 & 1) && null !== f2 ? (f2.childLanes = 0, f2.pendingProps = g2) : f2 = qj(g2, d2, 0, null), a = Ah(a, d2, c2, null), f2.return = b2, a.return = b2, f2.sibling = a, b2.child = f2, b2.child.memoizedState = oj(c2), b2.memoizedState = nj, a) : rj(b2, g2);
  }
  e = a.memoizedState;
  if (null !== e && (h2 = e.dehydrated, null !== h2))
    return sj(a, b2, g2, d2, h2, e, c2);
  if (f2) {
    f2 = d2.fallback;
    g2 = b2.mode;
    e = a.child;
    h2 = e.sibling;
    var k2 = { mode: "hidden", children: d2.children };
    0 === (g2 & 1) && b2.child !== e ? (d2 = b2.child, d2.childLanes = 0, d2.pendingProps = k2, b2.deletions = null) : (d2 = wh(e, k2), d2.subtreeFlags = e.subtreeFlags & 14680064);
    null !== h2 ? f2 = wh(h2, f2) : (f2 = Ah(f2, g2, c2, null), f2.flags |= 2);
    f2.return = b2;
    d2.return = b2;
    d2.sibling = f2;
    b2.child = d2;
    d2 = f2;
    f2 = b2.child;
    g2 = a.child.memoizedState;
    g2 = null === g2 ? oj(c2) : { baseLanes: g2.baseLanes | c2, cachePool: null, transitions: g2.transitions };
    f2.memoizedState = g2;
    f2.childLanes = a.childLanes & ~c2;
    b2.memoizedState = nj;
    return d2;
  }
  f2 = a.child;
  a = f2.sibling;
  d2 = wh(f2, { mode: "visible", children: d2.children });
  0 === (b2.mode & 1) && (d2.lanes = c2);
  d2.return = b2;
  d2.sibling = null;
  null !== a && (c2 = b2.deletions, null === c2 ? (b2.deletions = [a], b2.flags |= 16) : c2.push(a));
  b2.child = d2;
  b2.memoizedState = null;
  return d2;
}
function rj(a, b2) {
  b2 = qj({ mode: "visible", children: b2 }, a.mode, 0, null);
  b2.return = a;
  return a.child = b2;
}
function tj(a, b2, c2, d2) {
  null !== d2 && Jg(d2);
  Bh(b2, a.child, null, c2);
  a = rj(b2, b2.pendingProps.children);
  a.flags |= 2;
  b2.memoizedState = null;
  return a;
}
function sj(a, b2, c2, d2, e, f2, g2) {
  if (c2) {
    if (b2.flags & 256)
      return b2.flags &= -257, d2 = Li(Error(p$1(422))), tj(a, b2, g2, d2);
    if (null !== b2.memoizedState)
      return b2.child = a.child, b2.flags |= 128, null;
    f2 = d2.fallback;
    e = b2.mode;
    d2 = qj({ mode: "visible", children: d2.children }, e, 0, null);
    f2 = Ah(f2, e, g2, null);
    f2.flags |= 2;
    d2.return = b2;
    f2.return = b2;
    d2.sibling = f2;
    b2.child = d2;
    0 !== (b2.mode & 1) && Bh(b2, a.child, null, g2);
    b2.child.memoizedState = oj(g2);
    b2.memoizedState = nj;
    return f2;
  }
  if (0 === (b2.mode & 1))
    return tj(a, b2, g2, null);
  if ("$!" === e.data) {
    d2 = e.nextSibling && e.nextSibling.dataset;
    if (d2)
      var h2 = d2.dgst;
    d2 = h2;
    f2 = Error(p$1(419));
    d2 = Li(f2, d2, void 0);
    return tj(a, b2, g2, d2);
  }
  h2 = 0 !== (g2 & a.childLanes);
  if (Ug || h2) {
    d2 = R;
    if (null !== d2) {
      switch (g2 & -g2) {
        case 4:
          e = 2;
          break;
        case 16:
          e = 8;
          break;
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          e = 32;
          break;
        case 536870912:
          e = 268435456;
          break;
        default:
          e = 0;
      }
      e = 0 !== (e & (d2.suspendedLanes | g2)) ? 0 : e;
      0 !== e && e !== f2.retryLane && (f2.retryLane = e, Zg(a, e), mh(d2, a, e, -1));
    }
    uj();
    d2 = Li(Error(p$1(421)));
    return tj(a, b2, g2, d2);
  }
  if ("$?" === e.data)
    return b2.flags |= 128, b2.child = a.child, b2 = vj.bind(null, a), e._reactRetry = b2, null;
  a = f2.treeContext;
  yg = Lf(e.nextSibling);
  xg = b2;
  I$1 = true;
  zg = null;
  null !== a && (og[pg++] = rg, og[pg++] = sg, og[pg++] = qg, rg = a.id, sg = a.overflow, qg = b2);
  b2 = rj(b2, d2.children);
  b2.flags |= 4096;
  return b2;
}
function wj(a, b2, c2) {
  a.lanes |= b2;
  var d2 = a.alternate;
  null !== d2 && (d2.lanes |= b2);
  Sg(a.return, b2, c2);
}
function xj(a, b2, c2, d2, e) {
  var f2 = a.memoizedState;
  null === f2 ? a.memoizedState = { isBackwards: b2, rendering: null, renderingStartTime: 0, last: d2, tail: c2, tailMode: e } : (f2.isBackwards = b2, f2.rendering = null, f2.renderingStartTime = 0, f2.last = d2, f2.tail = c2, f2.tailMode = e);
}
function yj(a, b2, c2) {
  var d2 = b2.pendingProps, e = d2.revealOrder, f2 = d2.tail;
  Yi(a, b2, d2.children, c2);
  d2 = M.current;
  if (0 !== (d2 & 2))
    d2 = d2 & 1 | 2, b2.flags |= 128;
  else {
    if (null !== a && 0 !== (a.flags & 128))
      a:
        for (a = b2.child; null !== a; ) {
          if (13 === a.tag)
            null !== a.memoizedState && wj(a, c2, b2);
          else if (19 === a.tag)
            wj(a, c2, b2);
          else if (null !== a.child) {
            a.child.return = a;
            a = a.child;
            continue;
          }
          if (a === b2)
            break a;
          for (; null === a.sibling; ) {
            if (null === a.return || a.return === b2)
              break a;
            a = a.return;
          }
          a.sibling.return = a.return;
          a = a.sibling;
        }
    d2 &= 1;
  }
  G(M, d2);
  if (0 === (b2.mode & 1))
    b2.memoizedState = null;
  else
    switch (e) {
      case "forwards":
        c2 = b2.child;
        for (e = null; null !== c2; )
          a = c2.alternate, null !== a && null === Mh(a) && (e = c2), c2 = c2.sibling;
        c2 = e;
        null === c2 ? (e = b2.child, b2.child = null) : (e = c2.sibling, c2.sibling = null);
        xj(b2, false, e, c2, f2);
        break;
      case "backwards":
        c2 = null;
        e = b2.child;
        for (b2.child = null; null !== e; ) {
          a = e.alternate;
          if (null !== a && null === Mh(a)) {
            b2.child = e;
            break;
          }
          a = e.sibling;
          e.sibling = c2;
          c2 = e;
          e = a;
        }
        xj(b2, true, c2, null, f2);
        break;
      case "together":
        xj(b2, false, null, null, void 0);
        break;
      default:
        b2.memoizedState = null;
    }
  return b2.child;
}
function jj(a, b2) {
  0 === (b2.mode & 1) && null !== a && (a.alternate = null, b2.alternate = null, b2.flags |= 2);
}
function $i(a, b2, c2) {
  null !== a && (b2.dependencies = a.dependencies);
  hh |= b2.lanes;
  if (0 === (c2 & b2.childLanes))
    return null;
  if (null !== a && b2.child !== a.child)
    throw Error(p$1(153));
  if (null !== b2.child) {
    a = b2.child;
    c2 = wh(a, a.pendingProps);
    b2.child = c2;
    for (c2.return = b2; null !== a.sibling; )
      a = a.sibling, c2 = c2.sibling = wh(a, a.pendingProps), c2.return = b2;
    c2.sibling = null;
  }
  return b2.child;
}
function zj(a, b2, c2) {
  switch (b2.tag) {
    case 3:
      lj(b2);
      Ig();
      break;
    case 5:
      Kh(b2);
      break;
    case 1:
      Zf(b2.type) && cg(b2);
      break;
    case 4:
      Ih(b2, b2.stateNode.containerInfo);
      break;
    case 10:
      var d2 = b2.type._context, e = b2.memoizedProps.value;
      G(Mg, d2._currentValue);
      d2._currentValue = e;
      break;
    case 13:
      d2 = b2.memoizedState;
      if (null !== d2) {
        if (null !== d2.dehydrated)
          return G(M, M.current & 1), b2.flags |= 128, null;
        if (0 !== (c2 & b2.child.childLanes))
          return pj(a, b2, c2);
        G(M, M.current & 1);
        a = $i(a, b2, c2);
        return null !== a ? a.sibling : null;
      }
      G(M, M.current & 1);
      break;
    case 19:
      d2 = 0 !== (c2 & b2.childLanes);
      if (0 !== (a.flags & 128)) {
        if (d2)
          return yj(a, b2, c2);
        b2.flags |= 128;
      }
      e = b2.memoizedState;
      null !== e && (e.rendering = null, e.tail = null, e.lastEffect = null);
      G(M, M.current);
      if (d2)
        break;
      else
        return null;
    case 22:
    case 23:
      return b2.lanes = 0, ej(a, b2, c2);
  }
  return $i(a, b2, c2);
}
var Aj, Bj, Cj, Dj;
Aj = function(a, b2) {
  for (var c2 = b2.child; null !== c2; ) {
    if (5 === c2.tag || 6 === c2.tag)
      a.appendChild(c2.stateNode);
    else if (4 !== c2.tag && null !== c2.child) {
      c2.child.return = c2;
      c2 = c2.child;
      continue;
    }
    if (c2 === b2)
      break;
    for (; null === c2.sibling; ) {
      if (null === c2.return || c2.return === b2)
        return;
      c2 = c2.return;
    }
    c2.sibling.return = c2.return;
    c2 = c2.sibling;
  }
};
Bj = function() {
};
Cj = function(a, b2, c2, d2) {
  var e = a.memoizedProps;
  if (e !== d2) {
    a = b2.stateNode;
    Hh(Eh.current);
    var f2 = null;
    switch (c2) {
      case "input":
        e = Ya(a, e);
        d2 = Ya(a, d2);
        f2 = [];
        break;
      case "select":
        e = A({}, e, { value: void 0 });
        d2 = A({}, d2, { value: void 0 });
        f2 = [];
        break;
      case "textarea":
        e = gb(a, e);
        d2 = gb(a, d2);
        f2 = [];
        break;
      default:
        "function" !== typeof e.onClick && "function" === typeof d2.onClick && (a.onclick = Bf);
    }
    ub(c2, d2);
    var g2;
    c2 = null;
    for (l2 in e)
      if (!d2.hasOwnProperty(l2) && e.hasOwnProperty(l2) && null != e[l2])
        if ("style" === l2) {
          var h2 = e[l2];
          for (g2 in h2)
            h2.hasOwnProperty(g2) && (c2 || (c2 = {}), c2[g2] = "");
        } else
          "dangerouslySetInnerHTML" !== l2 && "children" !== l2 && "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && "autoFocus" !== l2 && (ea.hasOwnProperty(l2) ? f2 || (f2 = []) : (f2 = f2 || []).push(l2, null));
    for (l2 in d2) {
      var k2 = d2[l2];
      h2 = null != e ? e[l2] : void 0;
      if (d2.hasOwnProperty(l2) && k2 !== h2 && (null != k2 || null != h2))
        if ("style" === l2)
          if (h2) {
            for (g2 in h2)
              !h2.hasOwnProperty(g2) || k2 && k2.hasOwnProperty(g2) || (c2 || (c2 = {}), c2[g2] = "");
            for (g2 in k2)
              k2.hasOwnProperty(g2) && h2[g2] !== k2[g2] && (c2 || (c2 = {}), c2[g2] = k2[g2]);
          } else
            c2 || (f2 || (f2 = []), f2.push(
              l2,
              c2
            )), c2 = k2;
        else
          "dangerouslySetInnerHTML" === l2 ? (k2 = k2 ? k2.__html : void 0, h2 = h2 ? h2.__html : void 0, null != k2 && h2 !== k2 && (f2 = f2 || []).push(l2, k2)) : "children" === l2 ? "string" !== typeof k2 && "number" !== typeof k2 || (f2 = f2 || []).push(l2, "" + k2) : "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && (ea.hasOwnProperty(l2) ? (null != k2 && "onScroll" === l2 && D("scroll", a), f2 || h2 === k2 || (f2 = [])) : (f2 = f2 || []).push(l2, k2));
    }
    c2 && (f2 = f2 || []).push("style", c2);
    var l2 = f2;
    if (b2.updateQueue = l2)
      b2.flags |= 4;
  }
};
Dj = function(a, b2, c2, d2) {
  c2 !== d2 && (b2.flags |= 4);
};
function Ej(a, b2) {
  if (!I$1)
    switch (a.tailMode) {
      case "hidden":
        b2 = a.tail;
        for (var c2 = null; null !== b2; )
          null !== b2.alternate && (c2 = b2), b2 = b2.sibling;
        null === c2 ? a.tail = null : c2.sibling = null;
        break;
      case "collapsed":
        c2 = a.tail;
        for (var d2 = null; null !== c2; )
          null !== c2.alternate && (d2 = c2), c2 = c2.sibling;
        null === d2 ? b2 || null === a.tail ? a.tail = null : a.tail.sibling = null : d2.sibling = null;
    }
}
function S$1(a) {
  var b2 = null !== a.alternate && a.alternate.child === a.child, c2 = 0, d2 = 0;
  if (b2)
    for (var e = a.child; null !== e; )
      c2 |= e.lanes | e.childLanes, d2 |= e.subtreeFlags & 14680064, d2 |= e.flags & 14680064, e.return = a, e = e.sibling;
  else
    for (e = a.child; null !== e; )
      c2 |= e.lanes | e.childLanes, d2 |= e.subtreeFlags, d2 |= e.flags, e.return = a, e = e.sibling;
  a.subtreeFlags |= d2;
  a.childLanes = c2;
  return b2;
}
function Fj(a, b2, c2) {
  var d2 = b2.pendingProps;
  wg(b2);
  switch (b2.tag) {
    case 2:
    case 16:
    case 15:
    case 0:
    case 11:
    case 7:
    case 8:
    case 12:
    case 9:
    case 14:
      return S$1(b2), null;
    case 1:
      return Zf(b2.type) && $f(), S$1(b2), null;
    case 3:
      d2 = b2.stateNode;
      Jh();
      E(Wf);
      E(H);
      Oh();
      d2.pendingContext && (d2.context = d2.pendingContext, d2.pendingContext = null);
      if (null === a || null === a.child)
        Gg(b2) ? b2.flags |= 4 : null === a || a.memoizedState.isDehydrated && 0 === (b2.flags & 256) || (b2.flags |= 1024, null !== zg && (Gj(zg), zg = null));
      Bj(a, b2);
      S$1(b2);
      return null;
    case 5:
      Lh(b2);
      var e = Hh(Gh.current);
      c2 = b2.type;
      if (null !== a && null != b2.stateNode)
        Cj(a, b2, c2, d2, e), a.ref !== b2.ref && (b2.flags |= 512, b2.flags |= 2097152);
      else {
        if (!d2) {
          if (null === b2.stateNode)
            throw Error(p$1(166));
          S$1(b2);
          return null;
        }
        a = Hh(Eh.current);
        if (Gg(b2)) {
          d2 = b2.stateNode;
          c2 = b2.type;
          var f2 = b2.memoizedProps;
          d2[Of] = b2;
          d2[Pf] = f2;
          a = 0 !== (b2.mode & 1);
          switch (c2) {
            case "dialog":
              D("cancel", d2);
              D("close", d2);
              break;
            case "iframe":
            case "object":
            case "embed":
              D("load", d2);
              break;
            case "video":
            case "audio":
              for (e = 0; e < lf.length; e++)
                D(lf[e], d2);
              break;
            case "source":
              D("error", d2);
              break;
            case "img":
            case "image":
            case "link":
              D(
                "error",
                d2
              );
              D("load", d2);
              break;
            case "details":
              D("toggle", d2);
              break;
            case "input":
              Za(d2, f2);
              D("invalid", d2);
              break;
            case "select":
              d2._wrapperState = { wasMultiple: !!f2.multiple };
              D("invalid", d2);
              break;
            case "textarea":
              hb(d2, f2), D("invalid", d2);
          }
          ub(c2, f2);
          e = null;
          for (var g2 in f2)
            if (f2.hasOwnProperty(g2)) {
              var h2 = f2[g2];
              "children" === g2 ? "string" === typeof h2 ? d2.textContent !== h2 && (true !== f2.suppressHydrationWarning && Af(d2.textContent, h2, a), e = ["children", h2]) : "number" === typeof h2 && d2.textContent !== "" + h2 && (true !== f2.suppressHydrationWarning && Af(
                d2.textContent,
                h2,
                a
              ), e = ["children", "" + h2]) : ea.hasOwnProperty(g2) && null != h2 && "onScroll" === g2 && D("scroll", d2);
            }
          switch (c2) {
            case "input":
              Va(d2);
              db(d2, f2, true);
              break;
            case "textarea":
              Va(d2);
              jb(d2);
              break;
            case "select":
            case "option":
              break;
            default:
              "function" === typeof f2.onClick && (d2.onclick = Bf);
          }
          d2 = e;
          b2.updateQueue = d2;
          null !== d2 && (b2.flags |= 4);
        } else {
          g2 = 9 === e.nodeType ? e : e.ownerDocument;
          "http://www.w3.org/1999/xhtml" === a && (a = kb(c2));
          "http://www.w3.org/1999/xhtml" === a ? "script" === c2 ? (a = g2.createElement("div"), a.innerHTML = "<script><\/script>", a = a.removeChild(a.firstChild)) : "string" === typeof d2.is ? a = g2.createElement(c2, { is: d2.is }) : (a = g2.createElement(c2), "select" === c2 && (g2 = a, d2.multiple ? g2.multiple = true : d2.size && (g2.size = d2.size))) : a = g2.createElementNS(a, c2);
          a[Of] = b2;
          a[Pf] = d2;
          Aj(a, b2, false, false);
          b2.stateNode = a;
          a: {
            g2 = vb(c2, d2);
            switch (c2) {
              case "dialog":
                D("cancel", a);
                D("close", a);
                e = d2;
                break;
              case "iframe":
              case "object":
              case "embed":
                D("load", a);
                e = d2;
                break;
              case "video":
              case "audio":
                for (e = 0; e < lf.length; e++)
                  D(lf[e], a);
                e = d2;
                break;
              case "source":
                D("error", a);
                e = d2;
                break;
              case "img":
              case "image":
              case "link":
                D(
                  "error",
                  a
                );
                D("load", a);
                e = d2;
                break;
              case "details":
                D("toggle", a);
                e = d2;
                break;
              case "input":
                Za(a, d2);
                e = Ya(a, d2);
                D("invalid", a);
                break;
              case "option":
                e = d2;
                break;
              case "select":
                a._wrapperState = { wasMultiple: !!d2.multiple };
                e = A({}, d2, { value: void 0 });
                D("invalid", a);
                break;
              case "textarea":
                hb(a, d2);
                e = gb(a, d2);
                D("invalid", a);
                break;
              default:
                e = d2;
            }
            ub(c2, e);
            h2 = e;
            for (f2 in h2)
              if (h2.hasOwnProperty(f2)) {
                var k2 = h2[f2];
                "style" === f2 ? sb(a, k2) : "dangerouslySetInnerHTML" === f2 ? (k2 = k2 ? k2.__html : void 0, null != k2 && nb(a, k2)) : "children" === f2 ? "string" === typeof k2 ? ("textarea" !== c2 || "" !== k2) && ob(a, k2) : "number" === typeof k2 && ob(a, "" + k2) : "suppressContentEditableWarning" !== f2 && "suppressHydrationWarning" !== f2 && "autoFocus" !== f2 && (ea.hasOwnProperty(f2) ? null != k2 && "onScroll" === f2 && D("scroll", a) : null != k2 && ta(a, f2, k2, g2));
              }
            switch (c2) {
              case "input":
                Va(a);
                db(a, d2, false);
                break;
              case "textarea":
                Va(a);
                jb(a);
                break;
              case "option":
                null != d2.value && a.setAttribute("value", "" + Sa(d2.value));
                break;
              case "select":
                a.multiple = !!d2.multiple;
                f2 = d2.value;
                null != f2 ? fb(a, !!d2.multiple, f2, false) : null != d2.defaultValue && fb(
                  a,
                  !!d2.multiple,
                  d2.defaultValue,
                  true
                );
                break;
              default:
                "function" === typeof e.onClick && (a.onclick = Bf);
            }
            switch (c2) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                d2 = !!d2.autoFocus;
                break a;
              case "img":
                d2 = true;
                break a;
              default:
                d2 = false;
            }
          }
          d2 && (b2.flags |= 4);
        }
        null !== b2.ref && (b2.flags |= 512, b2.flags |= 2097152);
      }
      S$1(b2);
      return null;
    case 6:
      if (a && null != b2.stateNode)
        Dj(a, b2, a.memoizedProps, d2);
      else {
        if ("string" !== typeof d2 && null === b2.stateNode)
          throw Error(p$1(166));
        c2 = Hh(Gh.current);
        Hh(Eh.current);
        if (Gg(b2)) {
          d2 = b2.stateNode;
          c2 = b2.memoizedProps;
          d2[Of] = b2;
          if (f2 = d2.nodeValue !== c2) {
            if (a = xg, null !== a)
              switch (a.tag) {
                case 3:
                  Af(d2.nodeValue, c2, 0 !== (a.mode & 1));
                  break;
                case 5:
                  true !== a.memoizedProps.suppressHydrationWarning && Af(d2.nodeValue, c2, 0 !== (a.mode & 1));
              }
          }
          f2 && (b2.flags |= 4);
        } else
          d2 = (9 === c2.nodeType ? c2 : c2.ownerDocument).createTextNode(d2), d2[Of] = b2, b2.stateNode = d2;
      }
      S$1(b2);
      return null;
    case 13:
      E(M);
      d2 = b2.memoizedState;
      if (null === a || null !== a.memoizedState && null !== a.memoizedState.dehydrated) {
        if (I$1 && null !== yg && 0 !== (b2.mode & 1) && 0 === (b2.flags & 128))
          Hg(), Ig(), b2.flags |= 98560, f2 = false;
        else if (f2 = Gg(b2), null !== d2 && null !== d2.dehydrated) {
          if (null === a) {
            if (!f2)
              throw Error(p$1(318));
            f2 = b2.memoizedState;
            f2 = null !== f2 ? f2.dehydrated : null;
            if (!f2)
              throw Error(p$1(317));
            f2[Of] = b2;
          } else
            Ig(), 0 === (b2.flags & 128) && (b2.memoizedState = null), b2.flags |= 4;
          S$1(b2);
          f2 = false;
        } else
          null !== zg && (Gj(zg), zg = null), f2 = true;
        if (!f2)
          return b2.flags & 65536 ? b2 : null;
      }
      if (0 !== (b2.flags & 128))
        return b2.lanes = c2, b2;
      d2 = null !== d2;
      d2 !== (null !== a && null !== a.memoizedState) && d2 && (b2.child.flags |= 8192, 0 !== (b2.mode & 1) && (null === a || 0 !== (M.current & 1) ? 0 === T$1 && (T$1 = 3) : uj()));
      null !== b2.updateQueue && (b2.flags |= 4);
      S$1(b2);
      return null;
    case 4:
      return Jh(), Bj(a, b2), null === a && sf(b2.stateNode.containerInfo), S$1(b2), null;
    case 10:
      return Rg(b2.type._context), S$1(b2), null;
    case 17:
      return Zf(b2.type) && $f(), S$1(b2), null;
    case 19:
      E(M);
      f2 = b2.memoizedState;
      if (null === f2)
        return S$1(b2), null;
      d2 = 0 !== (b2.flags & 128);
      g2 = f2.rendering;
      if (null === g2)
        if (d2)
          Ej(f2, false);
        else {
          if (0 !== T$1 || null !== a && 0 !== (a.flags & 128))
            for (a = b2.child; null !== a; ) {
              g2 = Mh(a);
              if (null !== g2) {
                b2.flags |= 128;
                Ej(f2, false);
                d2 = g2.updateQueue;
                null !== d2 && (b2.updateQueue = d2, b2.flags |= 4);
                b2.subtreeFlags = 0;
                d2 = c2;
                for (c2 = b2.child; null !== c2; )
                  f2 = c2, a = d2, f2.flags &= 14680066, g2 = f2.alternate, null === g2 ? (f2.childLanes = 0, f2.lanes = a, f2.child = null, f2.subtreeFlags = 0, f2.memoizedProps = null, f2.memoizedState = null, f2.updateQueue = null, f2.dependencies = null, f2.stateNode = null) : (f2.childLanes = g2.childLanes, f2.lanes = g2.lanes, f2.child = g2.child, f2.subtreeFlags = 0, f2.deletions = null, f2.memoizedProps = g2.memoizedProps, f2.memoizedState = g2.memoizedState, f2.updateQueue = g2.updateQueue, f2.type = g2.type, a = g2.dependencies, f2.dependencies = null === a ? null : { lanes: a.lanes, firstContext: a.firstContext }), c2 = c2.sibling;
                G(M, M.current & 1 | 2);
                return b2.child;
              }
              a = a.sibling;
            }
          null !== f2.tail && B() > Hj && (b2.flags |= 128, d2 = true, Ej(f2, false), b2.lanes = 4194304);
        }
      else {
        if (!d2)
          if (a = Mh(g2), null !== a) {
            if (b2.flags |= 128, d2 = true, c2 = a.updateQueue, null !== c2 && (b2.updateQueue = c2, b2.flags |= 4), Ej(f2, true), null === f2.tail && "hidden" === f2.tailMode && !g2.alternate && !I$1)
              return S$1(b2), null;
          } else
            2 * B() - f2.renderingStartTime > Hj && 1073741824 !== c2 && (b2.flags |= 128, d2 = true, Ej(f2, false), b2.lanes = 4194304);
        f2.isBackwards ? (g2.sibling = b2.child, b2.child = g2) : (c2 = f2.last, null !== c2 ? c2.sibling = g2 : b2.child = g2, f2.last = g2);
      }
      if (null !== f2.tail)
        return b2 = f2.tail, f2.rendering = b2, f2.tail = b2.sibling, f2.renderingStartTime = B(), b2.sibling = null, c2 = M.current, G(M, d2 ? c2 & 1 | 2 : c2 & 1), b2;
      S$1(b2);
      return null;
    case 22:
    case 23:
      return Ij(), d2 = null !== b2.memoizedState, null !== a && null !== a.memoizedState !== d2 && (b2.flags |= 8192), d2 && 0 !== (b2.mode & 1) ? 0 !== (gj & 1073741824) && (S$1(b2), b2.subtreeFlags & 6 && (b2.flags |= 8192)) : S$1(b2), null;
    case 24:
      return null;
    case 25:
      return null;
  }
  throw Error(p$1(156, b2.tag));
}
function Jj(a, b2) {
  wg(b2);
  switch (b2.tag) {
    case 1:
      return Zf(b2.type) && $f(), a = b2.flags, a & 65536 ? (b2.flags = a & -65537 | 128, b2) : null;
    case 3:
      return Jh(), E(Wf), E(H), Oh(), a = b2.flags, 0 !== (a & 65536) && 0 === (a & 128) ? (b2.flags = a & -65537 | 128, b2) : null;
    case 5:
      return Lh(b2), null;
    case 13:
      E(M);
      a = b2.memoizedState;
      if (null !== a && null !== a.dehydrated) {
        if (null === b2.alternate)
          throw Error(p$1(340));
        Ig();
      }
      a = b2.flags;
      return a & 65536 ? (b2.flags = a & -65537 | 128, b2) : null;
    case 19:
      return E(M), null;
    case 4:
      return Jh(), null;
    case 10:
      return Rg(b2.type._context), null;
    case 22:
    case 23:
      return Ij(), null;
    case 24:
      return null;
    default:
      return null;
  }
}
var Kj = false, U$1 = false, Lj = "function" === typeof WeakSet ? WeakSet : Set, V$1 = null;
function Mj(a, b2) {
  var c2 = a.ref;
  if (null !== c2)
    if ("function" === typeof c2)
      try {
        c2(null);
      } catch (d2) {
        W(a, b2, d2);
      }
    else
      c2.current = null;
}
function Nj(a, b2, c2) {
  try {
    c2();
  } catch (d2) {
    W(a, b2, d2);
  }
}
var Oj = false;
function Pj(a, b2) {
  Cf = dd;
  a = Me$1();
  if (Ne$1(a)) {
    if ("selectionStart" in a)
      var c2 = { start: a.selectionStart, end: a.selectionEnd };
    else
      a: {
        c2 = (c2 = a.ownerDocument) && c2.defaultView || window;
        var d2 = c2.getSelection && c2.getSelection();
        if (d2 && 0 !== d2.rangeCount) {
          c2 = d2.anchorNode;
          var e = d2.anchorOffset, f2 = d2.focusNode;
          d2 = d2.focusOffset;
          try {
            c2.nodeType, f2.nodeType;
          } catch (F2) {
            c2 = null;
            break a;
          }
          var g2 = 0, h2 = -1, k2 = -1, l2 = 0, m2 = 0, q2 = a, r2 = null;
          b:
            for (; ; ) {
              for (var y2; ; ) {
                q2 !== c2 || 0 !== e && 3 !== q2.nodeType || (h2 = g2 + e);
                q2 !== f2 || 0 !== d2 && 3 !== q2.nodeType || (k2 = g2 + d2);
                3 === q2.nodeType && (g2 += q2.nodeValue.length);
                if (null === (y2 = q2.firstChild))
                  break;
                r2 = q2;
                q2 = y2;
              }
              for (; ; ) {
                if (q2 === a)
                  break b;
                r2 === c2 && ++l2 === e && (h2 = g2);
                r2 === f2 && ++m2 === d2 && (k2 = g2);
                if (null !== (y2 = q2.nextSibling))
                  break;
                q2 = r2;
                r2 = q2.parentNode;
              }
              q2 = y2;
            }
          c2 = -1 === h2 || -1 === k2 ? null : { start: h2, end: k2 };
        } else
          c2 = null;
      }
    c2 = c2 || { start: 0, end: 0 };
  } else
    c2 = null;
  Df = { focusedElem: a, selectionRange: c2 };
  dd = false;
  for (V$1 = b2; null !== V$1; )
    if (b2 = V$1, a = b2.child, 0 !== (b2.subtreeFlags & 1028) && null !== a)
      a.return = b2, V$1 = a;
    else
      for (; null !== V$1; ) {
        b2 = V$1;
        try {
          var n2 = b2.alternate;
          if (0 !== (b2.flags & 1024))
            switch (b2.tag) {
              case 0:
              case 11:
              case 15:
                break;
              case 1:
                if (null !== n2) {
                  var t2 = n2.memoizedProps, J2 = n2.memoizedState, x2 = b2.stateNode, w2 = x2.getSnapshotBeforeUpdate(b2.elementType === b2.type ? t2 : Lg(b2.type, t2), J2);
                  x2.__reactInternalSnapshotBeforeUpdate = w2;
                }
                break;
              case 3:
                var u2 = b2.stateNode.containerInfo;
                1 === u2.nodeType ? u2.textContent = "" : 9 === u2.nodeType && u2.documentElement && u2.removeChild(u2.documentElement);
                break;
              case 5:
              case 6:
              case 4:
              case 17:
                break;
              default:
                throw Error(p$1(163));
            }
        } catch (F2) {
          W(b2, b2.return, F2);
        }
        a = b2.sibling;
        if (null !== a) {
          a.return = b2.return;
          V$1 = a;
          break;
        }
        V$1 = b2.return;
      }
  n2 = Oj;
  Oj = false;
  return n2;
}
function Qj(a, b2, c2) {
  var d2 = b2.updateQueue;
  d2 = null !== d2 ? d2.lastEffect : null;
  if (null !== d2) {
    var e = d2 = d2.next;
    do {
      if ((e.tag & a) === a) {
        var f2 = e.destroy;
        e.destroy = void 0;
        void 0 !== f2 && Nj(b2, c2, f2);
      }
      e = e.next;
    } while (e !== d2);
  }
}
function Rj(a, b2) {
  b2 = b2.updateQueue;
  b2 = null !== b2 ? b2.lastEffect : null;
  if (null !== b2) {
    var c2 = b2 = b2.next;
    do {
      if ((c2.tag & a) === a) {
        var d2 = c2.create;
        c2.destroy = d2();
      }
      c2 = c2.next;
    } while (c2 !== b2);
  }
}
function Sj(a) {
  var b2 = a.ref;
  if (null !== b2) {
    var c2 = a.stateNode;
    switch (a.tag) {
      case 5:
        a = c2;
        break;
      default:
        a = c2;
    }
    "function" === typeof b2 ? b2(a) : b2.current = a;
  }
}
function Tj(a) {
  var b2 = a.alternate;
  null !== b2 && (a.alternate = null, Tj(b2));
  a.child = null;
  a.deletions = null;
  a.sibling = null;
  5 === a.tag && (b2 = a.stateNode, null !== b2 && (delete b2[Of], delete b2[Pf], delete b2[of], delete b2[Qf], delete b2[Rf]));
  a.stateNode = null;
  a.return = null;
  a.dependencies = null;
  a.memoizedProps = null;
  a.memoizedState = null;
  a.pendingProps = null;
  a.stateNode = null;
  a.updateQueue = null;
}
function Uj(a) {
  return 5 === a.tag || 3 === a.tag || 4 === a.tag;
}
function Vj(a) {
  a:
    for (; ; ) {
      for (; null === a.sibling; ) {
        if (null === a.return || Uj(a.return))
          return null;
        a = a.return;
      }
      a.sibling.return = a.return;
      for (a = a.sibling; 5 !== a.tag && 6 !== a.tag && 18 !== a.tag; ) {
        if (a.flags & 2)
          continue a;
        if (null === a.child || 4 === a.tag)
          continue a;
        else
          a.child.return = a, a = a.child;
      }
      if (!(a.flags & 2))
        return a.stateNode;
    }
}
function Wj(a, b2, c2) {
  var d2 = a.tag;
  if (5 === d2 || 6 === d2)
    a = a.stateNode, b2 ? 8 === c2.nodeType ? c2.parentNode.insertBefore(a, b2) : c2.insertBefore(a, b2) : (8 === c2.nodeType ? (b2 = c2.parentNode, b2.insertBefore(a, c2)) : (b2 = c2, b2.appendChild(a)), c2 = c2._reactRootContainer, null !== c2 && void 0 !== c2 || null !== b2.onclick || (b2.onclick = Bf));
  else if (4 !== d2 && (a = a.child, null !== a))
    for (Wj(a, b2, c2), a = a.sibling; null !== a; )
      Wj(a, b2, c2), a = a.sibling;
}
function Xj(a, b2, c2) {
  var d2 = a.tag;
  if (5 === d2 || 6 === d2)
    a = a.stateNode, b2 ? c2.insertBefore(a, b2) : c2.appendChild(a);
  else if (4 !== d2 && (a = a.child, null !== a))
    for (Xj(a, b2, c2), a = a.sibling; null !== a; )
      Xj(a, b2, c2), a = a.sibling;
}
var X = null, Yj = false;
function Zj(a, b2, c2) {
  for (c2 = c2.child; null !== c2; )
    ak(a, b2, c2), c2 = c2.sibling;
}
function ak(a, b2, c2) {
  if (lc && "function" === typeof lc.onCommitFiberUnmount)
    try {
      lc.onCommitFiberUnmount(kc, c2);
    } catch (h2) {
    }
  switch (c2.tag) {
    case 5:
      U$1 || Mj(c2, b2);
    case 6:
      var d2 = X, e = Yj;
      X = null;
      Zj(a, b2, c2);
      X = d2;
      Yj = e;
      null !== X && (Yj ? (a = X, c2 = c2.stateNode, 8 === a.nodeType ? a.parentNode.removeChild(c2) : a.removeChild(c2)) : X.removeChild(c2.stateNode));
      break;
    case 18:
      null !== X && (Yj ? (a = X, c2 = c2.stateNode, 8 === a.nodeType ? Kf(a.parentNode, c2) : 1 === a.nodeType && Kf(a, c2), bd(a)) : Kf(X, c2.stateNode));
      break;
    case 4:
      d2 = X;
      e = Yj;
      X = c2.stateNode.containerInfo;
      Yj = true;
      Zj(a, b2, c2);
      X = d2;
      Yj = e;
      break;
    case 0:
    case 11:
    case 14:
    case 15:
      if (!U$1 && (d2 = c2.updateQueue, null !== d2 && (d2 = d2.lastEffect, null !== d2))) {
        e = d2 = d2.next;
        do {
          var f2 = e, g2 = f2.destroy;
          f2 = f2.tag;
          void 0 !== g2 && (0 !== (f2 & 2) ? Nj(c2, b2, g2) : 0 !== (f2 & 4) && Nj(c2, b2, g2));
          e = e.next;
        } while (e !== d2);
      }
      Zj(a, b2, c2);
      break;
    case 1:
      if (!U$1 && (Mj(c2, b2), d2 = c2.stateNode, "function" === typeof d2.componentWillUnmount))
        try {
          d2.props = c2.memoizedProps, d2.state = c2.memoizedState, d2.componentWillUnmount();
        } catch (h2) {
          W(c2, b2, h2);
        }
      Zj(a, b2, c2);
      break;
    case 21:
      Zj(a, b2, c2);
      break;
    case 22:
      c2.mode & 1 ? (U$1 = (d2 = U$1) || null !== c2.memoizedState, Zj(a, b2, c2), U$1 = d2) : Zj(a, b2, c2);
      break;
    default:
      Zj(a, b2, c2);
  }
}
function bk(a) {
  var b2 = a.updateQueue;
  if (null !== b2) {
    a.updateQueue = null;
    var c2 = a.stateNode;
    null === c2 && (c2 = a.stateNode = new Lj());
    b2.forEach(function(b3) {
      var d2 = ck.bind(null, a, b3);
      c2.has(b3) || (c2.add(b3), b3.then(d2, d2));
    });
  }
}
function dk(a, b2) {
  var c2 = b2.deletions;
  if (null !== c2)
    for (var d2 = 0; d2 < c2.length; d2++) {
      var e = c2[d2];
      try {
        var f2 = a, g2 = b2, h2 = g2;
        a:
          for (; null !== h2; ) {
            switch (h2.tag) {
              case 5:
                X = h2.stateNode;
                Yj = false;
                break a;
              case 3:
                X = h2.stateNode.containerInfo;
                Yj = true;
                break a;
              case 4:
                X = h2.stateNode.containerInfo;
                Yj = true;
                break a;
            }
            h2 = h2.return;
          }
        if (null === X)
          throw Error(p$1(160));
        ak(f2, g2, e);
        X = null;
        Yj = false;
        var k2 = e.alternate;
        null !== k2 && (k2.return = null);
        e.return = null;
      } catch (l2) {
        W(e, b2, l2);
      }
    }
  if (b2.subtreeFlags & 12854)
    for (b2 = b2.child; null !== b2; )
      ek(b2, a), b2 = b2.sibling;
}
function ek(a, b2) {
  var c2 = a.alternate, d2 = a.flags;
  switch (a.tag) {
    case 0:
    case 11:
    case 14:
    case 15:
      dk(b2, a);
      fk(a);
      if (d2 & 4) {
        try {
          Qj(3, a, a.return), Rj(3, a);
        } catch (t2) {
          W(a, a.return, t2);
        }
        try {
          Qj(5, a, a.return);
        } catch (t2) {
          W(a, a.return, t2);
        }
      }
      break;
    case 1:
      dk(b2, a);
      fk(a);
      d2 & 512 && null !== c2 && Mj(c2, c2.return);
      break;
    case 5:
      dk(b2, a);
      fk(a);
      d2 & 512 && null !== c2 && Mj(c2, c2.return);
      if (a.flags & 32) {
        var e = a.stateNode;
        try {
          ob(e, "");
        } catch (t2) {
          W(a, a.return, t2);
        }
      }
      if (d2 & 4 && (e = a.stateNode, null != e)) {
        var f2 = a.memoizedProps, g2 = null !== c2 ? c2.memoizedProps : f2, h2 = a.type, k2 = a.updateQueue;
        a.updateQueue = null;
        if (null !== k2)
          try {
            "input" === h2 && "radio" === f2.type && null != f2.name && ab(e, f2);
            vb(h2, g2);
            var l2 = vb(h2, f2);
            for (g2 = 0; g2 < k2.length; g2 += 2) {
              var m2 = k2[g2], q2 = k2[g2 + 1];
              "style" === m2 ? sb(e, q2) : "dangerouslySetInnerHTML" === m2 ? nb(e, q2) : "children" === m2 ? ob(e, q2) : ta(e, m2, q2, l2);
            }
            switch (h2) {
              case "input":
                bb(e, f2);
                break;
              case "textarea":
                ib(e, f2);
                break;
              case "select":
                var r2 = e._wrapperState.wasMultiple;
                e._wrapperState.wasMultiple = !!f2.multiple;
                var y2 = f2.value;
                null != y2 ? fb(e, !!f2.multiple, y2, false) : r2 !== !!f2.multiple && (null != f2.defaultValue ? fb(
                  e,
                  !!f2.multiple,
                  f2.defaultValue,
                  true
                ) : fb(e, !!f2.multiple, f2.multiple ? [] : "", false));
            }
            e[Pf] = f2;
          } catch (t2) {
            W(a, a.return, t2);
          }
      }
      break;
    case 6:
      dk(b2, a);
      fk(a);
      if (d2 & 4) {
        if (null === a.stateNode)
          throw Error(p$1(162));
        e = a.stateNode;
        f2 = a.memoizedProps;
        try {
          e.nodeValue = f2;
        } catch (t2) {
          W(a, a.return, t2);
        }
      }
      break;
    case 3:
      dk(b2, a);
      fk(a);
      if (d2 & 4 && null !== c2 && c2.memoizedState.isDehydrated)
        try {
          bd(b2.containerInfo);
        } catch (t2) {
          W(a, a.return, t2);
        }
      break;
    case 4:
      dk(b2, a);
      fk(a);
      break;
    case 13:
      dk(b2, a);
      fk(a);
      e = a.child;
      e.flags & 8192 && (f2 = null !== e.memoizedState, e.stateNode.isHidden = f2, !f2 || null !== e.alternate && null !== e.alternate.memoizedState || (gk = B()));
      d2 & 4 && bk(a);
      break;
    case 22:
      m2 = null !== c2 && null !== c2.memoizedState;
      a.mode & 1 ? (U$1 = (l2 = U$1) || m2, dk(b2, a), U$1 = l2) : dk(b2, a);
      fk(a);
      if (d2 & 8192) {
        l2 = null !== a.memoizedState;
        if ((a.stateNode.isHidden = l2) && !m2 && 0 !== (a.mode & 1))
          for (V$1 = a, m2 = a.child; null !== m2; ) {
            for (q2 = V$1 = m2; null !== V$1; ) {
              r2 = V$1;
              y2 = r2.child;
              switch (r2.tag) {
                case 0:
                case 11:
                case 14:
                case 15:
                  Qj(4, r2, r2.return);
                  break;
                case 1:
                  Mj(r2, r2.return);
                  var n2 = r2.stateNode;
                  if ("function" === typeof n2.componentWillUnmount) {
                    d2 = r2;
                    c2 = r2.return;
                    try {
                      b2 = d2, n2.props = b2.memoizedProps, n2.state = b2.memoizedState, n2.componentWillUnmount();
                    } catch (t2) {
                      W(d2, c2, t2);
                    }
                  }
                  break;
                case 5:
                  Mj(r2, r2.return);
                  break;
                case 22:
                  if (null !== r2.memoizedState) {
                    hk(q2);
                    continue;
                  }
              }
              null !== y2 ? (y2.return = r2, V$1 = y2) : hk(q2);
            }
            m2 = m2.sibling;
          }
        a:
          for (m2 = null, q2 = a; ; ) {
            if (5 === q2.tag) {
              if (null === m2) {
                m2 = q2;
                try {
                  e = q2.stateNode, l2 ? (f2 = e.style, "function" === typeof f2.setProperty ? f2.setProperty("display", "none", "important") : f2.display = "none") : (h2 = q2.stateNode, k2 = q2.memoizedProps.style, g2 = void 0 !== k2 && null !== k2 && k2.hasOwnProperty("display") ? k2.display : null, h2.style.display = rb("display", g2));
                } catch (t2) {
                  W(a, a.return, t2);
                }
              }
            } else if (6 === q2.tag) {
              if (null === m2)
                try {
                  q2.stateNode.nodeValue = l2 ? "" : q2.memoizedProps;
                } catch (t2) {
                  W(a, a.return, t2);
                }
            } else if ((22 !== q2.tag && 23 !== q2.tag || null === q2.memoizedState || q2 === a) && null !== q2.child) {
              q2.child.return = q2;
              q2 = q2.child;
              continue;
            }
            if (q2 === a)
              break a;
            for (; null === q2.sibling; ) {
              if (null === q2.return || q2.return === a)
                break a;
              m2 === q2 && (m2 = null);
              q2 = q2.return;
            }
            m2 === q2 && (m2 = null);
            q2.sibling.return = q2.return;
            q2 = q2.sibling;
          }
      }
      break;
    case 19:
      dk(b2, a);
      fk(a);
      d2 & 4 && bk(a);
      break;
    case 21:
      break;
    default:
      dk(
        b2,
        a
      ), fk(a);
  }
}
function fk(a) {
  var b2 = a.flags;
  if (b2 & 2) {
    try {
      a: {
        for (var c2 = a.return; null !== c2; ) {
          if (Uj(c2)) {
            var d2 = c2;
            break a;
          }
          c2 = c2.return;
        }
        throw Error(p$1(160));
      }
      switch (d2.tag) {
        case 5:
          var e = d2.stateNode;
          d2.flags & 32 && (ob(e, ""), d2.flags &= -33);
          var f2 = Vj(a);
          Xj(a, f2, e);
          break;
        case 3:
        case 4:
          var g2 = d2.stateNode.containerInfo, h2 = Vj(a);
          Wj(a, h2, g2);
          break;
        default:
          throw Error(p$1(161));
      }
    } catch (k2) {
      W(a, a.return, k2);
    }
    a.flags &= -3;
  }
  b2 & 4096 && (a.flags &= -4097);
}
function ik(a, b2, c2) {
  V$1 = a;
  jk(a);
}
function jk(a, b2, c2) {
  for (var d2 = 0 !== (a.mode & 1); null !== V$1; ) {
    var e = V$1, f2 = e.child;
    if (22 === e.tag && d2) {
      var g2 = null !== e.memoizedState || Kj;
      if (!g2) {
        var h2 = e.alternate, k2 = null !== h2 && null !== h2.memoizedState || U$1;
        h2 = Kj;
        var l2 = U$1;
        Kj = g2;
        if ((U$1 = k2) && !l2)
          for (V$1 = e; null !== V$1; )
            g2 = V$1, k2 = g2.child, 22 === g2.tag && null !== g2.memoizedState ? kk(e) : null !== k2 ? (k2.return = g2, V$1 = k2) : kk(e);
        for (; null !== f2; )
          V$1 = f2, jk(f2), f2 = f2.sibling;
        V$1 = e;
        Kj = h2;
        U$1 = l2;
      }
      lk(a);
    } else
      0 !== (e.subtreeFlags & 8772) && null !== f2 ? (f2.return = e, V$1 = f2) : lk(a);
  }
}
function lk(a) {
  for (; null !== V$1; ) {
    var b2 = V$1;
    if (0 !== (b2.flags & 8772)) {
      var c2 = b2.alternate;
      try {
        if (0 !== (b2.flags & 8772))
          switch (b2.tag) {
            case 0:
            case 11:
            case 15:
              U$1 || Rj(5, b2);
              break;
            case 1:
              var d2 = b2.stateNode;
              if (b2.flags & 4 && !U$1)
                if (null === c2)
                  d2.componentDidMount();
                else {
                  var e = b2.elementType === b2.type ? c2.memoizedProps : Lg(b2.type, c2.memoizedProps);
                  d2.componentDidUpdate(e, c2.memoizedState, d2.__reactInternalSnapshotBeforeUpdate);
                }
              var f2 = b2.updateQueue;
              null !== f2 && ih(b2, f2, d2);
              break;
            case 3:
              var g2 = b2.updateQueue;
              if (null !== g2) {
                c2 = null;
                if (null !== b2.child)
                  switch (b2.child.tag) {
                    case 5:
                      c2 = b2.child.stateNode;
                      break;
                    case 1:
                      c2 = b2.child.stateNode;
                  }
                ih(b2, g2, c2);
              }
              break;
            case 5:
              var h2 = b2.stateNode;
              if (null === c2 && b2.flags & 4) {
                c2 = h2;
                var k2 = b2.memoizedProps;
                switch (b2.type) {
                  case "button":
                  case "input":
                  case "select":
                  case "textarea":
                    k2.autoFocus && c2.focus();
                    break;
                  case "img":
                    k2.src && (c2.src = k2.src);
                }
              }
              break;
            case 6:
              break;
            case 4:
              break;
            case 12:
              break;
            case 13:
              if (null === b2.memoizedState) {
                var l2 = b2.alternate;
                if (null !== l2) {
                  var m2 = l2.memoizedState;
                  if (null !== m2) {
                    var q2 = m2.dehydrated;
                    null !== q2 && bd(q2);
                  }
                }
              }
              break;
            case 19:
            case 17:
            case 21:
            case 22:
            case 23:
            case 25:
              break;
            default:
              throw Error(p$1(163));
          }
        U$1 || b2.flags & 512 && Sj(b2);
      } catch (r2) {
        W(b2, b2.return, r2);
      }
    }
    if (b2 === a) {
      V$1 = null;
      break;
    }
    c2 = b2.sibling;
    if (null !== c2) {
      c2.return = b2.return;
      V$1 = c2;
      break;
    }
    V$1 = b2.return;
  }
}
function hk(a) {
  for (; null !== V$1; ) {
    var b2 = V$1;
    if (b2 === a) {
      V$1 = null;
      break;
    }
    var c2 = b2.sibling;
    if (null !== c2) {
      c2.return = b2.return;
      V$1 = c2;
      break;
    }
    V$1 = b2.return;
  }
}
function kk(a) {
  for (; null !== V$1; ) {
    var b2 = V$1;
    try {
      switch (b2.tag) {
        case 0:
        case 11:
        case 15:
          var c2 = b2.return;
          try {
            Rj(4, b2);
          } catch (k2) {
            W(b2, c2, k2);
          }
          break;
        case 1:
          var d2 = b2.stateNode;
          if ("function" === typeof d2.componentDidMount) {
            var e = b2.return;
            try {
              d2.componentDidMount();
            } catch (k2) {
              W(b2, e, k2);
            }
          }
          var f2 = b2.return;
          try {
            Sj(b2);
          } catch (k2) {
            W(b2, f2, k2);
          }
          break;
        case 5:
          var g2 = b2.return;
          try {
            Sj(b2);
          } catch (k2) {
            W(b2, g2, k2);
          }
      }
    } catch (k2) {
      W(b2, b2.return, k2);
    }
    if (b2 === a) {
      V$1 = null;
      break;
    }
    var h2 = b2.sibling;
    if (null !== h2) {
      h2.return = b2.return;
      V$1 = h2;
      break;
    }
    V$1 = b2.return;
  }
}
var mk = Math.ceil, nk = ua.ReactCurrentDispatcher, ok = ua.ReactCurrentOwner, pk = ua.ReactCurrentBatchConfig, K = 0, R = null, Y$1 = null, Z = 0, gj = 0, fj = Uf(0), T$1 = 0, qk = null, hh = 0, rk = 0, sk = 0, tk = null, uk = null, gk = 0, Hj = Infinity, vk = null, Pi = false, Qi = null, Si = null, wk = false, xk = null, yk = 0, zk = 0, Ak = null, Bk = -1, Ck = 0;
function L$1() {
  return 0 !== (K & 6) ? B() : -1 !== Bk ? Bk : Bk = B();
}
function lh(a) {
  if (0 === (a.mode & 1))
    return 1;
  if (0 !== (K & 2) && 0 !== Z)
    return Z & -Z;
  if (null !== Kg.transition)
    return 0 === Ck && (Ck = yc()), Ck;
  a = C;
  if (0 !== a)
    return a;
  a = window.event;
  a = void 0 === a ? 16 : jd(a.type);
  return a;
}
function mh(a, b2, c2, d2) {
  if (50 < zk)
    throw zk = 0, Ak = null, Error(p$1(185));
  Ac(a, c2, d2);
  if (0 === (K & 2) || a !== R)
    a === R && (0 === (K & 2) && (rk |= c2), 4 === T$1 && Dk(a, Z)), Ek(a, d2), 1 === c2 && 0 === K && 0 === (b2.mode & 1) && (Hj = B() + 500, fg && jg());
}
function Ek(a, b2) {
  var c2 = a.callbackNode;
  wc(a, b2);
  var d2 = uc(a, a === R ? Z : 0);
  if (0 === d2)
    null !== c2 && bc(c2), a.callbackNode = null, a.callbackPriority = 0;
  else if (b2 = d2 & -d2, a.callbackPriority !== b2) {
    null != c2 && bc(c2);
    if (1 === b2)
      0 === a.tag ? ig(Fk.bind(null, a)) : hg(Fk.bind(null, a)), Jf(function() {
        0 === (K & 6) && jg();
      }), c2 = null;
    else {
      switch (Dc(d2)) {
        case 1:
          c2 = fc;
          break;
        case 4:
          c2 = gc;
          break;
        case 16:
          c2 = hc;
          break;
        case 536870912:
          c2 = jc;
          break;
        default:
          c2 = hc;
      }
      c2 = Gk(c2, Hk.bind(null, a));
    }
    a.callbackPriority = b2;
    a.callbackNode = c2;
  }
}
function Hk(a, b2) {
  Bk = -1;
  Ck = 0;
  if (0 !== (K & 6))
    throw Error(p$1(327));
  var c2 = a.callbackNode;
  if (Ik() && a.callbackNode !== c2)
    return null;
  var d2 = uc(a, a === R ? Z : 0);
  if (0 === d2)
    return null;
  if (0 !== (d2 & 30) || 0 !== (d2 & a.expiredLanes) || b2)
    b2 = Jk(a, d2);
  else {
    b2 = d2;
    var e = K;
    K |= 2;
    var f2 = Kk();
    if (R !== a || Z !== b2)
      vk = null, Hj = B() + 500, Lk(a, b2);
    do
      try {
        Mk();
        break;
      } catch (h2) {
        Nk(a, h2);
      }
    while (1);
    Qg();
    nk.current = f2;
    K = e;
    null !== Y$1 ? b2 = 0 : (R = null, Z = 0, b2 = T$1);
  }
  if (0 !== b2) {
    2 === b2 && (e = xc(a), 0 !== e && (d2 = e, b2 = Ok(a, e)));
    if (1 === b2)
      throw c2 = qk, Lk(a, 0), Dk(a, d2), Ek(a, B()), c2;
    if (6 === b2)
      Dk(a, d2);
    else {
      e = a.current.alternate;
      if (0 === (d2 & 30) && !Pk(e) && (b2 = Jk(a, d2), 2 === b2 && (f2 = xc(a), 0 !== f2 && (d2 = f2, b2 = Ok(a, f2))), 1 === b2))
        throw c2 = qk, Lk(a, 0), Dk(a, d2), Ek(a, B()), c2;
      a.finishedWork = e;
      a.finishedLanes = d2;
      switch (b2) {
        case 0:
        case 1:
          throw Error(p$1(345));
        case 2:
          Qk(a, uk, vk);
          break;
        case 3:
          Dk(a, d2);
          if ((d2 & 130023424) === d2 && (b2 = gk + 500 - B(), 10 < b2)) {
            if (0 !== uc(a, 0))
              break;
            e = a.suspendedLanes;
            if ((e & d2) !== d2) {
              L$1();
              a.pingedLanes |= a.suspendedLanes & e;
              break;
            }
            a.timeoutHandle = Ff(Qk.bind(null, a, uk, vk), b2);
            break;
          }
          Qk(a, uk, vk);
          break;
        case 4:
          Dk(a, d2);
          if ((d2 & 4194240) === d2)
            break;
          b2 = a.eventTimes;
          for (e = -1; 0 < d2; ) {
            var g2 = 31 - oc(d2);
            f2 = 1 << g2;
            g2 = b2[g2];
            g2 > e && (e = g2);
            d2 &= ~f2;
          }
          d2 = e;
          d2 = B() - d2;
          d2 = (120 > d2 ? 120 : 480 > d2 ? 480 : 1080 > d2 ? 1080 : 1920 > d2 ? 1920 : 3e3 > d2 ? 3e3 : 4320 > d2 ? 4320 : 1960 * mk(d2 / 1960)) - d2;
          if (10 < d2) {
            a.timeoutHandle = Ff(Qk.bind(null, a, uk, vk), d2);
            break;
          }
          Qk(a, uk, vk);
          break;
        case 5:
          Qk(a, uk, vk);
          break;
        default:
          throw Error(p$1(329));
      }
    }
  }
  Ek(a, B());
  return a.callbackNode === c2 ? Hk.bind(null, a) : null;
}
function Ok(a, b2) {
  var c2 = tk;
  a.current.memoizedState.isDehydrated && (Lk(a, b2).flags |= 256);
  a = Jk(a, b2);
  2 !== a && (b2 = uk, uk = c2, null !== b2 && Gj(b2));
  return a;
}
function Gj(a) {
  null === uk ? uk = a : uk.push.apply(uk, a);
}
function Pk(a) {
  for (var b2 = a; ; ) {
    if (b2.flags & 16384) {
      var c2 = b2.updateQueue;
      if (null !== c2 && (c2 = c2.stores, null !== c2))
        for (var d2 = 0; d2 < c2.length; d2++) {
          var e = c2[d2], f2 = e.getSnapshot;
          e = e.value;
          try {
            if (!He(f2(), e))
              return false;
          } catch (g2) {
            return false;
          }
        }
    }
    c2 = b2.child;
    if (b2.subtreeFlags & 16384 && null !== c2)
      c2.return = b2, b2 = c2;
    else {
      if (b2 === a)
        break;
      for (; null === b2.sibling; ) {
        if (null === b2.return || b2.return === a)
          return true;
        b2 = b2.return;
      }
      b2.sibling.return = b2.return;
      b2 = b2.sibling;
    }
  }
  return true;
}
function Dk(a, b2) {
  b2 &= ~sk;
  b2 &= ~rk;
  a.suspendedLanes |= b2;
  a.pingedLanes &= ~b2;
  for (a = a.expirationTimes; 0 < b2; ) {
    var c2 = 31 - oc(b2), d2 = 1 << c2;
    a[c2] = -1;
    b2 &= ~d2;
  }
}
function Fk(a) {
  if (0 !== (K & 6))
    throw Error(p$1(327));
  Ik();
  var b2 = uc(a, 0);
  if (0 === (b2 & 1))
    return Ek(a, B()), null;
  var c2 = Jk(a, b2);
  if (0 !== a.tag && 2 === c2) {
    var d2 = xc(a);
    0 !== d2 && (b2 = d2, c2 = Ok(a, d2));
  }
  if (1 === c2)
    throw c2 = qk, Lk(a, 0), Dk(a, b2), Ek(a, B()), c2;
  if (6 === c2)
    throw Error(p$1(345));
  a.finishedWork = a.current.alternate;
  a.finishedLanes = b2;
  Qk(a, uk, vk);
  Ek(a, B());
  return null;
}
function Rk(a, b2) {
  var c2 = K;
  K |= 1;
  try {
    return a(b2);
  } finally {
    K = c2, 0 === K && (Hj = B() + 500, fg && jg());
  }
}
function Sk(a) {
  null !== xk && 0 === xk.tag && 0 === (K & 6) && Ik();
  var b2 = K;
  K |= 1;
  var c2 = pk.transition, d2 = C;
  try {
    if (pk.transition = null, C = 1, a)
      return a();
  } finally {
    C = d2, pk.transition = c2, K = b2, 0 === (K & 6) && jg();
  }
}
function Ij() {
  gj = fj.current;
  E(fj);
}
function Lk(a, b2) {
  a.finishedWork = null;
  a.finishedLanes = 0;
  var c2 = a.timeoutHandle;
  -1 !== c2 && (a.timeoutHandle = -1, Gf(c2));
  if (null !== Y$1)
    for (c2 = Y$1.return; null !== c2; ) {
      var d2 = c2;
      wg(d2);
      switch (d2.tag) {
        case 1:
          d2 = d2.type.childContextTypes;
          null !== d2 && void 0 !== d2 && $f();
          break;
        case 3:
          Jh();
          E(Wf);
          E(H);
          Oh();
          break;
        case 5:
          Lh(d2);
          break;
        case 4:
          Jh();
          break;
        case 13:
          E(M);
          break;
        case 19:
          E(M);
          break;
        case 10:
          Rg(d2.type._context);
          break;
        case 22:
        case 23:
          Ij();
      }
      c2 = c2.return;
    }
  R = a;
  Y$1 = a = wh(a.current, null);
  Z = gj = b2;
  T$1 = 0;
  qk = null;
  sk = rk = hh = 0;
  uk = tk = null;
  if (null !== Wg) {
    for (b2 = 0; b2 < Wg.length; b2++)
      if (c2 = Wg[b2], d2 = c2.interleaved, null !== d2) {
        c2.interleaved = null;
        var e = d2.next, f2 = c2.pending;
        if (null !== f2) {
          var g2 = f2.next;
          f2.next = e;
          d2.next = g2;
        }
        c2.pending = d2;
      }
    Wg = null;
  }
  return a;
}
function Nk(a, b2) {
  do {
    var c2 = Y$1;
    try {
      Qg();
      Ph.current = ai;
      if (Sh) {
        for (var d2 = N.memoizedState; null !== d2; ) {
          var e = d2.queue;
          null !== e && (e.pending = null);
          d2 = d2.next;
        }
        Sh = false;
      }
      Rh = 0;
      P = O = N = null;
      Th = false;
      Uh = 0;
      ok.current = null;
      if (null === c2 || null === c2.return) {
        T$1 = 1;
        qk = b2;
        Y$1 = null;
        break;
      }
      a: {
        var f2 = a, g2 = c2.return, h2 = c2, k2 = b2;
        b2 = Z;
        h2.flags |= 32768;
        if (null !== k2 && "object" === typeof k2 && "function" === typeof k2.then) {
          var l2 = k2, m2 = h2, q2 = m2.tag;
          if (0 === (m2.mode & 1) && (0 === q2 || 11 === q2 || 15 === q2)) {
            var r2 = m2.alternate;
            r2 ? (m2.updateQueue = r2.updateQueue, m2.memoizedState = r2.memoizedState, m2.lanes = r2.lanes) : (m2.updateQueue = null, m2.memoizedState = null);
          }
          var y2 = Vi(g2);
          if (null !== y2) {
            y2.flags &= -257;
            Wi(y2, g2, h2, f2, b2);
            y2.mode & 1 && Ti(f2, l2, b2);
            b2 = y2;
            k2 = l2;
            var n2 = b2.updateQueue;
            if (null === n2) {
              var t2 = /* @__PURE__ */ new Set();
              t2.add(k2);
              b2.updateQueue = t2;
            } else
              n2.add(k2);
            break a;
          } else {
            if (0 === (b2 & 1)) {
              Ti(f2, l2, b2);
              uj();
              break a;
            }
            k2 = Error(p$1(426));
          }
        } else if (I$1 && h2.mode & 1) {
          var J2 = Vi(g2);
          if (null !== J2) {
            0 === (J2.flags & 65536) && (J2.flags |= 256);
            Wi(J2, g2, h2, f2, b2);
            Jg(Ki(k2, h2));
            break a;
          }
        }
        f2 = k2 = Ki(k2, h2);
        4 !== T$1 && (T$1 = 2);
        null === tk ? tk = [f2] : tk.push(f2);
        f2 = g2;
        do {
          switch (f2.tag) {
            case 3:
              f2.flags |= 65536;
              b2 &= -b2;
              f2.lanes |= b2;
              var x2 = Oi(f2, k2, b2);
              fh(f2, x2);
              break a;
            case 1:
              h2 = k2;
              var w2 = f2.type, u2 = f2.stateNode;
              if (0 === (f2.flags & 128) && ("function" === typeof w2.getDerivedStateFromError || null !== u2 && "function" === typeof u2.componentDidCatch && (null === Si || !Si.has(u2)))) {
                f2.flags |= 65536;
                b2 &= -b2;
                f2.lanes |= b2;
                var F2 = Ri(f2, h2, b2);
                fh(f2, F2);
                break a;
              }
          }
          f2 = f2.return;
        } while (null !== f2);
      }
      Tk(c2);
    } catch (na) {
      b2 = na;
      Y$1 === c2 && null !== c2 && (Y$1 = c2 = c2.return);
      continue;
    }
    break;
  } while (1);
}
function Kk() {
  var a = nk.current;
  nk.current = ai;
  return null === a ? ai : a;
}
function uj() {
  if (0 === T$1 || 3 === T$1 || 2 === T$1)
    T$1 = 4;
  null === R || 0 === (hh & 268435455) && 0 === (rk & 268435455) || Dk(R, Z);
}
function Jk(a, b2) {
  var c2 = K;
  K |= 2;
  var d2 = Kk();
  if (R !== a || Z !== b2)
    vk = null, Lk(a, b2);
  do
    try {
      Uk();
      break;
    } catch (e) {
      Nk(a, e);
    }
  while (1);
  Qg();
  K = c2;
  nk.current = d2;
  if (null !== Y$1)
    throw Error(p$1(261));
  R = null;
  Z = 0;
  return T$1;
}
function Uk() {
  for (; null !== Y$1; )
    Vk(Y$1);
}
function Mk() {
  for (; null !== Y$1 && !cc(); )
    Vk(Y$1);
}
function Vk(a) {
  var b2 = Wk(a.alternate, a, gj);
  a.memoizedProps = a.pendingProps;
  null === b2 ? Tk(a) : Y$1 = b2;
  ok.current = null;
}
function Tk(a) {
  var b2 = a;
  do {
    var c2 = b2.alternate;
    a = b2.return;
    if (0 === (b2.flags & 32768)) {
      if (c2 = Fj(c2, b2, gj), null !== c2) {
        Y$1 = c2;
        return;
      }
    } else {
      c2 = Jj(c2, b2);
      if (null !== c2) {
        c2.flags &= 32767;
        Y$1 = c2;
        return;
      }
      if (null !== a)
        a.flags |= 32768, a.subtreeFlags = 0, a.deletions = null;
      else {
        T$1 = 6;
        Y$1 = null;
        return;
      }
    }
    b2 = b2.sibling;
    if (null !== b2) {
      Y$1 = b2;
      return;
    }
    Y$1 = b2 = a;
  } while (null !== b2);
  0 === T$1 && (T$1 = 5);
}
function Qk(a, b2, c2) {
  var d2 = C, e = pk.transition;
  try {
    pk.transition = null, C = 1, Xk(a, b2, c2, d2);
  } finally {
    pk.transition = e, C = d2;
  }
  return null;
}
function Xk(a, b2, c2, d2) {
  do
    Ik();
  while (null !== xk);
  if (0 !== (K & 6))
    throw Error(p$1(327));
  c2 = a.finishedWork;
  var e = a.finishedLanes;
  if (null === c2)
    return null;
  a.finishedWork = null;
  a.finishedLanes = 0;
  if (c2 === a.current)
    throw Error(p$1(177));
  a.callbackNode = null;
  a.callbackPriority = 0;
  var f2 = c2.lanes | c2.childLanes;
  Bc(a, f2);
  a === R && (Y$1 = R = null, Z = 0);
  0 === (c2.subtreeFlags & 2064) && 0 === (c2.flags & 2064) || wk || (wk = true, Gk(hc, function() {
    Ik();
    return null;
  }));
  f2 = 0 !== (c2.flags & 15990);
  if (0 !== (c2.subtreeFlags & 15990) || f2) {
    f2 = pk.transition;
    pk.transition = null;
    var g2 = C;
    C = 1;
    var h2 = K;
    K |= 4;
    ok.current = null;
    Pj(a, c2);
    ek(c2, a);
    Oe(Df);
    dd = !!Cf;
    Df = Cf = null;
    a.current = c2;
    ik(c2);
    dc();
    K = h2;
    C = g2;
    pk.transition = f2;
  } else
    a.current = c2;
  wk && (wk = false, xk = a, yk = e);
  f2 = a.pendingLanes;
  0 === f2 && (Si = null);
  mc(c2.stateNode);
  Ek(a, B());
  if (null !== b2)
    for (d2 = a.onRecoverableError, c2 = 0; c2 < b2.length; c2++)
      e = b2[c2], d2(e.value, { componentStack: e.stack, digest: e.digest });
  if (Pi)
    throw Pi = false, a = Qi, Qi = null, a;
  0 !== (yk & 1) && 0 !== a.tag && Ik();
  f2 = a.pendingLanes;
  0 !== (f2 & 1) ? a === Ak ? zk++ : (zk = 0, Ak = a) : zk = 0;
  jg();
  return null;
}
function Ik() {
  if (null !== xk) {
    var a = Dc(yk), b2 = pk.transition, c2 = C;
    try {
      pk.transition = null;
      C = 16 > a ? 16 : a;
      if (null === xk)
        var d2 = false;
      else {
        a = xk;
        xk = null;
        yk = 0;
        if (0 !== (K & 6))
          throw Error(p$1(331));
        var e = K;
        K |= 4;
        for (V$1 = a.current; null !== V$1; ) {
          var f2 = V$1, g2 = f2.child;
          if (0 !== (V$1.flags & 16)) {
            var h2 = f2.deletions;
            if (null !== h2) {
              for (var k2 = 0; k2 < h2.length; k2++) {
                var l2 = h2[k2];
                for (V$1 = l2; null !== V$1; ) {
                  var m2 = V$1;
                  switch (m2.tag) {
                    case 0:
                    case 11:
                    case 15:
                      Qj(8, m2, f2);
                  }
                  var q2 = m2.child;
                  if (null !== q2)
                    q2.return = m2, V$1 = q2;
                  else
                    for (; null !== V$1; ) {
                      m2 = V$1;
                      var r2 = m2.sibling, y2 = m2.return;
                      Tj(m2);
                      if (m2 === l2) {
                        V$1 = null;
                        break;
                      }
                      if (null !== r2) {
                        r2.return = y2;
                        V$1 = r2;
                        break;
                      }
                      V$1 = y2;
                    }
                }
              }
              var n2 = f2.alternate;
              if (null !== n2) {
                var t2 = n2.child;
                if (null !== t2) {
                  n2.child = null;
                  do {
                    var J2 = t2.sibling;
                    t2.sibling = null;
                    t2 = J2;
                  } while (null !== t2);
                }
              }
              V$1 = f2;
            }
          }
          if (0 !== (f2.subtreeFlags & 2064) && null !== g2)
            g2.return = f2, V$1 = g2;
          else
            b:
              for (; null !== V$1; ) {
                f2 = V$1;
                if (0 !== (f2.flags & 2048))
                  switch (f2.tag) {
                    case 0:
                    case 11:
                    case 15:
                      Qj(9, f2, f2.return);
                  }
                var x2 = f2.sibling;
                if (null !== x2) {
                  x2.return = f2.return;
                  V$1 = x2;
                  break b;
                }
                V$1 = f2.return;
              }
        }
        var w2 = a.current;
        for (V$1 = w2; null !== V$1; ) {
          g2 = V$1;
          var u2 = g2.child;
          if (0 !== (g2.subtreeFlags & 2064) && null !== u2)
            u2.return = g2, V$1 = u2;
          else
            b:
              for (g2 = w2; null !== V$1; ) {
                h2 = V$1;
                if (0 !== (h2.flags & 2048))
                  try {
                    switch (h2.tag) {
                      case 0:
                      case 11:
                      case 15:
                        Rj(9, h2);
                    }
                  } catch (na) {
                    W(h2, h2.return, na);
                  }
                if (h2 === g2) {
                  V$1 = null;
                  break b;
                }
                var F2 = h2.sibling;
                if (null !== F2) {
                  F2.return = h2.return;
                  V$1 = F2;
                  break b;
                }
                V$1 = h2.return;
              }
        }
        K = e;
        jg();
        if (lc && "function" === typeof lc.onPostCommitFiberRoot)
          try {
            lc.onPostCommitFiberRoot(kc, a);
          } catch (na) {
          }
        d2 = true;
      }
      return d2;
    } finally {
      C = c2, pk.transition = b2;
    }
  }
  return false;
}
function Yk(a, b2, c2) {
  b2 = Ki(c2, b2);
  b2 = Oi(a, b2, 1);
  a = dh(a, b2, 1);
  b2 = L$1();
  null !== a && (Ac(a, 1, b2), Ek(a, b2));
}
function W(a, b2, c2) {
  if (3 === a.tag)
    Yk(a, a, c2);
  else
    for (; null !== b2; ) {
      if (3 === b2.tag) {
        Yk(b2, a, c2);
        break;
      } else if (1 === b2.tag) {
        var d2 = b2.stateNode;
        if ("function" === typeof b2.type.getDerivedStateFromError || "function" === typeof d2.componentDidCatch && (null === Si || !Si.has(d2))) {
          a = Ki(c2, a);
          a = Ri(b2, a, 1);
          b2 = dh(b2, a, 1);
          a = L$1();
          null !== b2 && (Ac(b2, 1, a), Ek(b2, a));
          break;
        }
      }
      b2 = b2.return;
    }
}
function Ui(a, b2, c2) {
  var d2 = a.pingCache;
  null !== d2 && d2.delete(b2);
  b2 = L$1();
  a.pingedLanes |= a.suspendedLanes & c2;
  R === a && (Z & c2) === c2 && (4 === T$1 || 3 === T$1 && (Z & 130023424) === Z && 500 > B() - gk ? Lk(a, 0) : sk |= c2);
  Ek(a, b2);
}
function Zk(a, b2) {
  0 === b2 && (0 === (a.mode & 1) ? b2 = 1 : (b2 = sc, sc <<= 1, 0 === (sc & 130023424) && (sc = 4194304)));
  var c2 = L$1();
  a = Zg(a, b2);
  null !== a && (Ac(a, b2, c2), Ek(a, c2));
}
function vj(a) {
  var b2 = a.memoizedState, c2 = 0;
  null !== b2 && (c2 = b2.retryLane);
  Zk(a, c2);
}
function ck(a, b2) {
  var c2 = 0;
  switch (a.tag) {
    case 13:
      var d2 = a.stateNode;
      var e = a.memoizedState;
      null !== e && (c2 = e.retryLane);
      break;
    case 19:
      d2 = a.stateNode;
      break;
    default:
      throw Error(p$1(314));
  }
  null !== d2 && d2.delete(b2);
  Zk(a, c2);
}
var Wk;
Wk = function(a, b2, c2) {
  if (null !== a)
    if (a.memoizedProps !== b2.pendingProps || Wf.current)
      Ug = true;
    else {
      if (0 === (a.lanes & c2) && 0 === (b2.flags & 128))
        return Ug = false, zj(a, b2, c2);
      Ug = 0 !== (a.flags & 131072) ? true : false;
    }
  else
    Ug = false, I$1 && 0 !== (b2.flags & 1048576) && ug(b2, ng, b2.index);
  b2.lanes = 0;
  switch (b2.tag) {
    case 2:
      var d2 = b2.type;
      jj(a, b2);
      a = b2.pendingProps;
      var e = Yf(b2, H.current);
      Tg(b2, c2);
      e = Xh(null, b2, d2, a, e, c2);
      var f2 = bi();
      b2.flags |= 1;
      "object" === typeof e && null !== e && "function" === typeof e.render && void 0 === e.$$typeof ? (b2.tag = 1, b2.memoizedState = null, b2.updateQueue = null, Zf(d2) ? (f2 = true, cg(b2)) : f2 = false, b2.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null, ah(b2), e.updater = nh, b2.stateNode = e, e._reactInternals = b2, rh(b2, d2, a, c2), b2 = kj(null, b2, d2, true, f2, c2)) : (b2.tag = 0, I$1 && f2 && vg(b2), Yi(null, b2, e, c2), b2 = b2.child);
      return b2;
    case 16:
      d2 = b2.elementType;
      a: {
        jj(a, b2);
        a = b2.pendingProps;
        e = d2._init;
        d2 = e(d2._payload);
        b2.type = d2;
        e = b2.tag = $k(d2);
        a = Lg(d2, a);
        switch (e) {
          case 0:
            b2 = dj(null, b2, d2, a, c2);
            break a;
          case 1:
            b2 = ij(null, b2, d2, a, c2);
            break a;
          case 11:
            b2 = Zi(null, b2, d2, a, c2);
            break a;
          case 14:
            b2 = aj(null, b2, d2, Lg(d2.type, a), c2);
            break a;
        }
        throw Error(p$1(
          306,
          d2,
          ""
        ));
      }
      return b2;
    case 0:
      return d2 = b2.type, e = b2.pendingProps, e = b2.elementType === d2 ? e : Lg(d2, e), dj(a, b2, d2, e, c2);
    case 1:
      return d2 = b2.type, e = b2.pendingProps, e = b2.elementType === d2 ? e : Lg(d2, e), ij(a, b2, d2, e, c2);
    case 3:
      a: {
        lj(b2);
        if (null === a)
          throw Error(p$1(387));
        d2 = b2.pendingProps;
        f2 = b2.memoizedState;
        e = f2.element;
        bh(a, b2);
        gh(b2, d2, null, c2);
        var g2 = b2.memoizedState;
        d2 = g2.element;
        if (f2.isDehydrated)
          if (f2 = { element: d2, isDehydrated: false, cache: g2.cache, pendingSuspenseBoundaries: g2.pendingSuspenseBoundaries, transitions: g2.transitions }, b2.updateQueue.baseState = f2, b2.memoizedState = f2, b2.flags & 256) {
            e = Ki(Error(p$1(423)), b2);
            b2 = mj(a, b2, d2, c2, e);
            break a;
          } else if (d2 !== e) {
            e = Ki(Error(p$1(424)), b2);
            b2 = mj(a, b2, d2, c2, e);
            break a;
          } else
            for (yg = Lf(b2.stateNode.containerInfo.firstChild), xg = b2, I$1 = true, zg = null, c2 = Ch(b2, null, d2, c2), b2.child = c2; c2; )
              c2.flags = c2.flags & -3 | 4096, c2 = c2.sibling;
        else {
          Ig();
          if (d2 === e) {
            b2 = $i(a, b2, c2);
            break a;
          }
          Yi(a, b2, d2, c2);
        }
        b2 = b2.child;
      }
      return b2;
    case 5:
      return Kh(b2), null === a && Eg(b2), d2 = b2.type, e = b2.pendingProps, f2 = null !== a ? a.memoizedProps : null, g2 = e.children, Ef(d2, e) ? g2 = null : null !== f2 && Ef(d2, f2) && (b2.flags |= 32), hj(a, b2), Yi(a, b2, g2, c2), b2.child;
    case 6:
      return null === a && Eg(b2), null;
    case 13:
      return pj(a, b2, c2);
    case 4:
      return Ih(b2, b2.stateNode.containerInfo), d2 = b2.pendingProps, null === a ? b2.child = Bh(b2, null, d2, c2) : Yi(a, b2, d2, c2), b2.child;
    case 11:
      return d2 = b2.type, e = b2.pendingProps, e = b2.elementType === d2 ? e : Lg(d2, e), Zi(a, b2, d2, e, c2);
    case 7:
      return Yi(a, b2, b2.pendingProps, c2), b2.child;
    case 8:
      return Yi(a, b2, b2.pendingProps.children, c2), b2.child;
    case 12:
      return Yi(a, b2, b2.pendingProps.children, c2), b2.child;
    case 10:
      a: {
        d2 = b2.type._context;
        e = b2.pendingProps;
        f2 = b2.memoizedProps;
        g2 = e.value;
        G(Mg, d2._currentValue);
        d2._currentValue = g2;
        if (null !== f2)
          if (He(f2.value, g2)) {
            if (f2.children === e.children && !Wf.current) {
              b2 = $i(a, b2, c2);
              break a;
            }
          } else
            for (f2 = b2.child, null !== f2 && (f2.return = b2); null !== f2; ) {
              var h2 = f2.dependencies;
              if (null !== h2) {
                g2 = f2.child;
                for (var k2 = h2.firstContext; null !== k2; ) {
                  if (k2.context === d2) {
                    if (1 === f2.tag) {
                      k2 = ch(-1, c2 & -c2);
                      k2.tag = 2;
                      var l2 = f2.updateQueue;
                      if (null !== l2) {
                        l2 = l2.shared;
                        var m2 = l2.pending;
                        null === m2 ? k2.next = k2 : (k2.next = m2.next, m2.next = k2);
                        l2.pending = k2;
                      }
                    }
                    f2.lanes |= c2;
                    k2 = f2.alternate;
                    null !== k2 && (k2.lanes |= c2);
                    Sg(
                      f2.return,
                      c2,
                      b2
                    );
                    h2.lanes |= c2;
                    break;
                  }
                  k2 = k2.next;
                }
              } else if (10 === f2.tag)
                g2 = f2.type === b2.type ? null : f2.child;
              else if (18 === f2.tag) {
                g2 = f2.return;
                if (null === g2)
                  throw Error(p$1(341));
                g2.lanes |= c2;
                h2 = g2.alternate;
                null !== h2 && (h2.lanes |= c2);
                Sg(g2, c2, b2);
                g2 = f2.sibling;
              } else
                g2 = f2.child;
              if (null !== g2)
                g2.return = f2;
              else
                for (g2 = f2; null !== g2; ) {
                  if (g2 === b2) {
                    g2 = null;
                    break;
                  }
                  f2 = g2.sibling;
                  if (null !== f2) {
                    f2.return = g2.return;
                    g2 = f2;
                    break;
                  }
                  g2 = g2.return;
                }
              f2 = g2;
            }
        Yi(a, b2, e.children, c2);
        b2 = b2.child;
      }
      return b2;
    case 9:
      return e = b2.type, d2 = b2.pendingProps.children, Tg(b2, c2), e = Vg(e), d2 = d2(e), b2.flags |= 1, Yi(a, b2, d2, c2), b2.child;
    case 14:
      return d2 = b2.type, e = Lg(d2, b2.pendingProps), e = Lg(d2.type, e), aj(a, b2, d2, e, c2);
    case 15:
      return cj(a, b2, b2.type, b2.pendingProps, c2);
    case 17:
      return d2 = b2.type, e = b2.pendingProps, e = b2.elementType === d2 ? e : Lg(d2, e), jj(a, b2), b2.tag = 1, Zf(d2) ? (a = true, cg(b2)) : a = false, Tg(b2, c2), ph(b2, d2, e), rh(b2, d2, e, c2), kj(null, b2, d2, true, a, c2);
    case 19:
      return yj(a, b2, c2);
    case 22:
      return ej(a, b2, c2);
  }
  throw Error(p$1(156, b2.tag));
};
function Gk(a, b2) {
  return ac(a, b2);
}
function al(a, b2, c2, d2) {
  this.tag = a;
  this.key = c2;
  this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
  this.index = 0;
  this.ref = null;
  this.pendingProps = b2;
  this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
  this.mode = d2;
  this.subtreeFlags = this.flags = 0;
  this.deletions = null;
  this.childLanes = this.lanes = 0;
  this.alternate = null;
}
function Bg(a, b2, c2, d2) {
  return new al(a, b2, c2, d2);
}
function bj(a) {
  a = a.prototype;
  return !(!a || !a.isReactComponent);
}
function $k(a) {
  if ("function" === typeof a)
    return bj(a) ? 1 : 0;
  if (void 0 !== a && null !== a) {
    a = a.$$typeof;
    if (a === Da)
      return 11;
    if (a === Ga)
      return 14;
  }
  return 2;
}
function wh(a, b2) {
  var c2 = a.alternate;
  null === c2 ? (c2 = Bg(a.tag, b2, a.key, a.mode), c2.elementType = a.elementType, c2.type = a.type, c2.stateNode = a.stateNode, c2.alternate = a, a.alternate = c2) : (c2.pendingProps = b2, c2.type = a.type, c2.flags = 0, c2.subtreeFlags = 0, c2.deletions = null);
  c2.flags = a.flags & 14680064;
  c2.childLanes = a.childLanes;
  c2.lanes = a.lanes;
  c2.child = a.child;
  c2.memoizedProps = a.memoizedProps;
  c2.memoizedState = a.memoizedState;
  c2.updateQueue = a.updateQueue;
  b2 = a.dependencies;
  c2.dependencies = null === b2 ? null : { lanes: b2.lanes, firstContext: b2.firstContext };
  c2.sibling = a.sibling;
  c2.index = a.index;
  c2.ref = a.ref;
  return c2;
}
function yh(a, b2, c2, d2, e, f2) {
  var g2 = 2;
  d2 = a;
  if ("function" === typeof a)
    bj(a) && (g2 = 1);
  else if ("string" === typeof a)
    g2 = 5;
  else
    a:
      switch (a) {
        case ya:
          return Ah(c2.children, e, f2, b2);
        case za:
          g2 = 8;
          e |= 8;
          break;
        case Aa:
          return a = Bg(12, c2, b2, e | 2), a.elementType = Aa, a.lanes = f2, a;
        case Ea:
          return a = Bg(13, c2, b2, e), a.elementType = Ea, a.lanes = f2, a;
        case Fa:
          return a = Bg(19, c2, b2, e), a.elementType = Fa, a.lanes = f2, a;
        case Ia:
          return qj(c2, e, f2, b2);
        default:
          if ("object" === typeof a && null !== a)
            switch (a.$$typeof) {
              case Ba:
                g2 = 10;
                break a;
              case Ca:
                g2 = 9;
                break a;
              case Da:
                g2 = 11;
                break a;
              case Ga:
                g2 = 14;
                break a;
              case Ha:
                g2 = 16;
                d2 = null;
                break a;
            }
          throw Error(p$1(130, null == a ? a : typeof a, ""));
      }
  b2 = Bg(g2, c2, b2, e);
  b2.elementType = a;
  b2.type = d2;
  b2.lanes = f2;
  return b2;
}
function Ah(a, b2, c2, d2) {
  a = Bg(7, a, d2, b2);
  a.lanes = c2;
  return a;
}
function qj(a, b2, c2, d2) {
  a = Bg(22, a, d2, b2);
  a.elementType = Ia;
  a.lanes = c2;
  a.stateNode = { isHidden: false };
  return a;
}
function xh(a, b2, c2) {
  a = Bg(6, a, null, b2);
  a.lanes = c2;
  return a;
}
function zh(a, b2, c2) {
  b2 = Bg(4, null !== a.children ? a.children : [], a.key, b2);
  b2.lanes = c2;
  b2.stateNode = { containerInfo: a.containerInfo, pendingChildren: null, implementation: a.implementation };
  return b2;
}
function bl(a, b2, c2, d2, e) {
  this.tag = b2;
  this.containerInfo = a;
  this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
  this.timeoutHandle = -1;
  this.callbackNode = this.pendingContext = this.context = null;
  this.callbackPriority = 0;
  this.eventTimes = zc(0);
  this.expirationTimes = zc(-1);
  this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
  this.entanglements = zc(0);
  this.identifierPrefix = d2;
  this.onRecoverableError = e;
  this.mutableSourceEagerHydrationData = null;
}
function cl(a, b2, c2, d2, e, f2, g2, h2, k2) {
  a = new bl(a, b2, c2, h2, k2);
  1 === b2 ? (b2 = 1, true === f2 && (b2 |= 8)) : b2 = 0;
  f2 = Bg(3, null, null, b2);
  a.current = f2;
  f2.stateNode = a;
  f2.memoizedState = { element: d2, isDehydrated: c2, cache: null, transitions: null, pendingSuspenseBoundaries: null };
  ah(f2);
  return a;
}
function dl(a, b2, c2) {
  var d2 = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
  return { $$typeof: wa, key: null == d2 ? null : "" + d2, children: a, containerInfo: b2, implementation: c2 };
}
function el(a) {
  if (!a)
    return Vf;
  a = a._reactInternals;
  a: {
    if (Vb(a) !== a || 1 !== a.tag)
      throw Error(p$1(170));
    var b2 = a;
    do {
      switch (b2.tag) {
        case 3:
          b2 = b2.stateNode.context;
          break a;
        case 1:
          if (Zf(b2.type)) {
            b2 = b2.stateNode.__reactInternalMemoizedMergedChildContext;
            break a;
          }
      }
      b2 = b2.return;
    } while (null !== b2);
    throw Error(p$1(171));
  }
  if (1 === a.tag) {
    var c2 = a.type;
    if (Zf(c2))
      return bg(a, c2, b2);
  }
  return b2;
}
function fl(a, b2, c2, d2, e, f2, g2, h2, k2) {
  a = cl(c2, d2, true, a, e, f2, g2, h2, k2);
  a.context = el(null);
  c2 = a.current;
  d2 = L$1();
  e = lh(c2);
  f2 = ch(d2, e);
  f2.callback = void 0 !== b2 && null !== b2 ? b2 : null;
  dh(c2, f2, e);
  a.current.lanes = e;
  Ac(a, e, d2);
  Ek(a, d2);
  return a;
}
function gl(a, b2, c2, d2) {
  var e = b2.current, f2 = L$1(), g2 = lh(e);
  c2 = el(c2);
  null === b2.context ? b2.context = c2 : b2.pendingContext = c2;
  b2 = ch(f2, g2);
  b2.payload = { element: a };
  d2 = void 0 === d2 ? null : d2;
  null !== d2 && (b2.callback = d2);
  a = dh(e, b2, g2);
  null !== a && (mh(a, e, g2, f2), eh(a, e, g2));
  return g2;
}
function hl(a) {
  a = a.current;
  if (!a.child)
    return null;
  switch (a.child.tag) {
    case 5:
      return a.child.stateNode;
    default:
      return a.child.stateNode;
  }
}
function il(a, b2) {
  a = a.memoizedState;
  if (null !== a && null !== a.dehydrated) {
    var c2 = a.retryLane;
    a.retryLane = 0 !== c2 && c2 < b2 ? c2 : b2;
  }
}
function jl(a, b2) {
  il(a, b2);
  (a = a.alternate) && il(a, b2);
}
function kl() {
  return null;
}
var ll = "function" === typeof reportError ? reportError : function(a) {
  console.error(a);
};
function ml(a) {
  this._internalRoot = a;
}
nl.prototype.render = ml.prototype.render = function(a) {
  var b2 = this._internalRoot;
  if (null === b2)
    throw Error(p$1(409));
  gl(a, b2, null, null);
};
nl.prototype.unmount = ml.prototype.unmount = function() {
  var a = this._internalRoot;
  if (null !== a) {
    this._internalRoot = null;
    var b2 = a.containerInfo;
    Sk(function() {
      gl(null, a, null, null);
    });
    b2[uf] = null;
  }
};
function nl(a) {
  this._internalRoot = a;
}
nl.prototype.unstable_scheduleHydration = function(a) {
  if (a) {
    var b2 = Hc();
    a = { blockedOn: null, target: a, priority: b2 };
    for (var c2 = 0; c2 < Qc.length && 0 !== b2 && b2 < Qc[c2].priority; c2++)
      ;
    Qc.splice(c2, 0, a);
    0 === c2 && Vc(a);
  }
};
function ol(a) {
  return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType);
}
function pl(a) {
  return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
}
function ql() {
}
function rl(a, b2, c2, d2, e) {
  if (e) {
    if ("function" === typeof d2) {
      var f2 = d2;
      d2 = function() {
        var a2 = hl(g2);
        f2.call(a2);
      };
    }
    var g2 = fl(b2, d2, a, 0, null, false, false, "", ql);
    a._reactRootContainer = g2;
    a[uf] = g2.current;
    sf(8 === a.nodeType ? a.parentNode : a);
    Sk();
    return g2;
  }
  for (; e = a.lastChild; )
    a.removeChild(e);
  if ("function" === typeof d2) {
    var h2 = d2;
    d2 = function() {
      var a2 = hl(k2);
      h2.call(a2);
    };
  }
  var k2 = cl(a, 0, false, null, null, false, false, "", ql);
  a._reactRootContainer = k2;
  a[uf] = k2.current;
  sf(8 === a.nodeType ? a.parentNode : a);
  Sk(function() {
    gl(b2, k2, c2, d2);
  });
  return k2;
}
function sl(a, b2, c2, d2, e) {
  var f2 = c2._reactRootContainer;
  if (f2) {
    var g2 = f2;
    if ("function" === typeof e) {
      var h2 = e;
      e = function() {
        var a2 = hl(g2);
        h2.call(a2);
      };
    }
    gl(b2, g2, a, e);
  } else
    g2 = rl(c2, b2, a, e, d2);
  return hl(g2);
}
Ec = function(a) {
  switch (a.tag) {
    case 3:
      var b2 = a.stateNode;
      if (b2.current.memoizedState.isDehydrated) {
        var c2 = tc(b2.pendingLanes);
        0 !== c2 && (Cc(b2, c2 | 1), Ek(b2, B()), 0 === (K & 6) && (Hj = B() + 500, jg()));
      }
      break;
    case 13:
      Sk(function() {
        var b3 = Zg(a, 1);
        if (null !== b3) {
          var c3 = L$1();
          mh(b3, a, 1, c3);
        }
      }), jl(a, 1);
  }
};
Fc = function(a) {
  if (13 === a.tag) {
    var b2 = Zg(a, 134217728);
    if (null !== b2) {
      var c2 = L$1();
      mh(b2, a, 134217728, c2);
    }
    jl(a, 134217728);
  }
};
Gc = function(a) {
  if (13 === a.tag) {
    var b2 = lh(a), c2 = Zg(a, b2);
    if (null !== c2) {
      var d2 = L$1();
      mh(c2, a, b2, d2);
    }
    jl(a, b2);
  }
};
Hc = function() {
  return C;
};
Ic = function(a, b2) {
  var c2 = C;
  try {
    return C = a, b2();
  } finally {
    C = c2;
  }
};
yb = function(a, b2, c2) {
  switch (b2) {
    case "input":
      bb(a, c2);
      b2 = c2.name;
      if ("radio" === c2.type && null != b2) {
        for (c2 = a; c2.parentNode; )
          c2 = c2.parentNode;
        c2 = c2.querySelectorAll("input[name=" + JSON.stringify("" + b2) + '][type="radio"]');
        for (b2 = 0; b2 < c2.length; b2++) {
          var d2 = c2[b2];
          if (d2 !== a && d2.form === a.form) {
            var e = Db(d2);
            if (!e)
              throw Error(p$1(90));
            Wa(d2);
            bb(d2, e);
          }
        }
      }
      break;
    case "textarea":
      ib(a, c2);
      break;
    case "select":
      b2 = c2.value, null != b2 && fb(a, !!c2.multiple, b2, false);
  }
};
Gb = Rk;
Hb = Sk;
var tl = { usingClientEntryPoint: false, Events: [Cb, ue, Db, Eb, Fb, Rk] }, ul = { findFiberByHostInstance: Wc, bundleType: 0, version: "18.2.0", rendererPackageName: "react-dom" };
var vl = { bundleType: ul.bundleType, version: ul.version, rendererPackageName: ul.rendererPackageName, rendererConfig: ul.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ua.ReactCurrentDispatcher, findHostInstanceByFiber: function(a) {
  a = Zb(a);
  return null === a ? null : a.stateNode;
}, findFiberByHostInstance: ul.findFiberByHostInstance || kl, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.2.0-next-9e3b772b8-20220608" };
if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
  var wl = __REACT_DEVTOOLS_GLOBAL_HOOK__;
  if (!wl.isDisabled && wl.supportsFiber)
    try {
      kc = wl.inject(vl), lc = wl;
    } catch (a) {
    }
}
reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = tl;
reactDom_production_min.createPortal = function(a, b2) {
  var c2 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
  if (!ol(b2))
    throw Error(p$1(200));
  return dl(a, b2, null, c2);
};
reactDom_production_min.createRoot = function(a, b2) {
  if (!ol(a))
    throw Error(p$1(299));
  var c2 = false, d2 = "", e = ll;
  null !== b2 && void 0 !== b2 && (true === b2.unstable_strictMode && (c2 = true), void 0 !== b2.identifierPrefix && (d2 = b2.identifierPrefix), void 0 !== b2.onRecoverableError && (e = b2.onRecoverableError));
  b2 = cl(a, 1, false, null, null, c2, false, d2, e);
  a[uf] = b2.current;
  sf(8 === a.nodeType ? a.parentNode : a);
  return new ml(b2);
};
reactDom_production_min.findDOMNode = function(a) {
  if (null == a)
    return null;
  if (1 === a.nodeType)
    return a;
  var b2 = a._reactInternals;
  if (void 0 === b2) {
    if ("function" === typeof a.render)
      throw Error(p$1(188));
    a = Object.keys(a).join(",");
    throw Error(p$1(268, a));
  }
  a = Zb(b2);
  a = null === a ? null : a.stateNode;
  return a;
};
reactDom_production_min.flushSync = function(a) {
  return Sk(a);
};
reactDom_production_min.hydrate = function(a, b2, c2) {
  if (!pl(b2))
    throw Error(p$1(200));
  return sl(null, a, b2, true, c2);
};
reactDom_production_min.hydrateRoot = function(a, b2, c2) {
  if (!ol(a))
    throw Error(p$1(405));
  var d2 = null != c2 && c2.hydratedSources || null, e = false, f2 = "", g2 = ll;
  null !== c2 && void 0 !== c2 && (true === c2.unstable_strictMode && (e = true), void 0 !== c2.identifierPrefix && (f2 = c2.identifierPrefix), void 0 !== c2.onRecoverableError && (g2 = c2.onRecoverableError));
  b2 = fl(b2, null, a, 1, null != c2 ? c2 : null, e, false, f2, g2);
  a[uf] = b2.current;
  sf(a);
  if (d2)
    for (a = 0; a < d2.length; a++)
      c2 = d2[a], e = c2._getVersion, e = e(c2._source), null == b2.mutableSourceEagerHydrationData ? b2.mutableSourceEagerHydrationData = [c2, e] : b2.mutableSourceEagerHydrationData.push(
        c2,
        e
      );
  return new nl(b2);
};
reactDom_production_min.render = function(a, b2, c2) {
  if (!pl(b2))
    throw Error(p$1(200));
  return sl(null, a, b2, false, c2);
};
reactDom_production_min.unmountComponentAtNode = function(a) {
  if (!pl(a))
    throw Error(p$1(40));
  return a._reactRootContainer ? (Sk(function() {
    sl(null, null, a, false, function() {
      a._reactRootContainer = null;
      a[uf] = null;
    });
  }), true) : false;
};
reactDom_production_min.unstable_batchedUpdates = Rk;
reactDom_production_min.unstable_renderSubtreeIntoContainer = function(a, b2, c2, d2) {
  if (!pl(c2))
    throw Error(p$1(200));
  if (null == a || void 0 === a._reactInternals)
    throw Error(p$1(38));
  return sl(a, b2, c2, false, d2);
};
reactDom_production_min.version = "18.2.0-next-9e3b772b8-20220608";
function checkDCE() {
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
    return;
  }
  try {
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    console.error(err);
  }
}
{
  checkDCE();
  reactDom.exports = reactDom_production_min;
}
var reactDomExports = reactDom.exports;
var m$1 = reactDomExports;
{
  client.createRoot = m$1.createRoot;
  client.hydrateRoot = m$1.hydrateRoot;
}
/**
 * @remix-run/router v1.16.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
function _extends$1() {
  _extends$1 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$1.apply(this, arguments);
}
var Action;
(function(Action2) {
  Action2["Pop"] = "POP";
  Action2["Push"] = "PUSH";
  Action2["Replace"] = "REPLACE";
})(Action || (Action = {}));
const PopStateEventType = "popstate";
function createHashHistory(options) {
  if (options === void 0) {
    options = {};
  }
  function createHashLocation(window2, globalHistory) {
    let {
      pathname = "/",
      search = "",
      hash = ""
    } = parsePath(window2.location.hash.substr(1));
    if (!pathname.startsWith("/") && !pathname.startsWith(".")) {
      pathname = "/" + pathname;
    }
    return createLocation(
      "",
      {
        pathname,
        search,
        hash
      },
      // state defaults to `null` because `window.history.state` does
      globalHistory.state && globalHistory.state.usr || null,
      globalHistory.state && globalHistory.state.key || "default"
    );
  }
  function createHashHref(window2, to) {
    let base = window2.document.querySelector("base");
    let href = "";
    if (base && base.getAttribute("href")) {
      let url = window2.location.href;
      let hashIndex = url.indexOf("#");
      href = hashIndex === -1 ? url : url.slice(0, hashIndex);
    }
    return href + "#" + (typeof to === "string" ? to : createPath(to));
  }
  function validateHashLocation(location, to) {
    warning(location.pathname.charAt(0) === "/", "relative pathnames are not supported in hash history.push(" + JSON.stringify(to) + ")");
  }
  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);
}
function invariant(value2, message) {
  if (value2 === false || value2 === null || typeof value2 === "undefined") {
    throw new Error(message);
  }
}
function warning(cond, message) {
  if (!cond) {
    if (typeof console !== "undefined")
      console.warn(message);
    try {
      throw new Error(message);
    } catch (e) {
    }
  }
}
function createKey() {
  return Math.random().toString(36).substr(2, 8);
}
function getHistoryState(location, index2) {
  return {
    usr: location.state,
    key: location.key,
    idx: index2
  };
}
function createLocation(current, to, state, key) {
  if (state === void 0) {
    state = null;
  }
  let location = _extends$1({
    pathname: typeof current === "string" ? current : current.pathname,
    search: "",
    hash: ""
  }, typeof to === "string" ? parsePath(to) : to, {
    state,
    // TODO: This could be cleaned up.  push/replace should probably just take
    // full Locations now and avoid the need to run through this flow at all
    // But that's a pretty big refactor to the current test suite so going to
    // keep as is for the time being and just let any incoming keys take precedence
    key: to && to.key || key || createKey()
  });
  return location;
}
function createPath(_ref) {
  let {
    pathname = "/",
    search = "",
    hash = ""
  } = _ref;
  if (search && search !== "?")
    pathname += search.charAt(0) === "?" ? search : "?" + search;
  if (hash && hash !== "#")
    pathname += hash.charAt(0) === "#" ? hash : "#" + hash;
  return pathname;
}
function parsePath(path) {
  let parsedPath = {};
  if (path) {
    let hashIndex = path.indexOf("#");
    if (hashIndex >= 0) {
      parsedPath.hash = path.substr(hashIndex);
      path = path.substr(0, hashIndex);
    }
    let searchIndex = path.indexOf("?");
    if (searchIndex >= 0) {
      parsedPath.search = path.substr(searchIndex);
      path = path.substr(0, searchIndex);
    }
    if (path) {
      parsedPath.pathname = path;
    }
  }
  return parsedPath;
}
function getUrlBasedHistory(getLocation, createHref, validateLocation, options) {
  if (options === void 0) {
    options = {};
  }
  let {
    window: window2 = document.defaultView,
    v5Compat = false
  } = options;
  let globalHistory = window2.history;
  let action = Action.Pop;
  let listener = null;
  let index2 = getIndex();
  if (index2 == null) {
    index2 = 0;
    globalHistory.replaceState(_extends$1({}, globalHistory.state, {
      idx: index2
    }), "");
  }
  function getIndex() {
    let state = globalHistory.state || {
      idx: null
    };
    return state.idx;
  }
  function handlePop() {
    action = Action.Pop;
    let nextIndex = getIndex();
    let delta = nextIndex == null ? null : nextIndex - index2;
    index2 = nextIndex;
    if (listener) {
      listener({
        action,
        location: history.location,
        delta
      });
    }
  }
  function push(to, state) {
    action = Action.Push;
    let location = createLocation(history.location, to, state);
    if (validateLocation)
      validateLocation(location, to);
    index2 = getIndex() + 1;
    let historyState = getHistoryState(location, index2);
    let url = history.createHref(location);
    try {
      globalHistory.pushState(historyState, "", url);
    } catch (error) {
      if (error instanceof DOMException && error.name === "DataCloneError") {
        throw error;
      }
      window2.location.assign(url);
    }
    if (v5Compat && listener) {
      listener({
        action,
        location: history.location,
        delta: 1
      });
    }
  }
  function replace(to, state) {
    action = Action.Replace;
    let location = createLocation(history.location, to, state);
    if (validateLocation)
      validateLocation(location, to);
    index2 = getIndex();
    let historyState = getHistoryState(location, index2);
    let url = history.createHref(location);
    globalHistory.replaceState(historyState, "", url);
    if (v5Compat && listener) {
      listener({
        action,
        location: history.location,
        delta: 0
      });
    }
  }
  function createURL(to) {
    let base = window2.location.origin !== "null" ? window2.location.origin : window2.location.href;
    let href = typeof to === "string" ? to : createPath(to);
    href = href.replace(/ $/, "%20");
    invariant(base, "No window.location.(origin|href) available to create URL for href: " + href);
    return new URL(href, base);
  }
  let history = {
    get action() {
      return action;
    },
    get location() {
      return getLocation(window2, globalHistory);
    },
    listen(fn) {
      if (listener) {
        throw new Error("A history only accepts one active listener");
      }
      window2.addEventListener(PopStateEventType, handlePop);
      listener = fn;
      return () => {
        window2.removeEventListener(PopStateEventType, handlePop);
        listener = null;
      };
    },
    createHref(to) {
      return createHref(window2, to);
    },
    createURL,
    encodeLocation(to) {
      let url = createURL(to);
      return {
        pathname: url.pathname,
        search: url.search,
        hash: url.hash
      };
    },
    push,
    replace,
    go(n2) {
      return globalHistory.go(n2);
    }
  };
  return history;
}
var ResultType;
(function(ResultType2) {
  ResultType2["data"] = "data";
  ResultType2["deferred"] = "deferred";
  ResultType2["redirect"] = "redirect";
  ResultType2["error"] = "error";
})(ResultType || (ResultType = {}));
function matchRoutes(routes, locationArg, basename) {
  if (basename === void 0) {
    basename = "/";
  }
  let location = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
  let pathname = stripBasename(location.pathname || "/", basename);
  if (pathname == null) {
    return null;
  }
  let branches = flattenRoutes(routes);
  rankRouteBranches(branches);
  let matches = null;
  for (let i2 = 0; matches == null && i2 < branches.length; ++i2) {
    let decoded = decodePath(pathname);
    matches = matchRouteBranch(branches[i2], decoded);
  }
  return matches;
}
function flattenRoutes(routes, branches, parentsMeta, parentPath) {
  if (branches === void 0) {
    branches = [];
  }
  if (parentsMeta === void 0) {
    parentsMeta = [];
  }
  if (parentPath === void 0) {
    parentPath = "";
  }
  let flattenRoute = (route, index2, relativePath) => {
    let meta = {
      relativePath: relativePath === void 0 ? route.path || "" : relativePath,
      caseSensitive: route.caseSensitive === true,
      childrenIndex: index2,
      route
    };
    if (meta.relativePath.startsWith("/")) {
      invariant(meta.relativePath.startsWith(parentPath), 'Absolute route path "' + meta.relativePath + '" nested under path ' + ('"' + parentPath + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes.");
      meta.relativePath = meta.relativePath.slice(parentPath.length);
    }
    let path = joinPaths([parentPath, meta.relativePath]);
    let routesMeta = parentsMeta.concat(meta);
    if (route.children && route.children.length > 0) {
      invariant(
        // Our types know better, but runtime JS may not!
        // @ts-expect-error
        route.index !== true,
        "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + path + '".')
      );
      flattenRoutes(route.children, branches, routesMeta, path);
    }
    if (route.path == null && !route.index) {
      return;
    }
    branches.push({
      path,
      score: computeScore(path, route.index),
      routesMeta
    });
  };
  routes.forEach((route, index2) => {
    var _route$path;
    if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?"))) {
      flattenRoute(route, index2);
    } else {
      for (let exploded of explodeOptionalSegments(route.path)) {
        flattenRoute(route, index2, exploded);
      }
    }
  });
  return branches;
}
function explodeOptionalSegments(path) {
  let segments = path.split("/");
  if (segments.length === 0)
    return [];
  let [first, ...rest] = segments;
  let isOptional = first.endsWith("?");
  let required = first.replace(/\?$/, "");
  if (rest.length === 0) {
    return isOptional ? [required, ""] : [required];
  }
  let restExploded = explodeOptionalSegments(rest.join("/"));
  let result = [];
  result.push(...restExploded.map((subpath) => subpath === "" ? required : [required, subpath].join("/")));
  if (isOptional) {
    result.push(...restExploded);
  }
  return result.map((exploded) => path.startsWith("/") && exploded === "" ? "/" : exploded);
}
function rankRouteBranches(branches) {
  branches.sort((a, b2) => a.score !== b2.score ? b2.score - a.score : compareIndexes(a.routesMeta.map((meta) => meta.childrenIndex), b2.routesMeta.map((meta) => meta.childrenIndex)));
}
const paramRe = /^:[\w-]+$/;
const dynamicSegmentValue = 3;
const indexRouteValue = 2;
const emptySegmentValue = 1;
const staticSegmentValue = 10;
const splatPenalty = -2;
const isSplat = (s2) => s2 === "*";
function computeScore(path, index2) {
  let segments = path.split("/");
  let initialScore = segments.length;
  if (segments.some(isSplat)) {
    initialScore += splatPenalty;
  }
  if (index2) {
    initialScore += indexRouteValue;
  }
  return segments.filter((s2) => !isSplat(s2)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue), initialScore);
}
function compareIndexes(a, b2) {
  let siblings = a.length === b2.length && a.slice(0, -1).every((n2, i2) => n2 === b2[i2]);
  return siblings ? (
    // If two routes are siblings, we should try to match the earlier sibling
    // first. This allows people to have fine-grained control over the matching
    // behavior by simply putting routes with identical paths in the order they
    // want them tried.
    a[a.length - 1] - b2[b2.length - 1]
  ) : (
    // Otherwise, it doesn't really make sense to rank non-siblings by index,
    // so they sort equally.
    0
  );
}
function matchRouteBranch(branch, pathname) {
  let {
    routesMeta
  } = branch;
  let matchedParams = {};
  let matchedPathname = "/";
  let matches = [];
  for (let i2 = 0; i2 < routesMeta.length; ++i2) {
    let meta = routesMeta[i2];
    let end = i2 === routesMeta.length - 1;
    let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
    let match = matchPath({
      path: meta.relativePath,
      caseSensitive: meta.caseSensitive,
      end
    }, remainingPathname);
    if (!match)
      return null;
    Object.assign(matchedParams, match.params);
    let route = meta.route;
    matches.push({
      // TODO: Can this as be avoided?
      params: matchedParams,
      pathname: joinPaths([matchedPathname, match.pathname]),
      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),
      route
    });
    if (match.pathnameBase !== "/") {
      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);
    }
  }
  return matches;
}
function matchPath(pattern, pathname) {
  if (typeof pattern === "string") {
    pattern = {
      path: pattern,
      caseSensitive: false,
      end: true
    };
  }
  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);
  let match = pathname.match(matcher);
  if (!match)
    return null;
  let matchedPathname = match[0];
  let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
  let captureGroups = match.slice(1);
  let params = compiledParams.reduce((memo, _ref, index2) => {
    let {
      paramName,
      isOptional
    } = _ref;
    if (paramName === "*") {
      let splatValue = captureGroups[index2] || "";
      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
    }
    const value2 = captureGroups[index2];
    if (isOptional && !value2) {
      memo[paramName] = void 0;
    } else {
      memo[paramName] = (value2 || "").replace(/%2F/g, "/");
    }
    return memo;
  }, {});
  return {
    params,
    pathname: matchedPathname,
    pathnameBase,
    pattern
  };
}
function compilePath(path, caseSensitive, end) {
  if (caseSensitive === void 0) {
    caseSensitive = false;
  }
  if (end === void 0) {
    end = true;
  }
  warning(path === "*" || !path.endsWith("*") || path.endsWith("/*"), 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".'));
  let params = [];
  let regexpSource = "^" + path.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^${}|()[\]]/g, "\\$&").replace(/\/:([\w-]+)(\?)?/g, (_, paramName, isOptional) => {
    params.push({
      paramName,
      isOptional: isOptional != null
    });
    return isOptional ? "/?([^\\/]+)?" : "/([^\\/]+)";
  });
  if (path.endsWith("*")) {
    params.push({
      paramName: "*"
    });
    regexpSource += path === "*" || path === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$";
  } else if (end) {
    regexpSource += "\\/*$";
  } else if (path !== "" && path !== "/") {
    regexpSource += "(?:(?=\\/|$))";
  } else
    ;
  let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : "i");
  return [matcher, params];
}
function decodePath(value2) {
  try {
    return value2.split("/").map((v2) => decodeURIComponent(v2).replace(/\//g, "%2F")).join("/");
  } catch (error) {
    warning(false, 'The URL path "' + value2 + '" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent ' + ("encoding (" + error + ")."));
    return value2;
  }
}
function stripBasename(pathname, basename) {
  if (basename === "/")
    return pathname;
  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
    return null;
  }
  let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
  let nextChar = pathname.charAt(startIndex);
  if (nextChar && nextChar !== "/") {
    return null;
  }
  return pathname.slice(startIndex) || "/";
}
function resolvePath(to, fromPathname) {
  if (fromPathname === void 0) {
    fromPathname = "/";
  }
  let {
    pathname: toPathname,
    search = "",
    hash = ""
  } = typeof to === "string" ? parsePath(to) : to;
  let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
  return {
    pathname,
    search: normalizeSearch(search),
    hash: normalizeHash(hash)
  };
}
function resolvePathname(relativePath, fromPathname) {
  let segments = fromPathname.replace(/\/+$/, "").split("/");
  let relativeSegments = relativePath.split("/");
  relativeSegments.forEach((segment) => {
    if (segment === "..") {
      if (segments.length > 1)
        segments.pop();
    } else if (segment !== ".") {
      segments.push(segment);
    }
  });
  return segments.length > 1 ? segments.join("/") : "/";
}
function getInvalidPathError(char, field, dest, path) {
  return "Cannot include a '" + char + "' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + 'a string in <Link to="..."> and the router will parse it for you.';
}
function getPathContributingMatches(matches) {
  return matches.filter((match, index2) => index2 === 0 || match.route.path && match.route.path.length > 0);
}
function getResolveToMatches(matches, v7_relativeSplatPath) {
  let pathMatches = getPathContributingMatches(matches);
  if (v7_relativeSplatPath) {
    return pathMatches.map((match, idx) => idx === matches.length - 1 ? match.pathname : match.pathnameBase);
  }
  return pathMatches.map((match) => match.pathnameBase);
}
function resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {
  if (isPathRelative === void 0) {
    isPathRelative = false;
  }
  let to;
  if (typeof toArg === "string") {
    to = parsePath(toArg);
  } else {
    to = _extends$1({}, toArg);
    invariant(!to.pathname || !to.pathname.includes("?"), getInvalidPathError("?", "pathname", "search", to));
    invariant(!to.pathname || !to.pathname.includes("#"), getInvalidPathError("#", "pathname", "hash", to));
    invariant(!to.search || !to.search.includes("#"), getInvalidPathError("#", "search", "hash", to));
  }
  let isEmptyPath = toArg === "" || to.pathname === "";
  let toPathname = isEmptyPath ? "/" : to.pathname;
  let from;
  if (toPathname == null) {
    from = locationPathname;
  } else {
    let routePathnameIndex = routePathnames.length - 1;
    if (!isPathRelative && toPathname.startsWith("..")) {
      let toSegments = toPathname.split("/");
      while (toSegments[0] === "..") {
        toSegments.shift();
        routePathnameIndex -= 1;
      }
      to.pathname = toSegments.join("/");
    }
    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
  }
  let path = resolvePath(to, from);
  let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
  if (!path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
    path.pathname += "/";
  }
  return path;
}
const joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
const normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
const normalizeSearch = (search) => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;
const normalizeHash = (hash) => !hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash;
function isRouteErrorResponse(error) {
  return error != null && typeof error.status === "number" && typeof error.statusText === "string" && typeof error.internal === "boolean" && "data" in error;
}
const validMutationMethodsArr = ["post", "put", "patch", "delete"];
new Set(validMutationMethodsArr);
const validRequestMethodsArr = ["get", ...validMutationMethodsArr];
new Set(validRequestMethodsArr);
/**
 * React Router v6.23.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
const DataRouterContext = /* @__PURE__ */ reactExports.createContext(null);
const DataRouterStateContext = /* @__PURE__ */ reactExports.createContext(null);
const NavigationContext = /* @__PURE__ */ reactExports.createContext(null);
const LocationContext = /* @__PURE__ */ reactExports.createContext(null);
const RouteContext = /* @__PURE__ */ reactExports.createContext({
  outlet: null,
  matches: [],
  isDataRoute: false
});
const RouteErrorContext = /* @__PURE__ */ reactExports.createContext(null);
function useInRouterContext() {
  return reactExports.useContext(LocationContext) != null;
}
function useLocation() {
  !useInRouterContext() ? invariant(false) : void 0;
  return reactExports.useContext(LocationContext).location;
}
function useIsomorphicLayoutEffect$1(cb2) {
  let isStatic = reactExports.useContext(NavigationContext).static;
  if (!isStatic) {
    reactExports.useLayoutEffect(cb2);
  }
}
function useNavigate() {
  let {
    isDataRoute
  } = reactExports.useContext(RouteContext);
  return isDataRoute ? useNavigateStable() : useNavigateUnstable();
}
function useNavigateUnstable() {
  !useInRouterContext() ? invariant(false) : void 0;
  let dataRouterContext = reactExports.useContext(DataRouterContext);
  let {
    basename,
    future,
    navigator: navigator2
  } = reactExports.useContext(NavigationContext);
  let {
    matches
  } = reactExports.useContext(RouteContext);
  let {
    pathname: locationPathname
  } = useLocation();
  let routePathnamesJson = JSON.stringify(getResolveToMatches(matches, future.v7_relativeSplatPath));
  let activeRef = reactExports.useRef(false);
  useIsomorphicLayoutEffect$1(() => {
    activeRef.current = true;
  });
  let navigate = reactExports.useCallback(function(to, options) {
    if (options === void 0) {
      options = {};
    }
    if (!activeRef.current)
      return;
    if (typeof to === "number") {
      navigator2.go(to);
      return;
    }
    let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === "path");
    if (dataRouterContext == null && basename !== "/") {
      path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
    }
    (!!options.replace ? navigator2.replace : navigator2.push)(path, options.state, options);
  }, [basename, navigator2, routePathnamesJson, locationPathname, dataRouterContext]);
  return navigate;
}
function useParams() {
  let {
    matches
  } = reactExports.useContext(RouteContext);
  let routeMatch = matches[matches.length - 1];
  return routeMatch ? routeMatch.params : {};
}
function useRoutes(routes, locationArg) {
  return useRoutesImpl(routes, locationArg);
}
function useRoutesImpl(routes, locationArg, dataRouterState, future) {
  !useInRouterContext() ? invariant(false) : void 0;
  let {
    navigator: navigator2
  } = reactExports.useContext(NavigationContext);
  let {
    matches: parentMatches
  } = reactExports.useContext(RouteContext);
  let routeMatch = parentMatches[parentMatches.length - 1];
  let parentParams = routeMatch ? routeMatch.params : {};
  routeMatch ? routeMatch.pathname : "/";
  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
  routeMatch && routeMatch.route;
  let locationFromContext = useLocation();
  let location;
  if (locationArg) {
    var _parsedLocationArg$pa;
    let parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
    !(parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? invariant(false) : void 0;
    location = parsedLocationArg;
  } else {
    location = locationFromContext;
  }
  let pathname = location.pathname || "/";
  let remainingPathname = pathname;
  if (parentPathnameBase !== "/") {
    let parentSegments = parentPathnameBase.replace(/^\//, "").split("/");
    let segments = pathname.replace(/^\//, "").split("/");
    remainingPathname = "/" + segments.slice(parentSegments.length).join("/");
  }
  let matches = matchRoutes(routes, {
    pathname: remainingPathname
  });
  let renderedMatches = _renderMatches(matches && matches.map((match) => Object.assign({}, match, {
    params: Object.assign({}, parentParams, match.params),
    pathname: joinPaths([
      parentPathnameBase,
      // Re-encode pathnames that were decoded inside matchRoutes
      navigator2.encodeLocation ? navigator2.encodeLocation(match.pathname).pathname : match.pathname
    ]),
    pathnameBase: match.pathnameBase === "/" ? parentPathnameBase : joinPaths([
      parentPathnameBase,
      // Re-encode pathnames that were decoded inside matchRoutes
      navigator2.encodeLocation ? navigator2.encodeLocation(match.pathnameBase).pathname : match.pathnameBase
    ])
  })), parentMatches, dataRouterState, future);
  if (locationArg && renderedMatches) {
    return /* @__PURE__ */ reactExports.createElement(LocationContext.Provider, {
      value: {
        location: _extends({
          pathname: "/",
          search: "",
          hash: "",
          state: null,
          key: "default"
        }, location),
        navigationType: Action.Pop
      }
    }, renderedMatches);
  }
  return renderedMatches;
}
function DefaultErrorComponent() {
  let error = useRouteError();
  let message = isRouteErrorResponse(error) ? error.status + " " + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);
  let stack = error instanceof Error ? error.stack : null;
  let lightgrey = "rgba(200,200,200, 0.5)";
  let preStyles = {
    padding: "0.5rem",
    backgroundColor: lightgrey
  };
  let devInfo = null;
  return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ reactExports.createElement("h3", {
    style: {
      fontStyle: "italic"
    }
  }, message), stack ? /* @__PURE__ */ reactExports.createElement("pre", {
    style: preStyles
  }, stack) : null, devInfo);
}
const defaultErrorElement = /* @__PURE__ */ reactExports.createElement(DefaultErrorComponent, null);
class RenderErrorBoundary extends reactExports.Component {
  constructor(props) {
    super(props);
    this.state = {
      location: props.location,
      revalidation: props.revalidation,
      error: props.error
    };
  }
  static getDerivedStateFromError(error) {
    return {
      error
    };
  }
  static getDerivedStateFromProps(props, state) {
    if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") {
      return {
        error: props.error,
        location: props.location,
        revalidation: props.revalidation
      };
    }
    return {
      error: props.error !== void 0 ? props.error : state.error,
      location: state.location,
      revalidation: props.revalidation || state.revalidation
    };
  }
  componentDidCatch(error, errorInfo) {
    console.error("React Router caught the following error during render", error, errorInfo);
  }
  render() {
    return this.state.error !== void 0 ? /* @__PURE__ */ reactExports.createElement(RouteContext.Provider, {
      value: this.props.routeContext
    }, /* @__PURE__ */ reactExports.createElement(RouteErrorContext.Provider, {
      value: this.state.error,
      children: this.props.component
    })) : this.props.children;
  }
}
function RenderedRoute(_ref) {
  let {
    routeContext,
    match,
    children
  } = _ref;
  let dataRouterContext = reactExports.useContext(DataRouterContext);
  if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {
    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;
  }
  return /* @__PURE__ */ reactExports.createElement(RouteContext.Provider, {
    value: routeContext
  }, children);
}
function _renderMatches(matches, parentMatches, dataRouterState, future) {
  var _dataRouterState2;
  if (parentMatches === void 0) {
    parentMatches = [];
  }
  if (dataRouterState === void 0) {
    dataRouterState = null;
  }
  if (future === void 0) {
    future = null;
  }
  if (matches == null) {
    var _dataRouterState;
    if ((_dataRouterState = dataRouterState) != null && _dataRouterState.errors) {
      matches = dataRouterState.matches;
    } else {
      return null;
    }
  }
  let renderedMatches = matches;
  let errors = (_dataRouterState2 = dataRouterState) == null ? void 0 : _dataRouterState2.errors;
  if (errors != null) {
    let errorIndex = renderedMatches.findIndex((m2) => m2.route.id && (errors == null ? void 0 : errors[m2.route.id]) !== void 0);
    !(errorIndex >= 0) ? invariant(false) : void 0;
    renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));
  }
  let renderFallback = false;
  let fallbackIndex = -1;
  if (dataRouterState && future && future.v7_partialHydration) {
    for (let i2 = 0; i2 < renderedMatches.length; i2++) {
      let match = renderedMatches[i2];
      if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {
        fallbackIndex = i2;
      }
      if (match.route.id) {
        let {
          loaderData,
          errors: errors2
        } = dataRouterState;
        let needsToRunLoader = match.route.loader && loaderData[match.route.id] === void 0 && (!errors2 || errors2[match.route.id] === void 0);
        if (match.route.lazy || needsToRunLoader) {
          renderFallback = true;
          if (fallbackIndex >= 0) {
            renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);
          } else {
            renderedMatches = [renderedMatches[0]];
          }
          break;
        }
      }
    }
  }
  return renderedMatches.reduceRight((outlet, match, index2) => {
    let error;
    let shouldRenderHydrateFallback = false;
    let errorElement = null;
    let hydrateFallbackElement = null;
    if (dataRouterState) {
      error = errors && match.route.id ? errors[match.route.id] : void 0;
      errorElement = match.route.errorElement || defaultErrorElement;
      if (renderFallback) {
        if (fallbackIndex < 0 && index2 === 0) {
          warningOnce("route-fallback", false);
          shouldRenderHydrateFallback = true;
          hydrateFallbackElement = null;
        } else if (fallbackIndex === index2) {
          shouldRenderHydrateFallback = true;
          hydrateFallbackElement = match.route.hydrateFallbackElement || null;
        }
      }
    }
    let matches2 = parentMatches.concat(renderedMatches.slice(0, index2 + 1));
    let getChildren = () => {
      let children;
      if (error) {
        children = errorElement;
      } else if (shouldRenderHydrateFallback) {
        children = hydrateFallbackElement;
      } else if (match.route.Component) {
        children = /* @__PURE__ */ reactExports.createElement(match.route.Component, null);
      } else if (match.route.element) {
        children = match.route.element;
      } else {
        children = outlet;
      }
      return /* @__PURE__ */ reactExports.createElement(RenderedRoute, {
        match,
        routeContext: {
          outlet,
          matches: matches2,
          isDataRoute: dataRouterState != null
        },
        children
      });
    };
    return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index2 === 0) ? /* @__PURE__ */ reactExports.createElement(RenderErrorBoundary, {
      location: dataRouterState.location,
      revalidation: dataRouterState.revalidation,
      component: errorElement,
      error,
      children: getChildren(),
      routeContext: {
        outlet: null,
        matches: matches2,
        isDataRoute: true
      }
    }) : getChildren();
  }, null);
}
var DataRouterHook$1 = /* @__PURE__ */ function(DataRouterHook2) {
  DataRouterHook2["UseBlocker"] = "useBlocker";
  DataRouterHook2["UseRevalidator"] = "useRevalidator";
  DataRouterHook2["UseNavigateStable"] = "useNavigate";
  return DataRouterHook2;
}(DataRouterHook$1 || {});
var DataRouterStateHook$1 = /* @__PURE__ */ function(DataRouterStateHook2) {
  DataRouterStateHook2["UseBlocker"] = "useBlocker";
  DataRouterStateHook2["UseLoaderData"] = "useLoaderData";
  DataRouterStateHook2["UseActionData"] = "useActionData";
  DataRouterStateHook2["UseRouteError"] = "useRouteError";
  DataRouterStateHook2["UseNavigation"] = "useNavigation";
  DataRouterStateHook2["UseRouteLoaderData"] = "useRouteLoaderData";
  DataRouterStateHook2["UseMatches"] = "useMatches";
  DataRouterStateHook2["UseRevalidator"] = "useRevalidator";
  DataRouterStateHook2["UseNavigateStable"] = "useNavigate";
  DataRouterStateHook2["UseRouteId"] = "useRouteId";
  return DataRouterStateHook2;
}(DataRouterStateHook$1 || {});
function useDataRouterContext(hookName) {
  let ctx = reactExports.useContext(DataRouterContext);
  !ctx ? invariant(false) : void 0;
  return ctx;
}
function useDataRouterState(hookName) {
  let state = reactExports.useContext(DataRouterStateContext);
  !state ? invariant(false) : void 0;
  return state;
}
function useRouteContext(hookName) {
  let route = reactExports.useContext(RouteContext);
  !route ? invariant(false) : void 0;
  return route;
}
function useCurrentRouteId(hookName) {
  let route = useRouteContext();
  let thisRoute = route.matches[route.matches.length - 1];
  !thisRoute.route.id ? invariant(false) : void 0;
  return thisRoute.route.id;
}
function useRouteError() {
  var _state$errors;
  let error = reactExports.useContext(RouteErrorContext);
  let state = useDataRouterState(DataRouterStateHook$1.UseRouteError);
  let routeId = useCurrentRouteId(DataRouterStateHook$1.UseRouteError);
  if (error !== void 0) {
    return error;
  }
  return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];
}
function useNavigateStable() {
  let {
    router
  } = useDataRouterContext(DataRouterHook$1.UseNavigateStable);
  let id2 = useCurrentRouteId(DataRouterStateHook$1.UseNavigateStable);
  let activeRef = reactExports.useRef(false);
  useIsomorphicLayoutEffect$1(() => {
    activeRef.current = true;
  });
  let navigate = reactExports.useCallback(function(to, options) {
    if (options === void 0) {
      options = {};
    }
    if (!activeRef.current)
      return;
    if (typeof to === "number") {
      router.navigate(to);
    } else {
      router.navigate(to, _extends({
        fromRouteId: id2
      }, options));
    }
  }, [router, id2]);
  return navigate;
}
const alreadyWarned = {};
function warningOnce(key, cond, message) {
  if (!cond && !alreadyWarned[key]) {
    alreadyWarned[key] = true;
  }
}
function Route(_props) {
  invariant(false);
}
function Router(_ref5) {
  let {
    basename: basenameProp = "/",
    children = null,
    location: locationProp,
    navigationType = Action.Pop,
    navigator: navigator2,
    static: staticProp = false,
    future
  } = _ref5;
  !!useInRouterContext() ? invariant(false) : void 0;
  let basename = basenameProp.replace(/^\/*/, "/");
  let navigationContext = reactExports.useMemo(() => ({
    basename,
    navigator: navigator2,
    static: staticProp,
    future: _extends({
      v7_relativeSplatPath: false
    }, future)
  }), [basename, future, navigator2, staticProp]);
  if (typeof locationProp === "string") {
    locationProp = parsePath(locationProp);
  }
  let {
    pathname = "/",
    search = "",
    hash = "",
    state = null,
    key = "default"
  } = locationProp;
  let locationContext = reactExports.useMemo(() => {
    let trailingPathname = stripBasename(pathname, basename);
    if (trailingPathname == null) {
      return null;
    }
    return {
      location: {
        pathname: trailingPathname,
        search,
        hash,
        state,
        key
      },
      navigationType
    };
  }, [basename, pathname, search, hash, state, key, navigationType]);
  if (locationContext == null) {
    return null;
  }
  return /* @__PURE__ */ reactExports.createElement(NavigationContext.Provider, {
    value: navigationContext
  }, /* @__PURE__ */ reactExports.createElement(LocationContext.Provider, {
    children,
    value: locationContext
  }));
}
function Routes(_ref6) {
  let {
    children,
    location
  } = _ref6;
  return useRoutes(createRoutesFromChildren(children), location);
}
new Promise(() => {
});
function createRoutesFromChildren(children, parentPath) {
  if (parentPath === void 0) {
    parentPath = [];
  }
  let routes = [];
  reactExports.Children.forEach(children, (element, index2) => {
    if (!/* @__PURE__ */ reactExports.isValidElement(element)) {
      return;
    }
    let treePath = [...parentPath, index2];
    if (element.type === reactExports.Fragment) {
      routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath));
      return;
    }
    !(element.type === Route) ? invariant(false) : void 0;
    !(!element.props.index || !element.props.children) ? invariant(false) : void 0;
    let route = {
      id: element.props.id || treePath.join("-"),
      caseSensitive: element.props.caseSensitive,
      element: element.props.element,
      Component: element.props.Component,
      index: element.props.index,
      path: element.props.path,
      loader: element.props.loader,
      action: element.props.action,
      errorElement: element.props.errorElement,
      ErrorBoundary: element.props.ErrorBoundary,
      hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,
      shouldRevalidate: element.props.shouldRevalidate,
      handle: element.props.handle,
      lazy: element.props.lazy
    };
    if (element.props.children) {
      route.children = createRoutesFromChildren(element.props.children, treePath);
    }
    routes.push(route);
  });
  return routes;
}
/**
 * React Router DOM v6.23.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
const REACT_ROUTER_VERSION = "6";
try {
  window.__reactRouterVersion = REACT_ROUTER_VERSION;
} catch (e) {
}
const START_TRANSITION = "startTransition";
const startTransitionImpl = React$1[START_TRANSITION];
function HashRouter(_ref5) {
  let {
    basename,
    children,
    future,
    window: window2
  } = _ref5;
  let historyRef = reactExports.useRef();
  if (historyRef.current == null) {
    historyRef.current = createHashHistory({
      window: window2,
      v5Compat: true
    });
  }
  let history = historyRef.current;
  let [state, setStateImpl] = reactExports.useState({
    action: history.action,
    location: history.location
  });
  let {
    v7_startTransition
  } = future || {};
  let setState = reactExports.useCallback((newState) => {
    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);
  }, [setStateImpl, v7_startTransition]);
  reactExports.useLayoutEffect(() => history.listen(setState), [history, setState]);
  return /* @__PURE__ */ reactExports.createElement(Router, {
    basename,
    children,
    location: state.location,
    navigationType: state.action,
    navigator: history,
    future
  });
}
var DataRouterHook;
(function(DataRouterHook2) {
  DataRouterHook2["UseScrollRestoration"] = "useScrollRestoration";
  DataRouterHook2["UseSubmit"] = "useSubmit";
  DataRouterHook2["UseSubmitFetcher"] = "useSubmitFetcher";
  DataRouterHook2["UseFetcher"] = "useFetcher";
  DataRouterHook2["useViewTransitionState"] = "useViewTransitionState";
})(DataRouterHook || (DataRouterHook = {}));
var DataRouterStateHook;
(function(DataRouterStateHook2) {
  DataRouterStateHook2["UseFetcher"] = "useFetcher";
  DataRouterStateHook2["UseFetchers"] = "useFetchers";
  DataRouterStateHook2["UseScrollRestoration"] = "useScrollRestoration";
})(DataRouterStateHook || (DataRouterStateHook = {}));
const app = "";
const connectedDevices_page = "";
const AppChannel = {
  GetAppSetting: "DBMESSAGE_GETAPPSETTING",
  SaveAppSetting: "DBMESSAGE_SAVEAPPSETTING",
  SaveStartupSetting: "APP_SAVE_STARTUP_SETTING",
  InitTray: "APP_INITTRAY",
  ShowOpenDialog: "APP_SHOWOPENDIALOG",
  ShowSaveDialog: "APP_SHOWSAVEDIALOG",
  CustomHyperlink: "APP_CUSTOMHYPERLINK",
  OpenHyperlink: "APP_CUSTOMHYPERLINK",
  CommandMin: "APP_COMMAND_MIN",
  CommandMax: "APP_COMMAND_MAX",
  CommandClose: "APP_COMMAND_CLOSE",
  Tool_SaveFile: "APP_TOOL_SAVEFILE",
  Tool_ClearFolder: "APP_TOOL_CLEARFOLDER",
  Tool_SupportSaveFile: "APP_TOOL_SUPPORTSAVEFILE",
  Tool_OpenFile: "APP_TOOL_OPENFILE",
  GetAvailableTranslations: "APP_GETAVAILABLETRANSLATIONS",
  GetVersion: "APP_GET_VERSION",
  GetVersionFileUrl: "APP_GETVERSIONFILEURL",
  GetCORE2VersionFileUrl: "APP_GETCORE2VERSIONFILEURL",
  GetBuildVersion: "APP_GET_BUILDVERSION",
  GetDownloadedFirmwareUpdaters: "APP_GETDOWNLOADEDFIRMWAREUPDATERS",
  BeginFirmwareDownloads: "APP_BEGINFIRMWAREDOWNLOADS",
  BeginFirmwareUpdates: "APP_BEGINFIRMWAREUPDATES",
  ShowDebug: "APP_SHOW_DEBUG",
  Login: "APP_LOGIN",
  Logout: "APP_LOGOUT",
  IsLoggedIn: "APP_ISLOGGEDIN",
  GetProfile: "APP_GETPROFILE",
  ChangePassword: "APP_CHANGEPASSWORD",
  GetCloudDeviceProfiles: "APP_GETDEVICEPROFILES",
  CreateCloudDeviceProfile: "APP_CREATEDEVICEPROFILE",
  DeleteCloudDeviceProfile: "APP_DELETEDEVICEPROFILE",
  GetAllCloudDevicesProfiles: "APP_GETALLDEVICEPROFILES",
  SetFirmwareOverrides: "APP_SET_FIRMWARE_OVERRIDES",
  Tool_DownloadFile: "APP_TOOL_DOWNLOADFILE",
  Tool_CancelDownload: "APP_TOOL_CANCELDOWNLOAD"
};
const EnvironmentChannel = {
  GetArch: "ENVMESSAGE_GETARCH"
};
const DataChannel = {
  // GetAppSetting : "DBMESSAGE_GETAPPSETTING",
  // SaveAppSetting : "DBMESSAGE_SAVEAPPSETTING",
  GetSupportDevice: "DBMESSAGE_GETSUPPORTDEVICE",
  GetLayout: "DBMESSAGE_GETLAYOUT",
  UpdateLayout: "DBMESSAGE_UPDATELAYOUT",
  GetPluginDevice: "DBMESSAGE_GETPLUGINDEVICE",
  UpdatePluginDevice: "DBMESSAGE_UPDATEPLUGINDEVICE",
  UpdateAllPluginDevice: "DBMESSAGE_UPDATEALLPLUGINDEVICE",
  UpdateDevice: "DBMESSAGE_UPDATEDEVICE",
  GetAllDevice: "DBMESSAGE_GETALLDEVICE",
  GetMacro: "DBMESSAGE_GETMACRO",
  GetMacroById: "DBMESSAGE_GETMACROBYID",
  InsertMacro: "DBMESSAGE_INSERTMACRO",
  DeleteMacro: "DBMESSAGE_DELETEMACRO",
  UpdateMacro: "DBMESSAGE_UPDATEMACRO",
  GetEQ: "DBMESSAGE_GETEQ",
  GetEQById: "DBMESSAGE_GETEQBYID",
  InsertEQ: "DBMESSAGE_INSERTEQ",
  UpdateEQ: "DBMESSAGE_UPDATEEQ",
  DeleteEQ: "DBMESSAGE_DELETEEQ"
};
const DeviceChannel = {
  AppSetting: "DEVICEMESSAGE_APPSETTING",
  MockDeviceRegister: "MOCK_DEVICE_REGISTER",
  MockDeviceUnregister: "MOCK_DEVICE_UNREGISTER",
  MockDeviceCollect: "MOCK_DEVICE_COLLECT",
  MockDeviceLoad: "MOCK_DEVICE_LOAD",
  DeviceSendHidReport: "DEVICE_SEND_HID_REPORT"
};
const ProtocolChannel = {
  RunSetFunctionSystem: "PROTOCOLCHANNEL_RUNSETFUNCTIONSYSTEM",
  RunSetFunctionDevice: "PROTOCOLCHANNEL_RUNSETFUNCTIONDEVICE"
};
const MessageChannels = { AppChannel, EnvironmentChannel, DataChannel, DeviceChannel, ProtocolChannel };
class AppEvent {
  static #listeners = /* @__PURE__ */ new Map();
  static subscribe(channel, handler) {
    const wrappedHandler = (event) => {
      handler(event);
    };
    AppEvent.#listeners.set(handler, wrappedHandler);
    document.addEventListener(channel, wrappedHandler);
  }
  static unsubscribe(channel, listener) {
    const wrappedHandler = AppEvent.#listeners.get(listener);
    if (wrappedHandler == null) {
      throw new Error("Cannot unsubscribe with unknown listener function. This error often occurs when trying to unsubscribe with an anonymous function.");
    }
    document.removeEventListener(channel, wrappedHandler);
    AppEvent.#listeners.delete(listener);
  }
  static publish(channel, data) {
    const event = new CustomEvent(channel, { detail: data });
    document.dispatchEvent(event);
  }
}
class IPCServiceClass {
  constructor() {
    window.electron.ipcRenderer.on("ipcEvent", (event, value2) => {
      if (value2.Func == null) {
        console.error(`Unexpected ipcEvent function: ${value2}`);
        return;
      }
      AppEvent.publish(value2.Func, value2.Param);
    });
  }
  // send data
  send = window.electron.ipcRenderer.send;
  // execute function and get return value
  invoke = window.electron.ipcRenderer.invoke;
}
const IPCService = new IPCServiceClass();
const FuncName = {
  ExecFile: "ExecFile",
  downloadFile: "downloadFile",
  //Init Device
  InitDevice: "InitDevice",
  ChangeProfileID: "ChangeProfileID",
  //Check AppVersion & download
  UpdateApp: "UpdateApp",
  //upzip AppUpdate File
  DownloadInstallPackage: "DownloadInstallPackage",
  UpdateFW: "UpdateFW",
  DownloadFWInstallPackage: "DownloadFWInstallPackage",
  ChangeWindowSize: "ChangeWindowSize",
  ShowWindow: "ShowWindow",
  RunApplication: "RunApplication",
  ImportProfile: "ImportProfile",
  QuitApp: "QuitApp",
  GetBatteryStats: "GetBatteryStats",
  ReadFWVersion: "ReadFWVersion",
  HideApp: "HideApp",
  MaxSize: "MaxSize",
  //Glorious
  setProfileToDevice: "setProfileToDevice",
  SetKeyMatrix: "SetKeyMatrix",
  SetLighting: "SetLighting",
  SleepTime: "SleepTime",
  LaunchFWUpdate: "LaunchFWUpdate",
  DeleteMacro: "DeleteMacro",
  GetAudioSession: "GetAudioSession",
  valueCVisualizationToggle: "SetVisualization",
  ResetDevice: "ResetDevice",
  ApplyLEDEffect: "ApplyLEDEffect",
  SetLEDEffect: "SetLEDEffect",
  GetProfileID: "GetProfileID"
};
const FuncType = {
  System: 1,
  Mouse: 2,
  Keyboard: 3,
  Device: 4,
  valueE: 5
};
class AppServiceClass {
  async getAppSetting() {
    const response = await IPCService.invoke(MessageChannels.AppChannel.GetAppSetting);
    if (!response.success) {
      console.error(response);
    }
    return response.data;
  }
  async saveAppSetting(obj) {
    const response = await IPCService.invoke(MessageChannels.AppChannel.SaveAppSetting, obj);
    if (!response.success) {
      console.error(response);
    }
    return response.data;
  }
  async saveStartupSetting(startupState) {
    try {
      await IPCService.invoke(MessageChannels.AppChannel.SaveStartupSetting, startupState);
    } catch (error) {
      console.error("Failed to save startup setting:", error);
    }
  }
  async getAppInfo(key) {
    if (key == "mode") {
      return "production";
    } else if (key == "version") {
      const response = await IPCService.invoke(MessageChannels.AppChannel.GetVersion);
      if (!response.success) {
        console.error(response);
      }
      return response.data;
    } else if (key == "buildVersion") {
      const response = await IPCService.invoke(MessageChannels.AppChannel.GetBuildVersion);
      if (!response.success) {
        console.error(response);
      }
      return response.data;
    } else if (key == "showDebug") {
      const response = await IPCService.invoke(MessageChannels.AppChannel.ShowDebug);
      if (!response.success) {
        console.error(response);
      }
      return response.data;
    }
  }
  async openHyperlink(target) {
    const response = await IPCService.invoke(MessageChannels.AppChannel.OpenHyperlink, target);
    if (!response.success) {
      console.error(response);
    }
    return response.data;
  }
  async runWindowCommand(command) {
    if (command == null || command != MessageChannels.AppChannel.CommandMin && command != MessageChannels.AppChannel.CommandMax && command != MessageChannels.AppChannel.CommandClose) {
      console.error(`Unknown command ${command}`);
      return;
    }
    const response = await IPCService.invoke(command);
    if (!response.success) {
      console.error(response);
    }
    return response.data;
  }
  async getVersionFileUrl() {
    const response = await IPCService.invoke(MessageChannels.AppChannel.GetVersionFileUrl);
    if (!response.success) {
      console.error(response);
    }
    return response.data;
  }
  async getCore2VersionFileUrl() {
    const response = await IPCService.invoke(MessageChannels.AppChannel.GetCORE2VersionFileUrl);
    if (!response.success) {
      console.error(response);
    }
    return response.data;
  }
  async getAvailableTranslations() {
    const response = await IPCService.invoke(MessageChannels.AppChannel.GetAvailableTranslations);
    if (!response.success) {
      console.error(response);
    }
    return response.data;
  }
  async downloadAppUpdate(url) {
    const response = await IPCService.invoke(MessageChannels.AppChannel.Tool_DownloadFile, { url });
    if (!response.success) {
      console.error(response);
    }
    return response.data;
  }
  async cancelAppUpdaterDownload() {
    const response = await IPCService.invoke(MessageChannels.AppChannel.Tool_CancelDownload);
    if (!response.success) {
      console.error(response);
    }
    return response.data;
  }
  async beginAppUpdate(filename) {
    const data = { Type: FuncType.System, Func: FuncName.ExecFile, Param: {
      //   path: this.joinEnvAppRootPath("UpdateApp.bat"),
      filename
    } };
    const response = await IPCService.invoke(MessageChannels.ProtocolChannel.RunSetFunctionSystem, data);
    if (!response.success) {
      console.error(response);
    }
    return response.data;
  }
  async quitApplication() {
    const data = { Type: FuncType.System, Func: FuncName.QuitApp, Param: "" };
    const response = await IPCService.invoke(MessageChannels.ProtocolChannel.RunSetFunctionSystem, data);
    if (!response.success) {
      console.error(response);
    }
    return response.data;
  }
  dialogShortcutProgramPath = async () => {
    const response = await IPCService.invoke(MessageChannels.AppChannel.ShowOpenDialog, {
      filters: [{ name: "Custom File Type", extensions: ["exe"] }],
      properties: ["openFile"]
    });
    return { success: response.success, data: response.success ? response.data : null };
  };
}
const AppService = new AppServiceClass();
class DisplayOption {
  optionKey;
  translationKey;
  value = null;
  data = null;
  get integerValue() {
    const val = parseInt(this.value);
    if (isNaN(val)) {
      return -1;
    }
    return val;
  }
  get floatValue() {
    const val = parseFloat(this.value);
    if (isNaN(val)) {
      return -1;
    }
    return val;
  }
  get stringValue() {
    switch (typeof this.value) {
      case "string":
        return this.value;
      case "number":
        return this.value.toString();
      case "object":
        return JSON.stringify(this.value, null, 2);
    }
    return "";
  }
  constructor(optionKey, translationKey, value2 = null, data = null) {
    this.optionKey = optionKey;
    this.translationKey = translationKey;
    this.value = value2;
    this.data = data;
  }
}
const Channels = MessageChannels.DataChannel;
class DataServiceClass {
  async getSupportDevice() {
    const response = await IPCService.invoke(Channels.GetSupportDevice);
    if (!response.success) {
      console.error(response);
    }
    return response.data;
  }
  //----------------------------Plugin--------------------------------//
  async getPluginDevice() {
    const response = await IPCService.invoke(Channels.GetPluginDevice);
    if (!response.success) {
      console.error(response);
    }
    return response.data;
  }
  async updatePluginDevice(obj) {
    const response = await IPCService.invoke(Channels.UpdatePluginDevice, obj);
    if (!response.success) {
      console.error(response);
    }
    return response.data;
  }
  async updateAllPluginDevice(obj) {
    const response = await IPCService.invoke(Channels.UpdateAllPluginDevice, obj);
    if (!response.success) {
      console.error(response);
    }
    return response.data;
  }
  async updateDevice(_id, obj) {
    const data = { _id, obj };
    const response = await IPCService.invoke(Channels.UpdateDevice, data);
    if (!response.success) {
      console.error(response);
    }
    return response.data;
  }
  async getAllDevice() {
    const response = await IPCService.invoke(Channels.GetAllDevice);
    if (!response.success) {
      console.error(response);
    }
    return response.data;
  }
  //----------------------------Macro----------------------------//
  async getMacro() {
    const response = await IPCService.invoke(Channels.GetMacro);
    if (!response.success) {
      console.error(response);
    }
    return response.data;
  }
  async getMacroById(id2) {
    const response = await IPCService.invoke(Channels.GetMacroById, id2);
    if (!response.success) {
      console.error(response);
    }
    return response.data;
  }
  async insertMacro(obj, callback = void 0) {
    const response = await IPCService.invoke(Channels.InsertMacro, obj);
    if (!response.success) {
      console.error(response);
    }
    return response.data;
  }
  async DeleteMacro(index2) {
    const response = await IPCService.invoke(Channels.DeleteMacro, index2);
    if (!response.success) {
      console.error(response);
    }
    return response.data;
  }
  async updateMacro(id2, obj) {
    const data = { id: id2, obj };
    const response = await IPCService.invoke(Channels.UpdateMacro, data);
    if (!response.success) {
      console.error(response);
    }
    return response.data;
  }
  //----------------------------EQ----------------------------//
  async getEQ() {
    const response = await IPCService.invoke(Channels.GetEQ);
    if (!response.success) {
      console.error(response);
    }
    return response.data;
  }
  async getEQById(id2) {
    const data = { id: id2 };
    const response = await IPCService.invoke(Channels.GetEQById, data);
    if (!response.success) {
      console.error(response);
    }
    return response.data;
  }
  async insertEQ(obj, callback = null) {
    const data = { obj };
    const response = await IPCService.invoke(Channels.InsertEQ, data);
    if (!response.success) {
      console.error(response);
      if (callback != null) {
        callback(response.data.error, response.data.data);
      }
    }
    return true;
  }
  async DeleteEQ(index2) {
    const data = { index: index2 };
    const response = await IPCService.invoke(Channels.DeleteEQ, data);
    if (!response.success) {
      console.error(response);
    }
    return response.data;
  }
  async updateEQ(id2, obj) {
    const data = { id: id2, obj };
    const response = await IPCService.invoke(Channels.UpdateEQ, data);
    if (!response.success) {
      console.error(response);
    }
    return response.data;
  }
  //----------------------------Layout----------------------------//
  async getLayout() {
    const response = await IPCService.invoke(Channels.GetLayout);
    if (!response.success) {
      console.error(response);
    }
    return response.data[0];
  }
  // getLayoutAssignField(compareData) {
  //     return new Promise(function (resolve, reject) {
  //         return  _this.Node_NeDB.queryCmd('LayoutDB',compareData,function(docs){  
  //             resolve(docs);     
  //         });  
  //     });
  // }
  async updateLayoutAlldata(compareData, obj) {
    const data = { compareData, obj };
    const response = await IPCService.invoke(Channels.UpdateLayout, data);
    if (!response.success) {
      console.error(response);
    }
    return response.data;
  }
}
const DataService = new DataServiceClass();
class ProtocolService {
  /**
   * Set function from fron-end to back-end
   * @param obj
   */
  static RunSetFunction(obj) {
    return ProtocolService._RunSetFunction(obj, null);
  }
  /**
   * Set function from fron-end to back-end
   * @param obj
   * @param callback
   */
  static async _RunSetFunction(obj, callback) {
    switch (obj.Type) {
      case FuncType.System:
        return ProtocolService.RunSetFunctionSystem(obj, callback);
      case FuncType.Device:
      case FuncType.Mouse:
      case FuncType.Keyboard:
      case FuncType.valueE:
        return ProtocolService.RunSetFunctionDevice(obj, callback);
      default:
        return Promise.reject();
    }
  }
  static async RunSetFunctionSystem(obj, callback) {
    const data = { Type: FuncType.System, Func: obj.Func, Param: obj.Param };
    const response = await IPCService.invoke(MessageChannels.ProtocolChannel.RunSetFunctionSystem, data);
    if (!response.success) {
      console.error(response);
      callback(response.data);
    }
    return response;
  }
  static async RunSetFunctionDevice(obj, callback) {
    const data = { Type: obj.Type, Func: obj.Func, Param: obj.Param, SN: obj.SN };
    const response = await IPCService.invoke(MessageChannels.ProtocolChannel.RunSetFunctionDevice, data);
    if (!response.success) {
      console.error(response);
      callback(response.data);
    }
    return response.data;
  }
}
const name = "glorious-core";
const productName = "Glorious Core";
const description = "Glorious Device Management";
const author = "Glorious, LLC";
const version$1 = "2.0.0";
const buildVersion = "2.0.1.4-rc+01";
const main = "./out/main/index.js";
const scripts = {
  "typecheck:node": "tsc --noEmit -p tsconfig.node.json --composite false",
  "typecheck:web": "tsc --noEmit -p tsconfig.web.json --composite false",
  typecheck: "npm run typecheck:node && npm run typecheck:web",
  "package": "electron-vite build --outDir=dist && electron-forge package",
  "make ": "electron-vite build --outDir=dist && electron-forge make",
  start: "electron-vite preview",
  dev: "electron-vite dev",
  build: "npm run typecheck && electron-vite build",
  postinstall: "electron-builder install-app-deps",
  "electron-vite-build": "electron-vite build",
  "build:win": "electron-vite build && electron-builder --win --config",
  "build:mac": "electron-vite build && electron-builder --mac --config",
  "build:linux": "electron-vite build && electron-builder --linux --config"
};
const dependencies = {
  "@electron-toolkit/preload": "^2.0.0",
  "@electron-toolkit/utils": "^1.0.2",
  "@grpc/grpc-js": "^1.10.6",
  "@grpc/proto-loader": "^0.7.12",
  "@ngx-translate/core": "^14.0.0",
  "@ngx-translate/http-loader": "^7.0.0",
  "@protobuf-ts/plugin": "^2.9.4",
  "@protobuf-ts/runtime": "^2.9.4",
  "@types/color-convert": "^2.0.0",
  "adm-zip": "^0.5.9",
  axios: "^1.6.2",
  "cmake-js": "^7.2.1",
  jquery: "^3.6.1",
  keytar: "^7.9.0",
  lockfile: "^1.0.4",
  lodash: "^4.17.21",
  nedb: "^1.8.0",
  "node-downloader-helper": "^2.1.9",
  "os-locale": "^2.1.0",
  prettier: "^3.0.3",
  qs: "^6.11.2",
  "react-colorful": "^5.6.1",
  "react-viewport-list": "^7.1.1",
  request: "^2.88.2",
  tslib: "^2.3.0",
  "universal-analytics": "^0.5.3"
};
const devDependencies = {
  "@electron-forge/cli": "^6.2.1",
  "@electron-forge/maker-deb": "^6.2.1",
  "@electron-forge/maker-rpm": "^6.2.1",
  "@electron-forge/maker-squirrel": "^6.2.1",
  "@electron-forge/maker-zip": "^6.2.1",
  "@electron-toolkit/tsconfig": "^1.0.1",
  "@electron/notarize": "^1.2.4",
  "@types/adm-zip": "^0.5.0",
  "@types/jquery": "^3.5.14",
  "@types/lodash": "^4.14.186",
  "@types/node": "^20.3.1",
  "@types/qs": "^6.9.11",
  "@types/react": "^18.2.9",
  "@types/react-dom": "^18.2.4",
  "@vitejs/plugin-react": "^4.0.1",
  electron: "^25.2.0",
  "electron-builder": "^24.4.0",
  "electron-vite": "^1.0.23",
  "file-loader": "^6.2.0",
  react: "^18.2.0",
  "react-dom": "^18.2.0",
  "react-router": "^6.13.0",
  "react-router-dom": "^6.13.0",
  typescript: "~4.7.2",
  vite: "^4.3.9",
  yarn: "^1.22.19"
};
const optionalDependencies = {
  "dmg-license": "^1.0.11"
};
const window$1 = {
  frame: false,
  center: true,
  width: 1440,
  height: 880,
  minWidth: 1440,
  minHeight: 880,
  "skip-taskbar": false,
  show: true,
  resizable: true,
  transparent: true,
  maximizable: false,
  webPreferences: {
    nodeIntegration: true,
    enableRemoteModule: true,
    contextIsolation: false
  },
  icon: "./app-icon.ico"
};
const versionFileUrl = "https://gloriouscore.nyc3.digitaloceanspaces.com/Glorious_Core/Version.json";
const core2VersionFileUrl = "https://gloriouscore.nyc3.digitaloceanspaces.com/CORE2/version.json";
const useDebugVersionFileUrl = true;
const showDebugUI = true;
const BuiltType = 0;
const BuildCode = 2;
const mockDevices = [
  {
    name: "GMMK Numpad",
    vid: "z0x320F",
    pid: "z0x5088"
  },
  {
    name: "GMMK PRO",
    vid: "z0x320F",
    pid: "z0x5044"
  },
  {
    name: "GMMK PRO Alt",
    vid: "z0x320F",
    pid: "z0x5092"
  },
  {
    name: "GMMK PRO ISO",
    vid: "z0x320F",
    pid: "z0x5046"
  },
  {
    name: "GMMK PRO ISO alt",
    vid: "z0x320F",
    pid: "z0x5093"
  },
  {
    name: "GMMK V2 65 US",
    vid: "z0x320F",
    pid: "z0x5045"
  },
  {
    name: "GMMK V2 65 ISO",
    vid: "z0x320F",
    pid: "z0x504A"
  },
  {
    name: "GMMK V2 96 US",
    vid: "z0x320F",
    pid: "z0x504B"
  },
  {
    name: "GMMK V2 96 ISO",
    vid: "z0x320F",
    pid: "z0x505A"
  },
  {
    name: "Model O Wired",
    vid: "z0x258A",
    pid: "z0x0036"
  },
  {
    name: "Model O Wireless",
    vid: "z0x258A",
    pid: "z0x2011"
  },
  {
    name: "Model O Minus Wired",
    vid: "z0x258A",
    pid: "z0x2036"
  },
  {
    name: "Model O Minus Wireless",
    vid: "z0x258A",
    pid: "z0x2013"
  },
  {
    name: "Model O Pro Wireless",
    vid: "z0x258A",
    pid: "z0x2015"
  },
  {
    name: "Model O2 Wired",
    vid: "z0x320F",
    pid: "z0x823A"
  },
  {
    name: "Model O2 Wireless",
    vid: "z0x093A",
    pid: "z0x822A"
  },
  {
    name: "Model O2 Pro 1k Wireless",
    vid: "z0x258A",
    pid: "z0x2019"
  },
  {
    name: "Model O2 Pro 8k Wireless",
    vid: "z0x258A",
    pid: "z0x201B"
  },
  {
    name: "Series One Pro Wireless",
    vid: "z0x258A",
    pid: "z0x2018"
  },
  {
    name: "Model D Wireless",
    vid: "z0x258A",
    pid: "z0x2012"
  },
  {
    name: "Model D Minus Wireless",
    vid: "z0x258A",
    pid: "z0x2014"
  },
  {
    name: "Model D Pro Wireless",
    vid: "z0x258A",
    pid: "z0x2017"
  },
  {
    name: "Model D2 Wired",
    vid: "z0x320F",
    pid: "z0x825A"
  },
  {
    name: "Model D2 Wireless",
    vid: "z0x093A",
    pid: "z0x824A"
  },
  {
    name: "Model D2 Pro 1k Wireless",
    vid: "z0x258A",
    pid: "z0x201A"
  },
  {
    name: "Model D2 Pro 8k Wireless",
    vid: "z0x258A",
    pid: "z0x201C"
  },
  {
    name: "Model I Wired",
    vid: "z0x22D4",
    pid: "z0x1503"
  },
  {
    name: "Model I2 Wireless",
    vid: "z0x093A",
    pid: "z0x821A"
  }
];
const build = {
  extraResources: [
    {
      from: "src/renderer-process/public",
      to: "public"
    }
  ],
  files: [
    "!src/renderer-process/public/**/*"
  ],
  win: {
    target: "zip",
    icon: "./app-icon.ico"
  }
};
const packageProperties = {
  name,
  productName,
  description,
  author,
  version: version$1,
  buildVersion,
  main,
  scripts,
  "private": true,
  dependencies,
  devDependencies,
  optionalDependencies,
  window: window$1,
  versionFileUrl,
  core2VersionFileUrl,
  useDebugVersionFileUrl,
  showDebugUI,
  BuiltType,
  BuildCode,
  mockDevices,
  build
};
class AppRecord {
  _id;
  // id will be generated if it is null; this is important for creating new records
}
class PluginDeviceRecord extends AppRecord {
  vid = [];
  pid = [];
  devicename = "";
  ModelType = -1;
  SN = "";
  DeviceId = -1;
  StateID = -1;
  StateArray = [];
  version_Wired = "";
  version_Wireless = "";
  pairingFlag = 0;
  batterystatus = 0;
  batteryvalue = 100;
  deviceData;
}
class DeviceRecordColorData {
  R = 255;
  G = 0;
  B = 0;
  flag = false;
  constructor(R2 = 255, G2 = 0, B2 = 0, flag) {
    this.R = R2;
    this.G = G2;
    this.B = B2;
    this.flag = flag;
  }
}
class DPIStageData {
  value;
  color;
  isDefault;
  constructor(value2 = 0, color2 = "FFFF00", isDefault) {
    this.value = value2;
    this.color = color2;
    this.isDefault = isDefault;
  }
}
class AdvanceDebounceSettings {
  AdvancedSwitch;
  BeforePressValue;
  BeforeReleaseValue;
  AfterPressValue;
  AfterReleaseValue;
  LiftOffPressValue;
  constructor(AdvancedSwitch = false, BeforePressValue = 0, BeforeReleaseValue = 0, AfterPressValue = 10, AfterReleaseValue = 10, LiftOffPressValue = 8) {
    this.AdvancedSwitch = AdvancedSwitch;
    this.BeforePressValue = BeforePressValue;
    this.BeforeReleaseValue = BeforeReleaseValue;
    this.AfterPressValue = AfterPressValue;
    this.AfterReleaseValue = AfterReleaseValue;
    this.LiftOffPressValue = LiftOffPressValue;
  }
}
class PerKeyLightingKeyData {
  border = true;
  breathing = false;
  clearStatus = false;
  color = [0, 0, 0, 0];
  // coordinateData: {clientHeight: 39, clientWidth: 36, offsetLeft: 10, offsetTop: 11, scroll: ƒ, …}
  keyCode = "";
  colorEnabled = false;
  breathingEnabled = false;
}
class PresetLightingParameterNumberData {
  visible = false;
  translate = "SPEED";
  maxValue = 10;
  minValue = 1;
  setValue = 1;
  field = "speed";
}
class PresetLightingBoolListData {
  visible = false;
  translate = "SEPARATE";
  setValue = false;
  field = "separate";
}
class PresetLightingData {
  color_quantity = 1;
  translate = "Option_LightingEffect_GloriousMode";
  Multicolor = false;
  Multicolor_Enable = false;
  colorPickerValue = [255, 0, 0, 1];
  brightness = 100;
  wirelessBrightness = 100;
  value = 0;
  speed = 50;
  brightness_Enable = true;
  color_Enable = false;
  rate_Enable = false;
  colors = ["#ff0000", "#ffa500", "#ffff00", "#00ff00", "#007fff", "#0000ff", "#8b00ff"];
  ParameterNumberList = [new PresetLightingParameterNumberData()];
  ParameterBoolList = [new PresetLightingBoolListData()];
  PointEffectName = "Glorious Mode";
  separateBrightness = false;
}
class DeviceDataRecord extends AppRecord {
  vid = [];
  pid = [];
  SN = "";
  devicename = "";
  ModelType = -1;
  image = "";
  battery = false;
  batteryLevelIndicator = false;
  profile = [];
  // profileIndex: number = 1;
  profileindex = 1;
  value = -1;
  //keyboard properties
  layerMaxNumber = 3;
  profileLayerIndex = [0, 0, 0];
  sideLightSwitch = false;
  profileLayers = [];
}
class UIDevice {
  // plugin device record data
  vid = [];
  pid = [];
  devicename = "";
  ModelType = -1;
  SN = "";
  DeviceId = -1;
  StateID = -1;
  StateArray = [];
  version_Wired = "";
  version_Wireless = "";
  pairingFlag = 0;
  batterystatus = 0;
  batteryvalue = 100;
  deviceData;
  // profile data
  profile = [];
  // ui data (trusted to exist because they will be added by the adapter)
  img;
  lightingViewImages;
  deviceRenderAttributes;
  lightingEffectRenderAttributes;
  imageAdjustments;
  showLightingCanvas;
  lightingEffects;
  pollingRates;
  wirelessPollingRates;
  inputLatencies;
  liftoffDistances;
  standbyTypes;
  dpiSections;
  keybindingLayers;
  deviceCategoryName;
  rgbGradients;
  productColors;
  productScales;
  productColorIndex;
  // iconPaths!: DeviceIconData;
  iconType;
  managementSections;
  rgbOffAfterInactivity;
  rgbOffAfterInactivityTime;
  keyboardData;
  constructor(pluginDeviceRecord) {
    this.vid = pluginDeviceRecord.vid;
    this.pid = pluginDeviceRecord.pid;
    this.devicename = pluginDeviceRecord.devicename;
    this.ModelType = pluginDeviceRecord.ModelType;
    this.SN = pluginDeviceRecord.SN;
    this.DeviceId = pluginDeviceRecord.DeviceId;
    this.StateID = pluginDeviceRecord.StateID;
    this.StateArray = pluginDeviceRecord.StateArray;
    this.version_Wired = pluginDeviceRecord.version_Wired;
    this.version_Wireless = pluginDeviceRecord.version_Wireless;
    this.pairingFlag = pluginDeviceRecord.pairingFlag;
    this.batterystatus = pluginDeviceRecord.batterystatus;
    this.batteryvalue = pluginDeviceRecord.batteryvalue;
    this.deviceData = pluginDeviceRecord.deviceData;
  }
}
const MockDeviceVersionMap = {
  // Mice
  "0x320F0x8888": { version_Wired: "0.3.8.1", version_Wireless: "0.3.8.1" },
  "0x258A0x2011": { version_Wired: "0.3.8.1", version_Wireless: "0.3.8.1" },
  "0x258A0x2036": { version_Wired: "0.3.8.1", version_Wireless: "0.3.8.1" },
  "0x258A0x2013": { version_Wired: "0.3.8.1", version_Wireless: "0.3.8.1" },
  "0x258A0x2015": { version_Wired: "01.00", version_Wireless: "01.00" },
  "0x320F0x823A": { version_Wired: "1.0.4", version_Wireless: "1.0.4" },
  "0x258A0x2012": { version_Wired: "0.3.8.1", version_Wireless: "0.3.8.1" },
  "0x258A0x2014": { version_Wired: "0.3.8.1", version_Wireless: "0.3.8.1" },
  "0x22D40x1503": { version_Wired: "01.22", version_Wireless: "00.00" },
  "0x258A0x2017": { version_Wired: "1.0.0.0", version_Wireless: "1.0.0.0" },
  "0x258A0x2018": { version_Wired: "1.0.0.0", version_Wireless: "1.0.0.0" },
  "0x093A0x822A": { version_Wired: "1.0.0.5", version_Wireless: "1.0.0.5" },
  "0x093A0x821A": { version_Wired: "1.0.0.5", version_Wireless: "1.0.0.5" },
  "0x093A0x824A": { version_Wired: "1.0.0.0", version_Wireless: "1.0.0.0" },
  "0x320F0x825A": { version_Wired: "1.0.0.0", version_Wireless: "99.99.99.99" },
  "0x320F0x831A": { version_Wired: "1.0.0.0", version_Wireless: "99.99.99.99" },
  "0x258A0x2019": { version_Wired: "1.0.0.0", version_Wireless: "99.99.99.99" },
  // Model O2 Pro 1k
  "0x258A0x201B": { version_Wired: "1.0.0.0", version_Wireless: "99.99.99.99" },
  // Model O 2 Pro 8k
  "0x258A0x201A": { version_Wired: "1.0.0.0", version_Wireless: "99.99.99.99" },
  // Model D 2 Pro 1k
  "0x258A0x201C": { version_Wired: "1.0.0.0", version_Wireless: "99.99.99.99" },
  // Model D 2 Pro 8k
  "0x258A0x201D": { version_Wired: "1.0.0.0", version_Wireless: "99.99.99.99" },
  //valueH Pro (8k wireless)
  "0x093A0x826A": { version_Wired: "1.0.0.0", version_Wireless: "99.99.99.99" },
  //valueF Wireless
  "0x320F0x827A": { version_Wired: "1.0.0.0", version_Wireless: "99.99.99.99" },
  //valueF
  // Keyboards
  "0x320F0x5044": { version_Wired: "0045", version_Wireless: "99.99.99.99" },
  "0x320F0x5046": { version_Wired: "0017", version_Wireless: "99.99.99.99" },
  "0x320F0x5045": { version_Wired: "0019", version_Wireless: "99.99.99.99" },
  "0x320F0x504A": { version_Wired: "0012", version_Wireless: "99.99.99.99" },
  "0x320F0x504B": { version_Wired: "0016", version_Wireless: "99.99.99.99" },
  "0x320F0x505A": { version_Wired: "0013", version_Wireless: "99.99.99.99" },
  "0x320F0x5088": { version_Wired: "0088", version_Wireless: "99.99.99.99" },
  "0x320F0x5092": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  "0x320F0x5093": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  "0x342D0xE3C5": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueB
  "0x342D0xE3CE": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueBISO
  "0x342D0xE3CB": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueBWireless
  "0x342D0xE3D4": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueBWirelessISO
  "0x342D0xE3C7": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueB65
  "0x342D0xE3D0": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueB65ISO
  "0x342D0xE3CD": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueB65Wireless
  "0x342D0xE3D6": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueB65WirelessISO
  "0x342D0xE3C6": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueB75
  "0x342D0xE3CF": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueB75ISO
  "0x342D0xE3CC": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueB75Wireless
  "0x342D0xE3D5": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueB75WirelessISO
  "0x342D0xE3C8": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueD100
  "0x342D0xE3D1": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueD100ISO
  "0x342D0xE3C9": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueD75
  "0x342D0xE3D2": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueD75ISO
  "0x342D0xE3CA": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueD65
  "0x342D0xE3D3": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueD65ISO
  "0x342D0xE3DD": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueA valueD HE 65% ANSI
  "0x342D0xE3F2": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueA valueD HE 65% ISO
  "0x342D0xE3DE": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueA valueD HE 75% ANSI
  "0x342D0xE3F3": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueA valueD HE 75% ISO
  "0x342D0xE3DF": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueA valueD HE 100% ANSI
  "0x342D0xE3F4": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueA valueD HE 100% ISO
  "0x342D0xE3D7": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueC 65% Wireless ANSI
  "0x342D0xE3D8": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueC 75% Wireless ANSI
  "0x342D0xE3D9": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueC 100% Wireless ANSI
  "0x342D0xE3EC": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueC 65% Wireless ISO
  "0x342D0xE3ED": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueC 75% Wireless ISO
  "0x342D0xE3EE": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueC 100% Wireless ISO
  "0x342D0xE3DA": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueC 65% ANSI
  "0x342D0xE3DB": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueC 75% ANSI
  "0x342D0xE3DC": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueC 100% ANSI
  "0x342D0xE3EF": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueC 65% ISO
  "0x342D0xE3F0": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueC 75% ISO
  "0x342D0xE3F1": { version_Wired: "0009", version_Wireless: "99.99.99.99" },
  // valueC 100% ISO
  // Other devices
  "0x12CF0x0491": { version_Wired: "0001", version_Wireless: "99.99.99.99" }
};
class DeviceServiceClass {
  getDeviceClassification(device2) {
    let deviceClassification = "Mouse";
    if (device2.ModelType == 1) {
      if (`${device2.SN}` == "0x093A0x829D") {
        deviceClassification = "Dongle Kit";
      } else if (`${device2.SN}` == "0x12CF0x0491") {
        deviceClassification = "valueJ";
      } else {
        deviceClassification = "Mouse";
      }
    } else if (device2.ModelType == 2) {
      if (`${device2.SN}` == "0x320F0x5088") {
        deviceClassification = "Numpad";
      } else {
        deviceClassification = "Keyboard";
      }
    } else if (device2.ModelType == 3) {
      deviceClassification = "valueE";
    }
    return deviceClassification;
  }
  getDeviceProfile(device2, profileIndex) {
    if (device2?.deviceCategoryName == "Mouse") {
      if (device2.deviceData == null) {
        throw new Error("Error getting device profile");
      }
      const index2 = profileIndex ?? device2.deviceData.profileindex;
      return device2.deviceData.profile[isNaN(index2) ? parseInt(index2) : index2];
    } else if (device2?.deviceCategoryName == "Keyboard" || device2?.deviceCategoryName == "Numpad") {
      if (device2.keyboardData == null) {
        throw new Error("Error getting device profile");
      }
      const index2 = profileIndex ?? device2.keyboardData.profileindex;
      const profileLayerIndex = device2.keyboardData.profileLayerIndex[index2];
      const currentProfile = device2.keyboardData.profileLayers[device2.keyboardData.profileindex][profileLayerIndex];
      return currentProfile;
    } else if (device2?.deviceCategoryName == "valueJ") {
      if (device2.deviceData == null) {
        throw new Error("Error getting device profile");
      }
      const currentProfile = device2.deviceData.profile[0];
      return currentProfile;
    }
    throw new Error("Error getting device profile");
  }
  getDeviceProfiles(device2) {
    if (device2?.deviceCategoryName == "Mouse") {
      if (device2.deviceData == null) {
        throw new Error("Error getting device profile");
      }
      return device2.deviceData.profile;
    } else if (device2?.deviceCategoryName == "Keyboard" || device2?.deviceCategoryName == "Numpad") {
      if (device2.keyboardData == null) {
        throw new Error("Error getting device profile");
      }
      const currentProfile = device2.keyboardData.profileLayers[device2.keyboardData.profileindex];
      return currentProfile;
    } else if (device2?.deviceCategoryName == "valueJ") {
      if (device2.deviceData == null) {
        throw new Error("Error getting device profile");
      }
      return device2.deviceData.profile;
    }
    throw new Error("Error getting device profile");
  }
  getDeviceLayerProfiles(device2, layerIndex) {
    if (device2?.deviceCategoryName == "Keyboard" || device2?.deviceCategoryName == "Numpad") {
      if (device2.keyboardData == null) {
        throw new Error("Error getting device profile");
      }
      const currentProfile = device2.keyboardData.profileLayers[layerIndex];
      return currentProfile;
    }
    throw new Error("Error getting device layer profiles");
  }
  setDeviceProfile(device2, profileIndex) {
    return new Promise((resolve, _) => {
      let obj = {
        Type: FuncType.Mouse,
        SN: device2.SN,
        Func: FuncName.ChangeProfileID,
        Param: profileIndex
      };
      ProtocolService.RunSetFunction(obj).then((data) => {
        resolve(data);
      });
    });
  }
  async getDevices() {
    const TempData = this.pluginDeviceData;
    const AllDeviceData = [];
    const plugdata = await DataService.getPluginDevice();
    for (let i2 of plugdata[0].Mouse) {
      AllDeviceData.push(i2);
    }
    for (let i2 of plugdata[0].Keyboard) {
      AllDeviceData.push(i2);
    }
    for (let i2 of plugdata[0].valueE) {
      AllDeviceData.push(i2);
    }
    for (let i2 of plugdata[0].MouseDock) {
      AllDeviceData.push(i2);
    }
    const mockDevices2 = await this.getUIMockDevices();
    AllDeviceData.push(...mockDevices2);
    const data = await DataService.getAllDevice();
    const backgroundGradient_keyboard = "linear-gradient(0.25turn, #673AB7, #512DA8)";
    const backgroundGradient_mouse = "linear-gradient(0.25turn, #005C97, #363795)";
    const backgroundGradient_valueJ = "linear-gradient(0.25turn, #4776E6, #8E54E9)";
    const backgroundGradient_valueE = "linear-gradient(0.25turn, #5433FF, #20BDFF, #A5FECB)";
    const backgroundGradient_other = "linear-gradient(0.25turn, #283048, #859398)";
    console.groupCollapsed("Device Data");
    for (let i2 = 0; i2 < AllDeviceData.length; i2++) {
      const connectedDevice = AllDeviceData[i2];
      const deviceDataIndex = data.findIndex((x2) => x2.SN == connectedDevice.SN);
      const tempDataIndex = TempData.findIndex((x2) => x2.SN == connectedDevice.SN);
      const backgroundGradient = connectedDevice.ModelType == 1 ? backgroundGradient_mouse : connectedDevice.ModelType == 2 ? backgroundGradient_keyboard : connectedDevice.ModelType == 3 ? backgroundGradient_valueE : connectedDevice.ModelType == 4 ? backgroundGradient_valueJ : backgroundGradient_other;
      console.log(
        `%c ${connectedDevice.devicename}_Data`,
        `background: ${backgroundGradient}; background-size:100% 100%; color:white; font-size: 16px; padding: 5px 10px;`
      );
      console.log(connectedDevice);
      if (deviceDataIndex != -1 && tempDataIndex == -1) {
        AllDeviceData[i2].deviceData = data[deviceDataIndex];
      } else if (tempDataIndex != -1) {
        TempData[tempDataIndex].version_Wired = AllDeviceData[i2].version_Wired;
        TempData[tempDataIndex].version_Wireless = AllDeviceData[i2].version_Wireless;
        TempData[tempDataIndex].StateArray = AllDeviceData[i2].StateArray;
        AllDeviceData[i2] = TempData[tempDataIndex];
      }
    }
    console.groupEnd();
    this.pluginDeviceData = AllDeviceData;
    this.deviceDataForUI = [];
    for (let pluginDeviceData of this.pluginDeviceData) {
      if (pluginDeviceData.SN == "0x093A0x829D") {
        continue;
      }
      if (DevicesAdapter.isvalueC(pluginDeviceData.SN)) {
        const result = await ProtocolService.RunSetFunction({
          SN: pluginDeviceData.SN,
          Type: FuncType.Keyboard,
          Func: FuncName.GetProfileID,
          Param: { SN: pluginDeviceData.SN }
        });
        if (result?.profileID != null && pluginDeviceData.deviceData != null) {
          pluginDeviceData.deviceData.profileindex = result.profileID;
        }
      }
      const uiDevice = new UIDevice(pluginDeviceData);
      if (pluginDeviceData.deviceData == null) {
        continue;
      }
      for (let j = 0; j < pluginDeviceData.deviceData.profile.length; j++) {
        uiDevice.profile.push(
          new DisplayOption(
            pluginDeviceData.deviceData.profile[j].profileName,
            pluginDeviceData.deviceData.profile[j].profileName,
            pluginDeviceData.deviceData.profile[j].profileid
          )
        );
      }
      this.deviceDataForUI.push(uiDevice);
    }
    return this.deviceDataForUI;
  }
  async getUIMockDevices() {
    const supportedDevices = await DataService.getSupportDevice();
    const mockDevices2 = [];
    for (const mockDevice of packageProperties.mockDevices) {
      const supportedDeviceIndex = supportedDevices.findIndex(
        (x2) => x2.pid.includes(mockDevice.pid) && x2.vid.includes(mockDevice.vid)
      );
      if (supportedDeviceIndex != -1) {
        const deviceIndex = packageProperties.mockDevices.indexOf(mockDevice);
        const pluginDeviceData = new PluginDeviceRecord();
        pluginDeviceData.vid = [mockDevice.vid];
        pluginDeviceData.pid = [mockDevice.pid];
        pluginDeviceData.devicename = supportedDevices[supportedDeviceIndex].devicename;
        pluginDeviceData.ModelType = supportedDevices[supportedDeviceIndex].ModelType;
        pluginDeviceData.SN = mockDevice.vid + mockDevice.pid;
        pluginDeviceData.DeviceId = deviceIndex;
        pluginDeviceData.StateID = 0;
        pluginDeviceData.StateArray = ["Mock"];
        pluginDeviceData.version_Wired = MockDeviceVersionMap[mockDevice.vid + mockDevice.pid].version_Wired;
        pluginDeviceData.version_Wireless = MockDeviceVersionMap[mockDevice.vid + mockDevice.pid].version_Wireless;
        pluginDeviceData.pairingFlag = supportedDevices[supportedDeviceIndex].pairingFlag;
        pluginDeviceData.deviceData = new DeviceDataRecord();
        pluginDeviceData.deviceData._id = deviceIndex.toString();
        pluginDeviceData.deviceData.vid = [mockDevice.vid];
        pluginDeviceData.deviceData.pid = [mockDevice.pid];
        pluginDeviceData.deviceData.SN = mockDevice.vid + mockDevice.pid;
        pluginDeviceData.deviceData.devicename = supportedDevices[supportedDeviceIndex].devicename;
        pluginDeviceData.deviceData.ModelType = supportedDevices[supportedDeviceIndex].ModelType;
        pluginDeviceData.deviceData.image = supportedDevices[supportedDeviceIndex].img;
        pluginDeviceData.deviceData.battery = supportedDevices[supportedDeviceIndex].battery;
        pluginDeviceData.deviceData.batteryLevelIndicator = supportedDevices[supportedDeviceIndex].batteryLevelIndicator;
        pluginDeviceData.deviceData.profile = [...supportedDevices[supportedDeviceIndex].defaultProfile];
        pluginDeviceData.deviceData.profileindex = 1;
        pluginDeviceData.deviceData.value = 1;
        pluginDeviceData.deviceData.layerMaxNumber = supportedDevices[supportedDeviceIndex].layerMaxNumber;
        pluginDeviceData.deviceData.profileLayerIndex = supportedDevices[supportedDeviceIndex].profileLayerIndex;
        pluginDeviceData.deviceData.sideLightSwitch = supportedDevices[supportedDeviceIndex].sideLightSwitch;
        pluginDeviceData.deviceData.profileLayers = supportedDevices[supportedDeviceIndex].profileLayers;
        mockDevices2.push(pluginDeviceData);
      }
    }
    return mockDevices2;
  }
  // vvvvv----- legacy code -----vvvvv
  // updatCurrentDeviceData: EventEmitter<object> = new EventEmitter();
  // content_Refresh: EventEmitter<object> = new EventEmitter();
  // setPageDevice = new EventEmitter<string>();
  // updateMacroData: EventEmitter<number> = new EventEmitter();
  pluginDeviceData = new Array();
  AllDeviceData = new Array();
  deviceDataForUI = new Array();
  PairingFlag = false;
  //true:Pairing Page
  FWUpgradeFlag = false;
  //true:paring page:donwloading and updating FW
  currentDevice = void 0;
  /**
   * get all pluging device
   */
  // getDevices()
  // {
  //     return new Promise<void>(async (resolve,reject) => {
  //         let TempData = this.pluginDeviceData;//21
  //         let AllDeviceData = new Array<any>();
  //         // SupportDB
  //         await DataService.getSupportDevice().then((supportedDevices) => {
  //             for (let d of packageProperties.mockDevices) {
  //                 let temp = supportedDevices.findIndex((x:{pid:string[],vid:string[]})=>x.pid.includes(d.pid)&&x.vid.includes(d.vid));
  //                 if (temp!=-1)
  //                 {
  //                     AllDeviceData.push({
  //                         "SN": d.vid+d.pid,
  //                         "pid": [d.pid],
  //                         "vid": [d.vid],
  //                         "version_Wired": MockDeviceVersionMap[d.vid+d.pid].version_Wired,
  //                         "version_Wireless": MockDeviceVersionMap[d.vid+d.pid].version_Wireless,
  //                         "devicename": supportedDevices[temp].devicename,
  //                         "pairingFlag": supportedDevices[temp].pairingFlag,
  //                         "routerID": supportedDevices[temp].routerID,
  //                         "ModelType": supportedDevices[temp].ModelType,
  //                         "battery": supportedDevices[temp].battery,
  //                         "batteryLevelIndicator": supportedDevices[temp].batteryLevelIndicator,
  //                         "sideLightSwitch": supportedDevices[temp].sideLightSwitch,
  //                         "profileLayerIndex": supportedDevices[temp].profileLayerIndex,
  //                         "profileLayers": supportedDevices[temp].profileLayers,
  //                         "deviceData": {
  //                             "profile": [...supportedDevices[temp].defaultProfile],
  //                             "image": supportedDevices[temp].img,
  //                             "profileindex": "01"
  //                         },
  //                         "_id": supportedDevices[temp]._id,
  //                         "layerMaxNumber": supportedDevices[temp].layerMaxNumber,
  //                         "set": [...supportedDevices[temp].set],
  //                         "get": [...supportedDevices[temp].get],
  //                         "defaultProfile": [...supportedDevices[temp].defaultProfile],
  //                         "StateType": [...supportedDevices[temp].StateType],
  //                         "FWUpdateExtension": supportedDevices[temp].FWUpdateExtension
  //                     });
  //                     AllDeviceData.push(supportedDevices[temp]);
  //                 }
  //             }
  //         });
  //         // PluginDB
  //         DataService.getPluginDevice().then((plugdata) => {//30
  //             //var data=JSON.parse(JSON.stringify(temp_data));
  //             console.log('dbservice_getPluginDevice()',plugdata);
  //             for(let i of plugdata[0].Mouse){
  //                 AllDeviceData.push(i);
  //             }
  //             for(let i of plugdata[0].Keyboard){
  //                 AllDeviceData.push(i);
  //             }
  //             for(let i of plugdata[0].valueE){
  //                 AllDeviceData.push(i);
  //             }
  //             for(let i of plugdata[0].MouseDock){
  //                 AllDeviceData.push(i);
  //             }
  //             // DeviceDB
  //             DataService.getAllDevice().then((data: any) => {
  //                 // var data=JSON.parse(JSON.stringify(data));
  //                 console.log(' this.dbservice.getAllDevice().then',data);
  //                 for(let i = 0; i < AllDeviceData.length; i++) {
  //                     let index = data.findIndex((x:any) => x.SN == AllDeviceData[i].SN)
  //                     let TempDataIndex = TempData.findIndex(x => x.SN == AllDeviceData[i].SN)
  //                     console.log('%c'+AllDeviceData[i].devicename+'_Data', 'background: linear-gradient(0.25turn, #3f87a6, #ebf8e1, #f69d3c); background-size: 100% 100%;color:yellow;font-size: 40px;width: 0px;height: 0px;line-height: 0px;padding: 100px;',AllDeviceData[i]);
  //                     if(index != -1 && TempDataIndex == -1){
  //                         AllDeviceData[i].deviceData = data[index];
  //                     }
  //                     else if(TempDataIndex != -1){
  //                         TempData[TempDataIndex].version_Wired=AllDeviceData[i].version_Wired;
  //                         TempData[TempDataIndex].version_Wireless=AllDeviceData[i].version_Wireless;
  //                         TempData[TempDataIndex].StateArray = AllDeviceData[i].StateArray;
  //                         // TempData[TempDataIndex].deviceData.profileindex = data[index].profileindex; // debug
  //                         AllDeviceData[i] = TempData[TempDataIndex];
  //                     }
  //                 }
  //                 this.pluginDeviceData = AllDeviceData;
  //                 console.log('pluginDeviceData',this.pluginDeviceData);
  //                 this.getDeviceForUI();
  //                 resolve();
  //             })
  //         })
  //     });
  // }
  checkHasDeviceExist() {
    return this.pluginDeviceData.length > 0 ? true : false;
  }
  /**
   * Re-Sort For UI
   */
  // getDeviceForUI() {
  //     this.deviceDataForUI = [];
  //     let obj =[];
  //     let count = 0;
  //     for(let i of this.pluginDeviceData) {
  //         if(i.SN == '0x093A0x829D') //dongle kit
  //             continue;
  //         console.log('dbservice_getDeviceForUI()', this.pluginDeviceData,i);
  //         count ++;
  //         i.profile = [];
  //         if(i.deviceData == null) { continue; }
  //         for(let j = 0; j < i.deviceData.profile.length; j++) {
  //             let profileData = {
  //                 name: i.deviceData.profile[j].profileName,
  //                 value: i.deviceData.profile[j].profileid,
  //                 translate: i.deviceData.profile[j].profileName
  //             }
  //             i.profile.push(profileData)
  //         }
  //         if(count % 4 == 0) {
  //             obj.push(i);
  //             this.deviceDataForUI.push(obj);
  //             obj = [];
  //         } else {
  //             obj.push(i);
  //         }
  //     }
  //     if( obj.length != 0)
  //         this.deviceDataForUI.push(obj);
  //     console.log('deviceDataForUI',this.deviceDataForUI)
  // }
  setAssignTargetValue(index2, parameter, value2) {
    this.pluginDeviceData[index2][parameter] = value2;
  }
  getAssignTarget(index2) {
    return this.pluginDeviceData[index2];
  }
  /**
   * 取得
   * @param ModelType 1:Mouse 2:Keyboard 3:valueE 4:Mouse Dock
   */
  getDeviceFormModel(ModelType) {
    let result = [];
    for (let i2 of this.pluginDeviceData) {
      if (i2.ModelType == ModelType)
        result.push(i2);
    }
    console.log("getDeviceFormModel", result);
    return result;
  }
  getCurrentDeviceProfileIndex() {
    let index2 = this.currentDevice.deviceData.profile.findIndex(
      (x2) => x2.profileid == this.currentDevice.deviceData.profileindex
    );
    if (index2 == -1) {
      console.log("getCurrentDeviceProfileIndex取得失敗", this.currentDevice.deviceData.profileindex);
    }
    return index2;
  }
  /**
   * 判斷當前裝置存不存在
   */
  checkDeviceExist() {
    if (this.PairingFlag)
      return true;
    let result = false;
    if (this.currentDevice != void 0) {
      let index2 = this.pluginDeviceData.findIndex((x2) => x2.SN == this.currentDevice.SN);
      if (index2 != -1)
        result = true;
      else
        result = false;
    } else {
      result = void 0;
    }
    console.log("checkDeviceExist", result);
    return result;
  }
  /**
   * 設定當前裝置
   * @param obj
   */
  setCurrentPageDevice(SN) {
    if (SN == void 0)
      return;
    let result = false;
    let index2 = this.pluginDeviceData.findIndex((x2) => x2.SN == SN);
    if (index2 != -1) {
      this.currentDevice = this.pluginDeviceData[index2];
      result = true;
    } else {
      this.currentDevice = void 0;
      result = false;
    }
    console.log("setCurrentPageDevice", this.currentDevice);
    return result;
  }
  /**
   * 取得當前裝置
   */
  getCurrentDevice() {
    return this.currentDevice;
  }
  /**
   * set Current Device
   * @param data
   */
  setCurrentDevice(data) {
    this.currentDevice = data;
    this.updateCurrentDevice(0);
  }
  /**
   * update Current Device
   * flag : 0:no emit 1:emit 2:emit and setHardware
   */
  updateCurrentDevice(flag) {
    let SN = this.currentDevice.SN;
    let index2 = this.pluginDeviceData.findIndex((x2) => x2.SN == SN);
    if (index2 != -1) {
      this.pluginDeviceData[index2] = this.currentDevice;
      DataService.updateDevice(this.currentDevice.SN, this.currentDevice.deviceData);
      console.log("updateCurrentDevice", this.currentDevice);
      if (flag) {
        let obj = {
          data: this.currentDevice,
          flag
        };
        AppEvent.publish("devices-updated", obj);
      }
    }
  }
  /**
   * Find specific key and specific value from Array
   * @param array
   * @param key
   * @param value
   */
  findNestedIndices(array, key, value2) {
    let i2;
    let j;
    for (i2 = 0; i2 < array.length; ++i2) {
      const nestedArray = array[i2];
      for (j = 0; j < nestedArray.length; ++j) {
        const object = nestedArray[j];
        if (object[key] === value2) {
          return { i: i2, j };
        }
      }
    }
    return void 0;
  }
  /**
   * When macro data is deleted and macro is set to another key
   */
  updateMacroDeviceData(macroSelect) {
    console.log("updateMacroDeviceData", macroSelect);
    let SN = "", updateFlag = false;
    for (let device2 of this.pluginDeviceData) {
      SN = device2.SN;
      updateFlag = false;
      if (device2.ModelType == 1) {
        for (let profile of device2.deviceData.profile) {
          if (profile.keybinding == null) {
            throw new Error("device profile's keybinding property is null");
          }
          for (let i2 = 0; i2 < profile.keybinding.length; i2++) {
            if (profile.keybinding[i2].group == 1 && profile.keybinding[i2].function == macroSelect.value) {
              updateFlag = true;
              if (SN == "0x22D40x1503" || SN == "0x093A0x821A" || SN == "0x320F0x831A") {
                switch (i2) {
                  case 0:
                    profile.keybinding[i2].group = 3;
                    profile.keybinding[i2].function = 1;
                    profile.keybinding[i2].name = "";
                    profile.keybinding[i2].param = "";
                    profile.keybinding[i2].param2 = "";
                    break;
                  case 1:
                    profile.keybinding[i2].group = 3;
                    profile.keybinding[i2].function = 3;
                    profile.keybinding[i2].name = "";
                    profile.keybinding[i2].param = "";
                    profile.keybinding[i2].param2 = "";
                    break;
                  case 2:
                    profile.keybinding[i2].group = 3;
                    profile.keybinding[i2].function = 2;
                    profile.keybinding[i2].name = "";
                    profile.keybinding[i2].param = "";
                    profile.keybinding[i2].param2 = "";
                    break;
                  case 3:
                    profile.keybinding[i2].group = 3;
                    profile.keybinding[i2].function = 4;
                    profile.keybinding[i2].name = "";
                    profile.keybinding[i2].param = "";
                    profile.keybinding[i2].param2 = "";
                    break;
                  case 4:
                    profile.keybinding[i2].group = 3;
                    profile.keybinding[i2].function = 5;
                    profile.keybinding[i2].name = "";
                    profile.keybinding[i2].param = "";
                    profile.keybinding[i2].param2 = "";
                    break;
                  case 5:
                    profile.keybinding[i2].group = 4;
                    profile.keybinding[i2].function = 1;
                    profile.keybinding[i2].name = "";
                    profile.keybinding[i2].param = "";
                    profile.keybinding[i2].param2 = "";
                    break;
                  case 6:
                    profile.keybinding[i2].group = 3;
                    profile.keybinding[i2].function = 6;
                    profile.keybinding[i2].name = "";
                    profile.keybinding[i2].param = "";
                    profile.keybinding[i2].param2 = "";
                    break;
                  case 7:
                    profile.keybinding[i2].group = 3;
                    profile.keybinding[i2].function = 7;
                    profile.keybinding[i2].name = "";
                    profile.keybinding[i2].param = "";
                    profile.keybinding[i2].param2 = "";
                    break;
                  case 8:
                    profile.keybinding[i2].group = 4;
                    profile.keybinding[i2].function = 5;
                    profile.keybinding[i2].name = "";
                    profile.keybinding[i2].param = 400;
                    profile.keybinding[i2].param2 = "";
                    break;
                  case 9:
                    profile.keybinding[i2].group = 7;
                    profile.keybinding[i2].function = "Home";
                    profile.keybinding[i2].name = "";
                    profile.keybinding[i2].param = "";
                    profile.keybinding[i2].param2 = "";
                    break;
                  case 10:
                    profile.keybinding[i2].group = 4;
                    profile.keybinding[i2].function = 2;
                    profile.keybinding[i2].name = "";
                    profile.keybinding[i2].param = "";
                    profile.keybinding[i2].param2 = "";
                    break;
                }
              } else {
                switch (i2) {
                  case 0:
                    profile.keybinding[i2].group = 3;
                    profile.keybinding[i2].function = 1;
                    profile.keybinding[i2].name = "";
                    profile.keybinding[i2].param = "";
                    profile.keybinding[i2].param2 = "";
                    break;
                  case 1:
                    profile.keybinding[i2].group = 3;
                    profile.keybinding[i2].function = 3;
                    profile.keybinding[i2].name = "";
                    profile.keybinding[i2].param = "";
                    profile.keybinding[i2].param2 = "";
                    break;
                  case 2:
                    profile.keybinding[i2].group = 3;
                    profile.keybinding[i2].function = 2;
                    profile.keybinding[i2].name = "";
                    profile.keybinding[i2].param = "";
                    profile.keybinding[i2].param2 = "";
                    break;
                  case 3:
                    profile.keybinding[i2].group = 3;
                    profile.keybinding[i2].function = 4;
                    profile.keybinding[i2].name = "";
                    profile.keybinding[i2].param = "";
                    profile.keybinding[i2].param2 = "";
                    break;
                  case 4:
                    profile.keybinding[i2].group = 3;
                    profile.keybinding[i2].function = 5;
                    profile.keybinding[i2].name = "";
                    profile.keybinding[i2].param = "";
                    profile.keybinding[i2].param2 = "";
                    break;
                  case 5:
                    profile.keybinding[i2].group = 4;
                    profile.keybinding[i2].function = 3;
                    profile.keybinding[i2].name = "";
                    profile.keybinding[i2].param = "";
                    profile.keybinding[i2].param2 = "";
                    break;
                  case 6:
                    profile.keybinding[i2].group = 3;
                    profile.keybinding[i2].function = 6;
                    profile.keybinding[i2].name = "";
                    profile.keybinding[i2].param = "";
                    profile.keybinding[i2].param2 = "";
                    break;
                  case 7:
                    profile.keybinding[i2].group = 3;
                    profile.keybinding[i2].function = 7;
                    profile.keybinding[i2].name = "";
                    profile.keybinding[i2].param = "";
                    profile.keybinding[i2].param2 = "";
                    break;
                }
              }
            }
          }
        }
        if (updateFlag && SN == this.currentDevice.SN)
          this.updateCurrentDevice(1);
      }
      if (device2.ModelType == 2) {
        var profileLayers = device2.deviceData.profileLayers;
        for (let profile_Arr of profileLayers) {
          for (let profile_data of profile_Arr) {
            for (let matrix_arr of profile_data.assignedKeyboardKeys) {
              console.log("%c matrix_arr", "color:rgb(255,77,255)", matrix_arr);
              for (let matrix of matrix_arr) {
                console.log("%c matrix", "color:rgb(255,77,255)", matrix);
                if (matrix.recordBindCodeType == "MacroFunction") {
                  if (matrix.macro_Data.m_Identifier == macroSelect.m_Identifier) {
                    matrix.recordBindCodeName = "Default";
                    matrix.recordBindCodeType = "";
                    matrix.macro_Data = {};
                    matrix.changed = false;
                  }
                }
              }
            }
          }
        }
        if (updateFlag && SN == this.currentDevice.SN)
          this.updateCurrentDevice(1);
      }
    }
  }
  // async checkForFirmwareUpdates<T extends {SN: string, hasUpdates: boolean} = {SN: string, hasUpdates: boolean}>(...deviceSNs: string[]): Promise<T[]>
  // {
  //     if(deviceSNs.length == 0) { return []; }
  //     const results = new Array<T>;
  //     for(let i = 0; i < deviceSNs.length; i++)
  //     {
  //         results.push({SN: deviceSNs[i], hasUpdates: await this.checkForFirmwareUpdate(deviceSNs[i])} as T)
  //     }
  //     return results;
  // }
  // async checkForFirmwareUpdate(deviceSN: string): Promise<boolean>
  // {
  // }
  async executeFirmwareUpdates(...deviceSNs) {
  }
}
function getVersion(deviceData) {
  if (deviceData.version_Wireless != null && deviceData.version_Wireless != "99.99.99.99" && deviceData.version_Wireless != "0001" && deviceData.version_Wireless != "0000") {
    return deviceData.version_Wireless;
  } else if (deviceData.version_Wired != "99.99.99.99") {
    return deviceData.version_Wired;
  }
  throw new Error(
    `Device Data could not be parsed into version; Wired Version: ${deviceData.version_Wired}, Wireless Version: ${deviceData.version_Wireless}`
  );
}
const DeviceService = new DeviceServiceClass();
const KeybindingLayers_SingleLayer = [
  new DisplayOption("default", "Option_KeybindingLayer_SingleLayer_default", 0, { translationFallback: "Default Layer" })
];
const KeybindingLayers_Keyboard = [
  new DisplayOption("none", "Option_KeybindingLayer_none", -1, { translationFallback: "" }),
  new DisplayOption("default", "Option_KeybindingLayer_default", 0, { translationFallback: "Default Layer" }),
  new DisplayOption("function", "Option_KeybindingLayer_function", 1, { translationFallback: "Function Layer" }),
  new DisplayOption("alt", "Option_KeybindingLayer_alt", 2, { translationFallback: "Alt Layer" }),
  new DisplayOption("function_alt", "Option_KeybindingLayer_function_alt", 3, { translationFallback: "Function + Alt Layer" })
];
const KeybindingLayers_ShiftLayer = [
  new DisplayOption("none", "Option_KeybindingLayer_none", -1, { translationFallback: "" }),
  new DisplayOption("default", "Option_KeybindingLayer_default", 0, { translationFallback: "Default Layer" }),
  new DisplayOption("layerShift", "Option_KeybindingLayer_layerShift", 1, { translationFallback: "Layer Shift" })
];
const LightingEffects_Mouse = [
  new DisplayOption("GloriousMode", "Option_LightingEffect_GloriousMode", 0, {
    translationFallback: "Glorious Mode",
    enableColorSelection: false,
    colorSelectionCount: 0,
    enableGradients: false
  }),
  new DisplayOption("SeamlessBreathing", "Option_LightingEffect_SeamlessBreathing", 1, {
    translationFallback: "Seamless Breathing",
    enableColorSelection: false,
    colorSelectionCount: 5,
    enableGradients: true
  }),
  new DisplayOption("Breathing", "Option_LightingEffect_Breathing", 2, {
    translationFallback: "Breathing",
    enableColorSelection: true,
    colorSelectionCount: 1,
    enableGradients: true
  }),
  new DisplayOption("SingleColor", "Option_LightingEffect_SingleColor", 3, {
    translationFallback: "Normally On",
    enableColorSelection: true,
    colorSelectionCount: 1,
    enableGradients: false
  }),
  new DisplayOption("BreathingSingleColor", "Option_LightingEffect_BreathingSingleColor", 4, {
    translationFallback: "Breathing Single Color",
    enableColorSelection: true,
    colorSelectionCount: 1,
    enableGradients: false
  }),
  new DisplayOption("Tail", "Option_LightingEffect_Tail", 5, {
    translationFallback: "Tail",
    enableColorSelection: false,
    colorSelectionCount: 6,
    enableGradients: true
  }),
  new DisplayOption("Rave", "Option_LightingEffect_Rave", 6, {
    translationFallback: "Rave",
    enableColorSelection: true,
    colorSelectionCount: 2,
    enableGradients: true
  }),
  new DisplayOption("Wave", "Option_LightingEffect_Wave", 7, {
    translationFallback: "Wave",
    enableColorSelection: false,
    colorSelectionCount: 7,
    enableGradients: true
  }),
  new DisplayOption("LEDOFF", "Option_LightingEffect_LEDOFF", 8, {
    translationFallback: "LED OFF",
    enableColorSelection: false,
    colorSelectionCount: 0,
    enableGradients: false
  })
];
const LightingEffects_Keyboard = [
  new DisplayOption("GloriousMode", "Option_LightingEffect_GloriousMode", 0, {
    translationFallback: "Glorious Mode",
    enableColorSelection: false,
    colorSelectionCount: 0,
    enableGradients: true
  }),
  new DisplayOption("Wave#1", "Option_LightingEffect_Wave#1", 1, {
    translationFallback: "Wave #1",
    enableColorSelection: true,
    colorSelectionCount: 1,
    enableGradients: true
  }),
  new DisplayOption("Wave#2", "Option_LightingEffect_Wave#2", 3, {
    translationFallback: "Wave #2",
    enableColorSelection: true,
    colorSelectionCount: 1,
    enableGradients: true
  }),
  new DisplayOption("SpiralingWave", "Option_LightingEffect_SpiralingWave", 4, {
    translationFallback: "Spiraling Wave",
    enableColorSelection: true,
    colorSelectionCount: 1,
    enableGradients: true
  }),
  new DisplayOption("AcidMode", "Option_LightingEffect_AcidMode", 5, {
    translationFallback: "Acid Mode",
    enableColorSelection: false,
    colorSelectionCount: 0,
    enableGradients: true
  }),
  new DisplayOption("Breathing", "Option_LightingEffect_Breathing", 2, {
    translationFallback: "Breathing",
    enableColorSelection: true,
    colorSelectionCount: 1,
    enableGradients: true
  }),
  new DisplayOption("NormallyOn", "Option_LightingEffect_NormallyOn", 6, {
    translationFallback: "Normally On",
    enableColorSelection: true,
    colorSelectionCount: 1,
    enableGradients: true
  }),
  new DisplayOption("RippleGraff", "Option_LightingEffect_RippleGraff", 7, {
    translationFallback: "Ripple Graff",
    enableColorSelection: true,
    colorSelectionCount: 1,
    enableGradients: true
  }),
  new DisplayOption("PassWithoutTrace", "Option_LightingEffect_PassWithoutTrace", 9, {
    translationFallback: "Pass Without Trace",
    enableColorSelection: true,
    colorSelectionCount: 1,
    enableGradients: true
  }),
  new DisplayOption("FastRunWithoutTrace", "Option_LightingEffect_FastRunWithoutTrace", 10, {
    translationFallback: "Fast Run Without Trace",
    enableColorSelection: true,
    colorSelectionCount: 1,
    enableGradients: true
  }),
  new DisplayOption("Matrix2", "Option_LightingEffect_Matrix2", 11, {
    translationFallback: "Matrix 2",
    enableColorSelection: true,
    colorSelectionCount: 1,
    enableGradients: true
  }),
  new DisplayOption("Matrix3", "Option_LightingEffect_Matrix3", 12, {
    translationFallback: "Matrix 3",
    enableColorSelection: true,
    colorSelectionCount: 1,
    enableGradients: true
  }),
  new DisplayOption("Rainbow", "Option_LightingEffect_Rainbow", 13, {
    translationFallback: "Rainbow",
    enableColorSelection: false,
    colorSelectionCount: 0,
    enableGradients: true
  }),
  new DisplayOption("HeartbeatSensor", "Option_LightingEffect_HeartbeatSensor", 14, {
    translationFallback: "Heartbeat Sensor",
    enableColorSelection: false,
    colorSelectionCount: 0,
    enableGradients: true
  }),
  new DisplayOption("DigitalTimes", "Option_LightingEffect_DigitalTimes", 15, {
    translationFallback: "Digital Times",
    enableColorSelection: true,
    colorSelectionCount: 1,
    enableGradients: true
  }),
  new DisplayOption("Kamehemeha", "Option_LightingEffect_Kamehemeha", 16, {
    translationFallback: "Kamehemeha",
    enableColorSelection: true,
    colorSelectionCount: 1,
    enableGradients: true
  }),
  new DisplayOption("Pingpong", "Option_LightingEffect_Pingpong", 17, {
    translationFallback: "Pingpong",
    enableColorSelection: true,
    colorSelectionCount: 1,
    enableGradients: true
  }),
  new DisplayOption("Surmount", "Option_LightingEffect_Surmount", 18, {
    translationFallback: "Surmount",
    enableColorSelection: true,
    colorSelectionCount: 1,
    enableGradients: true
  }),
  new DisplayOption("LEDOFF", "Option_LightingEffect_LEDOFF", 8, {
    translationFallback: "LED OFF",
    enableColorSelection: false,
    colorSelectionCount: 0,
    enableGradients: false
  })
];
const LightingEffects_valueJ = [
  new DisplayOption("SeamlessBreathing", "Option_LightingEffect_SeamlessBreathing", 1, {
    translationFallback: "Seamless Breathing",
    enableColorSelection: false,
    colorSelectionCount: 5,
    enableGradients: false
  }),
  new DisplayOption("Breathing", "Option_LightingEffect_Breathing", 3, {
    translationFallback: "Breathing",
    enableColorSelection: false,
    colorSelectionCount: 5,
    enableGradients: false
  }),
  new DisplayOption("SingleColor", "Option_LightingEffect_SingleColor", 2, {
    translationFallback: "Normally On",
    enableColorSelection: true,
    colorSelectionCount: 1,
    enableGradients: false
  }),
  new DisplayOption("BreathingSingleColor", "Option_LightingEffect_BreathingSingleColor", 4, {
    translationFallback: "Breathing Single Color",
    enableColorSelection: true,
    colorSelectionCount: 1,
    enableGradients: false
  }),
  new DisplayOption("LEDOFF", "Option_LightingEffect_LEDOFF", 8, {
    translationFallback: "LED OFF",
    enableColorSelection: false,
    colorSelectionCount: 0,
    enableGradients: false
  })
];
class ImageAttributes {
  // this object does not store a reference to the dom
  // element that is created because react wants us to
  // clone the state object for every update, and cloning
  // dom elements causes instance-reference errors. So we
  // throw away the element, and just keep the image data
  path;
  width;
  height;
  constructor(path, width, height) {
    this.path = path;
    this.width = width;
    this.height = height;
  }
  static fromPath(path) {
    const result = new Promise((resolve, reject) => {
      const image = new Image();
      image.addEventListener("load", () => {
        resolve(new ImageAttributes(path, image.naturalWidth, image.naturalHeight));
      }, { once: true });
      image.onerror = (error) => {
        reject(error);
      };
      image.src = path;
    });
    return result;
  }
}
class PreloadedImageAttributes {
}
class DeviceImageAdjustment {
  scale = 1;
  translation = { x: 0, y: 0 };
  constructor(scale = 1, translation = { x: 0, y: 0 }) {
    this.scale = scale;
    this.translation = translation;
  }
}
const PollingRates_1K = [
  new DisplayOption("125Hz", "Option_PollingRates_125Hz", 125, { translationFallback: "125Hz" }),
  new DisplayOption("250Hz", "Option_PollingRates_250Hz", 250, { translationFallback: "250Hz" }),
  new DisplayOption("500Hz", "Option_PollingRates_500Hz", 500, { translationFallback: "500Hz" }),
  new DisplayOption("1000Hz", "Option_PollingRates_1000Hz", 1e3, { translationFallback: "1000Hz" })
];
const PollingRates_4K = [
  new DisplayOption("125Hz", "Option_PollingRates_125Hz", 125, { translationFallback: "125Hz" }),
  new DisplayOption("250Hz", "Option_PollingRates_250Hz", 250, { translationFallback: "250Hz" }),
  new DisplayOption("500Hz", "Option_PollingRates_500Hz", 500, { translationFallback: "500Hz" }),
  new DisplayOption("1000Hz", "Option_PollingRates_1000Hz", 1e3, { translationFallback: "1000Hz" }),
  new DisplayOption("2000Hz", "Option_PollingRates_2000Hz", 2e3, { translationFallback: "2000Hz" }),
  new DisplayOption("4000Hz", "Option_PollingRates_4000Hz", 4e3, { translationFallback: "4000Hz" })
];
const PollingRates_4K8K = [
  new DisplayOption("125Hz", "Option_PollingRates_125Hz", 125, { translationFallback: "125Hz" }),
  new DisplayOption("250Hz", "Option_PollingRates_250Hz", 250, { translationFallback: "250Hz" }),
  new DisplayOption("500Hz", "Option_PollingRates_500Hz", 500, { translationFallback: "500Hz" }),
  new DisplayOption("1000Hz", "Option_PollingRates_1000Hz", 1e3, { translationFallback: "1000Hz" }),
  new DisplayOption("2000Hz", "Option_PollingRates_2000Hz", 2e3, { translationFallback: "2000Hz" }),
  new DisplayOption("4000Hz", "Option_PollingRates_4000Hz", 4e3, { translationFallback: "4000Hz" }),
  new DisplayOption("8000Hz", "Option_PollingRates_8000Hz", 8e3, { translationFallback: "8000Hz" })
];
class DPISection {
  min = 0;
  max = 0;
  ticks = 0;
  constructor(min = 0, max = 0, ticks = 0) {
    this.min = min;
    this.max = max;
    this.ticks = ticks;
  }
}
const DPISections_19000 = [
  new DPISection(100, 1e3, 0),
  new DPISection(1e3, 2e3, 0),
  new DPISection(2e3, 3e3, 0),
  new DPISection(3e3, 4e3, 0),
  new DPISection(4e3, 8e3, 3),
  new DPISection(8e3, 12e3, 3),
  new DPISection(12e3, 19e3, 5)
];
const DPISections_26000 = [
  new DPISection(100, 2e3, 0),
  new DPISection(2e3, 4e3, 0),
  new DPISection(4e3, 6e3, 0),
  new DPISection(6e3, 8e3, 1),
  new DPISection(8e3, 1e4, 1),
  new DPISection(1e4, 15e3, 2),
  new DPISection(15e3, 2e4, 2),
  new DPISection(2e4, 26e3, 3)
];
class LightingColorStop {
  hex;
  stop;
  constructor(hex, stop) {
    this.hex = hex;
    this.stop = stop;
  }
}
const RGBGradients_Default = [
  new DisplayOption("OGRGB", "Option_RGBGradient_OGRGB", null, {
    translationFallback: "OG RGB",
    stops: [
      new LightingColorStop("#FF0000"),
      new LightingColorStop("#FFC400"),
      new LightingColorStop("#FBFF00"),
      new LightingColorStop("#00FF33"),
      new LightingColorStop("#00FBFF"),
      new LightingColorStop("#0004FF"),
      new LightingColorStop("#E600FF")
    ]
  }),
  new DisplayOption("OGRGBRainbowRGB", "Option_RGBGradient_RGBRainbow", null, {
    translationFallback: "RGB Rainbow",
    stops: [
      new LightingColorStop("#FF009D"),
      new LightingColorStop("#FBFF00"),
      new LightingColorStop("#95FF00"),
      new LightingColorStop("#00E5FF")
    ]
  }),
  new DisplayOption("PinkGrapefruit", "Option_RGBGradient_PinkGrapefruit", null, {
    translationFallback: "Pink Grapefruit",
    stops: [
      new LightingColorStop("#FFEF5F"),
      new LightingColorStop("#FFA1C0"),
      new LightingColorStop("#EF142E")
    ]
  }),
  new DisplayOption("Nebula", "Option_RGBGradient_Nebula", null, {
    translationFallback: "Nebula",
    stops: [
      new LightingColorStop("#8C17FF"),
      new LightingColorStop("#FF31FB"),
      new LightingColorStop("#FFB5EA")
    ]
  }),
  new DisplayOption("Pastel", "Option_RGBGradient_Pastel", null, {
    translationFallback: "Pastel",
    stops: [
      new LightingColorStop("#4DF4A7"),
      new LightingColorStop("#33D9FF"),
      new LightingColorStop("#FF99B4")
    ]
  }),
  new DisplayOption("CelestialFire", "Option_RGBGradient_CelestialFire", null, {
    translationFallback: "Celestial Fire",
    stops: [
      new LightingColorStop("#0000B3"),
      new LightingColorStop("#6300FF"),
      new LightingColorStop("#FF0043"),
      new LightingColorStop("#FF9100"),
      new LightingColorStop("#FFF800")
    ]
  }),
  new DisplayOption("CelestialIce", "Option_RGBGradient_CelestialIce", null, {
    translationFallback: "Celestial Ice",
    stops: [
      new LightingColorStop("#0000B3"),
      new LightingColorStop("#6300FF"),
      new LightingColorStop("#FF0043"),
      new LightingColorStop("#FFFFFF")
    ]
  }),
  new DisplayOption("Chameleon", "Option_RGBGradient_Chameleon", null, {
    translationFallback: "Chameleon",
    stops: [
      new LightingColorStop("#00FBFF"),
      new LightingColorStop("#C8FF00"),
      new LightingColorStop("#FFEE00")
    ]
  }),
  new DisplayOption("GloriousGold", "Option_RGBGradient_GloriousGold", null, {
    translationFallback: "Glorious Gold",
    stops: [
      new LightingColorStop("#FFAC2A"),
      new LightingColorStop("#000000"),
      new LightingColorStop("#FFAC2A")
    ]
  }),
  new DisplayOption("Rave", "Option_RGBGradient_Rave", null, {
    translationFallback: "Rave",
    stops: [
      new LightingColorStop("#FF0000"),
      new LightingColorStop("#000000"),
      new LightingColorStop("#FFC400"),
      new LightingColorStop("#000000"),
      new LightingColorStop("#FBFF00"),
      new LightingColorStop("#000000"),
      new LightingColorStop("#00FF33"),
      new LightingColorStop("#000000"),
      new LightingColorStop("#00FBFF"),
      new LightingColorStop("#000000"),
      new LightingColorStop("#0004FF"),
      new LightingColorStop("#000000"),
      new LightingColorStop("#E600FF")
    ]
  }),
  new DisplayOption("Kitt", "Option_RGBGradient_Kitt", null, {
    translationFallback: "Kitt",
    stops: [
      new LightingColorStop("#FF0000"),
      new LightingColorStop("#FF8165"),
      new LightingColorStop("#FFFFFF"),
      new LightingColorStop("#000000")
    ]
  })
];
class DeviceProductColor {
  name;
  subpath;
  filenameAdjustment;
  hex;
  constructor(name2, subpath, filenameAdjustment, hex) {
    this.name = name2;
    this.subpath = subpath;
    this.filenameAdjustment = filenameAdjustment;
    this.hex = hex;
  }
}
const ProductColors_Default = [
  new DeviceProductColor("Default", "", "", "#121212")
];
const ProductColors_Black = [
  new DeviceProductColor("Black", "Black/", "Black", "#121212")
];
const ProductColors_BlackAndWhite = [
  new DeviceProductColor("Black", "Black/", "Black", "#121212"),
  new DeviceProductColor("White", "White/", "White", "#EDEDFF")
];
const ProductColors_BlackWhitePink = [
  new DeviceProductColor("Black", "Black/", "Black", "#121212"),
  new DeviceProductColor("White", "White/", "White", "#EDEDFF"),
  new DeviceProductColor("Pink", "Pink/", "Pink", "#F7C7D9")
];
const ProductColors_ModelOProEditions = [
  new DeviceProductColor("BlueLynx", "BlueLynx/", "BlueLynx", "#70b4c5"),
  new DeviceProductColor("GoldenPanda", "GoldenPanda/", "GoldenPanda", "#f1db92"),
  new DeviceProductColor("RedFox", "RedFox/", "RedFox", "#dd8a74")
];
const ProductColors_ModelDProEditions = [
  new DeviceProductColor("Flamingo", "Flamingo/", "Flamingo", "#eb96a4"),
  new DeviceProductColor("Skyline", "Skyline/", "Skyline", "#79c1e5"),
  new DeviceProductColor("Vice", "Vice/", "Vice", "#707070")
];
const ProductColors_SeriesOneProEditions = [
  new DeviceProductColor("Centauri", "Centauri/", "Centauri", "#db1a3c"),
  new DeviceProductColor("Genos", "Genos/", "Genos", "#f0a229"),
  new DeviceProductColor("Vidar", "Vidar/", "Vidar", "#4085dc")
];
const DeviceManagementSections_Mouse = [
  new DisplayOption("home", "Device_Home_Label_Home"),
  new DisplayOption("settings", "Device_Settings_Label_Settings"),
  new DisplayOption("lighting", "Device_Lighting_Label_Lighting"),
  new DisplayOption("dpi", "Device_DPI_Label_DPI"),
  new DisplayOption("keybinding", "Device_Keybinding_Label_Keybinding")
];
const DeviceManagementSections_Mouse_Unlit = [
  new DisplayOption("home", "Device_Home_Label_Home"),
  new DisplayOption("settings", "Device_Settings_Label_Settings"),
  new DisplayOption("dpi", "Device_DPI_Label_DPI"),
  new DisplayOption("keybinding", "Device_Keybinding_Label_Keybinding")
];
const DeviceManagementSections_Keyboard = [
  new DisplayOption("home", "Device_Home_Label_Home"),
  new DisplayOption("performance", "Device_Performance_Label_Performance"),
  new DisplayOption("lighting", "Device_Lighting_Label_Lighting"),
  new DisplayOption("keybinding", "Device_Keybinding_Label_Keybinding")
];
const DeviceManagementSections_AnalogKeyboard = [
  new DisplayOption("home", "Device_Home_Label_Home"),
  new DisplayOption("performance", "Device_Performance_Label_Performance"),
  new DisplayOption("lighting", "Device_Lighting_Label_Lighting"),
  new DisplayOption("keybinding", "Device_Keybinding_Label_Keybinding"),
  new DisplayOption("actuation", "Device_Actuation_Label_Actuation"),
  new DisplayOption("advanced-keys", "Device_AdvancedKeys_Label_AdvancedKeys")
  // new DisplayOption('keybinding', 'Device_Keybinding_Label_Keybinding'),
];
const DeviceManagementSections_valueJ = [
  new DisplayOption("home", "Device_Home_Label_Home"),
  new DisplayOption("lighting", "Device_Lighting_Label_Lighting")
];
const InputLatencies = [
  new DisplayOption("2ms", "Option_InputLatencies_2ms", 2, { translationFallback: "2ms" }),
  new DisplayOption("8ms", "Option_InputLatencies_8ms", 8, { translationFallback: "8ms" }),
  new DisplayOption("16ms", "Option_InputLatencies_16ms", 16, { translationFallback: "16ms" })
];
const LiftOffDistances = [
  new DisplayOption("1", "Option_LiftOffDistances_1mm", 1, { translationFallback: "1 mm" }),
  new DisplayOption("2", "Option_LiftOffDistances_2mm", 2, { translationFallback: "2 mm" })
];
const StandbyTypes = [
  new DisplayOption("InheritGlobal", "Option_StandbyTypes_InheritGlobal", 1, { translationFallback: "Inherit Global" }),
  new DisplayOption("DeviceSpecific", "Option_StandbyTypes_DeviceSpecific", 2, { translationFallback: "Device Specific" })
];
const KeyMapping = [
  { "keyCode": "65", "functionType": "Singlekey", "value": "A", "hid": 4, "translate": "A", "code": "KeyA" },
  { "keyCode": "66", "functionType": "Singlekey", "value": "B", "hid": 5, "translate": "B", "code": "KeyB" },
  { "keyCode": "67", "functionType": "Singlekey", "value": "C", "hid": 6, "translate": "C", "code": "KeyC" },
  { "keyCode": "68", "functionType": "Singlekey", "value": "D", "hid": 7, "translate": "D", "code": "KeyD" },
  { "keyCode": "69", "functionType": "Singlekey", "value": "E", "hid": 8, "translate": "E", "code": "KeyE" },
  { "keyCode": "70", "functionType": "Singlekey", "value": "F", "hid": 9, "translate": "F", "code": "KeyF" },
  { "keyCode": "71", "functionType": "Singlekey", "value": "G", "hid": 10, "translate": "G", "code": "KeyG" },
  { "keyCode": "72", "functionType": "Singlekey", "value": "H", "hid": 11, "translate": "H", "code": "KeyH" },
  { "keyCode": "73", "functionType": "Singlekey", "value": "I", "hid": 12, "translate": "I", "code": "KeyI" },
  { "keyCode": "74", "functionType": "Singlekey", "value": "J", "hid": 13, "translate": "J", "code": "KeyJ" },
  { "keyCode": "75", "functionType": "Singlekey", "value": "K", "hid": 14, "translate": "K", "code": "KeyK" },
  { "keyCode": "76", "functionType": "Singlekey", "value": "L", "hid": 15, "translate": "L", "code": "KeyL" },
  { "keyCode": "77", "functionType": "Singlekey", "value": "M", "hid": 16, "translate": "M", "code": "KeyM" },
  { "keyCode": "78", "functionType": "Singlekey", "value": "N", "hid": 17, "translate": "N", "code": "KeyN" },
  { "keyCode": "79", "functionType": "Singlekey", "value": "O", "hid": 18, "translate": "O", "code": "KeyO" },
  { "keyCode": "80", "functionType": "Singlekey", "value": "P", "hid": 19, "translate": "P", "code": "KeyP" },
  { "keyCode": "81", "functionType": "Singlekey", "value": "Q", "hid": 20, "translate": "Q", "code": "KeyQ" },
  { "keyCode": "82", "functionType": "Singlekey", "value": "R", "hid": 21, "translate": "R", "code": "KeyR" },
  { "keyCode": "83", "functionType": "Singlekey", "value": "S", "hid": 22, "translate": "S", "code": "KeyS" },
  { "keyCode": "84", "functionType": "Singlekey", "value": "T", "hid": 23, "translate": "T", "code": "KeyT" },
  { "keyCode": "85", "functionType": "Singlekey", "value": "U", "hid": 24, "translate": "U", "code": "KeyU" },
  { "keyCode": "86", "functionType": "Singlekey", "value": "V", "hid": 25, "translate": "V", "code": "KeyV" },
  { "keyCode": "87", "functionType": "Singlekey", "value": "W", "hid": 26, "translate": "W", "code": "KeyW" },
  { "keyCode": "88", "functionType": "Singlekey", "value": "X", "hid": 27, "translate": "X", "code": "KeyX" },
  { "keyCode": "89", "functionType": "Singlekey", "value": "Y", "hid": 28, "translate": "Y", "code": "KeyY" },
  { "keyCode": "90", "functionType": "Singlekey", "value": "Z", "hid": 29, "translate": "Z", "code": "KeyZ" },
  { "keyCode": "48", "functionType": "Singlekey", "value": "0", "hid": 39, "translate": "0", "code": "Digit0" },
  { "keyCode": "49", "functionType": "Singlekey", "value": "1", "hid": 30, "translate": "1", "code": "Digit1" },
  { "keyCode": "50", "functionType": "Singlekey", "value": "2", "hid": 31, "translate": "2", "code": "Digit2" },
  { "keyCode": "51", "functionType": "Singlekey", "value": "3", "hid": 32, "translate": "3", "code": "Digit3" },
  { "keyCode": "52", "functionType": "Singlekey", "value": "4", "hid": 33, "translate": "4", "code": "Digit4" },
  { "keyCode": "53", "functionType": "Singlekey", "value": "5", "hid": 34, "translate": "5", "code": "Digit5" },
  { "keyCode": "54", "functionType": "Singlekey", "value": "6", "hid": 35, "translate": "6", "code": "Digit6" },
  { "keyCode": "55", "functionType": "Singlekey", "value": "7", "hid": 36, "translate": "7", "code": "Digit7" },
  { "keyCode": "56", "functionType": "Singlekey", "value": "8", "hid": 37, "translate": "8", "code": "Digit8" },
  { "keyCode": "57", "functionType": "Singlekey", "value": "9", "hid": 38, "translate": "9", "code": "Digit9" },
  { "keyCode": "8", "functionType": "Singlekey", "value": "Backspace", "hid": 42, "translate": "Backspace", "code": "Backspace" },
  { "keyCode": "9", "functionType": "Singlekey", "value": "Tab", "hid": 43, "translate": "Tab", "code": "Tab" },
  { "keyCode": "144", "functionType": "Singlekey", "value": "Num Lock", "hid": 83, "translate": "Num Lock", "code": "NumLock" },
  { "keyCode": "13", "functionType": "Singlekey", "value": "Enter", "hid": 40, "translate": "Enter", "code": "Enter" },
  { "keyCode": "16", "functionType": "Singlekey", "value": "Shift", "hid": 225, "Modifier": 2, "translate": "Shift", "code": "ShiftRight" },
  { "keyCode": "16", "functionType": "Singlekey", "value": "Shift", "hid": 225, "Modifier": 0, "translate": "Shift", "code": "ShiftLeft" },
  { "keyCode": "17", "functionType": "Singlekey", "value": "Ctrl", "hid": 224, "Modifier": 1, "translate": "Ctrl", "code": "ControlLeft" },
  { "keyCode": "18", "functionType": "Singlekey", "value": "Alt", "hid": 226, "Modifier": 4, "translate": "Alt", "code": "AltLeft" },
  { "keyCode": "19", "functionType": "Singlekey", "value": "Break", "hid": 72, "translate": "Break", "code": "Pause" },
  { "keyCode": "20", "functionType": "Singlekey", "value": "CapsLock", "hid": 57, "translate": "CapsLock", "code": "CapsLock" },
  { "keyCode": "27", "functionType": "Singlekey", "value": "Esc", "hid": 41, "translate": "Esc", "code": "Escape" },
  { "keyCode": "32", "functionType": "Singlekey", "value": "Space", "hid": 44, "translate": "Space", "code": "Space" },
  { "keyCode": "33", "functionType": "Singlekey", "value": "PageUp", "hid": 75, "translate": "PageUp", "code": "PageUp" },
  { "keyCode": "34", "functionType": "Singlekey", "value": "PageDown", "hid": 78, "translate": "PageDown", "code": "PageDown" },
  { "keyCode": "35", "functionType": "Singlekey", "value": "End", "hid": 77, "translate": "End", "code": "End" },
  { "keyCode": "36", "functionType": "Singlekey", "value": "Home", "hid": 74, "translate": "Home", "code": "Home" },
  { "keyCode": "37", "functionType": "Singlekey", "value": "Left", "hid": 80, "translate": "Left", "code": "ArrowLeft" },
  { "keyCode": "38", "functionType": "Singlekey", "value": "Up", "hid": 82, "translate": "Up", "code": "ArrowUp" },
  { "keyCode": "39", "functionType": "Singlekey", "value": "Right", "hid": 79, "translate": "Right", "code": "ArrowRight" },
  { "keyCode": "40", "functionType": "Singlekey", "value": "Down", "hid": 81, "translate": "Down", "code": "ArrowDown" },
  { "keyCode": "44", "functionType": "Singlekey", "value": "PrintScreen", "hid": "0x46", "translate": "PrintScreen", "code": "PrintScreen" },
  { "keyCode": "45", "functionType": "Singlekey", "value": "Insert", "hid": 73, "translate": "Insert", "code": "Insert" },
  { "keyCode": "46", "functionType": "Singlekey", "value": "Delete", "hid": 76, "translate": "Delete", "code": "Delete" },
  { "keyCode": "91", "functionType": "Singlekey", "value": "Left Win", "hid": 227, "Modifier": 8, "translate": "Left Win", "code": "MetaLeft" },
  { "keyCode": "92", "functionType": "Singlekey", "value": "Right Win", "hid": 231, "Modifier": 128, "translate": "Right Win", "code": "MetaRight" },
  { "keyCode": "93", "functionType": "Singlekey", "value": "Menu", "hid": 101, "translate": "Menu", "code": "ContextMenu" },
  { "keyCode": "106", "functionType": "Singlekey", "value": "*", "hid": 85, "translate": "Num *", "code": "NumpadMultiply" },
  { "keyCode": "107", "functionType": "Singlekey", "value": "+", "hid": 87, "translate": "Num +", "code": "NumpadAdd" },
  { "keyCode": "109", "functionType": "Singlekey", "value": "-", "hid": 86, "translate": "Num -", "code": "NumpadSubtract" },
  { "keyCode": "110", "functionType": "Singlekey", "value": ".", "hid": 99, "translate": ".", "code": "NumpadDecimal" },
  { "keyCode": "111", "functionType": "Singlekey", "value": "/", "hid": 84, "translate": "Num /", "code": "NumpadDivide" },
  { "keyCode": "112", "functionType": "Singlekey", "value": "F1", "hid": 58, "translate": "F1", "code": "F1" },
  { "keyCode": "113", "functionType": "Singlekey", "value": "F2", "hid": 59, "translate": "F2", "code": "F2" },
  { "keyCode": "114", "functionType": "Singlekey", "value": "F3", "hid": 60, "translate": "F3", "code": "F3" },
  { "keyCode": "115", "functionType": "Singlekey", "value": "F4", "hid": 61, "translate": "F4", "code": "F4" },
  { "keyCode": "116", "functionType": "Singlekey", "value": "F5", "hid": 62, "translate": "F5", "code": "F5" },
  { "keyCode": "117", "functionType": "Singlekey", "value": "F6", "hid": 63, "translate": "F6", "code": "F6" },
  { "keyCode": "118", "functionType": "Singlekey", "value": "F7", "hid": 64, "translate": "F7", "code": "F7" },
  { "keyCode": "119", "functionType": "Singlekey", "value": "F8", "hid": 65, "translate": "F8", "code": "F8" },
  { "keyCode": "120", "functionType": "Singlekey", "value": "F9", "hid": 66, "translate": "F9", "code": "F9" },
  { "keyCode": "121", "functionType": "Singlekey", "value": "F10", "hid": 67, "translate": "F10", "code": "F10" },
  { "keyCode": "122", "functionType": "Singlekey", "value": "F11", "hid": 68, "translate": "F11", "code": "F11" },
  { "keyCode": "123", "functionType": "Singlekey", "value": "F12", "hid": 69, "translate": "F12", "code": "F12" },
  { "keyCode": "145", "functionType": "Singlekey", "value": "Scroll Lock", "hid": 71, "translate": "Scroll Lock", "code": "ScrollLock" },
  { "keyCode": "96", "functionType": "Singlekey", "value": "Numpad0", "hid": 98, "translate": "Numpad0", "code": "Numpad0" },
  { "keyCode": "97", "functionType": "Singlekey", "value": "Numpad1", "hid": 89, "translate": "Numpad1", "code": "Numpad1" },
  { "keyCode": "98", "functionType": "Singlekey", "value": "Numpad2", "hid": 90, "translate": "Numpad2", "code": "Numpad2" },
  { "keyCode": "99", "functionType": "Singlekey", "value": "Numpad3", "hid": 91, "translate": "Numpad3", "code": "Numpad3" },
  { "keyCode": "100", "functionType": "Singlekey", "value": "Numpad4", "hid": 92, "translate": "Numpad4", "code": "Numpad4" },
  { "keyCode": "101", "functionType": "Singlekey", "value": "Numpad5", "hid": 93, "translate": "Numpad5", "code": "Numpad5" },
  { "keyCode": "102", "functionType": "Singlekey", "value": "Numpad6", "hid": 94, "translate": "Numpad6", "code": "Numpad6" },
  { "keyCode": "103", "functionType": "Singlekey", "value": "Numpad7", "hid": 95, "translate": "Numpad7", "code": "Numpad7" },
  { "keyCode": "104", "functionType": "Singlekey", "value": "Numpad8", "hid": 96, "translate": "Numpad8", "code": "Numpad8" },
  { "keyCode": "105", "functionType": "Singlekey", "value": "Numpad9", "hid": 97, "translate": "Numpad9", "code": "Numpad9" },
  { "keyCode": "13", "functionType": "Singlekey", "value": "NumpadEnter", "hid": 88, "translate": "NumpadEnter", "code": "NumpadEnter" },
  { "keyCode": "186", "functionType": "Singlekey", "value": ";", "hid": 51, "translate": ";", "code": "Semicolon" },
  { "keyCode": "187", "functionType": "Singlekey", "value": "=", "hid": 46, "translate": "=", "code": "Equal" },
  { "keyCode": "188", "functionType": "Singlekey", "value": ",", "hid": 54, "translate": ",", "code": "Comma" },
  { "keyCode": "189", "functionType": "Singlekey", "value": "-", "hid": 45, "translate": "-", "code": "Minus" },
  { "keyCode": "190", "functionType": "Singlekey", "value": "dot", "hid": 55, "translate": "dot", "code": "Period" },
  { "keyCode": "191", "functionType": "Singlekey", "value": "/", "hid": 56, "translate": "/", "code": "Slash" },
  { "keyCode": "192", "functionType": "Singlekey", "value": "~", "hid": 53, "translate": "~", "code": "Backquote" },
  { "keyCode": "219", "functionType": "Singlekey", "value": "[", "hid": 47, "translate": "[", "code": "BracketLeft" },
  { "keyCode": "220", "functionType": "Singlekey", "value": "|", "hid": 49, "translate": "|", "code": "Backslash" },
  { "keyCode": "221", "functionType": "Singlekey", "value": "]", "hid": 48, "translate": "]", "code": "BracketRight" },
  { "keyCode": "222", "functionType": "Singlekey", "value": "'", "hid": 52, "translate": "'", "code": "Quote" },
  { "keyCode": "ScrollWheel", "functionType": "SingleKey", "value": "Volume", "hid": 1922, "translate": "ROTARY ENCODER", "code": "ROTARY ENCODER" }
];
const MediaMapping = [
  { keyCode: "1", value: "None", "hid": 4, hidMap: [0, 0], translate: "" },
  { keyCode: "1", value: "Media Player", "hid": 4, hidMap: [1, 131], translate: "" },
  { keyCode: "1", value: "Play/Pause", "hid": 4, hidMap: [0, 205], translate: "" },
  { keyCode: "1", value: "Next", "hid": 4, hidMap: [0, 181], translate: "" },
  { keyCode: "1", value: "Previous", "hid": 4, hidMap: [0, 182], translate: "" },
  { keyCode: "1", value: "Stop", "hid": 4, hidMap: [0, 183], translate: "" },
  { keyCode: "1", value: "Mute", "hid": 4, hidMap: [0, 226], translate: "" },
  { keyCode: "1", value: "Volume up", "hid": 4, hidMap: [0, 233], translate: "" },
  { keyCode: "1", value: "Volume down", "hid": 4, hidMap: [0, 234], translate: "" },
  { keyCode: "1", value: "Next track", "hid": 4, hidMap: [0, 181], translate: "" },
  { keyCode: "1", value: "Previous track", "hid": 4, hidMap: [0, 182], translate: "" }
];
const WindowsMapping = [
  { keyCode: "1", value: "None", "hid": 4, hidMap: [0, 0], translate: "" },
  { keyCode: "1", value: "Email", "hid": 4, hidMap: [1, 138], translate: "" },
  { keyCode: "1", value: "Calculator", "hid": 4, hidMap: [1, 146], translate: "" },
  { keyCode: "1", value: "My Computer", "hid": 4, hidMap: [1, 148], translate: "" },
  { keyCode: "1", value: "Explorer", "hid": 4, hidMap: [1, 148], translate: "" },
  { keyCode: "1", value: "WWW Home", "hid": 4, hidMap: [2, 35], translate: "" },
  { keyCode: "1", value: "WWW Refresh", "hid": 4, hidMap: [2, 39], translate: "" },
  { keyCode: "1", value: "WWW Stop", "hid": 4, hidMap: [2, 38], translate: "" },
  { keyCode: "1", value: "WWW Back", "hid": 4, hidMap: [2, 36], translate: "" },
  { keyCode: "1", value: "WWW Forward", "hid": 4, hidMap: [2, 37], translate: "" },
  { keyCode: "1", value: "WWW Search", "hid": 4, hidMap: [2, 33], translate: "" }
];
const Shortcuts_WindowsMapping = [
  { "keyCode": "Shortcuts_Fun_25", "functionType": "Shortcuts", "value": "Email", "hid": 17, "translate": "Email", "code": "Shortcuts_Fun_25" },
  { "keyCode": "Shortcuts_Fun_26", "functionType": "Shortcuts", "value": "Calculator", "hid": 16, "translate": "Calculator", "code": "Shortcuts_Fun_26" },
  { "keyCode": "Shortcuts_Fun_27", "functionType": "Shortcuts", "value": "My Computer", "hid": 15, "translate": "My Computer", "code": "Shortcuts_Fun_27" },
  { "keyCode": "Shortcuts_Fun_28", "functionType": "Shortcuts", "value": "Explorer", "hid": 15, "translate": "Explorer", "code": "Shortcuts_Fun_28" },
  { "keyCode": "Shortcuts_Fun_29", "functionType": "Shortcuts", "value": "WWW Home", "hid": 8, "translate": "WWW Home", "code": "Shortcuts_Fun_29" },
  { "keyCode": "Shortcuts_Fun_30", "functionType": "Shortcuts", "value": "WWW Refresh", "hid": 9, "translate": "WWW Refresh", "code": "Shortcuts_Fun_30" },
  { "keyCode": "Shortcuts_Fun_31", "functionType": "Shortcuts", "value": "WWW Stop", "hid": 10, "translate": "WWW Stop", "code": "Shortcuts_Fun_31" },
  { "keyCode": "Shortcuts_Fun_32", "functionType": "Shortcuts", "value": "WWW Back", "hid": 11, "translate": "WWW Back", "code": "Shortcuts_Fun_32" },
  { "keyCode": "Shortcuts_Fun_33", "functionType": "Shortcuts", "value": "WWW Forward", "hid": 12, "translate": "WWW Forward", "code": "Shortcuts_Fun_33" },
  { "keyCode": "Shortcuts_Fun_34", "functionType": "Shortcuts", "value": "WWW Search", "hid": 14, "translate": "WWW Search", "code": "Shortcuts_Fun_34" }
];
const SupportLanguage = [
  { name: "ENGLISH", value: "en" }
  // {name:'繁體中文', value:"tw"},
  // {name:'简体中文', value:"cn"}
];
const AllFunctionMapping = [
  { "keyCode": "Multimedia_Fun_0", "functionType": "Multimedia", "value": "Media Player", "hid": 0, "translate": "Media Player", "code": "Multimedia_Fun_0" },
  { "keyCode": "Multimedia_Fun_1", "functionType": "Multimedia", "value": "Play/Pause", "hid": 1, "translate": "Play/Pause", "code": "Multimedia_Fun_1" },
  { "keyCode": "Multimedia_Fun_2", "functionType": "Multimedia", "value": "Next", "hid": 7, "translate": "Next", "code": "Multimedia_Fun_2" },
  { "keyCode": "Multimedia_Fun_3", "functionType": "Multimedia", "value": "Previous", "hid": 6, "translate": "Previous", "code": "Multimedia_Fun_3" },
  { "keyCode": "Multimedia_Fun_4", "functionType": "Multimedia", "value": "Stop", "hid": 5, "translate": "Stop", "code": "Multimedia_Fun_4" },
  { "keyCode": "Multimedia_Fun_5", "functionType": "Multimedia", "value": "Mute", "hid": 2, "translate": "Mute", "code": "Multimedia_Fun_5" },
  { "keyCode": "Multimedia_Fun_6", "functionType": "Multimedia", "value": "Volume up", "hid": 3, "translate": "Volume up", "code": "Multimedia_Fun_6" },
  { "keyCode": "Multimedia_Fun_7", "functionType": "Multimedia", "value": "Volume down", "hid": 4, "translate": "Volume down", "code": "Multimedia_Fun_7" },
  { "keyCode": "Multimedia_Fun_8", "functionType": "Multimedia", "value": "Next track", "hid": 7, "translate": "Next track", "code": "Multimedia_Fun_8" },
  { "keyCode": "Multimedia_Fun_9", "functionType": "Multimedia", "value": "Previous track", "hid": 6, "translate": "Previoustrack", "code": "Multimedia_Fun_9" },
  { "keyCode": "KEYBOARD_Fun_10", "functionType": "KEYBOARD", "value": "Profilecycleup", "hid": 2, "translate": "Profilecycleup", "code": "KEYBOARD_Fun_10" },
  { "keyCode": "KEYBOARD_Fun_11", "functionType": "KEYBOARD", "value": "Profilecycledown", "hid": 1, "translate": "Profilecycledown", "code": "KEYBOARD_Fun_11" },
  { "keyCode": "KEYBOARD_Fun_12", "functionType": "KEYBOARD", "value": "Layercycleup", "hid": 4, "translate": "Layercycleup", "code": "KEYBOARD_Fun_12" },
  { "keyCode": "KEYBOARD_Fun_13", "functionType": "KEYBOARD", "value": "Layercycledown", "hid": 3, "translate": "Layercycledown", "code": "KEYBOARD_Fun_13" },
  { "keyCode": "mouse_left", "functionType": "MOUSE", "value": "Leftbutton", "hid": 1, "translate": "Leftbutton", "code": "mouse_left" },
  { "keyCode": "mouse_right", "functionType": "MOUSE", "value": "Rightbutton", "hid": 2, "translate": "Rightbutton", "code": "mouse_right" },
  { "keyCode": "mouse_middle", "functionType": "MOUSE", "value": "Middlebutton", "hid": 3, "translate": "Middlebutton", "code": "mouse_middle" },
  { "keyCode": "mouse_forward", "functionType": "MOUSE", "value": "Forward", "hid": 5, "translate": "Forward", "code": "mouse_forward" },
  { "keyCode": "mouse_back", "functionType": "MOUSE", "value": "Back", "hid": 4, "translate": "Back", "code": "mouse_back" },
  { "keyCode": "MOUSE_Fun_14", "functionType": "MOUSE", "value": "Leftbutton", "hid": 1, "translate": "Leftbutton", "code": "MOUSE_Fun_14" },
  { "keyCode": "MOUSE_Fun_15", "functionType": "MOUSE", "value": "Rightbutton", "hid": 2, "translate": "Rightbutton", "code": "MOUSE_Fun_15" },
  { "keyCode": "MOUSE_Fun_16", "functionType": "MOUSE", "value": "Middlebutton", "hid": 3, "translate": "Middlebutton", "code": "MOUSE_Fun_16" },
  { "keyCode": "MOUSE_Fun_17", "functionType": "MOUSE", "value": "Forward", "hid": 5, "translate": "Forward", "code": "MOUSE_Fun_17" },
  { "keyCode": "MOUSE_Fun_18", "functionType": "MOUSE", "value": "Back", "hid": 4, "translate": "Back", "code": "MOUSE_Fun_18" },
  { "keyCode": "MOUSE_Fun_19", "functionType": "MOUSE", "value": "Scrollup", "hid": 6, "translate": "Scrollup", "code": "MOUSE_Fun_19" },
  { "keyCode": "MOUSE_Fun_20", "functionType": "MOUSE", "value": "Scrolldown", "hid": 7, "translate": "Scrolldown", "code": "MOUSE_Fun_20" },
  { "keyCode": "MOUSE_Fun_21", "functionType": "MOUSE", "value": "Profilecycleup", "hid": 1944, "translate": "Profilecycleup", "code": "MOUSE_Fun_21" },
  { "keyCode": "MOUSE_Fun_22", "functionType": "MOUSE", "value": "Profilecycledown", "hid": 1943, "translate": "Profilecycledown", "code": "MOUSE_Fun_22" },
  { "keyCode": "MOUSE_Fun_23", "functionType": "MOUSE", "value": "Batterystatuscheck", "hid": 1942, "translate": "Batterystatuscheck", "code": "MOUSE_Fun_23" },
  { "keyCode": "LaunchProgram", "functionType": "LaunchProgram", "value": "LaunchProgram", "hid": 1941, "translate": "LaunchProgram", "code": "LaunchProgram" },
  { "keyCode": "LaunchWebsite", "functionType": "LaunchProgram", "value": "LaunchWebsite", "hid": 1940, "translate": "LaunchWebsite", "code": "LaunchWebsite" },
  { "keyCode": "Shortcuts_Fun_25", "functionType": "Shortcuts", "value": "Email", "hid": 17, "translate": "Email", "code": "Shortcuts_Fun_25" },
  { "keyCode": "Shortcuts_Fun_26", "functionType": "Shortcuts", "value": "Calculator", "hid": 16, "translate": "Calculator", "code": "Shortcuts_Fun_26" },
  { "keyCode": "Shortcuts_Fun_27", "functionType": "Shortcuts", "value": "My Computer", "hid": 15, "translate": "My Computer", "code": "Shortcuts_Fun_27" },
  { "keyCode": "Shortcuts_Fun_28", "functionType": "Shortcuts", "value": "Explorer", "hid": 15, "translate": "Explorer", "code": "Shortcuts_Fun_28" },
  { "keyCode": "Shortcuts_Fun_29", "functionType": "Shortcuts", "value": "WWW Home", "hid": 8, "translate": "WWW Home", "code": "Shortcuts_Fun_29" },
  { "keyCode": "Shortcuts_Fun_30", "functionType": "Shortcuts", "value": "WWW Refresh", "hid": 9, "translate": "WWW Refresh", "code": "Shortcuts_Fun_30" },
  { "keyCode": "Shortcuts_Fun_31", "functionType": "Shortcuts", "value": "WWW Stop", "hid": 10, "translate": "WWW Stop", "code": "Shortcuts_Fun_31" },
  { "keyCode": "Shortcuts_Fun_32", "functionType": "Shortcuts", "value": "WWW Back", "hid": 11, "translate": "WWW Back", "code": "Shortcuts_Fun_32" },
  { "keyCode": "Shortcuts_Fun_33", "functionType": "Shortcuts", "value": "WWW Forward", "hid": 12, "translate": "WWW Forward", "code": "Shortcuts_Fun_33" },
  { "keyCode": "Shortcuts_Fun_34", "functionType": "Shortcuts", "value": "WWW Search", "hid": 14, "translate": "WWW Search", "code": "Shortcuts_Fun_34" },
  { "keyCode": "MacroFunction", "functionType": "MacroFunction", "value": "MacroFunction", "hid": 1923, "translate": "MacroFunction", "code": "MacroFunction" },
  { "keyCode": "ScrollWheel", "functionType": "ScrollWheel", "value": "Volume", "hid": 1922, "translate": "ScrollWheel", "code": "ScrollWheel" },
  { "keyCode": "Custom_Fnkey", "functionType": "Custom_Fnkey", "value": "FN", "hid": "0x781", "translate": "FN", "code": "Custom_Fnkey" },
  { "keyCode": "0", "functionType": "Singlekey", "value": "Left Click", "hid": 176, "hid_ModelO:": 1, "translate": "Left Click", "code": "0" },
  { "keyCode": "1", "functionType": "Singlekey", "value": "Scroll Click", "hid": 178, "hid_ModelO:": 3, "translate": "Scroll Click", "code": "1" },
  { "keyCode": "2", "functionType": "Singlekey", "value": "Right Click", "hid": 177, "hid_ModelO:": 2, "translate": "Right Click", "code": "2" },
  { "keyCode": "3", "functionType": "Singlekey", "value": "Back Key", "hid": 179, "hid_ModelO": 2, "translate": "Back Key", "code": "3" },
  { "keyCode": "4", "functionType": "Singlekey", "value": "Forward Key", "hid": 180, "hid_ModelO": 2, "translate": "Forward Key", "code": "4" },
  { "keyCode": "65", "functionType": "Singlekey", "value": "A", "hid": 4, "translate": "A", "code": "KeyA" },
  { "keyCode": "66", "functionType": "Singlekey", "value": "B", "hid": 5, "translate": "B", "code": "KeyB" },
  { "keyCode": "67", "functionType": "Singlekey", "value": "C", "hid": 6, "translate": "C", "code": "KeyC" },
  { "keyCode": "68", "functionType": "Singlekey", "value": "D", "hid": 7, "translate": "D", "code": "KeyD" },
  { "keyCode": "69", "functionType": "Singlekey", "value": "E", "hid": 8, "translate": "E", "code": "KeyE" },
  { "keyCode": "70", "functionType": "Singlekey", "value": "F", "hid": 9, "translate": "F", "code": "KeyF" },
  { "keyCode": "71", "functionType": "Singlekey", "value": "G", "hid": 10, "translate": "G", "code": "KeyG" },
  { "keyCode": "72", "functionType": "Singlekey", "value": "H", "hid": 11, "translate": "H", "code": "KeyH" },
  { "keyCode": "73", "functionType": "Singlekey", "value": "I", "hid": 12, "translate": "I", "code": "KeyI" },
  { "keyCode": "74", "functionType": "Singlekey", "value": "J", "hid": 13, "translate": "J", "code": "KeyJ" },
  { "keyCode": "75", "functionType": "Singlekey", "value": "K", "hid": 14, "translate": "K", "code": "KeyK" },
  { "keyCode": "76", "functionType": "Singlekey", "value": "L", "hid": 15, "translate": "L", "code": "KeyL" },
  { "keyCode": "77", "functionType": "Singlekey", "value": "M", "hid": 16, "translate": "M", "code": "KeyM" },
  { "keyCode": "78", "functionType": "Singlekey", "value": "N", "hid": 17, "translate": "N", "code": "KeyN" },
  { "keyCode": "79", "functionType": "Singlekey", "value": "O", "hid": 18, "translate": "O", "code": "KeyO" },
  { "keyCode": "80", "functionType": "Singlekey", "value": "P", "hid": 19, "translate": "P", "code": "KeyP" },
  { "keyCode": "81", "functionType": "Singlekey", "value": "Q", "hid": 20, "translate": "Q", "code": "KeyQ" },
  { "keyCode": "82", "functionType": "Singlekey", "value": "R", "hid": 21, "translate": "R", "code": "KeyR" },
  { "keyCode": "83", "functionType": "Singlekey", "value": "S", "hid": 22, "translate": "S", "code": "KeyS" },
  { "keyCode": "84", "functionType": "Singlekey", "value": "T", "hid": 23, "translate": "T", "code": "KeyT" },
  { "keyCode": "85", "functionType": "Singlekey", "value": "U", "hid": 24, "translate": "U", "code": "KeyU" },
  { "keyCode": "86", "functionType": "Singlekey", "value": "V", "hid": 25, "translate": "V", "code": "KeyV" },
  { "keyCode": "87", "functionType": "Singlekey", "value": "W", "hid": 26, "translate": "W", "code": "KeyW" },
  { "keyCode": "88", "functionType": "Singlekey", "value": "X", "hid": 27, "translate": "X", "code": "KeyX" },
  { "keyCode": "89", "functionType": "Singlekey", "value": "Y", "hid": 28, "translate": "Y", "code": "KeyY" },
  { "keyCode": "90", "functionType": "Singlekey", "value": "Z", "hid": 29, "translate": "Z", "code": "KeyZ" },
  { "keyCode": "48", "functionType": "Singlekey", "value": "0", "hid": 39, "translate": "0", "code": "Digit0" },
  { "keyCode": "49", "functionType": "Singlekey", "value": "1", "hid": 30, "translate": "1", "code": "Digit1" },
  { "keyCode": "50", "functionType": "Singlekey", "value": "2", "hid": 31, "translate": "2", "code": "Digit2" },
  { "keyCode": "51", "functionType": "Singlekey", "value": "3", "hid": 32, "translate": "3", "code": "Digit3" },
  { "keyCode": "52", "functionType": "Singlekey", "value": "4", "hid": 33, "translate": "4", "code": "Digit4" },
  { "keyCode": "53", "functionType": "Singlekey", "value": "5", "hid": 34, "translate": "5", "code": "Digit5" },
  { "keyCode": "54", "functionType": "Singlekey", "value": "6", "hid": 35, "translate": "6", "code": "Digit6" },
  { "keyCode": "55", "functionType": "Singlekey", "value": "7", "hid": 36, "translate": "7", "code": "Digit7" },
  { "keyCode": "56", "functionType": "Singlekey", "value": "8", "hid": 37, "translate": "8", "code": "Digit8" },
  { "keyCode": "57", "functionType": "Singlekey", "value": "9", "hid": 38, "translate": "9", "code": "Digit9" },
  { "keyCode": "8", "functionType": "Singlekey", "value": "Backspace", "hid": 42, "translate": "Backspace", "code": "Backspace" },
  { "keyCode": "9", "functionType": "Singlekey", "value": "Tab", "hid": 43, "translate": "Tab", "code": "Tab" },
  { "keyCode": "144", "functionType": "Singlekey", "value": "Num Lock", "hid": 83, "translate": "Num Lock", "code": "NumLock" },
  { "keyCode": "13", "functionType": "Singlekey", "value": "Enter", "hid": 40, "translate": "Enter", "code": "Enter" },
  { "keyCode": "16", "functionType": "Singlekey", "value": "Shift", "hid": 229, "Modifier": 2, "translate": "Shift", "code": "ShiftRight" },
  { "keyCode": "16", "functionType": "Singlekey", "value": "Shift", "hid": 225, "Modifier": 0, "translate": "Shift", "code": "ShiftLeft" },
  { "keyCode": "17", "functionType": "Singlekey", "value": "Ctrl", "hid": 224, "Modifier": 1, "translate": "Ctrl", "code": "ControlLeft" },
  { "keyCode": "17", "functionType": "Singlekey", "value": "Ctrl", "hid": 228, "translate": "Ctrl", "code": "ControlRight" },
  { "keyCode": "18", "functionType": "Singlekey", "value": "Alt", "hid": 230, "Modifier": 4, "translate": "AltGr", "code": "AltRight" },
  { "keyCode": "18", "functionType": "Singlekey", "value": "Alt", "hid": 226, "translate": "Alt", "code": "AltLeft" },
  { "keyCode": "19", "functionType": "Singlekey", "value": "Break", "hid": 72, "translate": "Break", "code": "Pause" },
  { "keyCode": "20", "functionType": "Singlekey", "value": "CapsLock", "hid": 57, "translate": "CapsLock", "code": "CapsLock" },
  { "keyCode": "27", "functionType": "Singlekey", "value": "Esc", "hid": 41, "translate": "Esc", "code": "Escape" },
  { "keyCode": "32", "functionType": "Singlekey", "value": "Space", "hid": 44, "translate": "Space", "code": "Space" },
  { "keyCode": "33", "functionType": "Singlekey", "value": "PageUp", "hid": 75, "translate": "PageUp", "code": "PageUp" },
  { "keyCode": "34", "functionType": "Singlekey", "value": "PageDown", "hid": 78, "translate": "PageDown", "code": "PageDown" },
  { "keyCode": "35", "functionType": "Singlekey", "value": "End", "hid": 77, "translate": "End", "code": "End" },
  { "keyCode": "36", "functionType": "Singlekey", "value": "Home", "hid": 74, "translate": "Home", "code": "Home" },
  { "keyCode": "37", "functionType": "Singlekey", "value": "Left", "hid": 80, "translate": "Left", "code": "ArrowLeft" },
  { "keyCode": "38", "functionType": "Singlekey", "value": "Up", "hid": 82, "translate": "Up", "code": "ArrowUp" },
  { "keyCode": "39", "functionType": "Singlekey", "value": "Right", "hid": 79, "translate": "Right", "code": "ArrowRight" },
  { "keyCode": "40", "functionType": "Singlekey", "value": "Down", "hid": 81, "translate": "Down", "code": "ArrowDown" },
  { "keyCode": "44", "functionType": "Singlekey", "value": "PrintScreen", "hid": "0x46", "translate": "PrintScreen", "code": "PrintScreen" },
  { "keyCode": "45", "functionType": "Singlekey", "value": "Insert", "hid": 73, "translate": "Insert", "code": "Insert" },
  { "keyCode": "46", "functionType": "Singlekey", "value": "Delete", "hid": 76, "translate": "Delete", "code": "Delete" },
  { "keyCode": "91", "functionType": "Singlekey", "value": "Left Win", "hid": 227, "Modifier": 8, "translate": "Left Win", "code": "MetaLeft" },
  { "keyCode": "92", "functionType": "Singlekey", "value": "Right Win", "hid": 231, "Modifier": 128, "translate": "Right Win", "code": "MetaRight" },
  { "keyCode": "93", "functionType": "Singlekey", "value": "Menu", "hid": 101, "translate": "Menu", "code": "ContextMenu" },
  { "keyCode": "96", "functionType": "Singlekey", "value": "Numpad0", "hid": 98, "translate": "Numpad0", "code": "Numpad0" },
  { "keyCode": "97", "functionType": "Singlekey", "value": "Numpad1", "hid": 89, "translate": "Numpad1", "code": "Numpad1" },
  { "keyCode": "98", "functionType": "Singlekey", "value": "Numpad2", "hid": 90, "translate": "Numpad2", "code": "Numpad2" },
  { "keyCode": "99", "functionType": "Singlekey", "value": "Numpad3", "hid": 91, "translate": "Numpad3", "code": "Numpad3" },
  { "keyCode": "100", "functionType": "Singlekey", "value": "Numpad4", "hid": 92, "translate": "Numpad4", "code": "Numpad4" },
  { "keyCode": "101", "functionType": "Singlekey", "value": "Numpad5", "hid": 93, "translate": "Numpad5", "code": "Numpad5" },
  { "keyCode": "102", "functionType": "Singlekey", "value": "Numpad6", "hid": 94, "translate": "Numpad6", "code": "Numpad6" },
  { "keyCode": "103", "functionType": "Singlekey", "value": "Numpad7", "hid": 95, "translate": "Numpad7", "code": "Numpad7" },
  { "keyCode": "104", "functionType": "Singlekey", "value": "Numpad8", "hid": 96, "translate": "Numpad8", "code": "Numpad8" },
  { "keyCode": "105", "functionType": "Singlekey", "value": "Numpad9", "hid": 97, "translate": "Numpad9", "code": "Numpad9" },
  { "keyCode": "13", "functionType": "Singlekey", "value": "NumpadEnter", "hid": 88, "translate": "NumpadEnter", "code": "NumpadEnter" },
  { "keyCode": "106", "functionType": "Singlekey", "value": "*", "hid": 85, "translate": "Num *", "code": "NumpadMultiply" },
  { "keyCode": "107", "functionType": "Singlekey", "value": "+", "hid": 87, "translate": "Num +", "code": "NumpadAdd" },
  { "keyCode": "109", "functionType": "Singlekey", "value": "-", "hid": 86, "translate": "Num -", "code": "NumpadSubtract" },
  { "keyCode": "110", "functionType": "Singlekey", "value": ".", "hid": 99, "translate": ".", "code": "NumpadDecimal" },
  { "keyCode": "111", "functionType": "Singlekey", "value": "/", "hid": 84, "translate": "Num /", "code": "NumpadDivide" },
  { "keyCode": "112", "functionType": "Singlekey", "value": "F1", "hid": 58, "translate": "F1", "code": "F1" },
  { "keyCode": "113", "functionType": "Singlekey", "value": "F2", "hid": 59, "translate": "F2", "code": "F2" },
  { "keyCode": "114", "functionType": "Singlekey", "value": "F3", "hid": 60, "translate": "F3", "code": "F3" },
  { "keyCode": "115", "functionType": "Singlekey", "value": "F4", "hid": 61, "translate": "F4", "code": "F4" },
  { "keyCode": "116", "functionType": "Singlekey", "value": "F5", "hid": 62, "translate": "F5", "code": "F5" },
  { "keyCode": "117", "functionType": "Singlekey", "value": "F6", "hid": 63, "translate": "F6", "code": "F6" },
  { "keyCode": "118", "functionType": "Singlekey", "value": "F7", "hid": 64, "translate": "F7", "code": "F7" },
  { "keyCode": "119", "functionType": "Singlekey", "value": "F8", "hid": 65, "translate": "F8", "code": "F8" },
  { "keyCode": "120", "functionType": "Singlekey", "value": "F9", "hid": 66, "translate": "F9", "code": "F9" },
  { "keyCode": "121", "functionType": "Singlekey", "value": "F10", "hid": 67, "translate": "F10", "code": "F10" },
  { "keyCode": "122", "functionType": "Singlekey", "value": "F11", "hid": 68, "translate": "F11", "code": "F11" },
  { "keyCode": "123", "functionType": "Singlekey", "value": "F12", "hid": 69, "translate": "F12", "code": "F12" },
  { "keyCode": "145", "functionType": "Singlekey", "value": "Scroll Lock", "hid": 71, "translate": "Scroll Lock", "code": "ScrollLock" },
  { "keyCode": "186", "functionType": "Singlekey", "value": ";", "hid": 51, "translate": ";", "code": "Semicolon" },
  { "keyCode": "187", "functionType": "Singlekey", "value": "=", "hid": 46, "translate": "=", "code": "Equal" },
  { "keyCode": "188", "functionType": "Singlekey", "value": ",", "hid": 54, "translate": ",", "code": "Comma" },
  { "keyCode": "189", "functionType": "Singlekey", "value": "-", "hid": 45, "translate": "-", "code": "Minus" },
  { "keyCode": "190", "functionType": "Singlekey", "value": "dot", "hid": 55, "translate": "dot", "code": "Period" },
  { "keyCode": "191", "functionType": "Singlekey", "value": "/", "hid": 56, "translate": "/", "code": "Slash" },
  { "keyCode": "192", "functionType": "Singlekey", "value": "~", "hid": 53, "translate": "~", "code": "Backquote" },
  { "keyCode": "219", "functionType": "Singlekey", "value": "[", "hid": 47, "translate": "[", "code": "BracketLeft" },
  { "keyCode": "220", "functionType": "Singlekey", "value": "|", "hid": 49, "translate": "|", "code": "Backslash" },
  { "keyCode": "226", "functionType": "Singlekey", "value": "\\", "hid": 49, "translate": "IntlBackslash", "code": "IntlBackslash" },
  { "keyCode": "221", "functionType": "Singlekey", "value": "]", "hid": 48, "translate": "]", "code": "BracketRight" },
  { "keyCode": "222", "functionType": "Singlekey", "value": "'", "hid": 52, "translate": "'", "code": "Quote" }
];
function ProfileDefault() {
  const Profile_Info_Default = {
    //ProfileID:1,
    MousePerformance: {
      iStage: 1,
      iXYSync: 2,
      iPollingRate: 500,
      iCalibration: 1
    },
    MouseLighting: {
      Amplitude: 2500,
      Angle: 1,
      bQuickEffect: false,
      ColorNumber: 5,
      Decay: 50,
      Fire: 5,
      iBrightness: 50,
      iEffect: 1,
      iSpeed: 50,
      Width: 3
    },
    MouseBtnList: [
      { id: 1, group: 1, function: 1, name: "Left button" },
      { id: 2, group: 1, function: 2, name: "Right button" },
      { id: 3, group: 1, function: 3, name: "Middle button" },
      { id: 4, group: 4, function: 1, name: "Lighting effect switch" },
      { id: 5, group: 1, function: 10, name: "DPI increase loop" },
      { id: 6, group: 1, function: 4, name: "Forward button" },
      { id: 7, group: 1, function: 5, name: "Backward button" },
      { id: 8, group: 1, function: 13, name: "Squeeze" }
    ]
  };
  return Profile_Info_Default;
}
const SupportData = {
  KeyMapping,
  MediaMapping,
  WindowsMapping,
  AllFunctionMapping,
  Shortcuts_WindowsMapping,
  SupportLanguage,
  ProfileDefault
};
const DEFAULT_ACTUATION_PRESS_VALUE = 50;
const DEFAULT_ACTUATION_RELEASE_VALUE = 50;
const DEFAULT_RAPID_TRIGGER_PRESS_VALUE = 0;
const DEFAULT_RAPID_TRIGGER_RELEASE_VALUE = 35;
var AdvancedKeyMode = /* @__PURE__ */ ((AdvancedKeyMode2) => {
  AdvancedKeyMode2[AdvancedKeyMode2["None"] = 0] = "None";
  AdvancedKeyMode2[AdvancedKeyMode2["DynamicKeystroke"] = 1] = "DynamicKeystroke";
  AdvancedKeyMode2[AdvancedKeyMode2["ModTap"] = 2] = "ModTap";
  AdvancedKeyMode2[AdvancedKeyMode2["Toggle"] = 3] = "Toggle";
  return AdvancedKeyMode2;
})(AdvancedKeyMode || {});
class valueCUIState {
  isActuationPerKey = false;
  actuationGlobalPress = DEFAULT_ACTUATION_PRESS_VALUE;
  actuationGlobalRelease = DEFAULT_ACTUATION_RELEASE_VALUE;
  actuationTmpPress = DEFAULT_ACTUATION_PRESS_VALUE;
  actuationTmpRelease = DEFAULT_ACTUATION_RELEASE_VALUE;
  isRapidTriggerEnabled = false;
  isRapidTriggerPerKey = false;
  rapidTriggerGlobalPress = DEFAULT_RAPID_TRIGGER_PRESS_VALUE;
  rapidTriggerGlobalRelease = DEFAULT_RAPID_TRIGGER_RELEASE_VALUE;
  rapidTriggerTmpPress = DEFAULT_RAPID_TRIGGER_PRESS_VALUE;
  rapidTriggerTmpRelease = DEFAULT_RAPID_TRIGGER_RELEASE_VALUE;
  isVisualisationEnabled = false;
  visualisationDisplayValue = 0;
  actuationSelectedNodes = {
    layers: [],
    current: []
  };
  // TODO: maybe separate advanced keys into their own class
  advancedKeysShowSelector = false;
  advancedKeysTypeSelectionOpened = false;
  advancedKeysSelectedKeyTmp = null;
  advancedKeysBindingMode = 0;
  advancedKeysSelectedTriggerPoint = null;
  advancedKeysAssignedTmp = { toggle: null, modTapHold: null, modTapPress: null, dynamicKeystrokes: null };
  toKeyboardvalueCData() {
    const data = new KeyboardvalueCData();
    data.ActuationPressValue = this.actuationGlobalPress;
    data.ActuationReleaseValue = this.actuationGlobalRelease;
    data.RapidTriggerEnabled = this.isRapidTriggerEnabled;
    data.RapidTriggerPressValue = this.rapidTriggerGlobalPress;
    data.RapidTriggerReleaseValue = this.rapidTriggerGlobalRelease;
    data.VisualisationEnabled = this.isVisualisationEnabled;
    return data;
  }
  reset() {
    this.isActuationPerKey = false;
    this.actuationGlobalPress = DEFAULT_ACTUATION_PRESS_VALUE;
    this.actuationGlobalRelease = DEFAULT_ACTUATION_RELEASE_VALUE;
    this.actuationTmpPress = DEFAULT_ACTUATION_PRESS_VALUE;
    this.actuationTmpRelease = DEFAULT_ACTUATION_RELEASE_VALUE;
    this.isRapidTriggerEnabled = false;
    this.isRapidTriggerPerKey = false;
    this.rapidTriggerGlobalPress = DEFAULT_RAPID_TRIGGER_PRESS_VALUE;
    this.rapidTriggerGlobalRelease = DEFAULT_RAPID_TRIGGER_RELEASE_VALUE;
    this.rapidTriggerTmpPress = DEFAULT_RAPID_TRIGGER_PRESS_VALUE;
    this.rapidTriggerTmpRelease = DEFAULT_RAPID_TRIGGER_RELEASE_VALUE;
    this.isVisualisationEnabled = false;
    this.visualisationDisplayValue = 0;
    this.actuationSelectedNodes = {
      layers: [],
      current: []
    };
    this.advancedKeysShowSelector = false;
    this.advancedKeysTypeSelectionOpened = false;
    this.advancedKeysSelectedKeyTmp = null;
    this.advancedKeysBindingMode = 0;
    this.advancedKeysSelectedTriggerPoint = null;
    this.advancedKeysAssignedTmp = { toggle: null, modTapHold: null, modTapPress: null, dynamicKeystrokes: null };
  }
}
class KeyboardvalueCData {
  ActuationPressValue = DEFAULT_ACTUATION_PRESS_VALUE;
  ActuationReleaseValue = DEFAULT_ACTUATION_RELEASE_VALUE;
  RapidTriggerEnabled = false;
  RapidTriggerPressValue = DEFAULT_RAPID_TRIGGER_PRESS_VALUE;
  RapidTriggerReleaseValue = DEFAULT_RAPID_TRIGGER_RELEASE_VALUE;
  VisualisationEnabled = false;
}
class ActuationData {
  ActuationPressValue = DEFAULT_ACTUATION_PRESS_VALUE;
  ActuationReleaseValue = DEFAULT_ACTUATION_RELEASE_VALUE;
  constructor(pressValue, releaseValue = DEFAULT_ACTUATION_RELEASE_VALUE) {
    this.ActuationPressValue = pressValue;
    this.ActuationReleaseValue = releaseValue;
  }
}
class RapidTriggerData {
  RapidTriggerPressValue = DEFAULT_RAPID_TRIGGER_PRESS_VALUE;
  RapidTriggerReleaseValue = DEFAULT_RAPID_TRIGGER_RELEASE_VALUE;
  constructor(pressValue, releaseValue = DEFAULT_RAPID_TRIGGER_RELEASE_VALUE) {
    this.RapidTriggerPressValue = pressValue;
    this.RapidTriggerReleaseValue = releaseValue;
  }
}
class KeyboardvalueCKeyData {
  actuationData = null;
  rapidTriggerData = null;
  DynamicKeystrokeData = null;
  ModTapData = null;
  ToggleData = null;
}
var TriggerPoint = /* @__PURE__ */ ((TriggerPoint2) => {
  TriggerPoint2[TriggerPoint2["StageOnePress"] = 0] = "StageOnePress";
  TriggerPoint2[TriggerPoint2["StageOneRelease"] = 3] = "StageOneRelease";
  TriggerPoint2[TriggerPoint2["StageTwoPress"] = 1] = "StageTwoPress";
  TriggerPoint2[TriggerPoint2["StageTwoRelease"] = 2] = "StageTwoRelease";
  return TriggerPoint2;
})(TriggerPoint || {});
class DynamicKeystrokeData {
  triggerPoint;
  triggerPointValue = null;
  assignedKey;
  modifier;
  isContinuous;
  constructor(triggerPoint, triggerPointValue, assignedKey, modifier, isContinuous) {
    this.triggerPoint = triggerPoint;
    this.triggerPointValue = triggerPointValue;
    this.assignedKey = assignedKey;
    this.modifier = modifier;
    this.isContinuous = isContinuous;
  }
}
class ModTapData {
  holdAction;
  holdTimeout;
  tapAction;
  constructor(holdAction, holdTimeout, tapAction) {
    this.holdAction = holdAction;
    this.holdTimeout = holdTimeout;
    this.tapAction = tapAction;
  }
}
var ToggleType = /* @__PURE__ */ ((ToggleType2) => {
  ToggleType2[ToggleType2["Hold"] = 0] = "Hold";
  ToggleType2[ToggleType2["ReTrigger"] = 1] = "ReTrigger";
  return ToggleType2;
})(ToggleType || {});
class ToggleData {
  toggleType;
  toggleAction;
  constructor(toggleType, toggleAction) {
    this.toggleType = toggleType;
    this.toggleAction = toggleAction;
  }
}
const KEYASSIGN_INPUTMAX = 83;
class KeyboardData {
  defaultName = "未配置";
  profileindex = 0;
  KeyBoardArray;
  sideLightSwitch = false;
  maxKayCapNumber;
  notClickedYet = true;
  profileLayers = [];
  profileLayerIndex = [0, 0, 0];
  layerMaxNumber = 3;
  constructor(inputmax = KEYASSIGN_INPUTMAX) {
    this.maxKayCapNumber = inputmax;
    this.KeyBoardArray = [
      new KeyboardAssignmentData("PROFILE1", inputmax, 0),
      new KeyboardAssignmentData("PROFILE2", inputmax, 1),
      new KeyboardAssignmentData("PROFILE3", inputmax, 2)
      //profile
    ];
    for (let index2 = 1; index2 <= this.KeyBoardArray.length; index2++) {
      const layers = new Array();
      for (let index22 = 1; index22 <= this.layerMaxNumber; index22++) {
        layers.push(new KeyboardAssignmentData("PROFILE" + index22 * index2, inputmax, index22 * index2));
      }
      this.profileLayers.push(layers);
    }
  }
  setALLDefaultKeyArray(data) {
    console.log("setALLDefaultKeyArray", this.profileLayers);
    var KBMarr = this.KeyBoardArray;
    for (let index2 = 0; index2 < KBMarr.length; index2++) {
      KBMarr[index2].setTargetDefaultKeyArray(data);
      for (let index22 = 0; index22 < this.layerMaxNumber; index22++) {
        this.profileLayers[index2][index22].setTargetDefaultKeyArray(data);
      }
    }
  }
  getNowProfileLayersData() {
    var obj = this.profileLayers[this.profileindex];
    return obj;
  }
  getProfileLayerIndex() {
    return this.profileLayerIndex[this.profileindex];
  }
  changeProfileLayer() {
    var T2 = this.getProfileLayerIndex();
    if (T2 < this.layerMaxNumber - 1) {
      T2 = T2 + 1;
    } else {
      T2 = 0;
    }
    this.profileLayerIndex[this.profileindex] = T2;
    console.log("changeProfileLayer", this.getProfileLayerIndex());
    console.log("changeProfileLayer_profile", this.getTarget());
  }
  clearRecordMacroData(m_id = "") {
    var KBMarr = this.KeyBoardArray;
    for (let index2 = 0; index2 < KBMarr.length; index2++) {
      KBMarr[index2].delete_Find_MacroData(m_id);
      for (let index22 = 0; index22 < this.layerMaxNumber; index22++) {
        this.profileLayers[index2][index22].delete_Find_MacroData(m_id);
      }
    }
  }
  setAllProfileFieldData(field, obj) {
    var KBMarr = this.KeyBoardArray;
    for (let index2 = 0; index2 < KBMarr.length; index2++) {
      KBMarr[index2][field] = obj;
      for (let index22 = 0; index22 < this.layerMaxNumber; index22++) {
        this.profileLayers[index2][index22][field] = obj;
      }
    }
  }
  getTarget() {
    try {
      if (this.layerMaxNumber > 0) {
        return this.profileLayers[this.profileindex][this.getProfileLayerIndex()];
      } else {
        return this.KeyBoardArray[this.profileindex];
      }
    } catch (error) {
      console.log("%c profileindex", "background: blue; color: red", this.profileindex);
      console.log("%c this.getProfileLayerIndex()", "background: blue; color: red", this.getProfileLayerIndex());
    }
  }
  getAssignTarget(index2) {
    return this.KeyBoardArray[index2];
  }
}
class KeyboardAssignmentData {
  profileName = "default";
  profileid = 0;
  hibernate = true;
  winLock = false;
  hibernateTimeArr = [1, 3, 5, 10];
  hibernateTime = 3;
  defaultName = "Default";
  pollingrate = 1e3;
  sensitivity = 2;
  standby = 1;
  standbyvalue = 8;
  inputLatency = 2;
  light_PRESETS_Data = {};
  light_PERKEY_Data = { value: 1 };
  light_PERKEY_KeyAssignments = [[]];
  light_PERKEY_Layout = 0;
  recordAssignBtnIndex = 0;
  assignText = "defaultKey";
  maxKayCapNumber;
  assignedKeyboardKeys = [[]];
  //61KEY
  assignedFnKeyboardKeys = [];
  //61KEY
  fnModeMartrix = [false, false, false];
  fnModeindex = 0;
  fiveDefaultLedCode = [];
  fiveRecordIndex = 0;
  keyHoverIndex = 0;
  profileLayerIndex = 0;
  valueCData = null;
  constructor(name2 = "", inputMax, profileid) {
    this.maxKayCapNumber = inputMax;
    this.profileName = name2;
    this.profileid = profileid;
    for (let index2 = 0; index2 < 1; index2++) {
      for (let i2 = 0; i2 < this.maxKayCapNumber; i2++) {
        this.assignedKeyboardKeys[index2].push(new KeyboardKeyAssignmentData());
        this.light_PERKEY_KeyAssignments[index2].push(new PerKeyLightingKeyData());
      }
    }
    this.valueCData = new KeyboardvalueCData();
  }
  setTargetDefaultKeyArray(data) {
    for (let index2 = 0; index2 < data.length; index2++) {
      var targetValue = SupportData.AllFunctionMapping.find((x2) => x2.code == data[index2]);
      if (targetValue != void 0) {
        this.getNowModeKeyMatrix()[index2].defaultValue = targetValue.value;
      }
    }
  }
  getHibernateStepTime() {
    return this.hibernateTimeArr[this.hibernateTime];
  }
  ImportClassData(InputData) {
    var tempData = JSON.parse(JSON.stringify(InputData));
    var excludeVar = ["KB61Prohibit", "profileLayerIndex", "profileName", "light_PERKEY_KeyAssignments"];
    var arr = Object.keys(this);
    var self2 = this;
    for (let index2 = 0; index2 < arr.length; index2++) {
      if (excludeVar.indexOf(arr[index2]) == -1) {
        self2[arr[index2]] = tempData[arr[index2]];
      }
    }
  }
  HasSet(checkIndex = 0) {
    var target = this.getNowModeKeyMatrix();
    var N2 = target[checkIndex].value;
    var N22 = target[checkIndex].profileName;
    var N3 = target[checkIndex].LongTimePressValue;
    var N4 = target[checkIndex].InstantPressValue;
    return N2 != "" || N22 != "" || N3 != "" || N4 != "" ? true : false;
  }
  getKeyTargetOptionFrequency() {
    var N2 = this.getNowModeTargetMatrixKey().macroOptionNumber;
    console.log("getKeyTargetOptionFrequency", N2);
    switch (true) {
      case N2 < 65535:
        return N2;
      case N2 == 65535:
        return 1;
      case N2 == 65536:
        return 1;
    }
  }
  checkNowModeTargetMatrixAssignKey(index2, compareKeyCode) {
    if (this.getNowModeKeyMatrix()[index2].defaultValue == compareKeyCode) {
      return false;
    }
    return true;
  }
  getNowModeKeyMatrix() {
    return this.assignedKeyboardKeys[this.fnModeindex];
  }
  getNowModeTargetMatrixKey() {
    return this.getNowModeKeyMatrix()[this.recordAssignBtnIndex];
  }
  getMacroList() {
    var data = this.getNowModeKeyMatrix();
    var macrolist = [];
    for (let index2 = 0; index2 < data.length; index2++) {
      const target = data[index2];
      switch (target.recordBindCodeType) {
        case "MacroFunction":
          macrolist.push(target.macro_Data);
          break;
      }
    }
    console.log("%c getMacroList", "color:red", macrolist);
    return macrolist;
  }
  setAssignTargetData(data) {
    var target = this.getNowModeTargetMatrixKey();
    console.log("setAssignTargetData:", data, "ManagerTarget:", target);
    var arrKeys = Object.keys(data);
    for (let index2 = 0; index2 < arrKeys.length; index2++) {
      if (target[arrKeys[index2]] != void 0) {
        target[arrKeys[index2]] = data[arrKeys[index2]];
      }
    }
    target.changed = true;
  }
  reset_AllKey() {
    var KeyArray = this.getNowModeKeyMatrix();
    for (let index2 = 0; index2 < KeyArray.length; index2++) {
      for (var [key, value2] of Object.entries(KeyArray[index2])) {
        if (key != "defaultValue") {
          KeyArray[index2][key] = DefaultKeyboardKeyAssignmentData[key];
        }
      }
    }
  }
  delete_Find_MacroData(m_id = "") {
    var KeyArray = this.getNowModeKeyMatrix();
    for (let index2 = 0; index2 < KeyArray.length; index2++) {
      if (KeyArray[index2].recordBindCodeType == "MacroFunction") {
        if (KeyArray[index2].macro_Data.m_Identifier == m_id) {
          for (var [key, value2] of Object.entries(KeyArray[index2])) {
            if (key != "defaultValue") {
              KeyArray[index2][key] = DefaultKeyboardKeyAssignmentData[key];
            }
          }
        }
      }
    }
  }
}
class KeyboardKeyAssignmentData {
  keyAssignType = ["", "", ""];
  LongTimePressValue = "";
  InstantPressValue = "";
  LongTime_Instant_Status = false;
  openLongTimePress = false;
  defaultValue = "Default";
  value = "";
  macro_RepeatType = 0;
  macro_Data = {};
  assignValue = "";
  profileName = "";
  recordBindCodeType = "";
  recordBindCodeName = "";
  shortcutsWindowsEnable = false;
  ApplicationPath = "";
  WebsitePath = "";
  combinationkeyEnable = false;
  Shift = false;
  Alt = false;
  Ctrl = false;
  hasFNStatus = false;
  AltGr = false;
  Windows = false;
  changed = false;
  valueCKeyData = null;
  constructor(values = { value: "Default", recordBindCodeName: "Default" }) {
    Object.assign(this, values);
    this.valueCKeyData = new KeyboardvalueCKeyData();
  }
}
const DefaultKeyboardKeyAssignmentData = new KeyboardKeyAssignmentData();
class DeviceProductScale {
  name;
  breakpoint;
  imageSize;
  className;
  constructor(name2, breakpoint, imageSize, className) {
    this.name = name2;
    this.breakpoint = breakpoint;
    this.imageSize = imageSize;
    this.className = className;
  }
}
const ProductScales_Default = [
  new DeviceProductScale("1", { width: 0, height: 0 }, { width: 564, height: 280 }, "scale-1"),
  new DeviceProductScale("2", { width: 1020, height: 720 }, { width: 705, height: 350 }, "scale-2"),
  new DeviceProductScale("3", { width: 1440, height: 1080 }, { width: 1128, height: 560 }, "scale-3"),
  new DeviceProductScale("4", { width: 2560, height: 1440 }, { width: 1692, height: 840 }, "scale-4")
];
const ProductScales_V1 = [
  new DeviceProductScale("1", { width: 0, height: 0 }, { width: 564, height: 280 }, "scale-1"),
  new DeviceProductScale("2", { width: 1024, height: 728 }, { width: 705, height: 350 }, "scale-2"),
  new DeviceProductScale("3", { width: 1440, height: 1080 }, { width: 1128, height: 560 }, "scale-3"),
  new DeviceProductScale("4", { width: 2560, height: 1440 }, { width: 1692, height: 840 }, "scale-4")
];
var Color = /* @__PURE__ */ ((Color2) => {
  Color2["Base100"] = "--base-shades-100";
  Color2["Base90"] = "--base-shades-90";
  Color2["Base80"] = "--base-shades-80";
  Color2["Base70"] = "--base-shades-70";
  Color2["Base60"] = "--base-shades-60";
  Color2["Base50"] = "--base-shades-50";
  Color2["Base40"] = "--base-shades-40";
  Color2["Base30"] = "--base-shades-30";
  Color2["Base20"] = "--base-shades-20";
  Color2["Base10"] = "--base-shades-10";
  Color2["Glorange20"] = "--glorange-20";
  Color2["Glorange50"] = "--glorange-50";
  Color2["Glorange60"] = "--glorange-60";
  Color2["RedDark60"] = "--red-dark-60";
  Color2["GreenDark60"] = "--green-dark-60";
  Color2["GreenDark40"] = "--green-dark-40";
  Color2["Yellow40"] = "--yellow-40";
  Color2["Yellow60"] = "--yellow-60";
  Color2["Purple40"] = "--purple-40";
  Color2["Purple60"] = "--purple-60";
  Color2["FriendlyYellow"] = "--friendly-yellow";
  Color2["FriendlyBlue"] = "--friendly-blue";
  Color2["FriendlyRed"] = "--friendly-red";
  Color2["FriendlyGreen"] = "--friendly-green";
  Color2["FriendlyPurple"] = "--friendly-purple";
  Color2["FriendlyTeal"] = "--friendly-teal";
  Color2["GIDSuccessDark"] = "--gid-success-dark";
  Color2["GIDSuccessLight"] = "--gid-success-light";
  Color2["GIDUploadDark"] = "--gid-upload-dark";
  Color2["GIDUploadLight"] = "--gid-upload-light";
  Color2["GIDSyncingDark"] = "--gid-syncing-dark";
  Color2["GIDSyncingLight"] = "--gid-syncing-light";
  Color2["GIDDisconnectDark"] = "--gid-disconnect-dark";
  Color2["GIDDisconnectLight"] = "--gid-disconnect-light";
  Color2["GIDLogoMark"] = "--gid-logo-mark";
  return Color2;
})(Color || {});
var IconSize = /* @__PURE__ */ ((IconSize2) => {
  IconSize2["XSmall"] = "xsmall";
  IconSize2["Smaller"] = "smaller";
  IconSize2["Small"] = "small";
  IconSize2["Medium"] = "medium";
  IconSize2["Large"] = "large";
  IconSize2["Larger"] = "larger";
  IconSize2["ExtraLarge"] = "extralarge";
  return IconSize2;
})(IconSize || {});
var UniqueIconSize = /* @__PURE__ */ ((UniqueIconSize2) => {
  UniqueIconSize2["ModelO"] = "model-o";
  UniqueIconSize2["ModelD"] = "model-d";
  UniqueIconSize2["ModelI"] = "model-i";
  UniqueIconSize2["valueJ"] = "valueJ";
  UniqueIconSize2["GMMKPRO"] = "gmmk-pro";
  UniqueIconSize2["GMMK265"] = "gmmk2-65";
  UniqueIconSize2["GMMK296"] = "gmmk2-96";
  UniqueIconSize2["Keyboard100"] = "keyboard-100";
  UniqueIconSize2["Numpad"] = "numpad";
  UniqueIconSize2["Drag"] = "drag";
  UniqueIconSize2["LayerTop"] = "layer-top";
  UniqueIconSize2["LayerUnderneath"] = "layer-underneath";
  UniqueIconSize2["NavigationArrow"] = "navigation-arrow";
  UniqueIconSize2["DocumentMagnifyingGlass"] = "document-magnifying-glass";
  UniqueIconSize2["USBSymbol"] = "usb-symbol";
  return UniqueIconSize2;
})(UniqueIconSize || {});
const UniqueIconSizeMap = /* @__PURE__ */ new Map([
  ["model-o", { width: "26px", height: "40px" }],
  ["model-d", { width: "28px", height: "40px" }],
  ["model-i", { width: "30px", height: "40px" }],
  ["valueJ", { width: "26px", height: "40px" }],
  ["gmmk-pro", { width: "71px", height: "36px" }],
  ["gmmk2-65", { width: "74px", height: "32px" }],
  ["gmmk2-96", { width: "81px", height: "36px" }],
  ["numpad", { width: "32px", height: "32px" }],
  ["drag", { width: "12px", height: "20px" }],
  ["layer-top", { width: "47px", height: "25px" }],
  ["layer-underneath", { width: "47px", height: "17px" }],
  ["navigation-arrow", { width: "19px", height: "14px" }],
  ["document-magnifying-glass", { width: "28px", height: "35px" }],
  ["usb-symbol", { width: "12px", height: "16px" }]
]);
[
  Color.Base100,
  Color.Base60,
  Color.Base70,
  Color.Base50,
  Color.Base30,
  Color.Base20,
  Color.Base20,
  Color.Glorange60,
  Color.Glorange50,
  Color.Glorange20,
  void 0
];
var IconType = /* @__PURE__ */ ((IconType2) => {
  IconType2["SuccessCheck"] = "success-check";
  IconType2["FailCross"] = "fail-cross";
  IconType2["SaveCheck"] = "save-check";
  IconType2["CancelCross"] = "cancel-cross";
  IconType2["InformationOutline"] = "information-outline";
  IconType2["Trash"] = "trash";
  IconType2["ExclamationPoint"] = "exclamation-point";
  IconType2["QuestionMark"] = "question-mark";
  IconType2["NavigationArrow"] = "navigation-arrow";
  IconType2["CircleArrow"] = "circle-arrow";
  IconType2["UpArrowOutline"] = "up-arrow-outline";
  IconType2["DocumentMagnifyingGlass"] = "document-magnifying-glass";
  IconType2["Hourglass"] = "hourglass";
  IconType2["USBSymbol"] = "usb-symbol";
  IconType2["VerticalEllipses"] = "vertical-ellipses";
  IconType2["Drag"] = "drag";
  IconType2["Plus"] = "plus";
  IconType2["PlusOutline"] = "plus-outline";
  IconType2["Edit"] = "edit";
  IconType2["FloppyDisk"] = "floppy-disk";
  IconType2["Undo"] = "undo";
  IconType2["SaveCheckRounded"] = "save-check-rounded";
  IconType2["GloriousLogo"] = "glorious-logo";
  IconType2["CogFilled"] = "cog-filled";
  IconType2["RGBSync"] = "rgb-sync";
  IconType2["ModelODevice"] = "model-o-device";
  IconType2["ModelDDevice"] = "model-d-device";
  IconType2["ModelIDevice"] = "model-i-device";
  IconType2["GMMK265Device"] = "gmmk2-65-device";
  IconType2["GMMK296Device"] = "gmmk2-96-device";
  IconType2["GMMKPRODevice"] = "gmmk-pro-device";
  IconType2["NumpadDevice"] = "numpad-device";
  IconType2["BatteryLow"] = "battery-low";
  IconType2["BatteryMedium"] = "battery-medium";
  IconType2["BatteryHigh"] = "battery-high";
  IconType2["WirelessConnectionStrong"] = "wireless-connection-strong";
  IconType2["WirelessConnectionMedium"] = "wireless-connection-medium";
  IconType2["WirelessConnectionWeak"] = "wireless-connection-weak";
  IconType2["WirelessConnectionDisconnected"] = "wireless-connection-disconnected";
  IconType2["ProfilePicture"] = "profile-picture";
  IconType2["Sun"] = "sun";
  IconType2["Moon"] = "moon";
  IconType2["GloriousID"] = "glorious-id";
  IconType2["CloudCheck"] = "cloud-check";
  IconType2["CloudUpload"] = "cloud-upload";
  IconType2["CloudSyncing"] = "cloud-syncing";
  IconType2["CloudDisconnected"] = "cloud-disconnected";
  IconType2["WireframeGlobe"] = "wireframe-globe";
  IconType2["Shop"] = "shop";
  IconType2["Filter"] = "filter";
  IconType2["Sort"] = "sort";
  IconType2["Home"] = "home";
  IconType2["CogOutline"] = "cog-outline";
  IconType2["Lightbulb"] = "lightbulb";
  IconType2["LightningBolt"] = "lightning-bolt";
  IconType2["Speedometer"] = "speedometer";
  IconType2["Keybinding"] = "keybinding";
  IconType2["Actuation"] = "actuation";
  IconType2["AdvancedKeys"] = "advanced-keys";
  IconType2["DynamicKeystroke"] = "dynamic-keystroke";
  IconType2["ModTap"] = "mod-tap";
  IconType2["ToggleKey"] = "toggle-key";
  IconType2["LayerTop"] = "layer-top";
  IconType2["LayerUnderneath"] = "layer-underneath";
  IconType2["MacroNoRepeat"] = "macro-no-repeat";
  IconType2["MacroRepeatWhileHolding"] = "macro-repeat-while-holding";
  IconType2["MacroToggle"] = "macro-toggle";
  return IconType2;
})(IconType || {});
const DeviceImageValueTranslations = new Map(
  Object.entries({
    GMMKNUMPAD: {
      img: "Keyboard_GMMKNumpad",
      lightingViewImages: ["_Sidelights"]
    },
    GMMKPro: {
      img: "Keyboard_GMMKPRO",
      lightingViewImages: ["_Sidelights"]
    },
    GMMKProISO: {
      img: "Keyboard_GMMKPROISO",
      lightingViewImages: ["_Sidelights"]
    },
    // 'GMMKPROISOWB':
    // {
    //     img: "Keyboard_GMMKPROISO",
    //     lightingViewImages: []
    // },
    // 'GMMKPROWB':
    // {
    //     img: "Keyboard_GMMKPRO",
    //     lightingViewImages: []
    // },
    GMMKV265ISO: {
      img: "Keyboard_GMMKV265ISO",
      lightingViewImages: ["_Sidelights"]
    },
    valueB65: {
      img: "Keyboard_valueB65",
      lightingViewImages: ["_Sidelights"]
    },
    valueB65ISO: {
      img: "Keyboard_valueB65ISO",
      lightingViewImages: ["_Sidelights"]
    },
    valueB65Wireless: {
      img: "Keyboard_valueB65Wireless",
      lightingViewImages: ["_Sidelights"]
    },
    valueB65WirelessISO: {
      img: "Keyboard_valueB65WirelessISO",
      lightingViewImages: ["_Sidelights"]
    },
    valueB75: {
      img: "Keyboard_valueB75",
      lightingViewImages: ["_Sidelights"]
    },
    valueB75ISO: {
      img: "Keyboard_valueB75ISO",
      lightingViewImages: ["_Sidelights"]
    },
    valueB75Wireless: {
      img: "Keyboard_valueB75Wireless",
      lightingViewImages: ["_Sidelights"]
    },
    valueB75WirelessISO: {
      img: "Keyboard_valueB75WirelessISO",
      lightingViewImages: ["_Sidelights"]
    },
    valueB: {
      img: "Keyboard_valueB100",
      lightingViewImages: ["_Sidelights"]
    },
    valueBISO: {
      img: "Keyboard_valueB100ISO",
      lightingViewImages: ["_Sidelights"]
    },
    valueBWireless: {
      img: "Keyboard_valueB100Wireless",
      lightingViewImages: ["_Sidelights"]
    },
    valueBWirelessISO: {
      img: "Keyboard_valueB100WirelessISO",
      lightingViewImages: ["_Sidelights"]
    },
    valueC65: {
      img: "Keyboard_valueC65",
      lightingViewImages: ["_Sidelights"]
    },
    valueC75: {
      img: "Keyboard_valueC75",
      lightingViewImages: ["_Sidelights"]
    },
    valueC100: {
      img: "Keyboard_valueC100",
      lightingViewImages: ["_Sidelights"]
    },
    valueC65ISO: {
      img: "Keyboard_valueC65ISO",
      lightingViewImages: ["_Sidelights"]
    },
    valueC75ISO: {
      img: "Keyboard_valueC75ISO",
      lightingViewImages: ["_Sidelights"]
    },
    valueC100ISO: {
      img: "Keyboard_valueC100ISO",
      lightingViewImages: ["_Sidelights"]
    },
    GMMKV265US: {
      img: "Keyboard_GMMKV265US",
      lightingViewImages: ["_Sidelights"]
    },
    GMMKV296ISO: {
      img: "Keyboard_GMMKV296ISO",
      lightingViewImages: ["_Sidelights"]
    },
    GMMKV296US: {
      img: "Keyboard_GMMKV296US",
      lightingViewImages: ["_Sidelights"]
    },
    // 'ModelD-Wireless':
    // {
    //     img: "Mouse_ModelDMinusWireless",
    //     lightingViewImages: []
    // },
    "ModelO-Wireless": {
      img: "Mouse_ModelOWireless",
      lightingViewImages: []
    },
    ModelO: {
      img: "Mouse_ModelOWireless",
      lightingViewImages: []
    },
    // 'ModelO-Wireless':
    // {
    //     img: "Mouse_ModelOMinusWired",
    //     lightingViewImages: []
    // },
    ModelI: {
      img: "Mouse_ModelIWired",
      lightingViewImages: []
    },
    ModelDWireless: {
      img: "Mouse_ModelDWireless",
      lightingViewImages: []
    },
    // 'MODELOWired':
    // {
    //     img: "Mouse_ModelOWired",
    //     lightingViewImages: []
    // },
    // 'WirelessDock':
    // {
    //     img: "Dock_WirelessDock",
    //     lightingViewImages: []
    // },
    ModelOPROWL: {
      img: "Mouse_ModelOProWireless",
      lightingViewImages: []
    },
    ModelDPROWL: {
      img: "Mouse_ModelDProWireless",
      lightingViewImages: []
    },
    ModelO2PROWL: {
      img: "Mouse_ModelO2ProWireless",
      lightingViewImages: []
    },
    ModelD2PROWL: {
      img: "Mouse_ModelD2ProWireless",
      lightingViewImages: []
    },
    MOW2: {
      img: "Mouse_ModelO2Wireless",
      lightingViewImages: []
    },
    MOWired2: {
      img: "Mouse_ModelO2Wired",
      lightingViewImages: []
    },
    SeriesOneProWL: {
      img: "Mouse_SeriesOneProWireless",
      lightingViewImages: []
    },
    MI2Wireless: {
      img: "Mouse_ModelI2Wireless",
      lightingViewImages: []
    },
    ModelI2: {
      img: "Mouse_ModelvalueG",
      lightingViewImages: []
    },
    ModelD2Wired: {
      img: "Mouse_ModelD2Wired",
      lightingViewImages: []
    },
    MD2Wireless: {
      img: "Mouse_ModelD2Wireless",
      lightingViewImages: []
    },
    // 'GloriousWirelessvalueE':
    // {
    //     img: "valueE_GloriousWirelessvalueE",
    //     lightingViewImages: []
    // },
    // 'DongleV2Kit':
    // {
    //     img: "DongleKit_V2",
    //     lightingViewImages: []
    // },
    valueJ: {
      img: "valueJ",
      lightingViewImages: []
    },
    MO2MiniWireless: {
      img: "Mouse_ModelO2Wireless",
      lightingViewImages: []
    },
    MO2Mini: {
      img: "Mouse_ModelO2Wired",
      lightingViewImages: []
    },
    valueHProWireless: {
      img: "Mouse_valueHProWireless",
      lightingViewImages: []
    }
  })
);
const DevicePollingRates = new Map(
  Object.entries({
    "0x320F0x5044": PollingRates_1K,
    // GMMK PRO
    "0x320F0x5092": PollingRates_1K,
    // GMMK PRO
    "0x320F0x5046": PollingRates_1K,
    // GMMK PRO ISO
    "0x320F0x5093": PollingRates_1K,
    // GMMK PRO ISO
    "0x320F0x504A": PollingRates_1K,
    // GMMK v2 65 ISO
    "0x320F0x5045": PollingRates_1K,
    // GMMK v2 65 US
    "0x320F0x505A": PollingRates_1K,
    // GMMK v2 96 ISO
    "0x320F0x504B": PollingRates_1K,
    // GMMK v2 96 US
    "0x320F0x5088": PollingRates_1K,
    // GMMK Numpad
    "0x342D0xE3C5": PollingRates_1K,
    // valueB
    "0x342D0xE3CE": PollingRates_1K,
    // valueBISO
    "0x342D0xE3CB": PollingRates_1K,
    // valueBWireless
    "0x342D0xE3D4": PollingRates_1K,
    // valueBWirelessISO
    "0x342D0xE3C7": PollingRates_1K,
    // valueB65
    "0x342D0xE3D0": PollingRates_1K,
    // valueB65ISO
    "0x342D0xE3CD": PollingRates_1K,
    // valueB65Wireless
    "0x342D0xE3D6": PollingRates_1K,
    // valueB65WirelessISO
    "0x342D0xE3C6": PollingRates_1K,
    // valueB75
    "0x342D0xE3CF": PollingRates_1K,
    // valueB75ISO
    "0x342D0xE3CC": PollingRates_1K,
    // valueB75Wireless
    "0x342D0xE3D5": PollingRates_1K,
    // valueB75WirelessISO
    "0x342D0xE3C8": PollingRates_1K,
    // valueD100
    "0x342D0xE3D1": PollingRates_1K,
    // valueD100ISO
    "0x342D0xE3C9": PollingRates_1K,
    // valueD75
    "0x342D0xE3D2": PollingRates_1K,
    // valueD75ISO
    "0x342D0xE3CA": PollingRates_1K,
    // valueD65
    "0x342D0xE3D3": PollingRates_1K,
    // valueD65ISO
    "0x342D0xE3D7": PollingRates_1K,
    // valueC 65% Wireless ANSI
    "0x342D0xE3D8": PollingRates_1K,
    // valueC 75% Wireless ANSI
    "0x342D0xE3D9": PollingRates_1K,
    // valueC 100% Wireless ANSI
    "0x342D0xE3EC": PollingRates_1K,
    // valueC 65% Wireless ISO
    "0x342D0xE3ED": PollingRates_1K,
    // valueC 75% Wireless ISO
    "0x342D0xE3EE": PollingRates_1K,
    // valueC 100% Wireless ISO
    "0x342D0xE3DA": PollingRates_4K8K,
    // valueC 65% ANSI
    "0x342D0xE3DB": PollingRates_4K8K,
    // valueC 75% ANSI
    "0x342D0xE3DC": PollingRates_4K8K,
    // valueC 100% ANSI
    "0x342D0xE3EF": PollingRates_4K8K,
    // valueC 65% ISO
    "0x342D0xE3F0": PollingRates_4K8K,
    // valueC 75% ISO
    "0x342D0xE3F1": PollingRates_4K8K,
    // valueC 100% ISO
    "0x342D0xE3DD": PollingRates_1K,
    // valueA valueD HE 65% ANSI
    "0x342D0xE3F2": PollingRates_1K,
    // valueA valueD HE 65% ISO
    "0x342D0xE3DE": PollingRates_1K,
    // valueA valueD HE 75% ANSI
    "0x342D0xE3F3": PollingRates_1K,
    // valueA valueD HE 75% ISO
    "0x342D0xE3DF": PollingRates_1K,
    // valueA valueD HE 100% ANSI
    "0x342D0xE3F4": PollingRates_1K,
    // valueA valueD HE 100% ISO
    "0x320F0x8888": PollingRates_1K,
    // Model O Wired
    "0x258A0x2011": PollingRates_1K,
    // Model O Wireless
    "0x258A0x2036": PollingRates_1K,
    // Model O Minus Wired
    "0x258A0x2013": PollingRates_1K,
    // Model O Minus Wireless
    "0x258A0x2015": PollingRates_1K,
    // Model O Pro Wireless
    "0x320F0x823A": PollingRates_1K,
    // Model O2 Wired
    "0x093A0x822A": PollingRates_1K,
    // Model O2 Wireless
    "0x258A0x2019": PollingRates_1K,
    // Model O2 Pro 1k
    "0x258A0x201B": PollingRates_4K8K,
    // Model O 2 Pro 8k
    "0x258A0x2012": PollingRates_1K,
    // Model D Wireless
    "0x258A0x2014": PollingRates_1K,
    // Model D Minus Wireless
    "0x258A0x2017": PollingRates_1K,
    // Model D Pro Wireless
    "0x258A0x201A": PollingRates_1K,
    // Model D 2 Pro 1k
    "0x258A0x201C": PollingRates_4K8K,
    // Model D 2 Pro 8k
    "0x22D40x1503": PollingRates_1K,
    // Model I
    "0x093A0x821A": PollingRates_1K,
    // Model I2 Wireless
    "0x320F0x831A": PollingRates_1K,
    // Model valueG
    "0x320F0x825A": PollingRates_1K,
    // Model D2 Wired
    "0x093A0x824A": PollingRates_1K,
    // Model D2 Wireless
    "0x258A0x2018": PollingRates_1K,
    // Series One Pro Wireless
    "0x258A0x201D": PollingRates_4K8K,
    //valueH Pro (8k wireless)
    "0x093A0x826A": PollingRates_1K,
    //valueF Wireless
    "0x320F0x827A": PollingRates_1K,
    //valueF
    "0x24420x2682": PollingRates_1K,
    // temporary valueB
    "0x24420x0056": PollingRates_1K,
    // temporary valueB Wireless
    "0x24420x0052": PollingRates_1K,
    // temporary valueB 65%
    "0x24420x0054": PollingRates_1K,
    // temporary valueB 65% Wireless
    "0x24420x0053": PollingRates_1K,
    // temporary valueB 75%
    "0x24420x0055": PollingRates_1K
    // temporary valueB 75% Wireless
  })
);
const DeviceWirelessPollingRates = new Map(
  Object.entries({
    "0x258A0x2019": PollingRates_1K,
    // Model O2 Pro 1k
    "0x258A0x201B": PollingRates_4K,
    // Model O 2 Pro 8k
    "0x258A0x201A": PollingRates_1K,
    // Model D 2 Pro 1k
    "0x258A0x201C": PollingRates_4K,
    // Model D 2 Pro 8k
    "0x258A0x201D": PollingRates_4K8K
    //valueH Pro (8k wireless)
  })
);
const DeviceLightingEffects = new Map(
  Object.entries({
    "0x320F0x5044": LightingEffects_Keyboard,
    // GMMK PRO
    "0x320F0x5092": LightingEffects_Keyboard,
    // GMMK PRO
    "0x320F0x5046": LightingEffects_Keyboard,
    // GMMK PRO ISO
    "0x320F0x5093": LightingEffects_Keyboard,
    // GMMK PRO ISO
    "0x320F0x504A": LightingEffects_Keyboard,
    // GMMK v2 65 ISO
    "0x320F0x5045": LightingEffects_Keyboard,
    // GMMK v2 65 US
    "0x320F0x505A": LightingEffects_Keyboard,
    // GMMK v2 96 ISO
    "0x320F0x504B": LightingEffects_Keyboard,
    // GMMK v2 96 US
    "0x320F0x5088": LightingEffects_Keyboard,
    // GMMK Numpad
    "0x342D0xE3C5": LightingEffects_Keyboard,
    // valueB
    "0x342D0xE3CE": LightingEffects_Keyboard,
    // valueBISO
    "0x342D0xE3CB": LightingEffects_Keyboard,
    // valueBWireless
    "0x342D0xE3D4": LightingEffects_Keyboard,
    // valueBWirelessISO
    "0x342D0xE3C7": LightingEffects_Keyboard,
    // valueB65
    "0x342D0xE3D0": LightingEffects_Keyboard,
    // valueB65ISO
    "0x342D0xE3CD": LightingEffects_Keyboard,
    // valueB65Wireless
    "0x342D0xE3D6": LightingEffects_Keyboard,
    // valueB65WirelessISO
    "0x342D0xE3C6": LightingEffects_Keyboard,
    // valueB75
    "0x342D0xE3CF": LightingEffects_Keyboard,
    // valueB75ISO
    "0x342D0xE3CC": LightingEffects_Keyboard,
    // valueB75Wireless
    "0x342D0xE3D5": LightingEffects_Keyboard,
    // valueB75WirelessISO
    "0x342D0xE3C8": LightingEffects_Keyboard,
    // valueD100
    "0x342D0xE3D1": LightingEffects_Keyboard,
    // valueD100ISO
    "0x342D0xE3C9": LightingEffects_Keyboard,
    // valueD75
    "0x342D0xE3D2": LightingEffects_Keyboard,
    // valueD75ISO
    "0x342D0xE3CA": LightingEffects_Keyboard,
    // valueD65
    "0x342D0xE3D3": LightingEffects_Keyboard,
    // valueD65ISO
    "0x342D0xE3D7": LightingEffects_Keyboard,
    // valueC 65% Wireless ANSI
    "0x342D0xE3D8": LightingEffects_Keyboard,
    // valueC 75% Wireless ANSI
    "0x342D0xE3D9": LightingEffects_Keyboard,
    // valueC 100% Wireless ANSI
    "0x342D0xE3EC": LightingEffects_Keyboard,
    // valueC 65% Wireless ISO
    "0x342D0xE3ED": LightingEffects_Keyboard,
    // valueC 75% Wireless ISO
    "0x342D0xE3EE": LightingEffects_Keyboard,
    // valueC 100% Wireless ISO
    "0x342D0xE3DA": LightingEffects_Keyboard,
    // valueC 65% ANSI
    "0x342D0xE3DB": LightingEffects_Keyboard,
    // valueC 75% ANSI
    "0x342D0xE3DC": LightingEffects_Keyboard,
    // valueC 100% ANSI
    "0x342D0xE3EF": LightingEffects_Keyboard,
    // valueC 65% ISO
    "0x342D0xE3F0": LightingEffects_Keyboard,
    // valueC 75% ISO
    "0x342D0xE3F1": LightingEffects_Keyboard,
    // valueC 100% ISO
    "0x342D0xE3DD": LightingEffects_Keyboard,
    // valueA valueD HE 65% ANSI
    "0x342D0xE3F2": LightingEffects_Keyboard,
    // valueA valueD HE 65% ISO
    "0x342D0xE3DE": LightingEffects_Keyboard,
    // valueA valueD HE 75% ANSI
    "0x342D0xE3F3": LightingEffects_Keyboard,
    // valueA valueD HE 75% ISO
    "0x342D0xE3DF": LightingEffects_Keyboard,
    // valueA valueD HE 100% ANSI
    "0x342D0xE3F4": LightingEffects_Keyboard,
    // valueA valueD HE 100% ISO
    "0x320F0x8888": LightingEffects_Mouse,
    // Model O Wired
    "0x258A0x2011": LightingEffects_Mouse,
    // Model O Wireless
    "0x258A0x2036": LightingEffects_Mouse,
    // Model O Minus Wired
    "0x258A0x2013": LightingEffects_Mouse,
    // Model O Minus Wireless
    "0x258A0x2015": LightingEffects_Mouse,
    // Model O Pro Wireless
    "0x320F0x823A": LightingEffects_Mouse,
    // Model O2 Wired
    "0x093A0x822A": LightingEffects_Mouse,
    // Model O2 Wireless
    "0x258A0x2019": LightingEffects_Mouse,
    // Model O2 Pro 1k
    "0x258A0x201B": LightingEffects_Mouse,
    // Model O 2 Pro 8k
    "0x258A0x2012": LightingEffects_Mouse,
    // Model D Wireless
    "0x258A0x2014": LightingEffects_Mouse,
    // Model D Minus Wireless
    "0x258A0x2017": LightingEffects_Mouse,
    // Model D Pro Wireless
    "0x258A0x201A": LightingEffects_Mouse,
    // Model D 2 Pro 1k
    "0x258A0x201C": LightingEffects_Mouse,
    // Model D 2 Pro 8k
    "0x22D40x1503": LightingEffects_Mouse,
    // Model I
    "0x093A0x821A": LightingEffects_Mouse,
    // Model I2
    "0x320F0x831A": LightingEffects_Mouse,
    // Model valueG
    "0x320F0x825A": LightingEffects_Mouse,
    // Model D2 Wired
    "0x093A0x824A": LightingEffects_Mouse,
    // Model D2 Wireless
    "0x258A0x2018": LightingEffects_Mouse,
    // Series One Pro Wireless
    "0x258A0x201D": LightingEffects_Mouse,
    //valueH Pro (8k wireless)
    "0x093A0x826A": LightingEffects_Mouse,
    //valueF Wireless
    "0x320F0x827A": LightingEffects_Mouse,
    //valueF
    "0x12CF0x0491": LightingEffects_valueJ,
    // RGB valueJ
    "0x24420x2682": LightingEffects_Keyboard,
    // temporary valueB
    "0x24420x0056": LightingEffects_Keyboard,
    // temporary valueB Wireless
    "0x24420x0052": LightingEffects_Keyboard,
    // temporary valueB 65%
    "0x24420x0054": LightingEffects_Keyboard,
    // temporary valueB 65% Wireless
    "0x24420x0053": LightingEffects_Keyboard,
    // temporary valueB 75%
    "0x24420x0055": LightingEffects_Keyboard
    // temporary valueB 75% Wireless
  })
);
const DeviceDPISections = new Map(
  Object.entries({
    // don't have DPIs
    // "0x320F0x5044": LightingEffects_Keyboard, // GMMK PRO
    // "0x320F0x5092": LightingEffects_Keyboard, // GMMK PRO
    // "0x320F0x5046": LightingEffects_Keyboard, // GMMK PRO ISO
    // "0x320F0x5093": LightingEffects_Keyboard, // GMMK PRO ISO
    // "0x320F0x504A": LightingEffects_Keyboard, // GMMK v2 65 ISO
    // "0x320F0x5045": LightingEffects_Keyboard, // GMMK v2 65 US
    // "0x320F0x505A": LightingEffects_Keyboard, // GMMK v2 96 ISO
    // "0x320F0x504B": LightingEffects_Keyboard, // GMMK v2 96 US
    // "0x320F0x5088": LightingEffects_Keyboard, // GMMK Numpad
    "0x320F0x8888": DPISections_19000,
    // Model O Wired
    "0x258A0x2011": DPISections_19000,
    // Model O Wireless
    "0x258A0x2036": DPISections_19000,
    // Model O Minus Wired
    "0x258A0x2013": DPISections_19000,
    // Model O Minus Wireless
    "0x258A0x2015": DPISections_19000,
    // Model O Pro Wireless
    "0x320F0x823A": DPISections_26000,
    // Model O2 Wired
    "0x093A0x822A": DPISections_26000,
    // Model O2 Wireless
    "0x258A0x2019": DPISections_26000,
    // Model O2 Pro 1k
    "0x258A0x201B": DPISections_26000,
    // Model O 2 Pro 8k
    "0x258A0x2012": DPISections_19000,
    // Model D Wireless
    "0x258A0x2014": DPISections_19000,
    // Model D Minus Wireless
    "0x258A0x2017": DPISections_19000,
    // Model D Pro Wireless
    "0x258A0x201A": DPISections_26000,
    // Model D 2 Pro 1k
    "0x258A0x201C": DPISections_26000,
    // Model D 2 Pro 8k
    "0x22D40x1503": DPISections_19000,
    // Model I
    "0x093A0x821A": DPISections_26000,
    // Model I2
    "0x320F0x831A": DPISections_26000,
    // Model valueG
    "0x320F0x825A": DPISections_26000,
    // Model D2 Wired
    "0x093A0x824A": DPISections_26000,
    // Model D2 Wireless
    "0x258A0x2018": DPISections_19000,
    // Series One Pro Wireless
    "0x258A0x201D": DPISections_26000,
    //valueH Pro (8k wireless)
    "0x093A0x826A": DPISections_26000,
    //valueF Wireless
    "0x320F0x827A": DPISections_26000
    //valueF
  })
);
const DeviceRGBGradients = new Map(
  Object.entries({
    "0x320F0x5044": RGBGradients_Default,
    // GMMK PRO
    "0x320F0x5092": RGBGradients_Default,
    // GMMK PRO
    "0x320F0x5046": RGBGradients_Default,
    // GMMK PRO ISO
    "0x320F0x5093": RGBGradients_Default,
    // GMMK PRO ISO
    "0x320F0x504A": RGBGradients_Default,
    // GMMK v2 65 ISO
    "0x320F0x5045": RGBGradients_Default,
    // GMMK v2 65 US
    "0x320F0x505A": RGBGradients_Default,
    // GMMK v2 96 ISO
    "0x320F0x504B": RGBGradients_Default,
    // GMMK v2 96 US
    "0x320F0x5088": RGBGradients_Default,
    // GMMK Numpad
    "0x342D0xE3C5": RGBGradients_Default,
    // valueB
    "0x342D0xE3CE": RGBGradients_Default,
    // valueBISO
    "0x342D0xE3CB": RGBGradients_Default,
    // valueBWireless
    "0x342D0xE3D4": RGBGradients_Default,
    // valueBWirelessISO
    "0x342D0xE3C7": RGBGradients_Default,
    // valueB65
    "0x342D0xE3D0": RGBGradients_Default,
    // valueB65ISO
    "0x342D0xE3CD": RGBGradients_Default,
    // valueB65Wireless
    "0x342D0xE3D6": RGBGradients_Default,
    // valueB65WirelessISO
    "0x342D0xE3C6": RGBGradients_Default,
    // valueB75
    "0x342D0xE3CF": RGBGradients_Default,
    // valueB75ISO
    "0x342D0xE3CC": RGBGradients_Default,
    // valueB75Wireless
    "0x342D0xE3D5": RGBGradients_Default,
    // valueB75WirelessISO
    "0x342D0xE3C8": RGBGradients_Default,
    // valueD100
    "0x342D0xE3D1": RGBGradients_Default,
    // valueD100ISO
    "0x342D0xE3C9": RGBGradients_Default,
    // valueD75
    "0x342D0xE3D2": RGBGradients_Default,
    // valueD75ISO
    "0x342D0xE3CA": RGBGradients_Default,
    // valueD65
    "0x342D0xE3D3": RGBGradients_Default,
    // valueD65ISO
    "0x342D0xE3D7": RGBGradients_Default,
    // valueC 65% Wireless ANSI
    "0x342D0xE3D8": RGBGradients_Default,
    // valueC 75% Wireless ANSI
    "0x342D0xE3D9": RGBGradients_Default,
    // valueC 100% Wireless ANSI
    "0x342D0xE3EC": RGBGradients_Default,
    // valueC 65% Wireless ISO
    "0x342D0xE3ED": RGBGradients_Default,
    // valueC 75% Wireless ISO
    "0x342D0xE3EE": RGBGradients_Default,
    // valueC 100% Wireless ISO
    "0x342D0xE3DA": RGBGradients_Default,
    // valueC 65% ANSI
    "0x342D0xE3DB": RGBGradients_Default,
    // valueC 75% ANSI
    "0x342D0xE3DC": RGBGradients_Default,
    // valueC 100% ANSI
    "0x342D0xE3EF": RGBGradients_Default,
    // valueC 65% ISO
    "0x342D0xE3F0": RGBGradients_Default,
    // valueC 75% ISO
    "0x342D0xE3F1": RGBGradients_Default,
    // valueC 100% ISO
    "0x342D0xE3DD": RGBGradients_Default,
    // valueA valueD HE 65% ANSI
    "0x342D0xE3F2": RGBGradients_Default,
    // valueA valueD HE 65% ISO
    "0x342D0xE3DE": RGBGradients_Default,
    // valueA valueD HE 75% ANSI
    "0x342D0xE3F3": RGBGradients_Default,
    // valueA valueD HE 75% ISO
    "0x342D0xE3DF": RGBGradients_Default,
    // valueA valueD HE 100% ANSI
    "0x342D0xE3F4": RGBGradients_Default,
    // valueA valueD HE 100% ISO
    "0x320F0x8888": RGBGradients_Default,
    // Model O Wired
    "0x258A0x2011": RGBGradients_Default,
    // Model O Wireless
    "0x258A0x2036": RGBGradients_Default,
    // Model O Minus Wired
    "0x258A0x2013": RGBGradients_Default,
    // Model O Minus Wireless
    "0x258A0x2015": RGBGradients_Default,
    // Model O Pro Wireless
    "0x320F0x823A": RGBGradients_Default,
    // Model O2 Wired
    "0x093A0x822A": RGBGradients_Default,
    // Model O2 Wireless
    "0x258A0x2019": RGBGradients_Default,
    // Model O2 Pro 1k
    "0x258A0x201B": RGBGradients_Default,
    // Model O 2 Pro 8k
    "0x258A0x2012": RGBGradients_Default,
    // Model D Wireless
    "0x258A0x2014": RGBGradients_Default,
    // Model D Minus Wireless
    "0x258A0x2017": RGBGradients_Default,
    // Model D Pro Wireless
    "0x258A0x201A": RGBGradients_Default,
    // Model D 2 Pro 1k
    "0x258A0x201C": RGBGradients_Default,
    // Model D 2 Pro 8k
    "0x22D40x1503": RGBGradients_Default,
    // Model I
    "0x093A0x821A": RGBGradients_Default,
    // Model I2
    "0x320F0x831A": RGBGradients_Default,
    // Model valueG
    "0x320F0x825A": RGBGradients_Default,
    // Model D2 Wired
    "0x093A0x824A": RGBGradients_Default,
    // Model D2 Wireless
    "0x258A0x2018": RGBGradients_Default,
    // Series One Pro Wireless
    "0x258A0x201D": RGBGradients_Default,
    //valueH Pro (8k wireless)
    "0x093A0x826A": RGBGradients_Default,
    //valueF Wireless
    "0x320F0x827A": RGBGradients_Default,
    //valueF
    "0x12CF0x0491": RGBGradients_Default,
    // RGB valueJ
    "0x24420x2682": RGBGradients_Default,
    // temporary valueB
    "0x24420x0056": RGBGradients_Default,
    // temporary valueB Wireless
    "0x24420x0052": RGBGradients_Default,
    // temporary valueB 65%
    "0x24420x0054": RGBGradients_Default,
    // temporary valueB 65% Wireless
    "0x24420x0053": RGBGradients_Default,
    // temporary valueB 75%
    "0x24420x0055": RGBGradients_Default
    // temporary valueB 75% Wireless
  })
);
const DeviceProductColors = new Map(
  Object.entries({
    "0x320F0x5044": ProductColors_BlackAndWhite,
    // GMMK PRO
    "0x320F0x5092": ProductColors_BlackAndWhite,
    // GMMK PRO
    "0x320F0x5046": ProductColors_BlackAndWhite,
    // GMMK PRO ISO
    "0x320F0x5093": ProductColors_BlackAndWhite,
    // GMMK PRO ISO
    "0x320F0x504A": ProductColors_BlackWhitePink,
    // GMMK v2 65 ISO
    "0x320F0x5045": ProductColors_BlackWhitePink,
    // GMMK v2 65 US
    "0x320F0x505A": ProductColors_BlackWhitePink,
    // GMMK v2 96 ISO
    "0x320F0x504B": ProductColors_BlackWhitePink,
    // GMMK v2 96 US
    "0x320F0x5088": ProductColors_BlackAndWhite,
    // GMMK Numpad
    "0x342D0xE3C5": ProductColors_BlackAndWhite,
    // valueB
    "0x342D0xE3CE": ProductColors_BlackAndWhite,
    // valueBISO
    "0x342D0xE3CB": ProductColors_BlackAndWhite,
    // valueBWireless
    "0x342D0xE3D4": ProductColors_BlackAndWhite,
    // valueBWirelessISO
    "0x342D0xE3C7": ProductColors_BlackAndWhite,
    // valueB65
    "0x342D0xE3D0": ProductColors_BlackAndWhite,
    // valueB65ISO
    "0x342D0xE3CD": ProductColors_BlackAndWhite,
    // valueB65Wireless
    "0x342D0xE3D6": ProductColors_BlackAndWhite,
    // valueB65WirelessISO
    "0x342D0xE3C6": ProductColors_BlackAndWhite,
    // valueB75
    "0x342D0xE3CF": ProductColors_BlackAndWhite,
    // valueB75ISO
    "0x342D0xE3CC": ProductColors_BlackAndWhite,
    // valueB75Wireless
    "0x342D0xE3D5": ProductColors_BlackAndWhite,
    // valueB75WirelessISO
    "0x342D0xE3C8": ProductColors_BlackAndWhite,
    // valueD100
    "0x342D0xE3D1": ProductColors_BlackAndWhite,
    // valueD100ISO
    "0x342D0xE3C9": ProductColors_BlackAndWhite,
    // valueD75
    "0x342D0xE3D2": ProductColors_BlackAndWhite,
    // valueD75ISO
    "0x342D0xE3CA": ProductColors_BlackAndWhite,
    // valueD65
    "0x342D0xE3D3": ProductColors_BlackAndWhite,
    // valueD65ISO
    "0x342D0xE3D7": ProductColors_BlackAndWhite,
    // valueC 65% Wireless ANSI
    "0x342D0xE3D8": ProductColors_BlackAndWhite,
    // valueC 75% Wireless ANSI
    "0x342D0xE3D9": ProductColors_BlackAndWhite,
    // valueC 100% Wireless ANSI
    "0x342D0xE3EC": ProductColors_BlackAndWhite,
    // valueC 65% Wireless ISO
    "0x342D0xE3ED": ProductColors_BlackAndWhite,
    // valueC 75% Wireless ISO
    "0x342D0xE3EE": ProductColors_BlackAndWhite,
    // valueC 100% Wireless ISO
    "0x342D0xE3DA": ProductColors_BlackAndWhite,
    // valueC 65% ANSI
    "0x342D0xE3DB": ProductColors_BlackAndWhite,
    // valueC 75% ANSI
    "0x342D0xE3DC": ProductColors_BlackAndWhite,
    // valueC 100% ANSI
    "0x342D0xE3EF": ProductColors_BlackAndWhite,
    // valueC 65% ISO
    "0x342D0xE3F0": ProductColors_BlackAndWhite,
    // valueC 75% ISO
    "0x342D0xE3F1": ProductColors_BlackAndWhite,
    // valueC 100% ISO
    "0x342D0xE3DD": ProductColors_BlackAndWhite,
    // valueA valueD HE 65% ANSI
    "0x342D0xE3F2": ProductColors_BlackAndWhite,
    // valueA valueD HE 65% ISO
    "0x342D0xE3DE": ProductColors_BlackAndWhite,
    // valueA valueD HE 75% ANSI
    "0x342D0xE3F3": ProductColors_BlackAndWhite,
    // valueA valueD HE 75% ISO
    "0x342D0xE3DF": ProductColors_BlackAndWhite,
    // valueA valueD HE 100% ANSI
    "0x342D0xE3F4": ProductColors_BlackAndWhite,
    // valueA valueD HE 100% ISO
    "0x320F0x8888": ProductColors_BlackAndWhite,
    // Model O Wired
    "0x258A0x2011": ProductColors_BlackAndWhite,
    // Model O Wireless
    "0x258A0x2036": ProductColors_BlackAndWhite,
    // Model O Minus Wired
    "0x258A0x2013": ProductColors_BlackAndWhite,
    // Model O Minus Wireless
    "0x258A0x2015": ProductColors_ModelOProEditions,
    // Model O Pro Wireless
    "0x320F0x823A": ProductColors_BlackAndWhite,
    // Model O2 Wired
    "0x093A0x822A": ProductColors_BlackAndWhite,
    // Model O2 Wireless
    "0x258A0x2019": ProductColors_Black,
    // Model O2 Pro 1k
    "0x258A0x201B": ProductColors_Black,
    // Model O2 Pro 8k
    "0x258A0x2012": ProductColors_BlackAndWhite,
    // Model D Wireless
    "0x258A0x2014": ProductColors_BlackAndWhite,
    // Model D Minus Wireless
    "0x258A0x2017": ProductColors_ModelDProEditions,
    // Model D Pro Wireless
    "0x258A0x201A": ProductColors_Black,
    // Model D 2 Pro 1k
    "0x258A0x201C": ProductColors_Black,
    // Model D 2 Pro 8k
    "0x22D40x1503": ProductColors_BlackAndWhite,
    // Model I
    "0x093A0x821A": ProductColors_BlackAndWhite,
    // Model I2
    "0x320F0x831A": ProductColors_BlackAndWhite,
    // Model valueG
    "0x320F0x825A": ProductColors_BlackAndWhite,
    // Model D2 Wired
    "0x093A0x824A": ProductColors_BlackAndWhite,
    // Model D2 Wireless
    "0x258A0x2018": ProductColors_SeriesOneProEditions,
    // Series One Pro Wireless
    "0x258A0x201D": ProductColors_BlackAndWhite,
    //valueH Pro (8k wireless)
    "0x093A0x826A": ProductColors_BlackAndWhite,
    //valueF Wireless
    "0x320F0x827A": ProductColors_BlackAndWhite,
    //valueF
    "0x12CF0x0491": ProductColors_Default,
    // RGB valueJ
    "0x24420x2682": ProductColors_BlackAndWhite,
    // temporary valueB
    "0x24420x0056": ProductColors_BlackAndWhite,
    // temporary valueB Wireless
    "0x24420x0052": ProductColors_BlackAndWhite,
    // temporary valueB 65%
    "0x24420x0054": ProductColors_BlackAndWhite,
    // temporary valueB 65% Wireless
    "0x24420x0053": ProductColors_BlackAndWhite,
    // temporary valueB 75%
    "0x24420x0055": ProductColors_BlackAndWhite
    // temporary valueB 75% Wireless
  })
);
const DeviceKeybindingLayers = new Map(
  Object.entries({
    "0x320F0x5044": KeybindingLayers_Keyboard,
    // GMMK PRO
    "0x320F0x5092": KeybindingLayers_Keyboard,
    // GMMK PRO
    "0x320F0x5046": KeybindingLayers_Keyboard,
    // GMMK PRO ISO
    "0x320F0x5093": KeybindingLayers_Keyboard,
    // GMMK PRO ISO
    "0x320F0x504A": KeybindingLayers_Keyboard,
    // GMMK v2 65 ISO
    "0x320F0x5045": KeybindingLayers_Keyboard,
    // GMMK v2 65 US
    "0x320F0x505A": KeybindingLayers_Keyboard,
    // GMMK v2 96 ISO
    "0x320F0x504B": KeybindingLayers_Keyboard,
    // GMMK v2 96 US
    "0x320F0x5088": KeybindingLayers_Keyboard,
    // GMMK Numpad
    "0x342D0xE3C5": KeybindingLayers_Keyboard,
    // valueB
    "0x342D0xE3CE": KeybindingLayers_Keyboard,
    // valueBISO
    "0x342D0xE3CB": KeybindingLayers_Keyboard,
    // valueBWireless
    "0x342D0xE3D4": KeybindingLayers_Keyboard,
    // valueBWirelessISO
    "0x342D0xE3C7": KeybindingLayers_Keyboard,
    // valueB65
    "0x342D0xE3D0": KeybindingLayers_Keyboard,
    // valueB65ISO
    "0x342D0xE3CD": KeybindingLayers_Keyboard,
    // valueB65Wireless
    "0x342D0xE3D6": KeybindingLayers_Keyboard,
    // valueB65WirelessISO
    "0x342D0xE3C6": KeybindingLayers_Keyboard,
    // valueB75
    "0x342D0xE3CF": KeybindingLayers_Keyboard,
    // valueB75ISO
    "0x342D0xE3CC": KeybindingLayers_Keyboard,
    // valueB75Wireless
    "0x342D0xE3D5": KeybindingLayers_Keyboard,
    // valueB75WirelessISO
    "0x342D0xE3C8": KeybindingLayers_Keyboard,
    // valueD100
    "0x342D0xE3D1": KeybindingLayers_Keyboard,
    // valueD100ISO
    "0x342D0xE3C9": KeybindingLayers_Keyboard,
    // valueD75
    "0x342D0xE3D2": KeybindingLayers_Keyboard,
    // valueD75ISO
    "0x342D0xE3CA": KeybindingLayers_Keyboard,
    // valueD65
    "0x342D0xE3D3": KeybindingLayers_Keyboard,
    // valueD65ISO
    "0x342D0xE3D7": KeybindingLayers_Keyboard,
    // valueC 65% Wireless ANSI
    "0x342D0xE3D8": KeybindingLayers_Keyboard,
    // valueC 75% Wireless ANSI
    "0x342D0xE3D9": KeybindingLayers_Keyboard,
    // valueC 100% Wireless ANSI
    "0x342D0xE3EC": KeybindingLayers_Keyboard,
    // valueC 65% Wireless ISO
    "0x342D0xE3ED": KeybindingLayers_Keyboard,
    // valueC 75% Wireless ISO
    "0x342D0xE3EE": KeybindingLayers_Keyboard,
    // valueC 100% Wireless ISO
    "0x342D0xE3DA": KeybindingLayers_Keyboard,
    // valueC 65% ANSI
    "0x342D0xE3DB": KeybindingLayers_Keyboard,
    // valueC 75% ANSI
    "0x342D0xE3DC": KeybindingLayers_Keyboard,
    // valueC 100% ANSI
    "0x342D0xE3EF": KeybindingLayers_Keyboard,
    // valueC 65% ISO
    "0x342D0xE3F0": KeybindingLayers_Keyboard,
    // valueC 75% ISO
    "0x342D0xE3F1": KeybindingLayers_Keyboard,
    // valueC 100% ISO
    "0x342D0xE3DD": KeybindingLayers_Keyboard,
    // valueA valueD HE 65% ANSI
    "0x342D0xE3F2": KeybindingLayers_Keyboard,
    // valueA valueD HE 65% ISO
    "0x342D0xE3DE": KeybindingLayers_Keyboard,
    // valueA valueD HE 75% ANSI
    "0x342D0xE3F3": KeybindingLayers_Keyboard,
    // valueA valueD HE 75% ISO
    "0x342D0xE3DF": KeybindingLayers_Keyboard,
    // valueA valueD HE 100% ANSI
    "0x342D0xE3F4": KeybindingLayers_Keyboard,
    // valueA valueD HE 100% ISO
    "0x320F0x8888": KeybindingLayers_SingleLayer,
    // Model O Wired
    "0x258A0x2011": KeybindingLayers_SingleLayer,
    // Model O Wireless
    "0x258A0x2036": KeybindingLayers_SingleLayer,
    // Model O Minus Wired
    "0x258A0x2013": KeybindingLayers_SingleLayer,
    // Model O Minus Wireless
    "0x258A0x2015": KeybindingLayers_SingleLayer,
    // Model O Pro Wireless
    "0x320F0x823A": KeybindingLayers_SingleLayer,
    // Model O2 Wired
    "0x093A0x822A": KeybindingLayers_SingleLayer,
    // Model O2 Wireless
    "0x258A0x2019": KeybindingLayers_SingleLayer,
    // Model O2 Pro 1k
    "0x258A0x201B": KeybindingLayers_SingleLayer,
    // Model O 2 Pro 8k
    "0x258A0x2012": KeybindingLayers_SingleLayer,
    // Model D Wireless
    "0x258A0x2014": KeybindingLayers_SingleLayer,
    // Model D Minus Wireless
    "0x258A0x2017": KeybindingLayers_SingleLayer,
    // Model D Pro Wireless
    "0x258A0x201A": KeybindingLayers_SingleLayer,
    // Model D 2 Pro 1k
    "0x258A0x201C": KeybindingLayers_SingleLayer,
    // Model D 2 Pro 8k
    "0x22D40x1503": KeybindingLayers_ShiftLayer,
    // Model I
    "0x093A0x821A": KeybindingLayers_ShiftLayer,
    // Model I2
    "0x320F0x831A": KeybindingLayers_ShiftLayer,
    // Model valueG
    "0x320F0x825A": KeybindingLayers_SingleLayer,
    // Model D2 Wired
    "0x093A0x824A": KeybindingLayers_SingleLayer,
    // Model D2 Wireless
    "0x258A0x2018": KeybindingLayers_SingleLayer,
    // Series One Pro Wireless
    "0x258A0x201D": KeybindingLayers_SingleLayer,
    //valueH Pro (8k wireless)
    "0x093A0x826A": KeybindingLayers_SingleLayer,
    //valueF Wireless
    "0x320F0x827A": KeybindingLayers_SingleLayer,
    //valueF
    "0x24420x2682": KeybindingLayers_Keyboard,
    // temporary valueB
    "0x24420x0056": KeybindingLayers_Keyboard,
    // temporary valueB Wireless
    "0x24420x0052": KeybindingLayers_Keyboard,
    // temporary valueB 65%
    "0x24420x0054": KeybindingLayers_Keyboard,
    // temporary valueB 65% Wireless
    "0x24420x0053": KeybindingLayers_Keyboard,
    // temporary valueB 75%
    "0x24420x0055": KeybindingLayers_Keyboard
    // temporary valueB 75% Wireless
  })
);
const DeviceIconsMap = new Map(
  Object.entries({
    "0x320F0x5044": IconType.GMMKPRODevice,
    // GMMK PRO
    "0x320F0x5092": IconType.GMMKPRODevice,
    // GMMK PRO
    "0x320F0x5046": IconType.GMMKPRODevice,
    // GMMK PRO ISO
    "0x320F0x5093": IconType.GMMKPRODevice,
    // GMMK PRO ISO
    "0x320F0x504A": IconType.GMMK265Device,
    // GMMK v2 65 ISO
    "0x320F0x5045": IconType.GMMK265Device,
    // GMMK v2 65 US
    "0x320F0x505A": IconType.GMMK296Device,
    // GMMK v2 96 ISO
    "0x320F0x504B": IconType.GMMK296Device,
    // GMMK v2 96 US
    "0x320F0x5088": IconType.NumpadDevice,
    // GMMK Numpad
    "0x342D0xE3C5": IconType.GMMK296Device,
    // valueB
    "0x342D0xE3CE": IconType.GMMK296Device,
    // valueBISO
    "0x342D0xE3CB": IconType.GMMK296Device,
    // valueBWireless
    "0x342D0xE3D4": IconType.GMMK296Device,
    // valueBWirelessISO
    "0x342D0xE3C7": IconType.GMMK265Device,
    // valueB65
    "0x342D0xE3D0": IconType.GMMK265Device,
    // valueB65ISO
    "0x342D0xE3CD": IconType.GMMK265Device,
    // valueB65Wireless
    "0x342D0xE3D6": IconType.GMMK265Device,
    // valueB65WirelessISO
    "0x342D0xE3C6": IconType.GMMK265Device,
    // valueB75
    "0x342D0xE3CF": IconType.GMMK265Device,
    // valueB75ISO
    "0x342D0xE3CC": IconType.GMMK265Device,
    // valueB75Wireless
    "0x342D0xE3D5": IconType.GMMK265Device,
    // valueB75WirelessISO
    "0x342D0xE3C8": IconType.GMMK296Device,
    // valueD100
    "0x342D0xE3D1": IconType.GMMK296Device,
    // valueD100ISO
    "0x342D0xE3C9": IconType.GMMK265Device,
    // valueD75
    "0x342D0xE3D2": IconType.GMMK265Device,
    // valueD75ISO
    "0x342D0xE3CA": IconType.GMMK265Device,
    // valueD65
    "0x342D0xE3D3": IconType.GMMK265Device,
    // valueD65ISO
    "0x342D0xE3DD": IconType.GMMK265Device,
    //valueA valueD HE 65% ANSI TEMP
    "0x342D0xE3F2": IconType.GMMK265Device,
    //valueA valueD HE 65% ISO TEMP
    "0x342D0xE3DE": IconType.GMMK265Device,
    //valueA valueD HE 75% ANSI TEMP
    "0x342D0xE3F3": IconType.GMMK265Device,
    //valueA valueD HE 75% ISO TEMP
    "0x342D0xE3DF": IconType.GMMK296Device,
    //valueA valueD HE 100% ANSI TEMP
    "0x342D0xE3F4": IconType.GMMK296Device,
    //valueA valueD HE 100% ISO TEMP
    "0x31510x4035": IconType.GMMK296Device,
    // valueC Pre
    "0x342D0xE3D7": IconType.GMMK296Device,
    // valueC 65% Wireless ANSI TEMP
    "0x342D0xE3D8": IconType.GMMK296Device,
    // valueC 75% Wireless ANSI TEMP
    "0x342D0xE3D9": IconType.GMMK296Device,
    // valueC 100% Wireless ANSI TEMP
    "0x342D0xE3DA": IconType.GMMK265Device,
    // valueC 65% ANSI TEMP
    "0x342D0xE3DB": IconType.GMMK296Device,
    // valueC 75% ANSI TEMP
    "0x342D0xE3DC": IconType.GMMK296Device,
    // valueC 100% ANSI TEMP
    "0x342D0xE3EC": IconType.GMMK265Device,
    // valueC 65% Wireless ISO TEMP
    "0x342D0xE3ED": IconType.GMMK296Device,
    // valueC 75% Wireless ISO TEMP
    "0x342D0xE3EE": IconType.GMMK296Device,
    // valueC 100% Wireless ISO TEMP
    "0x342D0xE3EF": IconType.GMMK265Device,
    // valueC 65% ISO TEMP
    "0x342D0xE3F0": IconType.GMMK296Device,
    // valueC 75% ISO TEMP
    "0x342D0xE3F1": IconType.GMMK296Device,
    // valueC 100% ISO TEMP
    "0x320F0x8888": IconType.ModelODevice,
    // Model O Wired
    "0x258A0x2011": IconType.ModelODevice,
    // Model O Wireless
    "0x258A0x2036": IconType.ModelODevice,
    // Model O Minus Wired
    "0x258A0x2013": IconType.ModelODevice,
    // Model O Minus Wireless
    "0x258A0x2015": IconType.ModelODevice,
    // Model O Pro Wireless
    "0x320F0x823A": IconType.ModelODevice,
    // Model O2 Wired
    "0x093A0x822A": IconType.ModelODevice,
    // Model O2 Wireless
    "0x258A0x2019": IconType.ModelODevice,
    // Model O2 Pro 1k
    "0x258A0x201B": IconType.ModelODevice,
    // Model O 2 Pro 8k
    "0x258A0x2018": IconType.ModelODevice,
    // Series One Pro Wireless
    "0x258A0x201D": IconType.ModelODevice,
    //valueH Pro (8k wireless)
    "0x093A0x826A": IconType.ModelODevice,
    //valueF Wireless
    "0x320F0x827A": IconType.ModelODevice,
    //valueF
    "0x258A0x2012": IconType.ModelDDevice,
    // Model D Wireless
    "0x258A0x2014": IconType.ModelDDevice,
    // Model D Minus Wireless
    "0x258A0x2017": IconType.ModelDDevice,
    // Model D Pro Wireless
    "0x258A0x201A": IconType.ModelDDevice,
    // Model D 2 Pro 1k
    "0x258A0x201C": IconType.ModelDDevice,
    // Model D 2 Pro 8k
    "0x320F0x825A": IconType.ModelDDevice,
    // Model D2 Wired
    "0x093A0x824A": IconType.ModelDDevice,
    // Model D2 Wireless
    "0x22D40x1503": IconType.ModelIDevice,
    // Model I
    "0x093A0x821A": IconType.ModelIDevice,
    // Model I2
    "0x320F0x831A": IconType.ModelIDevice,
    // Model valueG
    "0x24420x2682": IconType.GMMK296Device,
    // temporary valueB
    "0x24420x0056": IconType.GMMK296Device,
    // temporary valueB Wireless
    "0x24420x0052": IconType.GMMK265Device,
    // temporary valueB 65%
    "0x24420x0054": IconType.GMMK265Device,
    // temporary valueB 65% Wireless
    "0x24420x0053": IconType.GMMK265Device,
    // temporary valueB 75%
    "0x24420x0055": IconType.GMMK265Device
    // temporary valueB 75% Wireless
  })
);
const DeviceManagementSections = new Map(
  Object.entries({
    "0x320F0x5044": DeviceManagementSections_Keyboard,
    // GMMK PRO
    "0x320F0x5092": DeviceManagementSections_Keyboard,
    // GMMK PRO
    "0x320F0x5046": DeviceManagementSections_Keyboard,
    // GMMK PRO ISO
    "0x320F0x5093": DeviceManagementSections_Keyboard,
    // GMMK PRO ISO
    "0x320F0x504A": DeviceManagementSections_Keyboard,
    // GMMK v2 65 ISO
    "0x320F0x5045": DeviceManagementSections_Keyboard,
    // GMMK v2 65 US
    "0x320F0x505A": DeviceManagementSections_Keyboard,
    // GMMK v2 96 ISO
    "0x320F0x504B": DeviceManagementSections_Keyboard,
    // GMMK v2 96 US
    "0x320F0x5088": DeviceManagementSections_Keyboard,
    // GMMK Numpad
    "0x342D0xE3C5": DeviceManagementSections_Keyboard,
    // valueB
    "0x342D0xE3CE": DeviceManagementSections_Keyboard,
    // valueBISO
    "0x342D0xE3CB": DeviceManagementSections_Keyboard,
    // valueBWireless
    "0x342D0xE3D4": DeviceManagementSections_Keyboard,
    // valueBWirelessISO
    "0x342D0xE3C7": DeviceManagementSections_Keyboard,
    // valueB65
    "0x342D0xE3D0": DeviceManagementSections_Keyboard,
    // valueB65ISO
    "0x342D0xE3CD": DeviceManagementSections_Keyboard,
    // valueB65Wireless
    "0x342D0xE3D6": DeviceManagementSections_Keyboard,
    // valueB65WirelessISO
    "0x342D0xE3C6": DeviceManagementSections_Keyboard,
    // valueB75
    "0x342D0xE3CF": DeviceManagementSections_Keyboard,
    // valueB75ISO
    "0x342D0xE3CC": DeviceManagementSections_Keyboard,
    // valueB75Wireless
    "0x342D0xE3D5": DeviceManagementSections_Keyboard,
    // valueB75WirelessISO
    "0x342D0xE3C8": DeviceManagementSections_Keyboard,
    // valueD100
    "0x342D0xE3D1": DeviceManagementSections_Keyboard,
    // valueD100ISO
    "0x342D0xE3C9": DeviceManagementSections_Keyboard,
    // valueD75
    "0x342D0xE3D2": DeviceManagementSections_Keyboard,
    // valueD75ISO
    "0x342D0xE3CA": DeviceManagementSections_Keyboard,
    // valueD65
    "0x342D0xE3D3": DeviceManagementSections_Keyboard,
    // valueD65ISO
    "0x342D0xE3D7": DeviceManagementSections_AnalogKeyboard,
    // valueC 65% Wireless ANSI
    "0x342D0xE3D8": DeviceManagementSections_AnalogKeyboard,
    // valueC 75% Wireless ANSI
    "0x342D0xE3D9": DeviceManagementSections_AnalogKeyboard,
    // valueC 100% Wireless ANSI
    "0x342D0xE3EC": DeviceManagementSections_AnalogKeyboard,
    // valueC 65% Wireless ISO
    "0x342D0xE3ED": DeviceManagementSections_AnalogKeyboard,
    // valueC 75% Wireless ISO
    "0x342D0xE3EE": DeviceManagementSections_AnalogKeyboard,
    // valueC 100% Wireless ISO
    "0x342D0xE3DA": DeviceManagementSections_AnalogKeyboard,
    // valueC 65% ANSI
    "0x342D0xE3DB": DeviceManagementSections_AnalogKeyboard,
    // valueC 75% ANSI
    "0x342D0xE3DC": DeviceManagementSections_AnalogKeyboard,
    // valueC 100% ANSI
    "0x342D0xE3EF": DeviceManagementSections_AnalogKeyboard,
    // valueC 65% ISO
    "0x342D0xE3F0": DeviceManagementSections_AnalogKeyboard,
    // valueC 75% ISO
    "0x342D0xE3F1": DeviceManagementSections_AnalogKeyboard,
    // valueC 100% ISO
    "0x342D0xE3DD": DeviceManagementSections_AnalogKeyboard,
    // valueA valueD HE 65% ANSI
    "0x342D0xE3F2": DeviceManagementSections_AnalogKeyboard,
    // valueA valueD HE 65% ISO
    "0x342D0xE3DE": DeviceManagementSections_AnalogKeyboard,
    // valueA valueD HE 75% ANSI
    "0x342D0xE3F3": DeviceManagementSections_AnalogKeyboard,
    // valueA valueD HE 75% ISO
    "0x342D0xE3DF": DeviceManagementSections_AnalogKeyboard,
    // valueA valueD HE 100% ANSI
    "0x342D0xE3F4": DeviceManagementSections_AnalogKeyboard,
    // valueA valueD HE 100% ISO
    "0x320F0x8888": DeviceManagementSections_Mouse,
    // Model O Wired
    "0x258A0x2011": DeviceManagementSections_Mouse,
    // Model O Wireless
    "0x258A0x2036": DeviceManagementSections_Mouse,
    // Model O Minus Wired
    "0x258A0x2013": DeviceManagementSections_Mouse,
    // Model O Minus Wireless
    "0x258A0x2015": DeviceManagementSections_Mouse_Unlit,
    // Model O Pro Wireless
    "0x320F0x823A": DeviceManagementSections_Mouse,
    // Model O2 Wired
    "0x093A0x822A": DeviceManagementSections_Mouse,
    // Model O2 Wireless
    "0x258A0x2019": DeviceManagementSections_Mouse_Unlit,
    // Model O2 Pro 1k
    "0x258A0x201B": DeviceManagementSections_Mouse_Unlit,
    // Model O 2 Pro 8k
    "0x258A0x2012": DeviceManagementSections_Mouse,
    // Model D Wireless
    "0x258A0x2014": DeviceManagementSections_Mouse,
    // Model D Minus Wireless
    "0x258A0x2017": DeviceManagementSections_Mouse_Unlit,
    // Model D Pro Wireless
    "0x258A0x201A": DeviceManagementSections_Mouse_Unlit,
    // Model D 2 Pro 1k
    "0x258A0x201C": DeviceManagementSections_Mouse_Unlit,
    // Model D 2 Pro 8k
    "0x22D40x1503": DeviceManagementSections_Mouse,
    // Model I
    "0x093A0x821A": DeviceManagementSections_Mouse,
    // Model I2
    "0x320F0x831A": DeviceManagementSections_Mouse,
    // Model valueG
    "0x320F0x825A": DeviceManagementSections_Mouse,
    // Model D2 Wired
    "0x093A0x824A": DeviceManagementSections_Mouse,
    // Model D2 Wireless
    "0x258A0x2018": DeviceManagementSections_Mouse_Unlit,
    // Series One Pro Wireless
    "0x258A0x201D": DeviceManagementSections_Mouse_Unlit,
    //valueH Pro (8k wireless)
    "0x093A0x826A": DeviceManagementSections_Mouse,
    //valueF Wireless
    "0x320F0x827A": DeviceManagementSections_Mouse,
    //valueF
    "0x12CF0x0491": DeviceManagementSections_valueJ,
    // RGB valueJ
    "0x24420x2682": DeviceManagementSections_Keyboard,
    // temporary valueB
    "0x24420x0056": DeviceManagementSections_Keyboard,
    // temporary valueB Wireless
    "0x24420x0052": DeviceManagementSections_Keyboard,
    // temporary valueB 65%
    "0x24420x0054": DeviceManagementSections_Keyboard,
    // temporary valueB 65% Wireless
    "0x24420x0053": DeviceManagementSections_Keyboard,
    // temporary valueB 75%
    "0x24420x0055": DeviceManagementSections_Keyboard
    // temporary valueB 75% Wireless
  })
);
const DeviceLightingMaskRequirements = new Map(
  Object.entries({
    // rectangular devices don't typically need masks
    // "0x320F0x5044": false, // GMMK PRO
    // "0x320F0x5092": false, // GMMK PRO
    // "0x320F0x5046": false, // GMMK PRO ISO
    // "0x320F0x5093": false, // GMMK PRO ISO
    // "0x320F0x504A": false, // GMMK v2 65 ISO
    // "0x320F0x5045": false, // GMMK v2 65 US
    // "0x320F0x505A": false, // GMMK v2 96 ISO
    // "0x320F0x504B": false, // GMMK v2 96 US
    // "0x320F0x5088": false, // GMMK Numpad
    "0x320F0x8888": true,
    // Model O Wired
    "0x258A0x2011": true,
    // Model O Wireless
    "0x258A0x2036": true,
    // Model O Minus Wired
    "0x258A0x2013": true,
    // Model O Minus Wireless
    "0x258A0x2015": false,
    // Model O Pro Wireless
    "0x320F0x823A": true,
    // Model O2 Wired
    "0x093A0x822A": true,
    // Model O2 Wireless
    "0x258A0x2019": false,
    // Model O2 Pro 1k
    "0x258A0x201B": false,
    // Model O 2 Pro 8k
    "0x258A0x2012": true,
    // Model D Wireless
    "0x258A0x2014": true,
    // Model D Minus Wireless
    "0x258A0x2017": false,
    // Model D Pro Wireless
    "0x258A0x201A": false,
    // Model D 2 Pro 1k
    "0x258A0x201C": false,
    // Model D 2 Pro 8k
    "0x22D40x1503": true,
    // Model I
    "0x093A0x821A": true,
    // Model I2
    "0x320F0x831A": true,
    // Model valueG
    "0x320F0x825A": true,
    // Model D2 Wired
    "0x093A0x824A": true,
    // Model D2 Wireless
    "0x258A0x2018": false,
    // Series One Pro Wireless
    "0x258A0x201D": false,
    //valueH Pro (8k wireless)
    "0x093A0x826A": true,
    //valueF Wireless
    "0x320F0x827A": true
    //valueF
  })
);
const DeviceImageAdjustments = new Map(
  Object.entries({
    "0x320F0x5044": new DeviceImageAdjustment(0.6, { x: 0, y: 0 }),
    // GMMK PRO
    "0x320F0x5092": new DeviceImageAdjustment(0.6, { x: 0, y: 0 }),
    // GMMK PRO
    "0x320F0x5046": new DeviceImageAdjustment(0.6, { x: 0, y: 0 }),
    // GMMK PRO ISO
    "0x320F0x5093": new DeviceImageAdjustment(0.6, { x: 0, y: 0 }),
    // GMMK PRO ISO
    "0x320F0x504A": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // GMMK v2 65 ISO
    "0x320F0x5045": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // GMMK v2 65 US
    "0x320F0x505A": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // GMMK v2 96 ISO
    "0x320F0x504B": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // GMMK v2 96 US
    "0x320F0x5088": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // GMMK Numpad
    "0x342D0xE3C5": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // valueB
    "0x342D0xE3CE": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // valueBISO
    "0x342D0xE3CB": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // valueBWireless
    "0x342D0xE3D4": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // valueBWirelessISO
    "0x342D0xE3C7": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // valueB65
    "0x342D0xE3D0": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // valueB65ISO
    "0x342D0xE3CD": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // valueB65Wireless
    "0x342D0xE3D6": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // valueB65WirelessISO
    "0x342D0xE3C6": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // valueB75
    "0x342D0xE3CF": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // valueB75ISO
    "0x342D0xE3CC": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // valueB75Wireless
    "0x342D0xE3D5": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // valueB75WirelessISO
    "0x342D0xE3C8": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // valueD100
    "0x342D0xE3D1": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // valueD100ISO
    "0x342D0xE3C9": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // valueD75
    "0x342D0xE3D2": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // valueD75ISO
    "0x342D0xE3CA": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // valueD65
    "0x342D0xE3D3": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // valueD65ISO
    "0x342D0xE3D7": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // valueC 65% Wireless ANSI
    "0x342D0xE3D8": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // valueC 75% Wireless ANSI
    "0x342D0xE3D9": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // valueC 100% Wireless ANSI
    "0x342D0xE3EC": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // valueC 65% Wireless ISO
    "0x342D0xE3ED": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // valueC 75% Wireless ISO
    "0x342D0xE3EE": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // valueC 100% Wireless ISO
    "0x342D0xE3DA": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // valueC 65% ANSI
    "0x342D0xE3DB": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // valueC 75% ANSI
    "0x342D0xE3DC": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // valueC 100% ANSI
    "0x342D0xE3EF": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // valueC 65% ISO
    "0x342D0xE3F0": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // valueC 75% ISO
    "0x342D0xE3F1": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // valueC 100% ISO
    "0x342D0xE3DD": new DeviceImageAdjustment(0.5, { x: 0, y: 0 }),
    // valueA valueD HE 65% ANSI
    "0x342D0xE3F2": new DeviceImageAdjustment(0.5, { x: 0, y: 0 }),
    // valueA valueD HE 65% ISO
    "0x342D0xE3DE": new DeviceImageAdjustment(0.5, { x: 0, y: 0 }),
    // valueA valueD HE 75% ANSI
    "0x342D0xE3F3": new DeviceImageAdjustment(0.5, { x: 0, y: 0 }),
    // valueA valueD HE 75% ISO
    "0x342D0xE3DF": new DeviceImageAdjustment(0.5, { x: 0, y: 0 }),
    // valueA valueD HE 100% ANSI
    "0x342D0xE3F4": new DeviceImageAdjustment(0.5, { x: 0, y: 0 }),
    // valueA valueD HE 100% ISO
    "0x320F0x8888": new DeviceImageAdjustment(0.5, { x: 0, y: 0 }),
    // Model O Wired
    "0x258A0x2011": new DeviceImageAdjustment(0.5, { x: 0, y: 0 }),
    // Model O Wireless
    "0x258A0x2036": new DeviceImageAdjustment(0.5, { x: 0, y: 0 }),
    // Model O Minus Wired
    "0x258A0x2013": new DeviceImageAdjustment(0.5, { x: 0, y: 0 }),
    // Model O Minus Wireless
    "0x258A0x2015": new DeviceImageAdjustment(0.5, { x: 0, y: 0 }),
    // Model O Pro Wireless
    "0x320F0x823A": new DeviceImageAdjustment(0.4, { x: 0, y: 0 }),
    // Model O2 Wired
    "0x093A0x822A": new DeviceImageAdjustment(0.5, { x: 0, y: 0 }),
    // Model O2 Wireless
    "0x258A0x2019": new DeviceImageAdjustment(0.5, { x: 0, y: 0 }),
    // Model O2 Pro 1k
    "0x258A0x201B": new DeviceImageAdjustment(0.5, { x: 0, y: 0 }),
    // Model O 2 Pro 8k
    "0x258A0x2012": new DeviceImageAdjustment(0.5, { x: 0, y: 0 }),
    // Model D Wireless
    "0x258A0x2014": new DeviceImageAdjustment(0.5, { x: 0, y: 0 }),
    // Model D Minus Wireless
    "0x258A0x2017": new DeviceImageAdjustment(0.5, { x: 0, y: 0 }),
    // Model D Pro Wireless
    "0x258A0x201A": new DeviceImageAdjustment(0.5, { x: 0, y: 0 }),
    // Model D 2 Pro 1k
    "0x258A0x201C": new DeviceImageAdjustment(0.5, { x: 0, y: 0 }),
    // Model D 2 Pro 8k
    "0x22D40x1503": new DeviceImageAdjustment(0.5, { x: 0, y: 0 }),
    // Model I
    "0x093A0x821A": new DeviceImageAdjustment(0.5, { x: 0, y: 0 }),
    // Model I2
    "0x320F0x831A": new DeviceImageAdjustment(0.5, { x: 0, y: 0 }),
    // Model valueG
    "0x320F0x825A": new DeviceImageAdjustment(0.5, { x: 0, y: 0 }),
    // Model D2 Wired
    "0x093A0x824A": new DeviceImageAdjustment(0.5, { x: 0, y: 0 }),
    // Model D2 Wireless
    "0x258A0x2018": new DeviceImageAdjustment(0.5, { x: 0, y: 0 }),
    // Series One Pro Wireless
    "0x258A0x201D": new DeviceImageAdjustment(0.5, { x: 0, y: 0 }),
    //valueH Pro (8k wireless)
    "0x093A0x826A": new DeviceImageAdjustment(0.5, { x: 0, y: 0 }),
    //valueF Wireless
    "0x320F0x827A": new DeviceImageAdjustment(0.5, { x: 0, y: 0 }),
    //valueF
    "0x12CF0x0491": new DeviceImageAdjustment(0.4, { x: 0, y: 0 }),
    // RGB valueJ
    "0x24420x2682": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // temporary valueB
    "0x24420x0056": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // temporary valueB Wireless
    "0x24420x0052": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // temporary valueB 65%
    "0x24420x0054": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // temporary valueB 65% Wireless
    "0x24420x0053": new DeviceImageAdjustment(0.7, { x: 0, y: 0 }),
    // temporary valueB 75%
    "0x24420x0055": new DeviceImageAdjustment(0.7, { x: 0, y: 0 })
    // temporary valueB 75% Wireless
  })
);
const DevicePairableDevices = new Map(
  Object.entries({
    "0x320F0x5044": [],
    // GMMK PRO
    "0x320F0x5092": [],
    // GMMK PRO
    "0x320F0x5046": [],
    // GMMK PRO ISO
    "0x320F0x5093": [],
    // GMMK PRO ISO
    "0x320F0x504A": [],
    // GMMK v2 65 ISO
    "0x320F0x5045": [],
    // GMMK v2 65 US
    "0x320F0x505A": [],
    // GMMK v2 96 ISO
    "0x320F0x504B": [],
    // GMMK v2 96 US
    "0x320F0x5088": [],
    // GMMK Numpad
    "0x342D0xE3C5": [],
    // valueB
    "0x342D0xE3CE": [],
    // valueBISO
    "0x342D0xE3CB": [],
    // valueBWireless
    "0x342D0xE3D4": [],
    // valueBWirelessISO
    "0x342D0xE3C7": [],
    // valueB65
    "0x342D0xE3D0": [],
    // valueB65ISO
    "0x342D0xE3CD": [],
    // valueB65Wireless
    "0x342D0xE3D6": [],
    // valueB65WirelessISO
    "0x342D0xE3C6": [],
    // valueB75
    "0x342D0xE3CF": [],
    // valueB75ISO
    "0x342D0xE3CC": [],
    // valueB75Wireless
    "0x342D0xE3D5": [],
    // valueB75WirelessISO
    "0x342D0xE3C8": [],
    // valueD100
    "0x342D0xE3D1": [],
    // valueD100ISO
    "0x342D0xE3C9": [],
    // valueD75
    "0x342D0xE3D2": [],
    // valueD75ISO
    "0x342D0xE3CA": [],
    // valueD65
    "0x342D0xE3D3": [],
    // valueD65ISO
    "0x342D0xE3D7": [],
    // valueC 65% Wireless ANSI
    "0x342D0xE3D8": [],
    // valueC 75% Wireless ANSI
    "0x342D0xE3D9": [],
    // valueC 100% Wireless ANSI
    "0x342D0xE3EC": [],
    // valueC 65% Wireless ISO
    "0x342D0xE3ED": [],
    // valueC 75% Wireless ISO
    "0x342D0xE3EE": [],
    // valueC 100% Wireless ISO
    "0x342D0xE3DA": [],
    // valueC 65% ANSI
    "0x342D0xE3DB": [],
    // valueC 75% ANSI
    "0x342D0xE3DC": [],
    // valueC 100% ANSI
    "0x342D0xE3EF": [],
    // valueC 65% ISO
    "0x342D0xE3F0": [],
    // valueC 75% ISO
    "0x342D0xE3F1": [],
    // valueC 100% ISO
    "0x342D0xE3DD": [],
    // valueA valueD HE 65% ANSI
    "0x342D0xE3F2": [],
    // valueA valueD HE 65% ISO
    "0x342D0xE3DE": [],
    // valueA valueD HE 75% ANSI
    "0x342D0xE3F3": [],
    // valueA valueD HE 75% ISO
    "0x342D0xE3DF": [],
    // valueA valueD HE 100% ANSI
    "0x342D0xE3F4": [],
    // valueA valueD HE 100% ISO
    "0x320F0x8888": [],
    // Model O Wired
    "0x258A0x2011": [],
    // Model O Wireless
    "0x258A0x2036": [],
    // Model O Minus Wired
    "0x258A0x2013": [],
    // Model O Minus Wireless
    "0x258A0x2015": [],
    // Model O Pro Wireless
    "0x320F0x823A": [],
    // Model O2 Wired
    "0x093A0x822A": ["dongle kit v2"],
    // Model O2 Wireless
    "0x258A0x2019": ["dongle kit v2"],
    // Model O2 Pro 1k
    "0x258A0x201B": ["dongle kit v2 8k"],
    // Model O 2 Pro 8k
    "0x258A0x2012": [],
    // Model D Wireless
    "0x258A0x2014": [],
    // Model D Minus Wireless
    "0x258A0x2017": [],
    // Model D Pro Wireless
    "0x258A0x201A": ["dongle kit v2"],
    // Model D 2 Pro 1k
    "0x258A0x201C": ["dongle kit v2 8k"],
    // Model D 2 Pro 8k
    "0x22D40x1503": [],
    // Model I
    "0x093A0x821A": ["dongle kit v2"],
    // Model I2
    "0x320F0x825A": [],
    // Model D2 Wired
    "0x093A0x824A": ["dongle kit v2"],
    // Model D2 Wireless
    "0x258A0x2018": [],
    // Series One Pro Wireless
    "0x258A0x201D": ["dongle kit v2 8k"],
    //valueH Pro (8k wireless)
    "0x093A0x826A": ["dongle kit v2"],
    //valueF Wireless
    "0x320F0x827A": [],
    //valueF
    "0x24420x2682": [],
    // temporarry valueB
    "0x24420x0056": [],
    // temporarry valueB Wireless
    "0x24420x0052": [],
    // temporarry valueB 65%
    "0x24420x0054": [],
    // temporarry valueB 65% Wireless
    "0x24420x0053": [],
    // temporarry valueB 75%
    "0x24420x0055": []
    // temporarry valueB 75% Wireless
  })
);
const AdvDebounceDevices = [
  "0x258A0x2019",
  // Model O 2 Pro 1k
  "0x258A0x201A",
  // Model D 2 Pro 1k
  "0x258A0x201B",
  // Model O 2 Pro 4k8k
  "0x258A0x201C",
  // Model D 2 Pro 4k8k
  "0x258A0x201D"
  // valueH Pro
];
const lightingSaveProperties = [
  "reset",
  "mouse-lighting-color",
  "lighting-effect",
  "wired-brightness",
  "lighting-rate",
  "separate-wired-wireless-brightness",
  "wireless-brightness",
  "keyboard-preset-effect",
  "keyboard-preset-speed",
  "keyboard-preset-brightness",
  "keyboard-perkey-layout",
  "keyboard-per-key-brightness",
  "keyboard-lighting-color",
  "valueJ-zone"
];
const performanceSaveProperties = [
  "reset",
  "motion-sync",
  "polling-rate",
  "lift-off-distance",
  "debounce-time",
  "dpi-default-stage",
  "dpi-stages",
  "adv-debounce",
  "before-press-time",
  "after-press-time",
  "before-release-time",
  "after-release-time",
  "lift-off-press-time",
  "separate-polling-rate"
];
const keybindingSaveProperties = [
  "reset",
  "keybind-single-key",
  "keybind-single-key-modifier",
  "keybind-keyboard-function",
  "keybind-mouse-function",
  "keybind-dpi-function",
  "keybind-macro",
  "keybind-multimedia-function",
  "keybind-shortcut-type",
  "keybind-shortcut-value",
  "keybind-disabled",
  "keybind-valueC-state"
];
class DevicesAdapter {
  static async getDevices() {
    const devices = await DeviceService.getDevices();
    if (devices == null || devices.length == 0) {
      console.info("No devices were found connected.");
      return;
    }
    const uiDevices = [];
    for (let i2 = 0; i2 < devices.length; i2++) {
      const device2 = devices[i2];
      uiDevices.push(await DevicesAdapter.appendUIHelperProperties(device2));
    }
    return uiDevices;
  }
  static async appendUIHelperProperties(uiDevice) {
    if (uiDevice.deviceData == null) {
      throw new Error("Device data is unassigned");
    }
    let imgKey = uiDevice.deviceData.image.replace(/\s/g, "");
    const deviceCategoryName = DeviceService.getDeviceClassification(uiDevice);
    let profileIndex = isNaN(Number(uiDevice.deviceData.profileindex)) ? parseInt(uiDevice.deviceData.profileindex) : Number(uiDevice.deviceData.profileindex);
    if (uiDevice.ModelType == 1) {
      profileIndex = profileIndex - 1;
    }
    uiDevice.deviceData.profileindex = profileIndex - 1 < 0 ? 0 : profileIndex;
    console.log(imgKey);
    const imageTranslations = DeviceImageValueTranslations.get(imgKey);
    uiDevice.img = imageTranslations.img;
    uiDevice.lightingViewImages = imageTranslations.lightingViewImages;
    uiDevice.deviceRenderAttributes = new PreloadedImageAttributes();
    uiDevice.lightingEffectRenderAttributes = new Array();
    uiDevice.imageAdjustments = DeviceImageAdjustments.get(uiDevice.SN);
    uiDevice.lightingEffects = DeviceLightingEffects.get(uiDevice.SN);
    uiDevice.pollingRates = DevicePollingRates.get(uiDevice.SN);
    uiDevice.wirelessPollingRates = DeviceWirelessPollingRates.get(uiDevice.SN) ?? [];
    uiDevice.inputLatencies = InputLatencies;
    uiDevice.liftoffDistances = LiftOffDistances;
    uiDevice.standbyTypes = StandbyTypes;
    uiDevice.dpiSections = DeviceDPISections.get(uiDevice.SN);
    uiDevice.keybindingLayers = DeviceKeybindingLayers.get(uiDevice.SN);
    uiDevice.deviceCategoryName = deviceCategoryName;
    uiDevice.rgbGradients = DeviceRGBGradients.get(uiDevice.SN);
    uiDevice.productColors = DeviceProductColors.get(uiDevice.SN);
    uiDevice.productScales = DevicesAdapter.isvalueB(uiDevice.SN) || DevicesAdapter.isvalueC(uiDevice.SN) ? ProductScales_V1 : ProductScales_Default;
    uiDevice.productColorIndex = 0;
    uiDevice.iconType = DeviceIconsMap.get(uiDevice.SN);
    uiDevice.managementSections = DeviceManagementSections.get(uiDevice.SN);
    if (deviceCategoryName == "Keyboard" || deviceCategoryName == "Numpad") {
      uiDevice.keyboardData = new KeyboardData(uiDevice.deviceData.profileLayers[0][0].maxKayCapNumber);
      uiDevice.keyboardData.profileindex = uiDevice.deviceData.profileindex;
      uiDevice.keyboardData.profileLayerIndex = uiDevice.deviceData.profileLayerIndex ?? [0, 0, 0];
      uiDevice.keyboardData.sideLightSwitch = uiDevice.deviceData.sideLightSwitch ?? false;
      for (let i2 = 0; i2 < uiDevice.deviceData.profileLayers.length; i2++) {
        const position = uiDevice.deviceData.profileLayers[i2];
        for (let j = 0; j < position.length; j++) {
          const layer = uiDevice.keyboardData.profileLayers[i2][j];
          layer.ImportClassData(uiDevice.deviceData.profileLayers[i2][j]);
          uiDevice.deviceData.profileLayers[i2][j].light_PERKEY_KeyAssignments = layer.light_PERKEY_KeyAssignments;
        }
      }
      for (let index2 = 0; index2 < uiDevice.deviceData.profile.length; index2++) {
        uiDevice.keyboardData.KeyBoardArray[index2].ImportClassData(uiDevice.deviceData.profile[index2]);
      }
    }
    uiDevice = await DevicesAdapter.updateImages(uiDevice);
    return uiDevice;
  }
  static async updateImages(device2) {
    if (device2.img == null || device2.productColors == null) {
      console.error("Device missing required properties:");
      console.log(device2);
      return device2;
    }
    const baseImagePath = `${"."}/images/devices/${device2.img}/${device2.productColors[device2.productColorIndex].subpath}`;
    const smallImagePath = `${baseImagePath}${device2.img}${device2.productColors[device2.productColorIndex].filenameAdjustment}_Render_Small.png`;
    const largeImagePath = `${baseImagePath}${device2.img}${device2.productColors[device2.productColorIndex].filenameAdjustment}_Render_Large.png`;
    const smallImageAttributes = await ImageAttributes.fromPath(smallImagePath);
    if (smallImageAttributes == null) {
      throw new Error("Small Image Render not found");
    }
    device2.deviceRenderAttributes.small = smallImageAttributes;
    const largeImageAttributes = await ImageAttributes.fromPath(largeImagePath);
    if (largeImageAttributes == null) {
      throw new Error("Large Image Render not found");
    }
    device2.deviceRenderAttributes.large = largeImageAttributes;
    if (DeviceLightingMaskRequirements.get(device2.SN) == true) {
      const maskImagePath = `${baseImagePath}${device2.img}${device2.productColors[device2.productColorIndex].filenameAdjustment}_Mask.png`;
      const maskImageAttributes = await ImageAttributes.fromPath(maskImagePath);
      if (maskImageAttributes != null) {
        device2.deviceRenderAttributes.mask = maskImageAttributes;
        device2.showLightingCanvas = true;
      } else {
        console.error(new Error("Mask Image Render not found"));
      }
    }
    if (device2.productScales != null) {
      let currentScale = device2.productScales[0];
      for (let i2 = 1; i2 < device2.productScales.length; i2++) {
        const scale = device2.productScales[i2];
        if (window.innerWidth > scale.breakpoint.width || window.innerHeight > scale.breakpoint.height) {
          currentScale = scale;
        }
      }
      device2.deviceRenderAttributes.large.width = currentScale.imageSize.width;
      device2.deviceRenderAttributes.large.height = currentScale.imageSize.height;
      if (device2.deviceRenderAttributes.mask != null) {
        device2.deviceRenderAttributes.mask.width = currentScale.imageSize.width;
        device2.deviceRenderAttributes.mask.height = currentScale.imageSize.height;
      }
    }
    device2.lightingEffectRenderAttributes = [];
    for (let i2 = 0; i2 < device2.lightingViewImages.length; i2++) {
      const imageName = device2.lightingViewImages[i2];
      const imagePath = `${baseImagePath}${device2.img}${device2.productColors[device2.productColorIndex].filenameAdjustment}${imageName}.png`;
      const lightingViewImage = await ImageAttributes.fromPath(imagePath);
      if (lightingViewImage == null) {
        throw new Error("Lighting Image Render not found");
      }
      device2.lightingEffectRenderAttributes.push(lightingViewImage);
    }
    return device2;
  }
  static extractUIHelperProperties(uiDevice) {
    const clone = structuredClone(uiDevice);
    delete clone.img;
    delete clone.lightingViewImages;
    delete clone.lightingEffects;
    delete clone.pollingRates;
    delete clone.inputLatencies;
    delete clone.liftoffDistances;
    delete clone.standbyTypes;
    delete clone.dpiSections;
    delete clone.keybindingLayers;
    delete clone.deviceCategoryName;
    delete clone.rgbGradients;
    delete clone.productColors;
    delete clone.productScales;
    delete clone.productColorIndex;
    delete clone.iconType;
    delete clone.managementSections;
    if (clone.keyboardData != null) {
      delete clone.keyboardData;
    }
    return clone;
  }
  static isvalueC(serialNumber) {
    if (serialNumber == null)
      return false;
    return [
      // ANSI Wireless
      "0x342D0xE3D7",
      "0x342D0xE3D8",
      "0x342D0xE3D9",
      // ANSI Wired
      "0x342D0xE3DA",
      "0x342D0xE3DB",
      "0x342D0xE3DC",
      // ISO Wireless
      "0x342D0xE3EC",
      "0x342D0xE3ED",
      "0x342D0xE3EE",
      // ISO Wired
      "0x342D0xE3EF",
      "0x342D0xE3F0",
      "0x342D0xE3F1",
      // valueD
      "0x342D0xE3DD",
      // valueA valueD HE 65% ANSI
      "0x342D0xE3F2",
      // valueA valueD HE 65% ISO
      "0x342D0xE3DE",
      // valueA valueD HE 75% ANSI
      "0x342D0xE3F3",
      // valueA valueD HE 75% ISO
      "0x342D0xE3DF",
      // valueA valueD HE 100% ANSI
      "0x342D0xE3F4"
      // valueA valueD HE 100% ISO
    ].includes(serialNumber);
  }
  static isvalueJ(serialNumber) {
    if (serialNumber == null)
      return false;
    return ["0x12CF0x0491"].includes(serialNumber);
  }
  static isAdvDebounceCapable(serialNumber) {
    if (serialNumber == null)
      return false;
    return AdvDebounceDevices.findIndex((x2) => x2.toLowerCase() == serialNumber.toLowerCase()) != -1;
  }
  static savevalueCData(uiPreviewDevice) {
    console.assert(DevicesAdapter.isvalueC(uiPreviewDevice.SN), "Device is not a valueC");
    console.log(uiPreviewDevice.keyboardData);
    return true;
  }
  static isvalueB(serialNumber) {
    if (serialNumber == null)
      return false;
    return [
      "0x24420x0054",
      "0x24420x0053",
      "0x24420x0055",
      "0x24420x2682",
      "0x24420x0052",
      "0x24420x0056"
    ].includes(serialNumber);
  }
  static isWirelessKeyboard(serialNumber) {
    if (serialNumber == null)
      return false;
    return [
      // valueC ANSI Wireless
      "0x342D0xE3D7",
      "0x342D0xE3D8",
      "0x342D0xE3D9",
      // valueC ISO Wireless
      "0x342D0xE3EC",
      "0x342D0xE3ED",
      "0x342D0xE3EE",
      // Other?
      "0x24420x0056",
      "0x24420x0054",
      "0x24420x0055"
    ].includes(serialNumber);
  }
  static setDeviceProfile(deviceSN, modelType, profileIndex) {
    try {
      profileIndex = modelType == 1 ? profileIndex + 1 : profileIndex;
      let obj = {
        Type: FuncType.Mouse,
        SN: deviceSN,
        Func: FuncName.ChangeProfileID,
        Param: profileIndex
      };
      console.log(obj);
      ProtocolService.RunSetFunction(obj).then((data) => {
        console.log("data", data);
      });
      return true;
    } catch (error) {
      console.error(error);
      return false;
    }
  }
  static setDeviceLegacyLayer(uiDevice) {
    try {
      uiDevice.deviceData.profile = uiDevice.keyboardData.KeyBoardArray;
      uiDevice.deviceData.profileLayers = uiDevice.keyboardData.profileLayers;
      uiDevice.deviceData.sideLightSwitch = uiDevice.keyboardData.sideLightSwitch;
      if (DevicesAdapter.isvalueC(uiDevice.SN)) {
        const profileID = uiDevice.keyboardData.profileindex;
        const layerID = uiDevice.keyboardData.profileLayerIndex[profileID];
        const id2 = (layerID & 15) << 4 | profileID & 15;
        const layerChangeRequest = {
          Type: FuncType.Keyboard,
          SN: uiDevice.SN,
          Func: FuncName.ChangeProfileID,
          Param: id2
        };
        ProtocolService.RunSetFunction(layerChangeRequest);
        return true;
      }
      const previewDevice = DevicesAdapter.extractUIHelperProperties(uiDevice);
      previewDevice.deviceData.profileindex = parseInt(previewDevice.deviceData.profileindex) + 1;
      const switchUIflag = { lightingflag: true, keybindingflag: true, performanceflag: true };
      let obj = {
        Type: FuncType.Mouse,
        SN: previewDevice.SN,
        Func: FuncName.SetKeyMatrix,
        Param: {
          KeyBoardManager: uiDevice.keyboardData,
          profileData: previewDevice.deviceData.profile,
          switchUIflag,
          device: previewDevice
        }
      };
      console.log(obj);
      ProtocolService.RunSetFunction(obj).then((data) => {
        console.log("data", data);
      });
      return true;
    } catch (error) {
      console.error(error);
      return false;
    }
  }
  static async saveDeviceData(uiPreviewDevice, updatedPropertynames = []) {
    if (uiPreviewDevice.deviceCategoryName == "Keyboard" || uiPreviewDevice.deviceCategoryName == "Numpad") {
      uiPreviewDevice.deviceData.KeyBoardArray = uiPreviewDevice.keyboardData.profile;
      uiPreviewDevice.deviceData.profileLayers = uiPreviewDevice.keyboardData.profileLayers;
      uiPreviewDevice.deviceData.sideLightSwitch = uiPreviewDevice.keyboardData.sideLightSwitch;
    }
    const previewDevice = DevicesAdapter.extractUIHelperProperties(uiPreviewDevice);
    console.log("saveDeviceData()", previewDevice, updatedPropertynames);
    const currentProfileIndex = parseInt(previewDevice.deviceData.profileindex);
    if (!DevicesAdapter.isvalueC(uiPreviewDevice.SN)) {
      previewDevice.deviceData.profileindex = currentProfileIndex + 1;
    }
    if (updatedPropertynames.includes("reset") && uiPreviewDevice.ModelType == 2) {
      const profileLayerIndex = previewDevice.deviceData.profileLayerIndex[currentProfileIndex];
      for (const key of previewDevice.deviceData.profileLayers[currentProfileIndex][profileLayerIndex].assignedKeyboardKeys[0]) {
        key.recordBindCodeName = "Default";
        key.recordBindCodeType = "";
        if (key.valueCKeyData != null)
          key.valueCKeyData = void 0;
      }
      previewDevice.deviceData.profile = previewDevice.deviceData.profileLayers[currentProfileIndex];
    }
    const saveTypes = DevicesAdapter.getSaveTypes(updatedPropertynames);
    if (saveTypes.length && uiPreviewDevice.keyboardData != void 0) {
      DevicesAdapter.updateModifiedTime(uiPreviewDevice, previewDevice);
    }
    if (uiPreviewDevice.deviceCategoryName == "Keyboard" || uiPreviewDevice.deviceCategoryName == "Numpad") {
      uiPreviewDevice.keyboardData.KeyBoardArray = previewDevice.deviceData.profile;
      uiPreviewDevice.keyboardData.profileLayers = previewDevice.deviceData.profileLayers;
      uiPreviewDevice.keyboardData.sideLightSwitch = previewDevice.deviceData.sideLightSwitch;
    }
    if (DevicesAdapter.isvalueC(uiPreviewDevice.SN) && updatedPropertynames.includes("reset")) {
      console.log("Resetting valueC data");
      const profileLayerIndex = previewDevice.deviceData.profileLayerIndex[currentProfileIndex];
      for (const profileLayer of uiPreviewDevice.deviceData.profileLayers) {
        if (profileLayer[profileLayerIndex].valueCData)
          profileLayer.valueCData = void 0;
      }
      for (const profileLayer of uiPreviewDevice.keyboardData?.KeyBoardArray) {
        if (profileLayer.valueCData)
          profileLayer.valueCData = void 0;
      }
      const obj = {
        Type: FuncType.Mouse,
        SN: previewDevice.SN,
        Func: FuncName.ResetDevice,
        Param: { SN: previewDevice.SN, device: previewDevice }
      };
      ProtocolService.RunSetFunction(obj).then((data) => {
        console.log("data", data);
      });
      return true;
    }
    for (const saveType of saveTypes) {
      const switchUIflag = { lightingflag: false, keybindingflag: false, performanceflag: false };
      switchUIflag[saveType] = true;
      const obj = DevicesAdapter.isvalueJ(previewDevice.SN) ? {
        Type: FuncType.Device,
        SN: previewDevice.SN,
        Func: FuncName.SetLEDEffect,
        Param: uiPreviewDevice.deviceData.profile[0]
      } : {
        Type: FuncType.Mouse,
        SN: previewDevice.SN,
        Func: FuncName.SetKeyMatrix,
        Param: {
          KeyBoardManager: uiPreviewDevice.keyboardData,
          profileData: previewDevice.deviceData.profile,
          switchUIflag,
          device: previewDevice
        }
      };
      console.log(obj);
      ProtocolService.RunSetFunction(obj).then((data) => {
        console.log("data", data);
      });
      await new Promise((resolve) => setTimeout(resolve, 200));
    }
    return true;
  }
  static updateModifiedTime(uiPreviewDevice, previewDevice) {
    const lastModified = Date.now();
    switch (uiPreviewDevice.ModelType) {
      case 2: {
        const uiProfileIndex = uiPreviewDevice.keyboardData.profileindex;
        uiPreviewDevice.keyboardData.KeyBoardArray[uiProfileIndex].lastModified = lastModified;
        const currentProfileIndex = DevicesAdapter.isvalueC(uiPreviewDevice.SN) ? previewDevice.deviceData.profileindex : previewDevice.deviceData.profileindex - 1;
        previewDevice.deviceData.profile[currentProfileIndex].lastModified = lastModified;
        const profileLayerIndex = previewDevice.deviceData.profileLayerIndex[currentProfileIndex];
        previewDevice.deviceData.profileLayers[profileLayerIndex][currentProfileIndex].lastModified = lastModified;
        break;
      }
      case 1: {
        const currentProfileIndex = uiPreviewDevice.deviceData.profileindex;
        uiPreviewDevice.deviceData.profile[currentProfileIndex].lastModified = lastModified;
        previewDevice.deviceData.profile[currentProfileIndex].lastModified = lastModified;
        break;
      }
      default:
        console.warn("Unhandled device type when setting profile modified time");
        break;
    }
  }
  static getSaveTypes(updatedProperties) {
    let lighting = false;
    let keybinding = false;
    let performance2 = false;
    for (let i2 = 0; i2 < updatedProperties.length; i2++) {
      if (lightingSaveProperties.indexOf(updatedProperties[i2]) > -1) {
        lighting = true;
      }
      if (keybindingSaveProperties.indexOf(updatedProperties[i2]) > -1) {
        keybinding = true;
      }
      if (performanceSaveProperties.indexOf(updatedProperties[i2]) > -1) {
        performance2 = true;
      }
      if (lighting == true && keybinding == true && performance2 == true) {
        break;
      }
    }
    const types = [];
    if (lighting == true) {
      types.push("lightingflag");
    }
    if (keybinding == true) {
      types.push("keybindingflag");
    }
    if (performance2 == true) {
      types.push("performanceflag");
    }
    return types;
  }
}
const EventTypes = {
  Error: "Error",
  HotPlug: "HotPlug",
  ProtocolMessage: "ProtocolMessage",
  DownloadProgress: "DownloadProgress",
  UpdateApp: "UpdateApp",
  UpdateFW: "UpdateFW",
  ChangeWindowSize: "ChangeWindowSize",
  ShowWindow: "ShowWindow",
  HIDEP2Data: "HIDEP2Data",
  KeyDataCallback: "KeyDataCallback",
  QuitApp: "QuitApp",
  RefreshDevice: "RefreshDevice",
  SwitchProfile: "SwitchProfile",
  ImportProfile: "ImportProfile",
  DownloadFileError: "DownloadFileError",
  //Battery
  GetBatteryStats: "GetBatteryStats",
  SwitchUIProfile: "SwitchUIProfile",
  SwitchLighting: "SwitchLighting",
  SwitchMultiColor: "SwitchMultiColor",
  SwitchSliderVolume: "SwitchSliderVolume",
  //FWUpdate
  SendFWUPDATE: "SendFWUPDATE",
  SwitchHotPlug: "SwitchHotPlug",
  HideApp: "HideApp",
  MaxSize: "MaxSize",
  //Audio Session
  GetAudioSession: "GetAudioSession",
  //Dock
  DockedCharging: "DockedCharging",
  DeleteMacro: "DeleteMacro",
  // 2.0
  SavedDevice: "SavedDevice",
  // Authentication events
  UserLoggedIn: "UserLogin",
  // valueC
  valueCVisualizationUpdate: "valueCVisualizationUpdate"
};
class LightingLayoutRecord extends AppRecord {
  SN = "Error";
  devicename = "Error";
  m_Identifier = "1";
  name = "NewLayout";
  value = 0;
  content;
}
class LightingLayoutContent {
  AllBlockColor = [];
  lightData;
  constructor(AllBlockColor, lightData) {
    this.AllBlockColor = AllBlockColor;
    this.lightData = lightData;
  }
}
class LightingLayoutBlockColor {
  breathing = false;
  clearStatus = false;
  color = [0, 0, 0, 0];
  brightness = 60;
}
class LightingLayoutLightData {
  breathing = false;
  brightness = 60;
  brightness_Enable = false;
  colorHex = "#ff0000";
  colorPickerValue = [255, 0, 0, 1];
  color_Enable = false;
  isRainbow = false;
  lightSelected;
  rate = 50;
  rate_Enable = false;
  sideLightColor = [0, 0, 0, 0];
  sideLightSync = false;
}
class HSLColor {
  #hue = 0;
  get hue() {
    return this.#hue;
  }
  set hue(value2) {
    this.#hue = value2;
  }
  get h() {
    return this.#hue;
  }
  set h(value2) {
    this.#hue = value2;
  }
  #saturation = 100;
  get saturation() {
    return this.#saturation;
  }
  set saturation(value2) {
    this.#saturation = value2;
  }
  get s() {
    return this.#saturation;
  }
  set s(value2) {
    this.#saturation = value2;
  }
  #lightness = 100;
  get lightness() {
    return this.#lightness;
  }
  set lightness(value2) {
    this.#lightness = value2;
  }
  get l() {
    return this.#lightness;
  }
  set l(value2) {
    this.#lightness = value2;
  }
  toRGBA() {
    return toRGBA(this);
  }
  toHSL() {
    return this;
  }
  toHex() {
    return toHex(this);
  }
  toArray_rgba() {
    const rgbaColor = toRGBA(this);
    return [rgbaColor.r, rgbaColor.g, rgbaColor.b, rgbaColor.a];
  }
  toArray_hsl() {
    return [this.#hue, this.#saturation, this.#lightness];
  }
  static fromHSL(hue = 0, saturation = 100, lightness = 50) {
    const color2 = new HSLColor();
    color2.#hue = hue;
    color2.#saturation = saturation;
    color2.#lightness = lightness;
    return color2;
  }
}
function toRGBA(hsl) {
  const hue = hsl.h / 360;
  const saturation = hsl.s / 100;
  const luminosity = hsl.l / 100;
  let red = 0;
  let green = 0;
  let blue = 0;
  if (saturation == 0) {
    red = green = blue = luminosity;
  } else {
    let hue2rgb = function(p22, q22, t2) {
      if (t2 < 0)
        t2 += 1;
      if (t2 > 1)
        t2 -= 1;
      if (t2 < 1 / 6)
        return p22 + (q22 - p22) * 6 * t2;
      if (t2 < 1 / 2)
        return q22;
      if (t2 < 2 / 3)
        return p22 + (q22 - p22) * (2 / 3 - t2) * 6;
      return p22;
    };
    const q2 = luminosity < 0.5 ? luminosity * (1 + saturation) : luminosity + saturation - luminosity * saturation;
    const p2 = 2 * luminosity - q2;
    red = hue2rgb(p2, q2, hue + 1 / 3);
    green = hue2rgb(p2, q2, hue);
    blue = hue2rgb(p2, q2, hue - 1 / 3);
  }
  red *= 255;
  green *= 255;
  blue *= 255;
  return RGBAColor.fromRGB(red, green, blue);
}
function toHSL(rgb) {
  const red = rgb.r / 255;
  const green = rgb.g / 255;
  const blue = rgb.b / 255;
  const max = Math.max(red, green, blue), min = Math.min(red, green, blue);
  const average = (max + min) / 2;
  let hue = average;
  let saturation = average;
  let luminosity = average;
  if (max == min) {
    hue = saturation = 0;
  } else {
    const delta = max - min;
    saturation = luminosity > 0.5 ? delta / (2 - max - min) : delta / (max + min);
    if (max == red) {
      hue = (green - blue) / delta + (green < blue ? 6 : 0);
    } else if (max == green) {
      hue = (blue - red) / delta + 2;
    } else if (max == blue) {
      hue = (red - green) / delta + 4;
    }
    hue /= 6;
  }
  hue *= 360;
  saturation *= 100;
  luminosity *= 100;
  return HSLColor.fromHSL(hue, saturation, luminosity);
}
function toHex(color2) {
  const rgbaColor = color2 instanceof RGBAColor ? color2 : toRGBA(color2);
  let redString = Math.round(rgbaColor.r).toString(16);
  let greenString = Math.round(rgbaColor.g).toString(16);
  let blueString = Math.round(rgbaColor.b).toString(16);
  if (redString.length == 1) {
    redString = "0" + redString;
  }
  if (greenString.length == 1) {
    greenString = "0" + greenString;
  }
  if (blueString.length == 1) {
    blueString = "0" + blueString;
  }
  return "#" + redString + greenString + blueString;
}
const HEX_COLOR_MAX = 255;
class RGBAColor {
  #red = 0;
  get red() {
    return this.#red;
  }
  set red(value2) {
    this.#red = value2;
  }
  get r() {
    return this.#red;
  }
  set r(value2) {
    this.#red = value2;
  }
  #green = 0;
  get green() {
    return this.#green;
  }
  set green(value2) {
    this.#green = value2;
  }
  get g() {
    return this.#green;
  }
  set g(value2) {
    this.#green = value2;
  }
  #blue = 100;
  get blue() {
    return this.#blue;
  }
  set blue(value2) {
    this.#blue = value2;
  }
  get b() {
    return this.#blue;
  }
  set b(value2) {
    this.#blue = value2;
  }
  #alpha = 100;
  get alpha() {
    return this.#alpha;
  }
  set alpha(value2) {
    this.#alpha = value2;
  }
  get a() {
    return this.#alpha;
  }
  set a(value2) {
    this.#alpha = value2;
  }
  constructor() {
  }
  toRGBA() {
    return this;
  }
  toHSL() {
    return toHSL(this);
  }
  toHex() {
    return toHex(this);
  }
  toArray_rgba() {
    return [this.#red, this.#green, this.#blue, this.#alpha];
  }
  toArray_hsl() {
    const hslColor = toHSL(this);
    return [hslColor.h, hslColor.s, hslColor.l];
  }
  static fromRGB(red = 0, green = 0, blue = 0, alpha = 1) {
    const color2 = new RGBAColor();
    color2.#red = red;
    color2.#green = green;
    color2.#blue = blue;
    color2.#alpha = alpha;
    return color2;
  }
  static fromHSL(hue = 0, saturation = 0, lightness = 0, alpha = 1) {
    const color2 = new RGBAColor();
    const hue_local = hue / 360;
    const saturation_local = saturation / 100;
    const luminosity_local = lightness / 100;
    let red = 0;
    let green = 0;
    let blue = 0;
    if (saturation_local == 0) {
      red = green = blue = luminosity_local;
    } else {
      let hue2rgb = function(p22, q22, t2) {
        if (t2 < 0)
          t2 += 1;
        if (t2 > 1)
          t2 -= 1;
        if (t2 < 1 / 6)
          return p22 + (q22 - p22) * 6 * t2;
        if (t2 < 1 / 2)
          return q22;
        if (t2 < 2 / 3)
          return p22 + (q22 - p22) * (2 / 3 - t2) * 6;
        return p22;
      };
      const q2 = luminosity_local < 0.5 ? luminosity_local * (1 + saturation_local) : luminosity_local + saturation_local - luminosity_local * saturation_local;
      const p2 = 2 * luminosity_local - q2;
      red = hue2rgb(p2, q2, hue_local + 1 / 3);
      green = hue2rgb(p2, q2, hue_local);
      blue = hue2rgb(p2, q2, hue_local - 1 / 3);
    }
    color2.#red = red * 255;
    color2.#green = green * 255;
    color2.#blue = blue * 255;
    color2.#alpha = alpha;
    return color2;
  }
  static fromHex(hex) {
    const color2 = new RGBAColor();
    const rgbArray = ["0x" + hex[1] + hex[2] | 0, "0x" + hex[3] + hex[4] | 0, "0x" + hex[5] + hex[6] | 0];
    color2.#red = rgbArray[0];
    color2.#green = rgbArray[1];
    color2.#blue = rgbArray[2];
    if (hex.length > 7) {
      const hexInteger = "0x" + hex[6] + hex[7] | 0;
      const hexPercent = hexInteger / HEX_COLOR_MAX;
      color2.#alpha = hexPercent;
    }
    return color2;
  }
}
const BindingTypes_ButtonPress = [
  new DisplayOption("none", "Option_BindingTypes_none", -1, { translationFallback: "" }),
  new DisplayOption("keystroke", "Option_BindingTypes_keystroke", 7, { translationFallback: "Keystroke" }),
  new DisplayOption("keyboardFunction", "Option_BindingTypes_keyboardFunction", 8, { translationFallback: "Keyboard Function" }),
  new DisplayOption("mouseFunction", "Option_BindingTypes_mouseFunction", 3, { translationFallback: "Mouse Function" }),
  new DisplayOption("dpi", "Option_BindingTypes_dpi", 4, { translationFallback: "DPI" }),
  new DisplayOption("macro", "Option_BindingTypes_macro", 1, { translationFallback: "Macro" }),
  new DisplayOption("multimedia", "Option_BindingTypes_multimedia", 5, { translationFallback: "Multimedia" }),
  new DisplayOption("shortcuts", "Option_BindingTypes_shortcuts", 2, { translationFallback: "Shortcuts" }),
  new DisplayOption("disable", "Option_BindingTypes_disable", 6, { translationFallback: "Disable" })
];
const BindingTypes_KeyPress = [
  new DisplayOption("none", "Option_BindingTypes_none", -1, { translationFallback: "" }),
  new DisplayOption("keystroke", "Option_BindingTypes_keystroke", 0, { translationFallback: "Keystroke", bindingCode: "SingleKey" }),
  new DisplayOption("keyboardFunction", "Option_BindingTypes_keyboardFunction", 1, { translationFallback: "Keyboard Function", bindingCode: "KEYBOARD" }),
  new DisplayOption("mouseFunction", "Option_BindingTypes_mouseFunction", 2, { translationFallback: "Mouse Function", bindingCode: "MOUSE" }),
  new DisplayOption("macro", "Option_BindingTypes_macro", 3, { translationFallback: "Macro", bindingCode: "MacroFunction" }),
  new DisplayOption("multimedia", "Option_BindingTypes_multimedia", 4, { translationFallback: "Multimedia", bindingCode: "Multimedia" }),
  new DisplayOption("shortcuts", "Option_BindingTypes_shortcuts", 5, { translationFallback: "Shortcuts" }),
  new DisplayOption("audioToggle", "Option_BindingTypes_audioToggle", 7, { translationFallback: "Audio Toggle", bindingCode: "SOUND CONTROL" }),
  new DisplayOption("disable", "Option_BindingTypes_disable", 6, { translationFallback: "Disable", bindingCode: "Disable" })
];
const BindingTypes_Rotation = [
  new DisplayOption("none", "Option_BindingTypes_none", -1, { translationFallback: "" }),
  new DisplayOption("soundControl", "Option_BindingTypes_soundControl", 0, { translationFallback: "Sound Control", bindingCode: "SOUND CONTROL" }),
  new DisplayOption("disable", "Option_BindingTypes_disable", 6, { translationFallback: "Disable", bindingCode: "Disable" })
];
const BindingTypes_RotaryPress = [
  new DisplayOption("none", "Option_BindingTypes_none", -1, { translationFallback: "" }),
  new DisplayOption("keystroke", "Option_BindingTypes_keystroke", 0, { translationFallback: "Keystroke", bindingCode: "SingleKey" }),
  new DisplayOption("keyboardFunction", "Option_BindingTypes_keyboardFunction", 1, { translationFallback: "Keyboard Function", bindingCode: "KEYBOARD" }),
  new DisplayOption("mouseFunction", "Option_BindingTypes_mouseFunction", 2, { translationFallback: "Mouse Function", bindingCode: "MOUSE" }),
  new DisplayOption("multimedia", "Option_BindingTypes_multimedia", 4, { translationFallback: "Multimedia", bindingCode: "Multimedia" }),
  new DisplayOption("shortcuts", "Option_BindingTypes_shortcuts", 5, { translationFallback: "Shortcuts" }),
  new DisplayOption("disable", "Option_BindingTypes_disable", 6, { translationFallback: "Disable", bindingCode: "Disable" })
];
var PerKeyAction = /* @__PURE__ */ ((PerKeyAction2) => {
  PerKeyAction2[PerKeyAction2["Add"] = 0] = "Add";
  PerKeyAction2[PerKeyAction2["Remove"] = 1] = "Remove";
  return PerKeyAction2;
})(PerKeyAction || {});
class UIState {
  // loading states
  isLoadingDevices = false;
  // saving states
  isSaving = false;
  showingSaveSuccess = false;
  // modal states
  updateDeviceModal_isOpen = false;
  updateManagerModal_isOpen = false;
  pairingModal_isOpen = false;
  macroModal_isOpen = false;
  advDebounce_isOpen = false;
  // color values
  colorPickerValue_PresetLighting = RGBAColor.fromRGB(255, 0, 0);
  colorPickerValue_PerKeyLighting = RGBAColor.fromRGB(255, 0, 0);
  colorPickerValue_ColorPickerModal = RGBAColor.fromRGB(255, 0, 0);
  activeLightingPicker_selectedColor = RGBAColor.fromRGB(255, 0, 0);
  // navigation states
  displayNavigation = true;
  // preview values //
  // lighting management
  lightSettingMode = "none";
  lightingSelectedPreset = null;
  lightingPresetGradient = null;
  lightingSelectedColorStyle = null;
  selectedColorIndex = 0;
  // keybinding management
  keybindSelectedLayer = KeybindingLayers_SingleLayer[0];
  keybindSelectedBindingType = BindingTypes_ButtonPress[0];
  keybindSelectedKeyCode = null;
  keybindSelectedKeyModifier = null;
  keybindSelectedKeyboardFunction = null;
  keybindSelectedMouseFunction = null;
  keybindSelectedDPIOption = null;
  keybindSelectedMultimediaFunction = null;
  keybindSelectedShortcutType = null;
  // keybindSelectedShortcutOption: DisplayOption|null = null;
  keybindSelectedShortcutProgramPath = null;
  keybindSelectedShortcutUrl = null;
  keybindSelectedShortcutWindowsOption = null;
  keybindDisabledIsSelected = false;
  keybindSoundControlSelection = null;
  keybindAudioToggleTarget = null;
  keybindSelectedRotaryEncoderAction = null;
  // keybind node selection
  keybindSelectedNode = null;
  keybindSelectedNodeIndex = -1;
  // rapid trigger selection
  // lighting selection
  perKeyLightingSelectedNode = null;
  perKeyLightingSelectedNodeIndex = -1;
  selectedPerKeyAction = PerKeyAction.Add;
  selectedPerKeyData = new LightingLayoutLightData();
  unsavedPropertyNames = /* @__PURE__ */ new Set([]);
  keybindMacroSelection;
  lightingLayoutSelection;
  // advanced keys
  // advancedKeys_all: Array<any> = [];
  // advancedKeys_selectedKey: LayoutNode|null = null;
  // advancedKeys_selectedBinding: string|null = null;
  // advancedKeys_assignedToggleKey: LayoutNode|null = null;
  // advancedKeys_assignedModTapKey: LayoutNode|null = null;
  // advancedKeys_showCharacterSelector: boolean = false;
  // advancedKeys_dynamicKeyStrokeKey: string|null = null;
  // advancedKeys_dynamicKeyStroke: any = {
  //     keyPress1: { value: 25 },
  //     keyPress2: { value: 75 },
  //     keyRelease1: { value: 25 },
  //     keyRelease2: { value: 75 }
  // };
  valueCState = new valueCUIState();
  // end preview values //
}
const UIDisplayContext = reactExports.createContext(new UIState());
const UIUpdateContext = reactExports.createContext({});
function useUIContext() {
  return reactExports.useContext(UIDisplayContext);
}
function useUIUpdateContext() {
  return reactExports.useContext(UIUpdateContext);
}
function UIContext({ children }) {
  const [state, setState] = reactExports.useState(new UIState());
  const setDevicesLoading = (value2) => {
    state.isLoadingDevices = value2;
    setState({ ...state });
  };
  const setIsSaving = (value2) => {
    state.isSaving = value2;
    setState({ ...state });
    if (value2 == true) {
      setTimeout(() => {
        state.isSaving = false;
        setShowingSaveSuccess(true);
      }, 750);
    }
  };
  const setShowingSaveSuccess = (value2) => {
    state.showingSaveSuccess = value2;
    setState({ ...state });
    if (value2 == true) {
      setTimeout(() => {
        state.showingSaveSuccess = false;
        setState({ ...state });
      }, 1e3);
    }
  };
  const setPreviewDevicePropertiesAsUnsaved = (...propertyNames) => {
    const unsavedProperties = new Set(state.unsavedPropertyNames);
    for (let i2 = 0; i2 < propertyNames.length; i2++) {
      const propertyName = propertyNames[i2];
      unsavedProperties.add(propertyName);
    }
    state.unsavedPropertyNames = unsavedProperties;
    setState({ ...state });
  };
  const clearUnsavedPreviewDeviceProperties = () => {
    state.unsavedPropertyNames = /* @__PURE__ */ new Set();
    setState({ ...state });
  };
  const openMacroEditor = () => {
    state.macroModal_isOpen = true;
    setState({ ...state });
  };
  const closeMacroEditor = () => {
    state.macroModal_isOpen = false;
    setState({ ...state });
  };
  const openUpdateManager = () => {
    state.updateManagerModal_isOpen = true;
    setState({ ...state });
  };
  const closeUpdateManager = () => {
    state.updateManagerModal_isOpen = false;
    setState({ ...state });
  };
  const openDeviceUpdateModal = () => {
    state.updateDeviceModal_isOpen = true;
    setState({ ...state });
  };
  const closeDeviceUpdateModal = () => {
    state.updateDeviceModal_isOpen = false;
    setState({ ...state });
  };
  const openPairingUtility = () => {
    state.pairingModal_isOpen = true;
    setState({ ...state });
  };
  const closePairingUtility = () => {
    state.pairingModal_isOpen = false;
    setState({ ...state });
  };
  const openAdvDebounce = () => {
    state.advDebounce_isOpen = true;
    setState({ ...state });
  };
  const closeAdvDebounce = () => {
    state.advDebounce_isOpen = false;
    setState({ ...state });
  };
  const setColor_PresetColorPicker = (color2) => {
    state.colorPickerValue_PresetLighting = color2;
    state.activeLightingPicker_selectedColor = color2;
    setState({ ...state });
  };
  const setColor_PerKeyColorPicker = (color2) => {
    state.colorPickerValue_PerKeyLighting = color2;
    state.activeLightingPicker_selectedColor = color2;
    setState({ ...state });
  };
  const setColor_ModalColorPicker = (color2) => {
    state.colorPickerValue_ColorPickerModal = color2;
    state.activeLightingPicker_selectedColor = color2;
    setState({ ...state });
  };
  const setDisplayNavigation = (value2) => {
    state.displayNavigation = value2;
    setState({ ...state });
  };
  const setLightingColorStyle = (colorStyle) => {
    console.log("how");
    debugger;
    setState({ ...state });
  };
  const setLightingLayoutSelection = (lightingLayout) => {
    state.lightingLayoutSelection = lightingLayout;
    setState({ ...state });
  };
  const setLightSettingMode = (value2) => {
    state.lightSettingMode = value2;
    setState({ ...state });
  };
  const setLightingPresetSelection = (option) => {
    state.lightingSelectedPreset = option;
    setState({ ...state });
  };
  const setLightingPresetGradient = (option) => {
    state.lightingPresetGradient = option;
    setState({ ...state });
  };
  const setPerkeylightingSelectedNode = (node) => {
    state.lightSettingMode = "per-key";
    state.perKeyLightingSelectedNode = node;
    setState({ ...state });
  };
  const setPerkeylightingSelectedNodeIndex = (index2) => {
    state.perKeyLightingSelectedNodeIndex = index2;
    setState({ ...state });
  };
  const setSelectedColorIndex = (index2) => {
    state.selectedColorIndex = index2;
    setState({ ...state });
  };
  const setSelectedPerKeyAction = (action) => {
    state.selectedPerKeyAction = action;
    setState({ ...state });
  };
  const setKeybindingLayer = (option) => {
    state.keybindSelectedLayer = option;
    setState({ ...state });
  };
  const setKeybindingType = (option) => {
    state.keybindSelectedBindingType = option;
    setState({ ...state });
  };
  const setKeybindingKeyCode = (value2) => {
    state.keybindSelectedKeyCode = value2;
    setState({ ...state });
  };
  const setKeybindingKeyModifier = (option) => {
    state.keybindSelectedKeyModifier = option;
    setState({ ...state });
  };
  const setKeybindingKeyboardFunction = (option) => {
    state.keybindSelectedKeyboardFunction = option;
    setState({ ...state });
  };
  const setKeybindSelectedMouseFunction = (option) => {
    state.keybindSelectedMouseFunction = option;
    setState({ ...state });
  };
  const setKeybindSelectedDPIOption = (option) => {
    state.keybindSelectedDPIOption = option;
    setState({ ...state });
  };
  const setKeybindSelectedMultimediaFunction = (option) => {
    state.keybindSelectedMultimediaFunction = option;
    setState({ ...state });
  };
  const setKeybindSelectedShortcutType = (option) => {
    state.keybindSelectedShortcutType = option;
    setState({ ...state });
  };
  const setKeybindSelectedShortcutProgramPath = (value2) => {
    state.keybindSelectedShortcutProgramPath = value2;
    setState({ ...state });
  };
  const setKeybindSelectedShortcutUrl = (value2) => {
    state.keybindSelectedShortcutUrl = value2;
    setState({ ...state });
  };
  const setKeybindSelectedWindowsOption = (option) => {
    state.keybindSelectedShortcutWindowsOption = option;
    setState({ ...state });
  };
  const setKeybindDisabledIsSelected = (value2) => {
    state.keybindDisabledIsSelected = value2;
    setState({ ...state });
  };
  const setKeybindSoundControlSelection = (value2) => {
    state.keybindSoundControlSelection = value2;
    setState({ ...state });
  };
  const setKeybindAudioToggleTarget = (value2) => {
    state.keybindAudioToggleTarget = value2;
    setState({ ...state });
  };
  const setKeybindMacroSelection = (macro) => {
    state.keybindMacroSelection = macro;
    setState({ ...state });
  };
  const setKeybindingSelectedNode = (node, index2) => {
    state.keybindSelectedNode = node;
    state.keybindSelectedNodeIndex = index2;
    setState({ ...state });
  };
  const setRotaryEncoderAction = (option) => {
    state.keybindSelectedRotaryEncoderAction = option;
    setState({ ...state });
  };
  const setvalueCState = (value2) => {
    state.valueCState = value2;
    setState({ ...state });
  };
  const setvalueCAdvancedKeyBindingMode = (value2) => {
    switch (value2.advancedKeysBindingMode) {
      case AdvancedKeyMode.None:
        value2.advancedKeysSelectedKeyTmp = null;
        value2.advancedKeysAssignedTmp = {
          toggle: null,
          modTapHold: null,
          modTapPress: null,
          dynamicKeystrokes: null
        };
        value2.advancedKeysSelectedTriggerPoint = null;
        break;
    }
    state.valueCState = value2;
    setState({ ...state });
  };
  const setvalueCVisualizationEnabled = (value2) => {
    state.valueCState.isVisualisationEnabled = value2;
    setState({ ...state });
  };
  const setvalueCVisualizationValue = (value2) => {
    state.valueCState.visualisationDisplayValue = value2;
    setState({ ...state });
  };
  const update2 = (state2) => {
    setState({ ...state2 });
  };
  const updateFunctions = {
    update: update2,
    setDevicesLoading,
    setIsSaving,
    setShowingSaveSuccess,
    setPreviewDevicePropertiesAsUnsaved,
    clearUnsavedPreviewDeviceProperties,
    // modals
    openMacroEditor,
    closeMacroEditor,
    openUpdateManager,
    closeUpdateManager,
    openDeviceUpdateModal,
    closeDeviceUpdateModal,
    openPairingUtility,
    closePairingUtility,
    openAdvDebounce,
    closeAdvDebounce,
    // colors
    setColor_PresetColorPicker,
    setColor_PerKeyColorPicker,
    setColor_ModalColorPicker,
    // navigation
    setDisplayNavigation,
    // lighting
    setLightingColorStyle,
    setLightingLayoutSelection,
    setLightSettingMode,
    setLightingPresetSelection,
    setLightingPresetGradient,
    setPerkeylightingSelectedNode,
    setPerkeylightingSelectedNodeIndex,
    setSelectedColorIndex,
    setSelectedPerKeyAction,
    // keybinding
    setKeybindingLayer,
    setKeybindingType,
    setKeybindingKeyCode,
    setKeybindingKeyModifier,
    setKeybindingKeyboardFunction,
    setKeybindSelectedMouseFunction,
    setKeybindSelectedDPIOption,
    setKeybindSelectedMultimediaFunction,
    setKeybindSelectedShortcutType,
    // setKeybindSelectedShortcutOption,
    setKeybindSelectedShortcutProgramPath,
    setKeybindSelectedShortcutUrl,
    setKeybindSelectedWindowsOption,
    setKeybindDisabledIsSelected,
    setKeybindSoundControlSelection,
    setKeybindAudioToggleTarget,
    setKeybindMacroSelection,
    setKeybindingSelectedNode,
    setRotaryEncoderAction,
    // valueC
    setvalueCState,
    setvalueCAdvancedKeyBindingMode,
    setvalueCVisualizationEnabled,
    setvalueCVisualizationValue
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(UIDisplayContext.Provider, { value: state, children: /* @__PURE__ */ jsxRuntimeExports.jsx(UIUpdateContext.Provider, { value: updateFunctions, children }) });
}
const ModifierKeys = [
  new DisplayOption("none", "Option_ModifierKeys_none", -1, { translationFallback: "None" }),
  new DisplayOption("shift", "Option_ModifierKeys_shift", 0, { translationFallback: "Shift" }),
  new DisplayOption("ctrl", "Option_ModifierKeys_ctrl", 1, { translationFallback: "Ctrl" }),
  new DisplayOption("alt", "Option_ModifierKeys_alt", 2, { translationFallback: "Alt" }),
  new DisplayOption("windows", "Option_ModifierKeys_windows", 3, { translationFallback: "Windows Key" })
];
const ShortcutTypes = [
  new DisplayOption("none", "Option_ShortcutTypes_none", -1, { translationFallback: "" }),
  new DisplayOption("launchProgram", "Option_ShortcutTypes_launchProgram", 1, { translationFallback: "Launch Program", bindingValue: "LaunchProgram" }),
  new DisplayOption("launchWebsite", "Option_ShortcutTypes_launchWebsite", 2, { translationFallback: "Launch Website", bindingValue: "LaunchWebsite" }),
  new DisplayOption("windows", "Option_ShortcutTypes_windows", 3, { translationFallback: "Windows", bindingValue: "Windows" })
];
const EventKey_BindingCodeMap = [
  { eventKeyCode: "Escape", bindCodeName: "Esc" },
  { eventKeyCode: "Digit1", bindCodeName: "1" },
  { eventKeyCode: "Digit2", bindCodeName: "2" },
  { eventKeyCode: "Digit3", bindCodeName: "3" },
  { eventKeyCode: "Digit4", bindCodeName: "4" },
  { eventKeyCode: "Digit5", bindCodeName: "5" },
  { eventKeyCode: "Digit6", bindCodeName: "6" },
  { eventKeyCode: "Digit7", bindCodeName: "7" },
  { eventKeyCode: "Digit8", bindCodeName: "8" },
  { eventKeyCode: "Digit9", bindCodeName: "9" },
  { eventKeyCode: "Digit0", bindCodeName: "0" },
  { eventKeyCode: "ArrowUp", bindCodeName: "Up" },
  { eventKeyCode: "ArrowDown", bindCodeName: "Down" },
  { eventKeyCode: "ArrowLeft", bindCodeName: "Left" },
  { eventKeyCode: "ArrowRight", bindCodeName: "Right" }
];
class DevicesState {
  subscribed = false;
  devices = [];
  referenceDevice;
  previewDevice;
  // currentProfile?: ProfileData;
  // currentProfileLayer?: ProfileData;
  currentProfileLayerIndex;
  pairableDevices = [];
  hasInitializedDevices = false;
  isRefreshingDevices = false;
  devicesCurrentlyUpdating = [];
  presetEffectHasFixedColors = true;
}
const DevicesDisplayContext = reactExports.createContext(new DevicesState());
const DevicesManagementContext = reactExports.createContext({});
function useDevicesContext() {
  return reactExports.useContext(DevicesDisplayContext);
}
function useDevicesManagementContext() {
  return reactExports.useContext(DevicesManagementContext);
}
function DevicesContext({ children }) {
  const [state, setStateInt] = reactExports.useState(new DevicesState());
  const eventStateRef = reactExports.useRef(state);
  const setState = (devicesState) => {
    const deviceStateUpdate = (device2) => {
      if (device2 != null) {
        device2.deviceData = structuredClone(device2.deviceData);
        if (device2.keyboardData != null) {
          device2.keyboardData = structuredClone(device2.keyboardData);
        }
        return { ...device2 };
      }
      return void 0;
    };
    devicesState.previewDevice = deviceStateUpdate(devicesState.previewDevice);
    if (devicesState.previewDevice != null) {
      updateDevicesReference();
    }
    setStateInt(devicesState);
    eventStateRef.current = devicesState;
  };
  const location = useLocation();
  const uiContext = useUIContext();
  const {
    setIsSaving,
    setShowingSaveSuccess,
    clearUnsavedPreviewDeviceProperties,
    setDevicesLoading,
    setPreviewDevicePropertiesAsUnsaved,
    setLightingColorStyle,
    setLightingPresetSelection,
    setLightingPresetGradient,
    setLightSettingMode,
    setSelectedColorIndex,
    setKeybindingLayer: setUIKeybindingLayer,
    setKeybindingType: setUIKeybindingType,
    setKeybindingKeyCode: setUIKeybindingKeyCode,
    setKeybindingKeyModifier: setUIKeybindingKeyModifier,
    setKeybindingKeyboardFunction: setUIKeybindingKeyboardFunction,
    setKeybindSelectedMouseFunction: setUIKeybindSelectedMouseFunction,
    setKeybindSelectedDPIOption: setUIKeybindSelectedDPIOption,
    setKeybindSelectedMultimediaFunction: setUIKeybindSelectedMultimediaFunction,
    setKeybindSelectedShortcutType: setUIKeybindSelectedShortcutType,
    // setKeybindSelectedShortcutOption:setUIKeybindSelectedShortcutOption,
    setKeybindSelectedShortcutProgramPath: setUIKeybindSelectedShortcutProgramPath,
    setKeybindSelectedShortcutUrl: setUIKeybindSelectedShortcutUrl,
    setKeybindSelectedWindowsOption: setUIKeybindSelectedWindowsOption,
    setKeybindDisabledIsSelected: setUIKeybindDisabledIsSelected,
    setKeybindSoundControlSelection: setUIKeybindSoundControlSelection,
    setKeybindAudioToggleTarget: setUIKeybindAudioToggleTarget,
    setKeybindMacroSelection: setUIKeybindMacroSelection,
    setKeybindingSelectedNode: setUIKeybindingSelectedNode,
    setRotaryEncoderAction: setUIRotaryEncoderAction,
    setvalueCState: setUIvalueCState,
    setvalueCVisualizationEnabled: setUIvalueCVisualizationEnabled,
    setvalueCVisualizationValue
  } = useUIUpdateContext();
  reactExports.useEffect(() => {
    if (state.hasInitializedDevices == true) {
      return;
    }
    setDevicesLoading(true);
    let obj = {
      Type: FuncType.System,
      SN: "",
      Func: FuncName.InitDevice,
      Param: ""
    };
    ProtocolService.RunSetFunction(obj).then((data) => {
      console.log(data);
      if (data.success == false) {
        state.hasInitializedDevices = false;
        throw new Error("Error initializing devices");
      }
    });
    state.hasInitializedDevices = true;
  }, []);
  reactExports.useEffect(() => {
    AppEvent.subscribe(EventTypes.RefreshDevice, onRefreshDevice);
    AppEvent.subscribe(EventTypes.GetBatteryStats, onGetBatteryStats);
    AppEvent.subscribe(EventTypes.valueCVisualizationUpdate, onvalueCVisualizationUpdate);
    AppEvent.subscribe(EventTypes.SwitchUIProfile, onSwitchUIProfile);
    return () => {
      AppEvent.unsubscribe(EventTypes.RefreshDevice, onRefreshDevice);
      AppEvent.unsubscribe(EventTypes.GetBatteryStats, onGetBatteryStats);
      AppEvent.unsubscribe(EventTypes.valueCVisualizationUpdate, onvalueCVisualizationUpdate);
      AppEvent.unsubscribe(EventTypes.SwitchUIProfile, onSwitchUIProfile);
    };
  }, [state]);
  reactExports.useEffect(() => {
    if (location.pathname == "/") {
      setPreviewDevice(void 0);
    }
  }, [location]);
  const onRefreshDevice = reactExports.useCallback(
    (event) => {
      refreshDevices();
    },
    [state.devicesCurrentlyUpdating]
  );
  const onGetBatteryStats = reactExports.useCallback(
    (event) => {
      const data = event.detail;
      if (state.isRefreshingDevices == true || eventStateRef.current.devicesCurrentlyUpdating.length > 0) {
        return;
      }
      const device2 = state.devices.find((x2) => x2.SN == data.SN);
      if (device2) {
        state.previewDevice = eventStateRef.current.previewDevice;
        state.devices = eventStateRef.current.devices;
        if (state.previewDevice?.SN === device2.SN) {
          state.previewDevice.batteryvalue = data.Battery;
          state.previewDevice.batterystatus = data.Charging;
        }
        device2.batteryvalue = data.Battery;
        device2.batterystatus = data.Charging;
        setState({ ...state });
      }
    },
    [state.devicesCurrentlyUpdating]
  );
  const onvalueCVisualizationUpdate = reactExports.useCallback((event) => {
    const data = event.detail;
    if (eventStateRef.current.previewDevice?.SN == data.SN && uiContext.valueCState.isVisualisationEnabled) {
      setvalueCVisualizationValue(data.value);
    }
  }, []);
  const refreshDevices = () => {
    console.log("refresh", eventStateRef.current.devicesCurrentlyUpdating, state.devicesCurrentlyUpdating);
    const devicesCurrentlyUpdating = eventStateRef.current.devicesCurrentlyUpdating;
    if (state.isRefreshingDevices == true || devicesCurrentlyUpdating.length > 0) {
      return;
    }
    state.isRefreshingDevices = true;
    DevicesAdapter.getDevices().then(async (devices) => {
      if (devices == null) {
        console.warn("devices is undefined");
        devices = [];
      }
      state.devices = [...devices];
      state.isRefreshingDevices = false;
      const device2 = devices.find((device22) => device22.SN == state.previewDevice?.SN);
      setPreviewDevice(device2, false);
      setState(state);
      setDevicesLoading(false);
    });
  };
  const onSwitchUIProfile = reactExports.useCallback(
    (event) => {
      const data = event.detail;
      const devicesCurrentlyUpdating = eventStateRef.current.devicesCurrentlyUpdating;
      if (state.isRefreshingDevices == true || devicesCurrentlyUpdating.length > 0) {
        return;
      }
      const device2 = eventStateRef.current.devices.find((x2) => x2.SN == data.SN);
      if (data.Profile != null) {
        if (data.Profile > 0 && !DevicesAdapter.isvalueC(data.SN)) {
          data.Profile -= 1;
        }
        if (device2) {
          state.previewDevice = eventStateRef.current.previewDevice;
          state.devices = eventStateRef.current.devices;
          if (device2.SN == state.previewDevice?.SN) {
            setCurrentProfile(data.Profile, true);
          } else {
            setDeviceProfile(device2, data.Profile);
            setState({ ...state });
          }
        }
      }
      if (data.Layer != null) {
        setCurrentProfileLayer(data.Layer, true, true);
        console.log(`Layer switch event: ${data.Layer}`);
      }
    },
    [state.devicesCurrentlyUpdating]
  );
  const setPreviewDevice = (device2, applyState = true) => {
    setUIKeybindingType(BindingTypes_ButtonPress[0]);
    setUIKeybindSelectedShortcutType(ShortcutTypes[0]);
    setUIKeybindingSelectedNode(null, -1);
    state.previewDevice = device2 ? { ...device2 } : void 0;
    clearUnsavedPreviewDeviceProperties();
    if (state.previewDevice != null) {
      DevicesAdapter.updateImages(state.previewDevice);
      if (state.previewDevice.deviceData != null) {
        const index2 = isNaN(state.previewDevice.deviceData.profileindex) ? parseInt(state.previewDevice.deviceData.profileindex) : state.previewDevice.deviceData.profileindex;
        setCurrentProfile(index2, false);
      }
    }
    if (applyState) {
      setState({ ...state });
    }
    setLightSettingMode("none");
  };
  const savePreviewDevice = async () => {
    const result = await DevicesAdapter.saveDeviceData(
      state.previewDevice,
      Array.from(uiContext.unsavedPropertyNames)
    );
    clearUnsavedPreviewDeviceProperties();
    setIsSaving(true);
    setState({ ...state });
    console.log("Save Device status: ", result);
  };
  const resetPreviewDevice = async () => {
    if (state.previewDevice == null) {
      throw new Error("Current Device is null");
    }
    const profile = DeviceService.getDeviceProfile(state.previewDevice);
    if (DevicesAdapter.isvalueJ(state.previewDevice.SN)) {
      if (profile.lighting != null) {
        profile.lighting.Zone = 0;
      }
      if (profile.lightData != null) {
        profile.lightData = [
          { Effect: 1, Color: [], WiredBrightnessValue: 100, RateValue: 100 },
          { Effect: 1, Color: [], WiredBrightnessValue: 100, RateValue: 100 },
          { Effect: 1, Color: [], WiredBrightnessValue: 100, RateValue: 100 }
        ];
      }
    } else if (state.previewDevice.ModelType == 1) {
      if (profile.lighting != null) {
        if (state.previewDevice.SN == "0x093A0x822A" || //O2W
        state.previewDevice.SN == "0x093A0x821A" || //I2W
        state.previewDevice.SN == "0x093A0x824A" || //D2W
        state.previewDevice.SN == "0x093A0x826A") {
          profile.lighting.RateValue = 50;
          profile.lighting.OpacityValue = 60;
          profile.lighting.SepatateCheckValue = true;
          profile.lighting.Color = [];
          profile.lighting.Effect = 0;
          profile.lighting.WiredBrightnessValue = 100;
          profile.lighting.WirelessBrightnessValue = 5;
        } else if (state.previewDevice.SN == "0x320F0x827A" || //O2 Mini
        state.previewDevice.SN == "0x320F0x825A" || //D2
        state.previewDevice.SN == "0x320F0x823A") {
          profile.lighting.RateValue = 50;
          profile.lighting.OpacityValue = 60;
          profile.lighting.SepatateCheckValue = false;
          profile.lighting.Color = [];
          profile.lighting.Effect = 0;
          profile.lighting.WiredBrightnessValue = 100;
          profile.lighting.WirelessBrightnessValue = 5;
        } else {
          profile.lighting.RateValue = 60;
          profile.lighting.OpacityValue = 60;
          profile.lighting.SepatateCheckValue = false;
          profile.lighting.Color = [];
          profile.lighting.Effect = 0;
          profile.lighting.WiredBrightnessValue = 60;
          profile.lighting.WirelessBrightnessValue = 60;
        }
      }
      if (profile.keybinding != null) {
        for (let i2 = 0; i2 < profile.keybinding.length; i2++) {
          let button = profile.keybinding[i2];
          switch (button.value) {
            case 0:
              button.group = 3;
              button.function = 1;
              button.param = "";
              break;
            case 1:
              button.group = 3;
              button.function = 3;
              button.param = "";
              break;
            case 2:
              button.group = 3;
              button.function = 2;
              button.param = "";
              break;
            case 3:
              button.group = 3;
              button.function = 4;
              button.param = "";
              break;
            case 4:
              button.group = 3;
              button.function = 5;
              button.param = "";
              break;
            case 5:
              if (state.previewDevice.SN == "0x22D40x1503" || state.previewDevice.SN == "0x093A0x821A" || state.previewDevice.SN == "0x320F0x831A") {
                button.group = 4;
                button.function = 1;
                button.param = "";
              } else {
                button.group = 4;
                button.function = 3;
                button.param = "";
              }
              break;
            case 6:
              button.group = 3;
              button.function = 6;
              button.param = "";
              break;
            case 7:
              button.group = 3;
              button.function = 7;
              button.param = "";
              break;
            case 8:
              button.group = 4;
              button.function = 5;
              button.param = 400;
              break;
            case 9:
              button.group = 7;
              button.function = "Home";
              button.param = "";
              break;
            case 10:
              button.group = 4;
              button.function = 2;
              button.param = "";
              break;
          }
        }
        if (profile.keybindingLayerShift != null) {
          for (let j = 0; j < profile.keybindingLayerShift.length; j++) {
            profile.keybindingLayerShift[j].group = 6;
            profile.keybindingLayerShift[j].function = "";
            profile.keybindingLayerShift[j].name = "";
            profile.keybindingLayerShift[j].param = "";
            profile.keybindingLayerShift[j].param2 = "";
          }
        }
      }
      if (profile.performance != null) {
        profile.performance.LodValue = 1;
        if (state.previewDevice.SN == "0x093A0x822A" || state.previewDevice.SN == "0x320F0x823A" || state.previewDevice.SN == "0x320F0x827A" || state.previewDevice.SN == "0x093A0x821A" || state.previewDevice.SN == "0x093A0x824A" || state.previewDevice.SN == "0x320F0x825A" || state.previewDevice.SN == "0x093A0x826A" || state.previewDevice.SN == "0x093A0x831A") {
          profile.performance.DebounceValue = 2;
          profile.performance.MotionSyncFlag = false;
        } else if (DevicesAdapter.isAdvDebounceCapable(state.previewDevice.SN)) {
          profile.performance.DebounceValue = 0;
          profile.performance.MotionSyncFlag = false;
          profile.performance.AdvancedDebounce = new AdvanceDebounceSettings(true);
        } else {
          profile.performance.DebounceValue = 10;
          profile.performance.MotionSyncFlag = true;
        }
        profile.performance.pollingrate = 1e3;
        profile.performance.pollingrateSelect = false;
        profile.performance.DpiStage = [
          {
            value: 400,
            color: "FFFF00"
          },
          {
            value: 800,
            color: "0000FF"
          },
          {
            value: 1600,
            color: "FF0000"
          },
          {
            value: 3200,
            color: "00FF00"
          }
        ];
      }
    } else if (state.previewDevice.ModelType == 2) {
      const profileIndex = state.previewDevice.keyboardData?.profileindex;
      if (profileIndex != null) {
        state.previewDevice.keyboardData.KeyBoardArray[state.previewDevice.keyboardData.profileindex].light_PRESETS_Data = new PresetLightingData();
        profile.light_PRESETS_Data = new PresetLightingData();
        const keyboardProfile = state.previewDevice.keyboardData?.KeyBoardArray == null ? null : state.previewDevice.keyboardData?.KeyBoardArray[profileIndex];
        if (keyboardProfile != null) {
          if (keyboardProfile.valueCData != null) {
            keyboardProfile.valueCData = null;
          }
          const assignedKeys = keyboardProfile.assignedKeyboardKeys[0];
          if (assignedKeys != null) {
            for (let i2 = 0; i2 < assignedKeys.length; i2++) {
              assignedKeys[i2] = new KeyboardKeyAssignmentData();
              if (assignedKeys[i2].valueCKeyData != null) {
                assignedKeys[i2].valueCKeyData = null;
              }
            }
          }
          if (keyboardProfile.light_PERKEY_KeyAssignments && keyboardProfile.light_PERKEY_KeyAssignments.length > 0) {
            const assignedKeyLighting = keyboardProfile.light_PERKEY_KeyAssignments[0];
            if (assignedKeyLighting != null) {
              for (let i2 = 0; i2 < assignedKeyLighting.length; i2++) {
                assignedKeyLighting[i2] = new PerKeyLightingKeyData();
              }
            }
          }
        }
      }
      if (uiContext.valueCState != null) {
        uiContext.valueCState.reset();
      }
    }
    const success = await DevicesAdapter.saveDeviceData(state.previewDevice, ["reset"]);
    console.log("Save Device status: ", success);
    setState({ ...state });
  };
  const setCurrentProfile = (profileIndex, applyState = true) => {
    if (state.previewDevice == null) {
      throw new Error("Current Device is null");
    }
    setDeviceProfile(state.previewDevice, profileIndex);
    updateDevicesReference();
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const setDeviceProfile = (device2, profileIndex) => {
    if (!device2)
      throw new Error("Device is null");
    DeviceService.getDeviceProfile(device2);
    if (device2.ModelType == 1) {
      if (device2.deviceData == null) {
        throw new Error("Current Device's device data is null");
      }
      if (device2.deviceData.profileindex != profileIndex) {
        const success = DevicesAdapter.setDeviceProfile(device2.SN, device2.ModelType, profileIndex);
        console.log("Set Device Profile status: ", success);
        device2.deviceData.profileindex = profileIndex;
      }
    } else if (device2.ModelType == 2) {
      if (device2.keyboardData == null) {
        throw new Error("Current Device is a keyboard ModelType but has no keyboardData.");
      }
      if (device2.keyboardData.profileindex != profileIndex) {
        const layerIndexes = device2.keyboardData.profileLayerIndex;
        if (layerIndexes == null) {
          throw new Error("Current Device's layer indexes are null.");
        }
        const layerIndex = layerIndexes[device2.keyboardData.profileindex];
        if (!DevicesAdapter.isvalueC(device2.SN)) {
          setDeviceProfileLayer(device2, layerIndex, false);
          const success = DevicesAdapter.setDeviceProfile(device2.SN, device2.ModelType, profileIndex);
          console.log("Set Device Profile status: ", success);
          device2.keyboardData.profileindex = profileIndex;
        } else {
          setDeviceProfileLayer(device2, layerIndex, true);
          device2.keyboardData.profileindex = profileIndex;
        }
      }
    }
  };
  const setCurrentProfileLayer = async (layerIndex, applyState = true, applyToDevice = true) => {
    if (state.previewDevice == null) {
      throw new Error("Current Device is null");
    }
    setDeviceProfileLayer(state.previewDevice, layerIndex, applyToDevice);
    updateDevicesReference();
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const setDeviceProfileLayer = (device2, layerIndex, applyToDevice) => {
    if (device2.keyboardData == null) {
      console.error(
        `Trying to setDeviceProfileLayer for a device ${device2.SN} while device.keyboardData is ${device2.keyboardData} `
      );
      return false;
    }
    if (device2.keyboardData.profileLayerIndex == null) {
      console.error(
        `Trying to setDeviceProfileLayer for a device ${device2.SN} while device.keyboardData.profileLayerIndex is ${device2.keyboardData.profileLayerIndex} `
      );
      return false;
    }
    device2.keyboardData.profileLayerIndex[device2.keyboardData.profileindex] = layerIndex;
    if (applyToDevice) {
      const success = DevicesAdapter.setDeviceLegacyLayer(device2);
      console.log("Set Device Legacy Layer status: ", success);
    }
    return true;
  };
  const updateDevicesReference = () => {
    if (state.previewDevice == null) {
      throw new Error("Current Device is null");
    }
    for (let i2 = 0; i2 < state.devices.length; i2++) {
      if (state.devices[i2].SN == state.previewDevice.SN) {
        state.devices[i2] = structuredClone(state.previewDevice);
      }
    }
  };
  const setRgbOffAfterInactivity = (value2, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.lighting == null) {
      throw new Error("Current Profile lighting is null");
    }
    setPreviewDevicePropertiesAsUnsaved("rgb-off-after-inactivity");
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const setRgbOffAfterInactivityTime = (value2, applyState = true) => {
    if (isNaN(value2)) {
      throw new Error("Value is not a number");
    }
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.lighting == null) {
      throw new Error("Current Profile lighting is null");
    }
    setPreviewDevicePropertiesAsUnsaved("rgb-off-after-inactivity");
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const setLightingEffect = (effectValue, applyState = true) => {
    if (isNaN(effectValue)) {
      throw new Error("Effect value is not a number");
    }
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.lighting == null) {
      throw new Error("Current Profile lighting is null");
    }
    console.log("set light effect: ", effectValue, applyState, profile.lighting.Effect);
    profile.lighting.Effect = effectValue;
    if (effectValue == 0 || effectValue == 1) {
      const colors = RGBGradients_Default[0].data.stops.map((color2) => {
        const value2 = RGBAColor.fromHex(color2.hex);
        return { R: value2.r, G: value2.g, B: value2.b, flag: true };
      });
      setMouseLightingColor(colors, false);
    } else if (effectValue == 2) {
      const colors = [
        { R: 255, G: 246, B: 10, flag: true },
        { R: 10, G: 255, B: 125, flag: true },
        { R: 255, G: 96, B: 10, flag: true },
        { R: 10, G: 255, B: 229, flag: true },
        { R: 255, G: 10, B: 212, flag: true },
        { R: 255, G: 0, B: 0, flag: true }
      ];
      setMouseLightingColor(colors, false);
    } else if (effectValue == 3 || effectValue == 4) {
      const colors = [{ R: 255, G: 0, B: 0, flag: true }];
      setMouseLightingColor(colors, false);
    } else if (effectValue == 5) {
      const colors = [
        {
          R: 255,
          G: 246,
          B: 10,
          flag: true
        },
        { R: 10, G: 255, B: 125, flag: true },
        { R: 255, G: 96, B: 10, flag: true },
        {
          R: 10,
          G: 255,
          B: 229,
          flag: true
        },
        { R: 255, G: 10, B: 212, flag: true },
        { R: 255, G: 0, B: 0, flag: true }
      ];
      setMouseLightingColor(colors, false);
    } else if (effectValue == 6) {
      const colors = [
        { R: 255, G: 0, B: 0, flag: true },
        { R: 255, G: 255, B: 0, flag: true }
      ];
      setMouseLightingColor(colors, false);
    } else if (effectValue == 7) {
      const colors = [
        {
          R: 255,
          G: 246,
          B: 10,
          flag: true
        },
        { R: 10, G: 255, B: 125, flag: true },
        { R: 255, G: 96, B: 10, flag: true },
        {
          R: 10,
          G: 255,
          B: 229,
          flag: true
        },
        { R: 255, G: 10, B: 212, flag: true },
        { R: 0, G: 0, B: 0, flag: true },
        {
          R: 255,
          G: 0,
          B: 0,
          flag: true
        }
      ];
      setMouseLightingColor(colors, false);
    } else if (effectValue == 8) {
      setMouseLightingColor([], false);
    }
    setPreviewDevicePropertiesAsUnsaved("lighting-effect");
    if (applyState == true) {
      setState({ ...state });
    }
    const effectOption = state.previewDevice?.lightingEffects.find((item) => item.value == effectValue);
    if (effectOption != null) {
      setLightingPresetSelection(effectOption);
    }
  };
  const setSeparateWiredWirelessBrightness = (isSeparate, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.lighting == null) {
      throw new Error("Current Profile lighting is null");
    }
    profile.lighting.SepatateCheckValue = isSeparate;
    setPreviewDevicePropertiesAsUnsaved("separate-wired-wireless-brightness");
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const setWiredBrightness = (value2, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.lighting == null) {
      throw new Error("Current Profile lighting is null");
    }
    profile.lighting.WiredBrightnessValue = value2;
    setPreviewDevicePropertiesAsUnsaved("wired-brightness");
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const setWirelessBrightness = (value2, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.lighting == null) {
      throw new Error("Current Profile lighting is null");
    }
    profile.lighting.WirelessBrightnessValue = value2;
    setPreviewDevicePropertiesAsUnsaved("wireless-brightness");
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const setRate = (value2, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.lighting == null) {
      throw new Error("Current Profile lighting is null");
    }
    profile.lighting.RateValue = value2;
    setPreviewDevicePropertiesAsUnsaved("lighting-rate");
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const setMouseLightingColor = (colors, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.lighting == null) {
      throw new Error("Current Profile lighting is null");
    }
    profile.lighting.Color = [...colors];
    if (profile.templighting != null && profile.templighting[profile.lighting.Effect] != null) {
      profile.templighting[profile.lighting.Effect].Color = [...colors];
    }
    setPreviewDevicePropertiesAsUnsaved("mouse-lighting-color");
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const setKeyboardPresetLightingColorStyle = (mode, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.light_PRESETS_Data == null) {
      throw new Error("Current Profile lighting is null");
    }
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const setKeyboardPresetLightingColor = (colors, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.light_PRESETS_Data == null) {
      throw new Error("Current Profile lighting is null");
    }
    console.log(colors);
    profile.light_PRESETS_Data.colors = [...colors];
    if (colors.length > 0) {
      profile.light_PRESETS_Data.colorPickerValue = RGBAColor.fromHex(colors[0]).toArray_rgba();
    }
    setPreviewDevicePropertiesAsUnsaved("keyboard-lighting-color");
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const setKeyboardPresetLightingEffect = (index2, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.light_PRESETS_Data == null) {
      throw new Error("Current Profile Lighting Presets data is null");
    }
    profile.light_PRESETS_Data.value = index2;
    const effect = LightingEffects_Keyboard.find((x2) => x2.value == index2);
    if (effect) {
      profile.light_PRESETS_Data.translate = effect.translationKey;
    }
    setPreviewDevicePropertiesAsUnsaved("keyboard-preset-effect");
    if (profile.light_PRESETS_Data.value == 0 || profile.light_PRESETS_Data.value == 5 || profile.light_PRESETS_Data.value == 16 || profile.light_PRESETS_Data.value == 17) {
      setKeyboardPresetLightingColor(
        ["#ff0000", "#ffa500", "#ffff00", "#00ff00", "#007fff", "#0000ff", "#8b00ff"],
        false
      );
      state.presetEffectHasFixedColors = true;
    } else {
      const selectedColor = profile.light_PRESETS_Data.colors[uiContext.selectedColorIndex];
      setKeyboardPresetLightingColor([selectedColor], false);
      state.presetEffectHasFixedColors = false;
      setSelectedColorIndex(0);
    }
    if (applyState == true) {
      setState({ ...state });
    }
    state.previewDevice?.lightingEffects[index2];
  };
  const setPresetLightingSpeed = (value2, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.light_PRESETS_Data == null) {
      throw new Error("Current Profile Lighting Presets data is null");
    }
    profile.light_PRESETS_Data.speed = value2;
    setPreviewDevicePropertiesAsUnsaved("keyboard-preset-speed");
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const setPresetLightingWiredBrightness = (value2, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.light_PRESETS_Data == null) {
      throw new Error("Current Profile Lighting Presets data is null");
    }
    profile.light_PRESETS_Data.brightness = value2;
    setPreviewDevicePropertiesAsUnsaved("keyboard-preset-brightness");
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const setPresetLightingWirelessBrightness = (value2, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.light_PRESETS_Data == null) {
      throw new Error("Current Profile Lighting Presets data is null");
    }
    profile.light_PRESETS_Data.wirelessBrightness = value2;
    setPreviewDevicePropertiesAsUnsaved("keyboard-preset-brightness");
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const setPresetSeparateWiredWirelessBrightness = (isSeparate, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.light_PRESETS_Data == null) {
      throw new Error("Current Profile Lighting Per Key data is null");
    }
    profile.light_PRESETS_Data.separateBrightness = isSeparate;
    setPreviewDevicePropertiesAsUnsaved("separate-wired-wireless-brightness");
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const setSelectedPerKeyLayout = (index2, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.light_PERKEY_Data == null) {
      throw new Error("Current Profile Lighting Per Key data is null");
    }
    profile.light_PERKEY_Data.value = index2;
    setPreviewDevicePropertiesAsUnsaved("keyboard-perkey-layout");
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const addQuickKeysToPerKeyLayoutSelection = (quickKeyId, applyState = true) => {
    if (state.previewDevice == null) {
      throw new Error("Current Device is null");
    }
  };
  const addToPerKeyLayoutSelection = (keyIndexes, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.light_PERKEY_Data == null) {
      throw new Error("Current Profile Lighting Per Key data is null");
    }
    for (let i2 = 0; i2 < keyIndexes.length; i2++) {
      const keyIndex = keyIndexes[i2];
      if (profile.light_PERKEY_KeyAssignments[0][keyIndex] == null) {
        throw new Error(`Layout key data is null at index ${keyIndex}`);
      }
      profile.light_PERKEY_KeyAssignments[0][keyIndex].color = uiContext.colorPickerValue_PerKeyLighting.toArray_rgba();
      profile.light_PERKEY_KeyAssignments[0][keyIndex].colorEnabled = true;
      setPreviewDevicePropertiesAsUnsaved("keyboard-perkey-layout");
    }
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const removeFromPerKeyLayoutSelection = (keyIndexes, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.light_PERKEY_Data == null) {
      throw new Error("Current Profile Lighting Per Key data is null");
    }
    for (let i2 = 0; i2 < keyIndexes.length; i2++) {
      const keyIndex = keyIndexes[i2];
      console.log(keyIndex, profile.light_PERKEY_KeyAssignments[0][keyIndex]);
      if (profile.light_PERKEY_KeyAssignments[0][keyIndex] == null) {
        throw new Error(`Layout key data is null at index ${keyIndex}`);
      }
      profile.light_PERKEY_KeyAssignments[0][keyIndex].color = [0, 0, 0, 0];
      profile.light_PERKEY_KeyAssignments[0][keyIndex].colorEnabled = false;
      setPreviewDevicePropertiesAsUnsaved("keyboard-perkey-layout");
    }
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const setSelectedPresetGradient = (value2, applyState = true) => {
    if (state.previewDevice == null) {
      throw new Error("Current Device is null");
    }
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    const stops = value2.data?.stops;
    if (stops == null) {
      throw new Error("Invalid Gradient Option");
    }
    if (state.previewDevice.ModelType == 1) {
      if (profile.lighting == null) {
        throw new Error("Current Profile lighting is null");
      }
      const colors = [];
      for (let i2 = 0; i2 < stops.length; i2++) {
        const color2 = RGBAColor.fromHex(stops[i2].hex);
        const colorData = new DeviceRecordColorData(color2.r, color2.g, color2.b, false);
        colors.push(colorData);
      }
      profile.lighting.Color = [...colors];
      setPreviewDevicePropertiesAsUnsaved("mouse-lighting-color");
    } else if (state.previewDevice.ModelType == 2) {
      if (profile.light_PRESETS_Data == null) {
        throw new Error("Current Profile lighting is null");
      }
      profile.light_PRESETS_Data.colors = [...stops];
      setPreviewDevicePropertiesAsUnsaved("keyboard-lighting-color");
    }
    if (applyState == true) {
      setState({ ...state });
    }
    setLightingPresetGradient(value2);
  };
  const setvalueJZoneSelected = (zone, applyState = true) => {
    if (isNaN(zone)) {
      throw new Error("Zone value is not a number");
    }
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.lighting == null) {
      throw new Error("Current Profile lighting is null");
    }
    profile.lighting.Zone = zone;
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const setvalueJLightingEffect = (effectValue, applyState = true) => {
    if (isNaN(effectValue)) {
      throw new Error("Effect value is not a number");
    }
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.lighting == null) {
      throw new Error("Current Profile lighting is null");
    }
    if (isNaN(profile.lighting.Zone)) {
      profile.lighting.Zone = 0;
    }
    profile.lightData[profile.lighting.Zone].Effect = effectValue;
    setPreviewDevicePropertiesAsUnsaved("lighting-effect");
    if (applyState == true) {
      setState({ ...state });
    }
    const effectOption = state.previewDevice?.lightingEffects.find((item) => item.value == effectValue);
    if (effectOption != null) {
      setLightingPresetSelection(effectOption);
    }
  };
  const setvalueJRate = (val) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.lighting == null) {
      throw new Error("Current Profile lighting is null");
    }
    if (isNaN(profile.lighting.Zone)) {
      profile.lighting.Zone = 0;
    }
    if (profile.lightData == null) {
      throw new Error("Current Profile lightData is null");
    }
    profile.lightData[profile.lighting.Zone].RateValue = val;
    setPreviewDevicePropertiesAsUnsaved("lighting-rate");
    setState({ ...state });
  };
  const setvalueJWiredBrightness = (val) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.lighting == null) {
      throw new Error("Current Profile lighting is null");
    }
    if (isNaN(profile.lighting.Zone)) {
      profile.lighting.Zone = 0;
    }
    if (profile.lightData == null) {
      throw new Error("Current Profile lightData is null");
    }
    profile.lightData[profile.lighting.Zone].WiredBrightnessValue = val;
    setPreviewDevicePropertiesAsUnsaved("wired-brightness");
    setState({ ...state });
  };
  const setvalueJLightingColor = (color2, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.lighting == null) {
      throw new Error("Current Profile lighting is null");
    }
    if (isNaN(profile.lighting.Zone)) {
      profile.lighting.Zone = 0;
    }
    if (profile.lightData == null) {
      throw new Error("Current Profile lightData is null");
    }
    if (Array.isArray(color2)) {
      var arrColors = [];
      for (var i2 = 0; i2 < color2.length; i2++) {
        let colorValue = color2[i2].startsWith("#") ? color2[i2].substring(1) : color2;
        var result = hexToRgbOrNull(colorValue);
        if (result && result.color.R != void 0) {
          arrColors.push(new DeviceRecordColorData(result.color.R, result.color.G, result.color.B, false));
        }
        profile.lightData[profile.lighting.Zone].Color = arrColors;
      }
    } else {
      let colorValue = color2.startsWith("#") ? color2.substring(1) : color2;
      var result = hexToRgbOrNull(colorValue);
      if (result && result.color.R != void 0) {
        profile.lightData[profile.lighting.Zone].Color = [
          new DeviceRecordColorData(result.color.R, result.color.G, result.color.B, false)
        ];
      }
    }
    setPreviewDevicePropertiesAsUnsaved("mouse-lighting-color");
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const saveDeviceRgbOffAfterInactivity = (device2, value2, applyState = true) => {
    const profile = DeviceService.getDeviceProfile(device2);
    if (profile?.lighting == null) {
      throw new Error("Device Profile lighting is null");
    }
  };
  const saveDeviceRgbOffAfterInactivityTime = (device2, value2, applyState = true) => {
    if (isNaN(value2)) {
      throw new Error("Value is not a number");
    }
    const profile = DeviceService.getDeviceProfile(device2);
    if (profile?.lighting == null) {
      throw new Error("Device Profile lighting is null");
    }
  };
  const setPollingRate = (value2, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.performance == null) {
      if (state.previewDevice.ModelType == 2) {
        profile.pollingrate = value2;
      } else {
        throw new Error("Current Profile performance is null");
      }
    } else {
      if (DevicesAdapter.isAdvDebounceCapable(state.previewDevice?.SN)) {
        if (profile.performance.pollingratearray != void 0) {
          profile.performance.pollingratearray[0] = value2;
        } else {
          profile.performance.pollingratearray = [value2, 1e3];
        }
      } else {
        profile.performance.pollingrate = value2;
      }
    }
    setPreviewDevicePropertiesAsUnsaved("polling-rate");
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const setWirelessPollingRate = (value2, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.performance == null) {
      if (state.previewDevice.ModelType == 2) {
        profile.pollingrate = value2;
      } else {
        throw new Error("Current Profile performance is null");
      }
    } else {
      if (DevicesAdapter.isAdvDebounceCapable(state.previewDevice?.SN)) {
        if (profile.performance.pollingratearray != void 0) {
          profile.performance.pollingratearray[1] = value2;
        } else {
          profile.performance.pollingratearray = [1e3, value2];
        }
      } else {
        profile.performance.pollingrate = value2;
      }
    }
    setPreviewDevicePropertiesAsUnsaved("polling-rate");
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const setAdvDebounceActive = (value2, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.performance == null) {
      throw new Error("Current Profile performance is null");
    }
    if (profile.performance.AdvancedDebounce == null) {
      profile.performance.AdvancedDebounce = new AdvanceDebounceSettings();
    }
    profile.performance.AdvancedDebounce.AdvancedSwitch = value2;
    setPreviewDevicePropertiesAsUnsaved("adv-debounce");
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const setAfterPressTime = (value2, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.performance == null) {
      throw new Error("Current Profile performance is null");
    }
    if (profile.performance.AdvancedDebounce == null) {
      profile.performance.AdvancedDebounce = new AdvanceDebounceSettings();
    }
    profile.performance.AdvancedDebounce.AfterPressValue = value2;
    setPreviewDevicePropertiesAsUnsaved("after-press-time");
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const setBeforePressTime = (value2, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.performance == null) {
      throw new Error("Current Profile performance is null");
    }
    if (profile.performance.AdvancedDebounce == null) {
      profile.performance.AdvancedDebounce = new AdvanceDebounceSettings();
    }
    profile.performance.AdvancedDebounce.BeforePressValue = value2;
    setPreviewDevicePropertiesAsUnsaved("before-press-time");
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const setAfterReleaseTime = (value2, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.performance == null) {
      throw new Error("Current Profile performance is null");
    }
    if (profile.performance.AdvancedDebounce == null) {
      profile.performance.AdvancedDebounce = new AdvanceDebounceSettings();
    }
    profile.performance.AdvancedDebounce.AfterReleaseValue = value2;
    setPreviewDevicePropertiesAsUnsaved("after-release-time");
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const setBeforeReleaseTime = (value2, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.performance == null) {
      throw new Error("Current Profile performance is null");
    }
    if (profile.performance.AdvancedDebounce == null) {
      profile.performance.AdvancedDebounce = new AdvanceDebounceSettings();
    }
    profile.performance.AdvancedDebounce.BeforeReleaseValue = value2;
    setPreviewDevicePropertiesAsUnsaved("before-release-time");
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const setLiftOffPressTime = (value2, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.performance == null) {
      throw new Error("Current Profile performance is null");
    }
    if (profile.performance.AdvancedDebounce == null) {
      profile.performance.AdvancedDebounce = new AdvanceDebounceSettings();
    }
    profile.performance.AdvancedDebounce.LiftOffPressValue = value2;
    setPreviewDevicePropertiesAsUnsaved("lift-off-press-time");
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const setSeparatePollingActive = (value2, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.performance == null) {
      throw new Error("Current Profile performance is null");
    } else {
      profile.performance.pollingrateSelect = value2;
    }
    setPreviewDevicePropertiesAsUnsaved("separate-polling-rate");
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const setLiftOffDistance = (value2, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.performance == null) {
      throw new Error("Current Profile performance is null");
    }
    profile.performance.LodValue = value2;
    setPreviewDevicePropertiesAsUnsaved("lift-off-distance");
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const setDebounceTime = (value2, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.performance == null) {
      throw new Error("Current Profile performance is null");
    }
    profile.performance.DebounceValue = value2;
    setPreviewDevicePropertiesAsUnsaved("debounce-time");
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const setIsMotionSyncActive = (value2, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.performance == null) {
      throw new Error("Current Profile performance is null");
    }
    if (profile.performance.MotionSyncFlag == null) {
      throw new Error("Current Device does not support Motion Sync");
    }
    profile.performance.MotionSyncFlag = value2;
    setPreviewDevicePropertiesAsUnsaved("motion-sync");
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const setInputLatency = (value2, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.inputLatency == null) {
      throw new Error("Current Device does not support Input Latency");
    }
    profile.inputLatency = value2;
    setPreviewDevicePropertiesAsUnsaved("input-latency");
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const setRotarySensitivity = (value2, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.sensitivity == null) {
      throw new Error("Current Device does not support Rotary Sensitivity");
    }
    profile.sensitivity = value2;
    setPreviewDevicePropertiesAsUnsaved("rotary-sensitivity");
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const setStandbyType = (index2, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.standbyvalue == null) {
      throw new Error("Current Device does not support Standby type");
    }
    StandbyTypes[index2];
    setPreviewDevicePropertiesAsUnsaved("standby-type");
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const setStandbyValue = (value2, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.standbyvalue == null) {
      throw new Error("Current Device does not support Standby value");
    }
    profile.standbyvalue = value2;
    setPreviewDevicePropertiesAsUnsaved("standby-value");
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const addDPIStage = (stage, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.performance == null) {
      throw new Error("Current Profile performance data is null");
    }
    profile.performance.DpiStage.push(stage);
    profile.performance.DpiStage = structuredClone(profile.performance.DpiStage);
    setPreviewDevicePropertiesAsUnsaved("dpi-stages");
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const removeDPIStage = (index2, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.performance == null) {
      throw new Error("Current Profile performance data is null");
    }
    profile.performance.DpiStage.splice(index2, 1);
    if (index2 < profile.performance.dpiSelectIndex) {
      profile.performance.dpiSelectIndex = profile.performance.dpiSelectIndex - 1;
    }
    if (profile.performance.dpiSelectIndex < 0 || profile.performance.dpiSelectIndex >= profile.performance.DpiStage.length) {
      profile.performance.dpiSelectIndex = 0;
    }
    profile.performance.DpiStage = structuredClone(profile.performance.DpiStage);
    setPreviewDevicePropertiesAsUnsaved("dpi-stages");
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const setDefaultDPIStage = (index2, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.performance == null) {
      throw new Error("Current Profile performance data is null");
    }
    profile.performance.dpiSelectIndex = index2;
    setPreviewDevicePropertiesAsUnsaved("dpi-default-stage");
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const setKeybindingLayer = (option, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.keybinding == null) {
      throw new Error("Current Profile keybinding data is null");
    }
    if (applyState == true) {
      setState({ ...state });
    }
    setUIKeybindingLayer(option);
  };
  const getSelectedKeyAssignment = () => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.assignedKeyboardKeys == null) {
      throw new Error("Current Profile keybinding keys data is null");
    }
    if (profile.fnModeindex == null) {
      throw new Error("Current Profile keybinding keys index is null");
    }
    if (uiContext.keybindSelectedNode == null) {
      throw new Error("Current selected key is null");
    }
    const currentKeyArray = profile.assignedKeyboardKeys[profile.fnModeindex];
    const selectionCodeValue = KeyMapping.find(
      (item) => item.code == uiContext.keybindSelectedNode.translationKey
    );
    if (selectionCodeValue == null) {
      console.error("Could not find selectd key in keymap");
      return;
    }
    const selectionComparisonValue = selectionCodeValue.value;
    const selectedKey = currentKeyArray.find((item) => {
      if (selectionComparisonValue == "Volume") {
        return item.defaultValue == "ScrollWheel";
      }
      return item.defaultValue == selectionComparisonValue;
    });
    return selectedKey;
  };
  const setKeybindingType = (option, applyState = true) => {
    if (state.previewDevice == null) {
      throw new Error("Current Device is null");
    }
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (state.previewDevice.ModelType == 1) {
      if (profile.keybinding == null) {
        throw new Error("Current Profile keybinding data is null");
      }
      const keybindData = profile.keybinding[uiContext.keybindSelectedNodeIndex];
      if (keybindData == null) {
        throw new Error(
          `Unknown keybinding target for selected node index "${uiContext.keybindSelectedNodeIndex}"`
        );
      }
      keybindData.group = option.value;
    } else if (state.previewDevice.ModelType == 2) {
      if (uiContext.keybindSelectedBindingType == null) {
        throw new Error("Current Profile keybinding type is null");
      }
      const selectedKey = getSelectedKeyAssignment();
      if (selectedKey == null) {
        throw new Error("Current keybinding selection key is null");
      }
      selectedKey.recordBindCodeType = option.data.bindingCode;
      selectedKey.recordBindCodeName = option.translationKey;
    }
    if (applyState == true) {
      setState({ ...state });
    }
    console.log("keybinding type");
    setUIKeybindingType(option);
  };
  const setKeybindingKeyCode = (value2, applyState = true) => {
    if (state.previewDevice == null) {
      throw new Error("Current Device is null");
    }
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (state.previewDevice.ModelType == 1) {
      if (profile.keybinding == null) {
        throw new Error("Current Profile keybinding data is null");
      }
      const keybindData = profile.keybinding[uiContext.keybindSelectedNodeIndex];
      if (keybindData == null) {
        throw new Error(
          `Unknown keybinding target for selected node index "${uiContext.keybindSelectedNodeIndex}"`
        );
      }
      keybindData.function = value2;
    } else if (state.previewDevice.ModelType == 2) {
      if (uiContext.keybindSelectedBindingType == null) {
        throw new Error("Current Profile keybinding type is null");
      }
      let assignmentCodeValue = EventKey_BindingCodeMap.find((item) => item.eventKeyCode == value2) ?? {
        bindCodeName: value2
      };
      const selectedKey = getSelectedKeyAssignment();
      if (selectedKey == null) {
        throw new Error("Current keybinding selection key is null");
      }
      selectedKey.recordBindCodeType = uiContext.keybindSelectedBindingType.data.bindingCode;
      selectedKey.recordBindCodeName = assignmentCodeValue.bindCodeName;
    }
    setPreviewDevicePropertiesAsUnsaved("keybind-single-key");
    if (applyState == true) {
      setState({ ...state });
    }
    setUIKeybindingKeyCode(value2);
  };
  const setKeybindingKeyModifier = (option, applyState = true) => {
    if (state.previewDevice == null) {
      throw new Error("Current Device is null");
    }
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (state.previewDevice.ModelType == 1) {
      if (profile.keybinding == null) {
        throw new Error("Current Profile keybinding data is null");
      }
      const keybindData = profile.keybinding[uiContext.keybindSelectedNodeIndex];
      if (keybindData == null) {
        throw new Error(
          `Unknown keybinding target for selected node index "${uiContext.keybindSelectedNodeIndex}"`
        );
      }
      keybindData.param = uiContext.keybindSelectedKeyModifier == ModifierKeys[0].value ? "" : [
        option.value == ModifierKeys[1].value,
        option.value == ModifierKeys[2].value,
        option.value == ModifierKeys[3].value,
        option.value == ModifierKeys[4].value
      ];
    } else if (state.previewDevice.ModelType == 2) {
      if (uiContext.keybindSelectedBindingType == null) {
        throw new Error("Current Profile keybinding type is null");
      }
      const selectedKey = getSelectedKeyAssignment();
      if (selectedKey == null) {
        throw new Error("Current keybinding selection key is null");
      }
      selectedKey.Shift = false;
      selectedKey.Ctrl = false;
      selectedKey.Alt = false;
      selectedKey.Windows = false;
      selectedKey.Shift = option.value == ModifierKeys[1].value;
      selectedKey.Ctrl = option.value == ModifierKeys[2].value;
      selectedKey.Alt = option.value == ModifierKeys[3].value;
      selectedKey.Windows = option.value == ModifierKeys[4].value;
      selectedKey.combinationkeyEnable = selectedKey.Shift == true || selectedKey.Ctrl == true || selectedKey.Alt == true || selectedKey.Windows == true;
    }
    if (applyState == true) {
      setState({ ...state });
    }
    setPreviewDevicePropertiesAsUnsaved("keybind-single-key-modifier");
    setUIKeybindingKeyModifier(option);
  };
  const setKeybindingKeyboardFunction = (option, applyState = true) => {
    if (state.previewDevice == null) {
      throw new Error("Current Device is null");
    }
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (state.previewDevice.ModelType == 1) {
      if (profile.keybinding == null) {
        throw new Error("Current Profile keybinding data is null");
      }
      const keybindData = profile.keybinding[uiContext.keybindSelectedNodeIndex];
      if (keybindData == null) {
        throw new Error(
          `Unknown keybinding target for selected node index "${uiContext.keybindSelectedNodeIndex}"`
        );
      }
      keybindData.function = option.value;
    } else if (state.previewDevice.ModelType == 2) {
      if (uiContext.keybindSelectedBindingType == null) {
        throw new Error("Current Profile keybinding type is null");
      }
      const selectedKey = getSelectedKeyAssignment();
      if (selectedKey == null) {
        throw new Error("Current keybinding selection key is null");
      }
      selectedKey.recordBindCodeType = uiContext.keybindSelectedBindingType.data.bindingCode;
      selectedKey.recordBindCodeName = option.data.bindingValue;
    }
    if (applyState == true) {
      setState({ ...state });
    }
    setPreviewDevicePropertiesAsUnsaved("keybind-keyboard-function");
    setUIKeybindingKeyboardFunction(option);
  };
  const setKeybindSelectedMouseFunction = (option, applyState = true) => {
    if (state.previewDevice == null) {
      throw new Error("Current Device is null");
    }
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (state.previewDevice.ModelType == 1) {
      if (profile.keybinding == null) {
        throw new Error("Current Profile keybinding data is null");
      }
      const keybindData = profile.keybinding[uiContext.keybindSelectedNodeIndex];
      if (keybindData == null) {
        throw new Error(
          `Unknown keybinding target for selected node index "${uiContext.keybindSelectedNodeIndex}"`
        );
      }
      keybindData.function = option.value;
    } else if (state.previewDevice.ModelType == 2) {
      if (uiContext.keybindSelectedBindingType == null) {
        throw new Error("Current Profile keybinding type is null");
      }
      const selectedKey = getSelectedKeyAssignment();
      if (selectedKey == null) {
        throw new Error("Current keybinding selection key is null");
      }
      selectedKey.recordBindCodeType = uiContext.keybindSelectedBindingType.data.bindingCode;
      selectedKey.recordBindCodeName = option.data.bindingValue;
    }
    if (applyState == true) {
      setState({ ...state });
    }
    setPreviewDevicePropertiesAsUnsaved("keybind-mouse-function");
    setUIKeybindSelectedMouseFunction(option);
  };
  const setKeybindSelectedDPIOption = (option, applyState = true) => {
    if (state.previewDevice == null) {
      throw new Error("Current Device is null");
    }
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (state.previewDevice.ModelType == 1) {
      if (profile.keybinding == null) {
        throw new Error("Current Profile keybinding data is null");
      }
      const keybindData = profile.keybinding[uiContext.keybindSelectedNodeIndex];
      if (keybindData == null) {
        throw new Error(
          `Unknown keybinding target for selected node index "${uiContext.keybindSelectedNodeIndex}"`
        );
      }
      keybindData.function = option.value;
    } else if (state.previewDevice.ModelType == 2) {
      console.error("Attempting to set DPI option on Keyboard device.");
    }
    if (applyState == true) {
      setState({ ...state });
    }
    setPreviewDevicePropertiesAsUnsaved("keybind-dpi-function");
    setUIKeybindSelectedDPIOption(option);
  };
  const setKeybindSelectedMultimediaFunction = (option, applyState = true) => {
    if (state.previewDevice == null) {
      throw new Error("Current Device is null");
    }
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (state.previewDevice.ModelType == 1) {
      if (profile.keybinding == null) {
        throw new Error("Current Profile keybinding data is null");
      }
      const keybindData = profile.keybinding[uiContext.keybindSelectedNodeIndex];
      if (keybindData == null) {
        throw new Error(
          `Unknown keybinding target for selected node index "${uiContext.keybindSelectedNodeIndex}"`
        );
      }
      keybindData.function = option.value;
    } else if (state.previewDevice.ModelType == 2) {
      if (uiContext.keybindSelectedBindingType == null) {
        throw new Error("Current Profile keybinding type is null");
      }
      const selectedKey = getSelectedKeyAssignment();
      if (selectedKey == null) {
        throw new Error("Current keybinding selection key is null");
      }
      selectedKey.recordBindCodeType = uiContext.keybindSelectedBindingType.data.bindingCode;
      selectedKey.recordBindCodeName = option.data.bindingValue;
    }
    if (applyState == true) {
      setState({ ...state });
    }
    setPreviewDevicePropertiesAsUnsaved("keybind-multimedia-function");
    setUIKeybindSelectedMultimediaFunction(option);
  };
  const setKeybindSelectedShortcutType = (option, applyState = true) => {
    if (state.previewDevice == null) {
      throw new Error("Current Device is null");
    }
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (state.previewDevice.ModelType == 1) {
      if (profile.keybinding == null) {
        throw new Error("Current Profile keybinding data is null");
      }
      const keybindData = profile.keybinding[uiContext.keybindSelectedNodeIndex];
      if (keybindData == null) {
        throw new Error(
          `Unknown keybinding target for selected node index "${uiContext.keybindSelectedNodeIndex}"`
        );
      }
      keybindData.function = option.value;
      keybindData.param = keybindData.function == 1 ? uiContext.keybindSelectedShortcutProgramPath ?? "" : keybindData.function == 2 ? uiContext.keybindSelectedShortcutUrl ?? "" : keybindData.function == 3 ? uiContext.keybindSelectedShortcutWindowsOption?.value ?? "" : "";
    } else if (state.previewDevice.ModelType == 2) {
      if (uiContext.keybindSelectedBindingType == null) {
        throw new Error("Current Profile keybinding type is null");
      }
      const selectedKey = getSelectedKeyAssignment();
      if (selectedKey == null) {
        throw new Error("Current keybinding selection key is null");
      }
      selectedKey.recordBindCodeType = option.data.bindingValue;
      selectedKey.recordBindCodeName = option.data.bindingValue;
      if (option.value == 1) {
        selectedKey.ApplicationPath = "";
      } else if (option.value == 2) {
        selectedKey.WebsitePath = "";
      } else if (option.value == 3) {
        selectedKey.shortcutsWindowsEnable = true;
      }
    }
    if (applyState == true) {
      setState({ ...state });
    }
    setPreviewDevicePropertiesAsUnsaved("keybind-shortcut-type");
    setUIKeybindSelectedShortcutType(option);
  };
  const setKeybindSelectedShortcutProgramPath = (value2, applyState = true) => {
    if (state.previewDevice == null) {
      throw new Error("Current Device is null");
    }
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (state.previewDevice.ModelType == 1) {
      if (profile.keybinding == null) {
        throw new Error("Current Profile keybinding data is null");
      }
      const keybindData = profile.keybinding[uiContext.keybindSelectedNodeIndex];
      if (keybindData == null) {
        throw new Error(
          `Unknown keybinding target for selected node index "${uiContext.keybindSelectedNodeIndex}"`
        );
      }
      keybindData.param = value2;
    } else if (state.previewDevice.ModelType == 2) {
      if (uiContext.keybindSelectedBindingType == null) {
        throw new Error("Current Profile keybinding type is null");
      }
      const selectedKey = getSelectedKeyAssignment();
      if (selectedKey == null) {
        throw new Error("Current keybinding selection key is null");
      }
      selectedKey.ApplicationPath = value2;
    }
    if (applyState == true) {
      setState({ ...state });
    }
    setPreviewDevicePropertiesAsUnsaved("keybind-shortcut-value");
    setUIKeybindSelectedShortcutProgramPath(value2);
  };
  const setKeybindSelectedShortcutUrl = (value2, applyState = true) => {
    if (state.previewDevice == null) {
      throw new Error("Current Device is null");
    }
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (state.previewDevice.ModelType == 1) {
      if (profile.keybinding == null) {
        throw new Error("Current Profile keybinding data is null");
      }
      const keybindData = profile.keybinding[uiContext.keybindSelectedNodeIndex];
      if (keybindData == null) {
        throw new Error(
          `Unknown keybinding target for selected node index "${uiContext.keybindSelectedNodeIndex}"`
        );
      }
      keybindData.param = value2;
    } else if (state.previewDevice.ModelType == 2) {
      if (uiContext.keybindSelectedBindingType == null) {
        throw new Error("Current Profile keybinding type is null");
      }
      const selectedKey = getSelectedKeyAssignment();
      if (selectedKey == null) {
        throw new Error("Current keybinding selection key is null");
      }
      selectedKey.WebsitePath = value2;
    }
    if (applyState == true) {
      setState({ ...state });
    }
    setPreviewDevicePropertiesAsUnsaved("keybind-shortcut-value");
    setUIKeybindSelectedShortcutUrl(value2);
  };
  const setKeybindSelectedShortcutWindowsOption = (option, applyState = true) => {
    if (state.previewDevice == null) {
      throw new Error("Current Device is null");
    }
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (state.previewDevice.ModelType == 1) {
      if (profile.keybinding == null) {
        throw new Error("Current Profile keybinding data is null");
      }
      const keybindData = profile.keybinding[uiContext.keybindSelectedNodeIndex];
      if (keybindData == null) {
        throw new Error(
          `Unknown keybinding target for selected node index "${uiContext.keybindSelectedNodeIndex}"`
        );
      }
      keybindData.param = option.value;
    } else if (state.previewDevice.ModelType == 2) {
      if (uiContext.keybindSelectedBindingType == null) {
        throw new Error("Current Profile keybinding type is null");
      }
      const selectedKey = getSelectedKeyAssignment();
      if (selectedKey == null) {
        throw new Error("Current keybinding selection key is null");
      }
      selectedKey.shortcutsWindowsEnable = true;
    }
    if (applyState == true) {
      setState({ ...state });
    }
    setPreviewDevicePropertiesAsUnsaved("keybind-shortcut-value");
    setUIKeybindSelectedWindowsOption(option);
  };
  const setKeybindDisabledIsSelected = (value2, applyState = true) => {
    if (state.previewDevice == null) {
      throw new Error("Current Device is null");
    }
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (state.previewDevice.ModelType == 1) {
      if (profile.keybinding == null) {
        throw new Error("Current Profile keybinding data is null");
      }
      const keybindData = profile.keybinding[uiContext.keybindSelectedNodeIndex];
      if (keybindData == null) {
        throw new Error(
          `Unknown keybinding target for selected node index "${uiContext.keybindSelectedNodeIndex}"`
        );
      }
      keybindData.function = "";
      keybindData.param = "";
    } else if (state.previewDevice.ModelType == 2) {
      if (uiContext.keybindSelectedBindingType == null) {
        throw new Error("Current Profile keybinding type is null");
      }
      const selectedKey = getSelectedKeyAssignment();
      if (selectedKey == null) {
        throw new Error("Current keybinding selection key is null");
      }
      const KeyboardDisabledFunctionCode = "Disable_Fun35";
      selectedKey.recordBindCodeType = uiContext.keybindSelectedBindingType.data.bindingCode;
      selectedKey.recordBindCodeName = KeyboardDisabledFunctionCode;
    }
    if (applyState == true) {
      setState({ ...state });
    }
    setPreviewDevicePropertiesAsUnsaved("keybind-disabled");
    setUIKeybindDisabledIsSelected(value2);
  };
  const setKeybindSoundControlSelection = (value2, applyState = true) => {
    if (state.previewDevice == null) {
      throw new Error("Current Device is null");
    }
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (state.previewDevice.ModelType == 1) {
      if (profile.keybinding == null) {
        throw new Error("Current Profile keybinding data is null");
      }
      const keybindData = profile.keybinding[uiContext.keybindSelectedNodeIndex];
      if (keybindData == null) {
        throw new Error(
          `Unknown keybinding target for selected node index "${uiContext.keybindSelectedNodeIndex}"`
        );
      }
    } else if (state.previewDevice.ModelType == 2) {
      if (uiContext.keybindSelectedBindingType == null) {
        throw new Error("Current Profile keybinding type is null");
      }
      const selectedKey = getSelectedKeyAssignment();
      if (selectedKey == null) {
        throw new Error("Current keybinding selection key is null");
      }
    }
    if (applyState == true) {
      setState({ ...state });
    }
    setUIKeybindSoundControlSelection(value2);
  };
  const setKeybindAudioToggleTarget = (value2, applyState = true) => {
    if (state.previewDevice == null) {
      throw new Error("Current Device is null");
    }
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (state.previewDevice.ModelType == 1) {
      if (profile.keybinding == null) {
        throw new Error("Current Profile keybinding data is null");
      }
      const keybindData = profile.keybinding[uiContext.keybindSelectedNodeIndex];
      if (keybindData == null) {
        throw new Error(
          `Unknown keybinding target for selected node index "${uiContext.keybindSelectedNodeIndex}"`
        );
      }
    } else if (state.previewDevice.ModelType == 2) {
      if (uiContext.keybindSelectedBindingType == null) {
        throw new Error("Current Profile keybinding type is null");
      }
      const selectedKey = getSelectedKeyAssignment();
      if (selectedKey == null) {
        throw new Error("Current keybinding selection key is null");
      }
    }
    if (applyState == true) {
      setState({ ...state });
    }
    setUIKeybindAudioToggleTarget(value2);
  };
  const setKeybindMacroSelection = (macro, applyState = true) => {
    if (state.previewDevice == null) {
      throw new Error("Current Device is null");
    }
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (state.previewDevice.ModelType == 1) {
      if (profile.keybinding == null) {
        throw new Error("Current Profile keybinding data is null");
      }
      const keybindData = profile.keybinding[uiContext.keybindSelectedNodeIndex];
      if (keybindData == null) {
        throw new Error(
          `Unknown keybinding target for selected node index "${uiContext.keybindSelectedNodeIndex}"`
        );
      }
      keybindData.function = macro?.value ?? "";
      keybindData.param = macro?.m_Identifier ?? "";
    } else if (state.previewDevice.ModelType == 2) {
      if (uiContext.keybindSelectedBindingType == null) {
        throw new Error("Current Profile keybinding type is null");
      }
      const selectedKey = getSelectedKeyAssignment();
      if (selectedKey == null) {
        throw new Error("Current keybinding selection key is null");
      }
      selectedKey.macro_Data = macro;
      switch (macro?.m_Identifier) {
        case "3":
          selectedKey.macro_RepeatType = 1;
          break;
        case "2":
          selectedKey.macro_RepeatType = 2;
          break;
        case "1":
        default:
          selectedKey.macro_RepeatType = 0;
          break;
      }
      const displayOption_Macro = BindingTypes_KeyPress.find(
        (option) => option.optionKey == "macro"
      );
      setKeybindingType(displayOption_Macro, false);
    }
    if (applyState == true) {
      setState({ ...state });
    }
    setPreviewDevicePropertiesAsUnsaved("keybind-macro");
    setUIKeybindMacroSelection(macro);
  };
  const setKeybindingSelectedNode = (node, index2, applyState = true) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (profile.keybinding == null) {
      throw new Error("Current Profile keybinding data is null");
    }
    const keybindData = profile.keybinding[uiContext.keybindSelectedNodeIndex];
    if (keybindData == null) {
      throw new Error(
        `Unknown keybinding target for selected node index "${uiContext.keybindSelectedNodeIndex}"`
      );
    }
    if (applyState == true) {
      setState({ ...state });
    }
    setUIKeybindingSelectedNode(node, index2);
  };
  const setRotaryEncoderAction = (option, applyState = true) => {
    if (state.previewDevice == null) {
      throw new Error("Current Device is null");
    }
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Current Profile is null");
    }
    if (state.previewDevice.ModelType == 1) {
      if (profile.keybinding == null) {
        throw new Error("Current Profile keybinding data is null");
      }
      const keybindData = profile.keybinding[uiContext.keybindSelectedNodeIndex];
      if (keybindData == null) {
        throw new Error(
          `Unknown keybinding target for selected node index "${uiContext.keybindSelectedNodeIndex}"`
        );
      }
    } else if (state.previewDevice.ModelType == 2) {
      if (uiContext.keybindSelectedBindingType == null) {
        throw new Error("Current Profile keybinding type is null");
      }
      const selectedKey = getSelectedKeyAssignment();
      if (selectedKey == null) {
        throw new Error("Current keybinding selection key is null");
      }
    }
    if (applyState == true) {
      setState({ ...state });
    }
    setUIRotaryEncoderAction(option);
  };
  const keyNameFromTranslationKey = (translationKey) => {
    return translationKey ? translationKey.replace("Key", "").replace("Digit", "") : "";
  };
  const setvalueCState = (data, applyState = true) => {
    const profileIndex = state.previewDevice.keyboardData.profileindex;
    const profileLayerIndex = state.previewDevice.keyboardData.profileLayerIndex[profileIndex];
    const selectedProfile = state.previewDevice.keyboardData.profileLayers[profileIndex][profileLayerIndex];
    selectedProfile.valueCData = data.toKeyboardvalueCData();
    selectedProfile.assignedKeyboardKeys.forEach(
      (deeper) => deeper.forEach((keyData) => {
        const keyValue = keyData.defaultValue;
        const match = data.actuationSelectedNodes.layers.find((value2) => {
          const matchKey = keyNameFromTranslationKey(value2.nodes[0].nodeDefinition.translationKey);
          return matchKey == keyValue;
        });
        if (match) {
          keyData.valueCKeyData = new KeyboardvalueCKeyData();
          if (match.actuationPress !== void 0) {
            keyData.valueCKeyData.actuationData = new ActuationData(match.actuationPress);
          }
          if (match.rapidTriggerPress !== void 0) {
            keyData.valueCKeyData.rapidTriggerData = new RapidTriggerData(match.rapidTriggerPress);
          }
        } else {
          keyData.valueCKeyData = null;
        }
      })
    );
    if (applyState == true) {
      setState({ ...state });
    }
    setPreviewDevicePropertiesAsUnsaved("keybind-valueC-state");
    setUIvalueCState(data);
  };
  const setvalueCAdvancedKeys = (data, applyState = true) => {
    const profileIndex = state.previewDevice.keyboardData.profileindex;
    const profileLayerIndex = state.previewDevice.keyboardData.profileLayerIndex[profileIndex];
    const selectedProfile = state.previewDevice.keyboardData.profileLayers[profileIndex][profileLayerIndex];
    selectedProfile.valueCData = data.toKeyboardvalueCData();
    if (data.advancedKeysAssignedTmp != null && data.advancedKeysSelectedKeyTmp != null) {
      selectedProfile.assignedKeyboardKeys.forEach((deeper) => {
        const match = deeper.find((keyData) => {
          const key = keyNameFromTranslationKey(data.advancedKeysSelectedKeyTmp.translationKey);
          return keyData.defaultValue == key;
        });
        if (match != null) {
          match.valueCKeyData = new KeyboardvalueCKeyData();
          if (data.advancedKeysAssignedTmp.toggle != null) {
            const mappedKey = keyNameFromTranslationKey(data.advancedKeysAssignedTmp.toggle.translationKey);
            match.valueCKeyData.ToggleData = new ToggleData(ToggleType.ReTrigger, mappedKey);
          }
          if (data.advancedKeysAssignedTmp.modTapPress != null || data.advancedKeysAssignedTmp.modTapHold != null) {
            const mappedKeyHold = keyNameFromTranslationKey(
              data.advancedKeysAssignedTmp.modTapHold?.translationKey
            );
            const mappedKeyPress = keyNameFromTranslationKey(
              data.advancedKeysAssignedTmp.modTapPress?.translationKey
            );
            match.valueCKeyData.ModTapData = new ModTapData(mappedKeyHold, 200, mappedKeyPress);
          }
          if (data.advancedKeysAssignedTmp.dynamicKeystrokes != null) {
            if (match.valueCKeyData.DynamicKeystrokeData == null) {
              match.valueCKeyData.DynamicKeystrokeData = [];
            }
            for (const triggerPointAsKey in data.advancedKeysAssignedTmp.dynamicKeystrokes.keys) {
              if (isNaN(Number(triggerPointAsKey)))
                continue;
              const triggerPoint = Number(triggerPointAsKey);
              const key = data.advancedKeysAssignedTmp.dynamicKeystrokes.keys[triggerPoint];
              const mappedKey = keyNameFromTranslationKey(key.node.translationKey);
              match.valueCKeyData.DynamicKeystrokeData.push(
                new DynamicKeystrokeData(
                  triggerPoint,
                  data.advancedKeysAssignedTmp.dynamicKeystrokes.firstTriggerPointValue,
                  mappedKey,
                  "",
                  key.isContinuous
                )
              );
            }
          }
        }
      });
      if (applyState == true) {
        setState({ ...state });
      }
      setPreviewDevicePropertiesAsUnsaved("keybind-valueC-state");
      setUIvalueCState(data);
    }
  };
  const setvalueCVisualizationState = async (enabled) => {
    const SN = state.previewDevice?.SN;
    if (DevicesAdapter.isvalueC(SN)) {
      const response = await ProtocolService.RunSetFunction({
        SN,
        Type: FuncType.Keyboard,
        Func: FuncName.valueCVisualizationToggle,
        Param: { SN, value: enabled }
      });
      if (response?.success) {
        setUIvalueCVisualizationEnabled(enabled);
      }
    }
  };
  const setProductColor = async (SN, index2, applyState = true) => {
    const deviceIndex = state.devices.findIndex((item) => item.SN == SN);
    if (deviceIndex == -1) {
      throw new Error(`Could not find device from SN: ${SN}`);
    }
    state.devices[deviceIndex].productColorIndex = index2;
    await DevicesAdapter.updateImages(state.devices[deviceIndex]);
    if (state.devices[deviceIndex].SN == state.previewDevice?.SN) {
      state.previewDevice.productColorIndex = index2;
      await DevicesAdapter.updateImages(state.previewDevice);
    }
    state.devices = [...state.devices];
    if (applyState == true) {
      setState({ ...state });
    }
  };
  const getCurrentProfile = () => {
    return state.previewDevice == null ? void 0 : DeviceService.getDeviceProfile(state.previewDevice);
  };
  const getCurrentProfileIndex = () => {
    if (state.previewDevice == null) {
      throw new Error("Current Device is null");
    }
    if (state.previewDevice.ModelType == 1) {
      if (state.previewDevice.deviceData == null) {
        throw new Error("Error getting device data");
      }
      return state.previewDevice.deviceData.profileindex;
    }
    if (state.previewDevice.ModelType == 2) {
      if (state.previewDevice.keyboardData == null) {
        throw new Error("Error getting device data");
      }
      return state.previewDevice.keyboardData.profileindex;
    }
    throw new Error("Unknown Device Type");
  };
  const getCurrentLegacyLayerIndex = () => {
    if (state.previewDevice == null) {
      throw new Error("Current Device is null");
    }
    if (state.previewDevice.ModelType != 2) {
      throw new Error("Error collecting layer index for legacy device.");
    }
    if (state.previewDevice.keyboardData == null) {
      throw new Error("Error getting device data");
    }
    return state.previewDevice.keyboardData.profileLayerIndex[state.previewDevice.keyboardData.profileindex];
  };
  const setDeviceUpdateListeningState = (value2) => {
    if (value2 == true) {
      AppEvent.subscribe(EventTypes.RefreshDevice, refreshDevices);
    } else {
      AppEvent.unsubscribe(EventTypes.RefreshDevice, refreshDevices);
    }
  };
  const setDevicesCurrentlyUpdating = (SNs) => {
    state.devicesCurrentlyUpdating = [...SNs];
    setState({ ...state });
  };
  const updateFunctions = {
    // getters
    getCurrentProfile,
    getCurrentProfileIndex,
    getCurrentLegacyLayerIndex,
    // device
    refreshDevices,
    setPreviewDevice,
    savePreviewDevice,
    resetPreviewDevice,
    setCurrentProfile,
    setCurrentProfileLayer,
    // settings
    setPollingRate,
    setWirelessPollingRate,
    setLiftOffDistance,
    setSeparatePollingActive,
    setAdvDebounceActive,
    setLiftOffPressTime,
    setAfterPressTime,
    setBeforePressTime,
    setAfterReleaseTime,
    setBeforeReleaseTime,
    setDebounceTime,
    setIsMotionSyncActive,
    setInputLatency,
    setRotarySensitivity,
    setStandbyType,
    setStandbyValue,
    // dpi
    addDPIStage,
    removeDPIStage,
    setDefaultDPIStage,
    // lighting
    setRgbOffAfterInactivity,
    setRgbOffAfterInactivityTime,
    setLightingEffect,
    setSeparateWiredWirelessBrightness,
    setWiredBrightness,
    setWirelessBrightness,
    setRate,
    setMouseLightingColor,
    setKeyboardPresetLightingColorStyle,
    setKeyboardPresetLightingColor,
    setKeyboardPresetLightingEffect,
    setPresetLightingSpeed,
    setPresetLightingWiredBrightness,
    setPresetLightingWirelessBrightness,
    setPresetSeparateWiredWirelessBrightness,
    setSelectedPerKeyLayout,
    addQuickKeysToPerKeyLayoutSelection,
    addToPerKeyLayoutSelection,
    removeFromPerKeyLayoutSelection,
    setSelectedPresetGradient,
    // keybinding
    setKeybindingLayer,
    setKeybindingType,
    setKeybindingKeyCode,
    setKeybindingKeyModifier,
    setKeybindingKeyboardFunction,
    setKeybindSelectedMouseFunction,
    setKeybindSelectedDPIOption,
    setKeybindSelectedMultimediaFunction,
    setKeybindSelectedShortcutType,
    // setKeybindSelectedShortcutOption,
    setKeybindSelectedShortcutProgramPath,
    setKeybindSelectedShortcutUrl,
    setKeybindSelectedShortcutWindowsOption,
    setKeybindDisabledIsSelected,
    setKeybindSoundControlSelection,
    setKeybindAudioToggleTarget,
    setKeybindMacroSelection,
    setKeybindingSelectedNode,
    setRotaryEncoderAction,
    getDeviceProfile: DeviceService.getDeviceProfile,
    saveDeviceRgbOffAfterInactivity,
    saveDeviceRgbOffAfterInactivityTime,
    setvalueCState,
    setvalueCAdvancedKeys,
    setvalueCVisualizationState,
    setProductColor,
    setvalueJZoneSelected,
    setvalueJLightingEffect,
    setvalueJLightingColor,
    setvalueJRate,
    setvalueJWiredBrightness,
    setDeviceUpdateListeningState,
    setDevicesCurrentlyUpdating
  };
  const hexToRgbOrNull = (InputData) => {
    try {
      var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(InputData);
      return result ? {
        color: {
          R: parseInt(result[1], 16),
          G: parseInt(result[2], 16),
          B: parseInt(result[3], 16)
        }
      } : null;
    } catch {
      return null;
    }
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(DevicesDisplayContext.Provider, { value: state, children: /* @__PURE__ */ jsxRuntimeExports.jsx(DevicesManagementContext.Provider, { value: updateFunctions, children }) });
}
const systemLang = navigator.language.split("-");
const defaultLanguageOptions = [
  new DisplayOption("ar", "languageTitle_ar", "Arabic - اَلْعَرَبِيَّةُ"),
  new DisplayOption("de", "languageTitle_de", "German - Deutsch"),
  new DisplayOption("en", "languageTitle_en", "English"),
  new DisplayOption("es", "languageTitle_es", "Spanish - Español"),
  new DisplayOption("fr", "languageTitle_fr", "French - Français"),
  new DisplayOption("he", "languageTitle_he", "Hebrew - עִבְֿרִית"),
  new DisplayOption("it", "languageTitle_it", "Italian - Italiano"),
  new DisplayOption("ja", "languageTitle_ja", "Japanese - 日本語"),
  new DisplayOption("ko", "languageTitle_ko", "Korean - 한국어"),
  new DisplayOption("pl", "languageTitle_pl", "Polish - Polski"),
  new DisplayOption("pt", "languageTitle_pt", "Portugese - Português"),
  new DisplayOption("th", "languageTitle_th", "Thai - ไทย"),
  new DisplayOption("tr", "languageTitle_tr", "Turkish - Türkçe"),
  new DisplayOption("vi", "languageTitle_vi", "Vietnamese - Tiếng Việt"),
  new DisplayOption("zh", "languageTitle_zh", "Traditional Chinese - 漢語")
];
class AppDataState {
  // save to DB
  language = defaultLanguageOptions.find((x2) => x2.optionKey == systemLang[0])?.optionKey ?? "en";
  startup = false;
  minimize = false;
  update = true;
  sleep = false;
  sleeptime = 10;
  tooltip = true;
  theme = "dark";
  // unusued in ui
  // exportVersion: number = 1;
  // remember: number = 0;
  // uuid: string = "";
  languageOptions = defaultLanguageOptions;
  version = "";
  buildVersion = "";
  showDebug = false;
}
const AppDataDisplayContext = reactExports.createContext(new AppDataState());
const AppDataUpdateContext = reactExports.createContext({});
function useAppDataContext() {
  return reactExports.useContext(AppDataDisplayContext);
}
function useAppDataUpdateContext() {
  return reactExports.useContext(AppDataUpdateContext);
}
function AppDataContext({ children }) {
  const stateReference = reactExports.useRef(new AppDataState());
  const [displayState, setDisplayState] = reactExports.useState(stateReference.current);
  const isSaving = reactExports.useRef(false);
  const hasUnsavedQueuedData = reactExports.useRef(false);
  const devicesContext = useDevicesContext();
  const { getDeviceProfile, saveDeviceRgbOffAfterInactivity, saveDeviceRgbOffAfterInactivityTime } = useDevicesManagementContext();
  reactExports.useEffect(() => {
    init();
  }, []);
  const init = async () => {
    const result = await AppService.getAppSetting();
    const settings = result[0];
    const version2 = await AppService.getAppInfo("version");
    console.log(version2);
    const showDebug = await AppService.getAppInfo("showDebug");
    console.log(showDebug);
    stateReference.current.languageOptions = await loadLanguageOptions();
    stateReference.current.language = settings.language;
    stateReference.current.startup = settings.startup;
    stateReference.current.minimize = settings.minimize;
    stateReference.current.update = settings.update;
    stateReference.current.sleep = settings.sleep;
    stateReference.current.sleeptime = settings.sleeptime;
    stateReference.current.tooltip = settings.tooltip;
    stateReference.current.theme = settings.theme;
    stateReference.current.version = version2;
    stateReference.current.showDebug = showDebug;
    if (showDebug == true) {
      const buildVersion2 = await AppService.getAppInfo("buildVersion");
      stateReference.current.buildVersion = buildVersion2;
    }
    setOpenOnStartup(settings.startup);
    setDisplayState(cloneState(stateReference.current));
  };
  const loadLanguageOptions = async () => {
    return defaultLanguageOptions;
  };
  const cloneState = (toClone) => {
    const newState = new AppDataState();
    newState.language = toClone.language;
    newState.startup = toClone.startup;
    newState.minimize = toClone.minimize;
    newState.update = toClone.update;
    newState.sleep = toClone.sleep;
    newState.sleeptime = toClone.sleeptime;
    newState.tooltip = toClone.tooltip;
    newState.theme = toClone.theme;
    newState.version = toClone.version;
    newState.buildVersion = toClone.buildVersion;
    newState.showDebug = toClone.showDebug;
    return newState;
  };
  const saveAppData = async () => {
    const settings = {
      language: stateReference.current.language,
      startup: stateReference.current.startup,
      minimize: stateReference.current.minimize,
      update: stateReference.current.update,
      sleep: stateReference.current.sleep,
      sleeptime: stateReference.current.sleeptime,
      tooltip: stateReference.current.tooltip,
      theme: stateReference.current.theme
    };
    if (isSaving.current == true) {
      hasUnsavedQueuedData.current = true;
      return;
    }
    isSaving.current = true;
    await AppService.saveAppSetting(settings);
    if (hasUnsavedQueuedData.current == true) {
      await saveAppData();
      hasUnsavedQueuedData.current = false;
    }
    isSaving.current = false;
  };
  const setLanguage = (value2) => {
    stateReference.current.language = value2;
    setDisplayState(cloneState(stateReference.current));
    return saveAppData();
  };
  const setOpenOnStartup = async (value2) => {
    stateReference.current.startup = value2;
    setDisplayState(cloneState(stateReference.current));
    saveAppData();
    await AppService.saveStartupSetting(value2);
  };
  const setMinimizedByDefault = (value2) => {
    stateReference.current.minimize = value2;
    setDisplayState(cloneState(stateReference.current));
    return saveAppData();
  };
  const setEnableAutomaticUpdates = (value2) => {
    stateReference.current.update = value2;
    setDisplayState(cloneState(stateReference.current));
    return saveAppData();
  };
  const setGlobalStandby = (value2) => {
    stateReference.current.sleep = value2;
    setDisplayState(cloneState(stateReference.current));
    for (let i2 = 0; i2 < devicesContext.devices.length; i2++) {
      const profile = getDeviceProfile(devicesContext.devices[i2]);
      if (profile?.lighting != null) {
        saveDeviceRgbOffAfterInactivity(devicesContext.devices[i2], value2);
      }
    }
    return saveAppData();
  };
  const setGlobalStandbyTimer = (value2) => {
    stateReference.current.sleeptime = value2;
    setDisplayState(cloneState(stateReference.current));
    for (let i2 = 0; i2 < devicesContext.devices.length; i2++) {
      const profile = getDeviceProfile(devicesContext.devices[i2]);
      if (profile?.lighting != null) {
        saveDeviceRgbOffAfterInactivityTime(devicesContext.devices[i2], value2);
      }
    }
    return saveAppData();
  };
  const setEnableTooltips = (value2) => {
    stateReference.current.tooltip = value2;
    setDisplayState(cloneState(stateReference.current));
    return saveAppData();
  };
  const setTheme = (value2) => {
    stateReference.current.theme = value2;
    setDisplayState(cloneState(stateReference.current));
    return saveAppData();
  };
  const updateFunctions = {
    setLanguage,
    setOpenOnStartup,
    setMinimizedByDefault,
    setEnableAutomaticUpdates,
    setGlobalStandby,
    setGlobalStandbyTimer,
    setEnableTooltips,
    setTheme
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(AppDataDisplayContext.Provider, { value: displayState, children: /* @__PURE__ */ jsxRuntimeExports.jsx(AppDataUpdateContext.Provider, { value: updateFunctions, children }) });
}
const TranslationsDisplayContext = reactExports.createContext([]);
const TranslationsUpdateContext = reactExports.createContext({});
function useTranslationsUpdateContext() {
  return reactExports.useContext(TranslationsUpdateContext);
}
function useTranslate() {
  const context = reactExports.useContext(TranslationsDisplayContext);
  return (key, fallback) => {
    if (key == null || `${key}`.trim() == "") {
      return fallback;
    }
    const translation = context?.find((translation2) => translation2.key === key)?.value;
    return translation || fallback || key;
  };
}
const TranslationsContext = ({ children }) => {
  const [translations, setTranslations] = reactExports.useState([]);
  const appDataContext = useAppDataContext();
  reactExports.useEffect(() => {
    console.log(appDataContext.language);
    updateTranslations(appDataContext.language);
  }, [appDataContext.language]);
  const updateTranslations = async (key = "en") => {
    const value2 = await (await fetch(`${"."}/i18n/${key}.json`)).json();
    if (value2 != null) {
      setTranslations(value2);
    }
  };
  const updateFunctions = { updateTranslations };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(TranslationsDisplayContext.Provider, { value: translations, children: /* @__PURE__ */ jsxRuntimeExports.jsx(TranslationsUpdateContext.Provider, { value: updateFunctions, children }) });
};
const scriptRel = function detectScriptRel() {
  const relList = typeof document !== "undefined" && document.createElement("link").relList;
  return relList && relList.supports && relList.supports("modulepreload") ? "modulepreload" : "preload";
}();
const assetsURL = function(dep, importerUrl) {
  return new URL(dep, importerUrl).href;
};
const seen = {};
const __vitePreload = function preload(baseModule, deps, importerUrl) {
  if (!deps || deps.length === 0) {
    return baseModule();
  }
  const links = document.getElementsByTagName("link");
  return Promise.all(deps.map((dep) => {
    dep = assetsURL(dep, importerUrl);
    if (dep in seen)
      return;
    seen[dep] = true;
    const isCss = dep.endsWith(".css");
    const cssSelector = isCss ? '[rel="stylesheet"]' : "";
    const isBaseRelative = !!importerUrl;
    if (isBaseRelative) {
      for (let i2 = links.length - 1; i2 >= 0; i2--) {
        const link2 = links[i2];
        if (link2.href === dep && (!isCss || link2.rel === "stylesheet")) {
          return;
        }
      }
    } else if (document.querySelector(`link[href="${dep}"]${cssSelector}`)) {
      return;
    }
    const link = document.createElement("link");
    link.rel = isCss ? "stylesheet" : scriptRel;
    if (!isCss) {
      link.as = "script";
      link.crossOrigin = "";
    }
    link.href = dep;
    document.head.appendChild(link);
    if (isCss) {
      return new Promise((res, rej) => {
        link.addEventListener("load", res);
        link.addEventListener("error", () => rej(new Error(`Unable to preload CSS for ${dep}`)));
      });
    }
  })).then(() => baseModule()).catch((err) => {
    const e = new Event("vite:preloadError", { cancelable: true });
    e.payload = err;
    window.dispatchEvent(e);
    if (!e.defaultPrevented) {
      throw err;
    }
  });
};
const __variableDynamicImportRuntimeHelper = (glob, path) => {
  const v2 = glob[path];
  if (v2) {
    return typeof v2 === "function" ? v2() : Promise.resolve(v2);
  }
  return new Promise((_, reject) => {
    (typeof queueMicrotask === "function" ? queueMicrotask : setTimeout)(reject.bind(null, new Error("Unknown variable dynamic import: " + path)));
  });
};
const sizeToVariable = {
  [IconSize.XSmall]: "12px",
  [IconSize.Smaller]: "16px",
  [IconSize.Small]: "18px",
  [IconSize.Medium]: "24px",
  [IconSize.Large]: "32px",
  [IconSize.Larger]: "40px",
  [IconSize.ExtraLarge]: "64px"
};
const Icon = ({ type, color: color2 = Color.Base50, size = IconSize.Small, width, height, secondaryColor, hoverColor, className }) => {
  const [IconComponent, setIconComponent] = reactExports.useState(null);
  reactExports.useEffect(() => {
    const importIconComponent = async () => {
      try {
        const { default: ImportedIcon } = await __variableDynamicImportRuntimeHelper(/* @__PURE__ */ Object.assign({ "./icon-assets/actuation.tsx": () => __vitePreload(() => import("./actuation-e4b38133.js"), true ? [] : void 0, import.meta.url), "./icon-assets/advanced-keys.tsx": () => __vitePreload(() => import("./advanced-keys-b3c01c7a.js"), true ? [] : void 0, import.meta.url), "./icon-assets/alert.tsx": () => __vitePreload(() => import("./alert-fbd215d4.js"), true ? [] : void 0, import.meta.url), "./icon-assets/battery-charging.tsx": () => __vitePreload(() => import("./battery-charging-01a2ab3d.js"), true ? [] : void 0, import.meta.url), "./icon-assets/battery-high.tsx": () => __vitePreload(() => import("./battery-high-8fbe6258.js"), true ? [] : void 0, import.meta.url), "./icon-assets/battery-low.tsx": () => __vitePreload(() => import("./battery-low-b2c50f02.js"), true ? [] : void 0, import.meta.url), "./icon-assets/battery-medium.tsx": () => __vitePreload(() => import("./battery-medium-5e366e16.js"), true ? [] : void 0, import.meta.url), "./icon-assets/cancel-cross.tsx": () => __vitePreload(() => import("./cancel-cross-1b52f5d3.js"), true ? [] : void 0, import.meta.url), "./icon-assets/chat-processing.tsx": () => __vitePreload(() => import("./chat-processing-199ea166.js"), true ? [] : void 0, import.meta.url), "./icon-assets/circle-arrow.tsx": () => __vitePreload(() => import("./circle-arrow-2e15fac5.js"), true ? [] : void 0, import.meta.url), "./icon-assets/close.tsx": () => __vitePreload(() => import("./close-7fe5ee3e.js"), true ? [] : void 0, import.meta.url), "./icon-assets/cloud-check.tsx": () => __vitePreload(() => import("./cloud-check-d0a2f2e0.js"), true ? [] : void 0, import.meta.url), "./icon-assets/cloud-disconnected.tsx": () => __vitePreload(() => import("./cloud-disconnected-e25e6448.js"), true ? [] : void 0, import.meta.url), "./icon-assets/cloud-syncing.tsx": () => __vitePreload(() => import("./cloud-syncing-193dcf82.js"), true ? [] : void 0, import.meta.url), "./icon-assets/cloud-upload.tsx": () => __vitePreload(() => import("./cloud-upload-a24f51ab.js"), true ? [] : void 0, import.meta.url), "./icon-assets/cog-filled.tsx": () => __vitePreload(() => import("./cog-filled-485b030c.js"), true ? [] : void 0, import.meta.url), "./icon-assets/cog-outline.tsx": () => __vitePreload(() => import("./cog-outline-914f03f8.js"), true ? [] : void 0, import.meta.url), "./icon-assets/copy.tsx": () => __vitePreload(() => import("./copy-133b513a.js"), true ? [] : void 0, import.meta.url), "./icon-assets/delete.tsx": () => __vitePreload(() => import("./delete-71b222fd.js"), true ? [] : void 0, import.meta.url), "./icon-assets/document-magnifying-glass.tsx": () => __vitePreload(() => import("./document-magnifying-glass-33a4f2da.js"), true ? [] : void 0, import.meta.url), "./icon-assets/drag.tsx": () => __vitePreload(() => import("./drag-a7371e9b.js"), true ? [] : void 0, import.meta.url), "./icon-assets/dynamic-keystroke.tsx": () => __vitePreload(() => import("./dynamic-keystroke-7a255c4d.js"), true ? [] : void 0, import.meta.url), "./icon-assets/edit.tsx": () => __vitePreload(() => import("./edit-24759467.js"), true ? [] : void 0, import.meta.url), "./icon-assets/exclamation-point.tsx": () => __vitePreload(() => import("./exclamation-point-ae1ae751.js"), true ? [] : void 0, import.meta.url), "./icon-assets/fail-cross.tsx": () => __vitePreload(() => import("./fail-cross-a6c5d2fc.js"), true ? [] : void 0, import.meta.url), "./icon-assets/filter.tsx": () => __vitePreload(() => import("./filter-d50d1752.js"), true ? [] : void 0, import.meta.url), "./icon-assets/floppy-disk.tsx": () => __vitePreload(() => import("./floppy-disk-f4d03ada.js"), true ? [] : void 0, import.meta.url), "./icon-assets/gamepad-square.tsx": () => __vitePreload(() => import("./gamepad-square-a1b8f39f.js"), true ? [] : void 0, import.meta.url), "./icon-assets/glorious-id.tsx": () => __vitePreload(() => import("./glorious-id-848652e7.js"), true ? [] : void 0, import.meta.url), "./icon-assets/glorious-logo.tsx": () => __vitePreload(() => import("./glorious-logo-272b8f22.js"), true ? [] : void 0, import.meta.url), "./icon-assets/gmmk-pro-device.tsx": () => __vitePreload(() => import("./gmmk-pro-device-a33ca7e3.js"), true ? [] : void 0, import.meta.url), "./icon-assets/gmmk2-65-device.tsx": () => __vitePreload(() => import("./gmmk2-65-device-4de88376.js"), true ? [] : void 0, import.meta.url), "./icon-assets/gmmk2-96-device.tsx": () => __vitePreload(() => import("./gmmk2-96-device-4dfc3a6e.js"), true ? [] : void 0, import.meta.url), "./icon-assets/home.tsx": () => __vitePreload(() => import("./home-8b6c8a14.js"), true ? [] : void 0, import.meta.url), "./icon-assets/hourglass.tsx": () => __vitePreload(() => import("./hourglass-36c24b03.js"), true ? [] : void 0, import.meta.url), "./icon-assets/information-outline.tsx": () => __vitePreload(() => import("./information-outline-e760ae4d.js"), true ? [] : void 0, import.meta.url), "./icon-assets/keybinding.tsx": () => __vitePreload(() => import("./keybinding-61db694f.js"), true ? [] : void 0, import.meta.url), "./icon-assets/layer-top.tsx": () => __vitePreload(() => import("./layer-top-4d40a6a4.js"), true ? [] : void 0, import.meta.url), "./icon-assets/layer-underneath.tsx": () => __vitePreload(() => import("./layer-underneath-2a688963.js"), true ? [] : void 0, import.meta.url), "./icon-assets/lightbulb.tsx": () => __vitePreload(() => import("./lightbulb-9563c15a.js"), true ? [] : void 0, import.meta.url), "./icon-assets/lightning-bolt.tsx": () => __vitePreload(() => import("./lightning-bolt-83fc1c67.js"), true ? [] : void 0, import.meta.url), "./icon-assets/macro-no-repeat.tsx": () => __vitePreload(() => import("./macro-no-repeat-9d83c115.js"), true ? [] : void 0, import.meta.url), "./icon-assets/macro-record-delay.tsx": () => __vitePreload(() => import("./macro-record-delay-0f7d9b52.js"), true ? [] : void 0, import.meta.url), "./icon-assets/macro-record.tsx": () => __vitePreload(() => import("./macro-record-940f3597.js"), true ? [] : void 0, import.meta.url), "./icon-assets/macro-repeat-while-holding.tsx": () => __vitePreload(() => import("./macro-repeat-while-holding-581fe77c.js"), true ? [] : void 0, import.meta.url), "./icon-assets/macro-set-delay.tsx": () => __vitePreload(() => import("./macro-set-delay-368911a5.js"), true ? [] : void 0, import.meta.url), "./icon-assets/macro-stop.tsx": () => __vitePreload(() => import("./macro-stop-fee0a92a.js"), true ? [] : void 0, import.meta.url), "./icon-assets/macro-toggle.tsx": () => __vitePreload(() => import("./macro-toggle-8b9d1592.js"), true ? [] : void 0, import.meta.url), "./icon-assets/mod-tap.tsx": () => __vitePreload(() => import("./mod-tap-99537cb7.js"), true ? [] : void 0, import.meta.url), "./icon-assets/model-d-device.tsx": () => __vitePreload(() => import("./model-d-device-bc058b0d.js"), true ? [] : void 0, import.meta.url), "./icon-assets/model-i-device.tsx": () => __vitePreload(() => import("./model-i-device-387ce538.js"), true ? [] : void 0, import.meta.url), "./icon-assets/model-o-device.tsx": () => __vitePreload(() => import("./model-o-device-ad0fd2b6.js"), true ? [] : void 0, import.meta.url), "./icon-assets/moon.tsx": () => __vitePreload(() => import("./moon-3d8d7c54.js"), true ? [] : void 0, import.meta.url), "./icon-assets/navigation-arrow.tsx": () => __vitePreload(() => import("./navigation-arrow-9bdc3c0a.js"), true ? [] : void 0, import.meta.url), "./icon-assets/nc.tsx": () => __vitePreload(() => import("./nc-806a3c9f.js"), true ? [] : void 0, import.meta.url), "./icon-assets/numpad-device.tsx": () => __vitePreload(() => import("./numpad-device-ccd8acb0.js"), true ? [] : void 0, import.meta.url), "./icon-assets/open.tsx": () => __vitePreload(() => import("./open-9ad47585.js"), true ? [] : void 0, import.meta.url), "./icon-assets/play.tsx": () => __vitePreload(() => import("./play-da9dbfaf.js"), true ? [] : void 0, import.meta.url), "./icon-assets/plus-outline.tsx": () => __vitePreload(() => import("./plus-outline-35260feb.js"), true ? [] : void 0, import.meta.url), "./icon-assets/plus.tsx": () => __vitePreload(() => import("./plus-0c6039e7.js"), true ? [] : void 0, import.meta.url), "./icon-assets/profile-picture.tsx": () => __vitePreload(() => import("./profile-picture-5ed9a228.js"), true ? [] : void 0, import.meta.url), "./icon-assets/question-mark.tsx": () => __vitePreload(() => import("./question-mark-15b3bc7f.js"), true ? [] : void 0, import.meta.url), "./icon-assets/rgb-sync.tsx": () => __vitePreload(() => import("./rgb-sync-195427b9.js"), true ? [] : void 0, import.meta.url), "./icon-assets/rotate-left.tsx": () => __vitePreload(() => import("./rotate-left-18facc97.js"), true ? [] : void 0, import.meta.url), "./icon-assets/rotate-right.tsx": () => __vitePreload(() => import("./rotate-right-301330fd.js"), true ? [] : void 0, import.meta.url), "./icon-assets/save-check-rounded.tsx": () => __vitePreload(() => import("./save-check-rounded-c983f98b.js"), true ? [] : void 0, import.meta.url), "./icon-assets/save-check.tsx": () => __vitePreload(() => import("./save-check-5eab5ac8.js"), true ? [] : void 0, import.meta.url), "./icon-assets/screen.tsx": () => __vitePreload(() => import("./screen-bf25ea61.js"), true ? [] : void 0, import.meta.url), "./icon-assets/shop.tsx": () => __vitePreload(() => import("./shop-17e9882d.js"), true ? [] : void 0, import.meta.url), "./icon-assets/sort.tsx": () => __vitePreload(() => import("./sort-b39f6ef4.js"), true ? [] : void 0, import.meta.url), "./icon-assets/speedometer.tsx": () => __vitePreload(() => import("./speedometer-4fe01369.js"), true ? [] : void 0, import.meta.url), "./icon-assets/spinner-dark.tsx": () => __vitePreload(() => import("./spinner-dark-80933a12.js"), true ? [] : void 0, import.meta.url), "./icon-assets/spinner-light.tsx": () => __vitePreload(() => import("./spinner-light-696cb483.js"), true ? [] : void 0, import.meta.url), "./icon-assets/stop.tsx": () => __vitePreload(() => import("./stop-f14e70d0.js"), true ? [] : void 0, import.meta.url), "./icon-assets/success-check.tsx": () => __vitePreload(() => import("./success-check-88b1015f.js"), true ? [] : void 0, import.meta.url), "./icon-assets/sun.tsx": () => __vitePreload(() => import("./sun-b4ec1135.js"), true ? [] : void 0, import.meta.url), "./icon-assets/tick.tsx": () => __vitePreload(() => import("./tick-86fbcc82.js"), true ? [] : void 0, import.meta.url), "./icon-assets/toggle-key.tsx": () => __vitePreload(() => import("./toggle-key-e04e5461.js"), true ? [] : void 0, import.meta.url), "./icon-assets/transparency-mode.tsx": () => __vitePreload(() => import("./transparency-mode-d24275d0.js"), true ? [] : void 0, import.meta.url), "./icon-assets/transparency-off.tsx": () => __vitePreload(() => import("./transparency-off-649308bb.js"), true ? [] : void 0, import.meta.url), "./icon-assets/trash.tsx": () => __vitePreload(() => import("./trash-0580f110.js"), true ? [] : void 0, import.meta.url), "./icon-assets/tune-variant.tsx": () => __vitePreload(() => import("./tune-variant-4f1fbd8b.js"), true ? [] : void 0, import.meta.url), "./icon-assets/undo.tsx": () => __vitePreload(() => import("./undo-b6d79277.js"), true ? [] : void 0, import.meta.url), "./icon-assets/up-arrow-outline.tsx": () => __vitePreload(() => import("./up-arrow-outline-9e180834.js"), true ? [] : void 0, import.meta.url), "./icon-assets/upload.tsx": () => __vitePreload(() => import("./upload-690e4308.js"), true ? [] : void 0, import.meta.url), "./icon-assets/usb-symbol.tsx": () => __vitePreload(() => import("./usb-symbol-ca3d0cd6.js"), true ? [] : void 0, import.meta.url), "./icon-assets/vertical-ellipses.tsx": () => __vitePreload(() => import("./vertical-ellipses-9fb834e2.js"), true ? [] : void 0, import.meta.url), "./icon-assets/volume-up.tsx": () => __vitePreload(() => import("./volume-up-f9e5f9bd.js"), true ? [] : void 0, import.meta.url), "./icon-assets/wireframe-globe.tsx": () => __vitePreload(() => import("./wireframe-globe-55a7898f.js"), true ? [] : void 0, import.meta.url), "./icon-assets/wireless-connection-disconnected.tsx": () => __vitePreload(() => import("./wireless-connection-disconnected-aa3ecd84.js"), true ? [] : void 0, import.meta.url), "./icon-assets/wireless-connection-medium.tsx": () => __vitePreload(() => import("./wireless-connection-medium-58ef236d.js"), true ? [] : void 0, import.meta.url), "./icon-assets/wireless-connection-strong.tsx": () => __vitePreload(() => import("./wireless-connection-strong-98c98d83.js"), true ? [] : void 0, import.meta.url), "./icon-assets/wireless-connection-weak.tsx": () => __vitePreload(() => import("./wireless-connection-weak-80705e69.js"), true ? [] : void 0, import.meta.url) }), `./icon-assets/${type}.tsx`);
        setIconComponent(() => ImportedIcon);
      } catch (error) {
        console.error(`Failed to load icon component: ${type}`, error);
        setIconComponent(null);
      }
    };
    importIconComponent();
  }, [type]);
  if (!IconComponent)
    return null;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    IconComponent,
    {
      color: color2,
      size: width == void 0 && height == void 0 ? sizeToVariable[size] : void 0,
      width,
      height,
      hoverColor,
      secondaryColor,
      className
    }
  );
};
const value$2 = "_value_34sdh_27";
const styles$4 = {
  "battery-pill": "_battery-pill_34sdh_1",
  value: value$2
};
const BatteryPill = ({ iconColor = Color.Base50, size = IconSize.Small, isCharging = false, showValue = true, value: value2 = 100 }) => {
  let iconType = IconType.BatteryLow;
  if (value2 > 33 && value2 <= 66) {
    iconType = IconType.BatteryMedium;
  } else if (value2 > 66) {
    iconType = IconType.BatteryHigh;
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `${styles$4["battery-pill"]}${isCharging == true && value2 < 100 ? ` charging` : ""}`, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { size: IconSize.Small, type: iconType, color: iconColor }),
    showValue && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: styles$4["value"], children: isNaN(value2) ? void 0 : `${value2}%` })
  ] });
};
const spinnerComponent = "";
function SpinnerComponent(props) {
  const { size, labelText, labelFontSize } = props;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "spinner-component", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "spinner-anim", style: { ["--spinner-anim-size"]: `${size}` } }),
    labelText != null && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { style: { ["fontSize"]: `${labelFontSize ?? "8px"}` }, children: labelText })
  ] }) });
}
const SVGImage = ({ type, width, height, className }) => {
  const [SVGImageComponent, setSVGImageComponent] = reactExports.useState(null);
  reactExports.useEffect(() => {
    const importSVGImageComponent = async () => {
      try {
        const { default: ImportedIcon } = await __variableDynamicImportRuntimeHelper(/* @__PURE__ */ Object.assign({ "./image-assets/core-2-word-mark.tsx": () => __vitePreload(() => import("./core-2-word-mark-af63584a.js"), true ? [] : void 0, import.meta.url), "./image-assets/glorious-id-label.tsx": () => __vitePreload(() => import("./glorious-id-label-c674a2b7.js"), true ? [] : void 0, import.meta.url), "./image-assets/glorious-id-word-mark.tsx": () => __vitePreload(() => import("./glorious-id-word-mark-c90e0217.js"), true ? [] : void 0, import.meta.url), "./image-assets/glorious-word-mark.tsx": () => __vitePreload(() => import("./glorious-word-mark-fa2324a1.js"), true ? [] : void 0, import.meta.url) }), `./image-assets/${type}.tsx`);
        setSVGImageComponent(() => ImportedIcon);
      } catch (error) {
        console.error(`Failed to load icon component: ${type}`, error);
        setSVGImageComponent(null);
      }
    };
    importSVGImageComponent();
  }, [type]);
  if (!SVGImageComponent)
    return null;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    SVGImageComponent,
    {
      width,
      height,
      className
    }
  );
};
var SVGImageType = /* @__PURE__ */ ((SVGImageType2) => {
  SVGImageType2["Core2WordMark"] = "core-2-word-mark";
  SVGImageType2["GloriousIDLabel"] = "glorious-id-label";
  SVGImageType2["GloriousIDWordMark"] = "glorious-id-word-mark";
  SVGImageType2["GloriousWordMark"] = "glorious-word-mark";
  return SVGImageType2;
})(SVGImageType || {});
function ConnectedDevicesPage(props) {
  const navigate = useNavigate();
  const translate = useTranslate();
  const uiState = useUIContext();
  const devicesContext = useDevicesContext();
  const { setProductColor } = useDevicesManagementContext();
  const { setPreviewDevice } = useDevicesManagementContext();
  const [currentProductColorMenu_DeviceSN, setCurrentProductColorMenu_DeviceSN] = reactExports.useState(null);
  reactExports.useEffect(() => {
    console.log("devices changed");
    setCurrentProductColorMenu_DeviceSN(null);
  }, [devicesContext.devices]);
  const isWireless = (pids) => {
    if (pids.length < 2) {
      return false;
    }
    if (pids[1].startsWith("0xB0")) {
      return false;
    }
    return true;
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    uiState.isLoadingDevices == true && (devicesContext.devices == null || devicesContext.devices.length == 0) ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "placeholder", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
      SpinnerComponent,
      {
        size: "50px",
        labelText: translate(
          "ConnectedDevices_Label_LoadingDevices",
          "Loading Connected Devices..."
        ),
        labelFontSize: "14px"
      }
    ) }) : devicesContext.devices != null && devicesContext.devices.length > 0 ? /* @__PURE__ */ jsxRuntimeExports.jsx("ul", { className: "connected-devices", children: devicesContext.devices.map((device2, deviceIndex) => {
      const deviceClassName = device2.devicename.toLowerCase().replaceAll(" ", "-").replace("%", "");
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        "li",
        {
          className: deviceClassName,
          style: {
            "--product-color": device2.productColors[device2.productColorIndex].hex
          },
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "a",
            {
              "data-serial-number": device2.SN,
              onClick: () => {
                setPreviewDevice(device2);
                navigate("/device");
              },
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: translate(`DeviceName_${device2.SN}`, device2.devicename) }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  "div",
                  {
                    className: "color",
                    onClick: (event) => {
                      event.preventDefault();
                      event.stopPropagation();
                      if (currentProductColorMenu_DeviceSN == null) {
                        setCurrentProductColorMenu_DeviceSN(device2.SN);
                      } else {
                        setCurrentProductColorMenu_DeviceSN(null);
                      }
                    },
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "preview" }),
                      currentProductColorMenu_DeviceSN == device2.SN ? /* @__PURE__ */ jsxRuntimeExports.jsx("ul", { className: "options", children: device2.productColors.map((productColor, productColorIndex) => /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "li",
                        {
                          title: translate(productColor.name),
                          onClick: (event) => {
                            event.preventDefault();
                            event.stopPropagation();
                            setProductColor(device2.SN, productColorIndex);
                            setCurrentProductColorMenu_DeviceSN(null);
                          },
                          children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "div",
                            {
                              className: "preview",
                              style: {
                                "--product-color": productColor.hex
                              }
                            }
                          )
                        },
                        productColorIndex
                      )) }) : /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {})
                    ]
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "content", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "img",
                    {
                      draggable: false,
                      className: "render small",
                      src: device2.deviceRenderAttributes.small.path,
                      alt: device2.devicename
                    }
                  ),
                  isWireless(device2.pid) && device2.batterystatus != null ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                    BatteryPill,
                    {
                      size: IconSize.Small,
                      value: parseInt(device2.batteryvalue),
                      isCharging: device2.batterystatus == 1
                    }
                  ) : /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {})
                ] })
              ]
            }
          )
        },
        device2.SN + deviceIndex
      );
    }) }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "no-devices-message", children: "No supported devices connected" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "word-mark", children: /* @__PURE__ */ jsxRuntimeExports.jsx(SVGImage, { type: SVGImageType.GloriousWordMark }) })
  ] });
}
const navigation_component = "";
const style$3 = {
  "nav-icon": "_nav-icon_1f0ut_1"
};
function NavigationComponent(props) {
  const navigate = useNavigate();
  const location = useLocation();
  const translate = useTranslate();
  const devicesState = useDevicesContext();
  const { setPreviewDevice } = useDevicesManagementContext();
  const uiContext = useUIContext();
  const [showDebugUI2, setShowDebugUI] = reactExports.useState(false);
  const updateDebugUI = async () => {
    const showDebug = await AppService.getAppInfo("showDebug");
    setShowDebugUI(showDebug);
  };
  reactExports.useEffect(() => {
    updateDebugUI();
  }, []);
  const deviceList = reactExports.useMemo(() => {
    const deviceList2 = devicesState.devices.map((device2, index2) => {
      const selected2 = devicesState.previewDevice?.SN === device2.SN;
      const deviceNameClass = device2.devicename.toLowerCase().replaceAll(" ", "-").replaceAll("%", "");
      const className = `device ${deviceNameClass}${selected2 ? location.pathname != "/settings" ? " selected" : "" : ""}`;
      return {
        SN: device2.SN,
        key: device2.SN + index2,
        title: device2.devicename,
        className,
        // iconPaths: device.iconPaths,
        iconType: device2.iconType,
        selected: selected2,
        ref: device2
      };
    });
    return deviceList2;
  }, [devicesState.previewDevice, devicesState.devices, location.pathname]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("nav", { className: uiContext.displayNavigation == false ? "hidden" : "", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("header", { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "a",
        {
          className: location.pathname == "/" ? "selected" : "",
          onClick: () => {
            navigate("/");
          },
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: IconType.GloriousLogo, size: IconSize.Larger, className: style$3["nav-icon"] })
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "a",
        {
          className: location.pathname == "/settings" ? "selected" : "",
          onClick: () => {
            navigate("/settings");
          },
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "badge", children: "!" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: IconType.CogFilled, size: IconSize.Larger, className: style$3["nav-icon"] })
          ]
        }
      )
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("section", { children: [
      deviceList.map((deviceInfo) => {
        return /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "a",
          {
            title: deviceInfo.title,
            className: deviceInfo.className,
            onClick: () => {
              setPreviewDevice(deviceInfo.ref);
              navigate("/device");
            },
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "badge", children: "!" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: deviceInfo.iconType, size: IconSize.Larger, className: style$3["nav-icon"] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: translate(`DeviceName_${deviceInfo.SN}`, deviceInfo.title) })
            ]
          },
          deviceInfo.key
        );
      }),
      uiContext.isLoadingDevices == true && /* @__PURE__ */ jsxRuntimeExports.jsx(
        SpinnerComponent,
        {
          size: "25px",
          labelText: translate("ConnectedDevices_Label_LoadingDevices", "Loading Connected Devices..."),
          labelFontSize: "8px"
        }
      )
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("footer", {})
  ] });
}
const optionSelect_component = "";
const MIN_SELECT_POPUP_HEIGHT = 35;
function OptionSelectComponent(props) {
  const [open, setOpen] = reactExports.useState(false);
  const [selectedOption, setSelectedOption] = reactExports.useState(null);
  const selectedDisplay = reactExports.useRef(null);
  const containerElement = reactExports.useRef(null);
  const { options, value: value2, onChange, listHeaderContent, direction } = props;
  reactExports.useEffect(() => {
    const target = containerElement.current;
    target.classList.remove("above");
    const parent = target.parentElement.tagName.toLowerCase() == "label" ? target.parentElement.parentElement : target.parentElement;
    const padding = 10;
    const distanceBelow = parent.offsetTop + parent.offsetHeight - (target.offsetTop + target.offsetHeight) - padding;
    let maxHeight = distanceBelow;
    if (direction == "above" || direction == null && distanceBelow < MIN_SELECT_POPUP_HEIGHT) {
      maxHeight = parent.offsetTop - target.offsetTop - padding;
      target.classList.add("above");
    }
    target.style.setProperty("--max-height", `${maxHeight}px`);
    let currentSelectionValue = value2 ?? selectedDisplay.current.dataset.value;
    let currentSelectionIndex = 0;
    if (options != null && options.length > 0 && (!isNaN(parseInt(currentSelectionValue)) || currentSelectionValue != null && (currentSelectionValue.trim != null && currentSelectionValue.trim() != ""))) {
      for (let i2 = 0; i2 < options.length; i2++) {
        if (options[i2].value == currentSelectionValue) {
          currentSelectionIndex = i2;
          break;
        }
      }
    }
    setSelectedOption(options[currentSelectionIndex]);
  });
  const handleOffComponentClick = reactExports.useCallback((event) => {
    if (event.target.closest("[data-selection]") == null) {
      setOpen(false);
      window.removeEventListener("click", handleOffComponentClick);
      event.stopPropagation();
      event.preventDefault();
    }
  }, []);
  const handleOpen = (event) => {
    const newValue = !open;
    setOpen(newValue);
    window.removeEventListener("click", handleOffComponentClick);
    if (newValue == true) {
      window.addEventListener("click", handleOffComponentClick, { once: true });
    }
    event.stopPropagation();
  };
  const handleSelect = (optionElement) => {
    const option = { label: optionElement.textContent ?? "", value: optionElement.dataset.value ?? "" };
    setSelectedOption(option);
    if (onChange != null) {
      onChange(option.value);
    }
    setOpen(false);
    window.removeEventListener("click", handleOffComponentClick);
  };
  const optionElements = options == null ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}) : options.map(
    (option, index2) => /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "option", "data-value": option.value, onClick: (event) => {
      const option2 = event.currentTarget;
      handleSelect(option2);
    }, children: option.label }, index2)
  );
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `option-select${open ? " open" : ""}`, ref: containerElement, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "selected", ref: selectedDisplay, "data-value": selectedOption?.value, onClick: handleOpen, children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: selectedOption?.label }) }),
    open ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "options", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: listHeaderContent }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "items", children: optionElements })
    ] }) : null
  ] });
}
const range_component = "";
function RangeComponent({
  onChange,
  min = 0,
  max = 100,
  step = 1,
  value: value2 = 0,
  className = "",
  children
}) {
  const [inputValue, setInputValue] = reactExports.useState(value2);
  const classNames = `range ${className}`.trim();
  reactExports.useEffect(() => {
    setInputValue(value2);
  }, [value2]);
  const handleChange = (event) => {
    const newValue = parseFloat(event.target.value);
    if (!isNaN(newValue)) {
      setInputValue(newValue);
      if (onChange) {
        onChange(newValue);
      }
    }
  };
  const style2 = {
    "--min": min,
    "--max": max,
    "--step": step,
    "--value": inputValue
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: classNames, style: style2, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      "input",
      {
        type: "range",
        min,
        max,
        step,
        value: inputValue,
        onChange: handleChange
      }
    ),
    children
  ] });
}
const toggle_component = "";
function ToggleComponent(props) {
  const { value: value2, onChange, thumbContent, onContent, offContent } = props;
  const [checked, setChecked] = reactExports.useState(value2 == true ? true : false);
  const [checkedStateContent, setCheckedStateContent] = reactExports.useState(/* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: '"OFF"' }));
  reactExports.useEffect(() => {
    let content;
    if (checked) {
      content = onContent == null ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}) : onContent;
    } else {
      content = offContent == null ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}) : offContent;
    }
    setCheckedStateContent(content);
  }, [checked]);
  reactExports.useEffect(() => {
    setChecked(value2);
  }, [value2]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "track", "data-toggle": true, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      "input",
      {
        type: "checkbox",
        checked,
        onChange: (e) => {
          e.stopPropagation();
          const value22 = !checked;
          setChecked(value22);
          if (onChange != null) {
            onChange(value22);
          }
        }
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "checked-state", children: checkedStateContent }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "thumb", children: thumbContent == null ? null : thumbContent })
  ] });
}
const settings_page = "";
async function loginWindow(page, language) {
  return await IPCService.invoke(AppChannel.Login, { lang: language, initialPage: page });
}
async function logout() {
  await IPCService.invoke(AppChannel.Logout);
}
async function getCloudCurrentDeviceProfiles(serialNumber) {
  return await IPCService.invoke(AppChannel.GetCloudDeviceProfiles, { sn: serialNumber });
}
async function saveLocalProfileToCloud(profile, cloudProfileId, previewDevice) {
  await IPCService.invoke(AppChannel.CreateCloudDeviceProfile, {
    id: cloudProfileId,
    name: profile.profileName,
    data: window.btoa(JSON.stringify(profile)),
    sn: previewDevice.SN,
    deviceName: previewDevice.devicename,
    deviceCategory: previewDevice.deviceCategoryName
  });
}
async function removeProfileFromCloud(cloudProfileId) {
  await IPCService.invoke(AppChannel.DeleteCloudDeviceProfile, cloudProfileId);
}
async function getAllDevicesCloudProfiles() {
  return await IPCService.invoke(AppChannel.GetAllCloudDevicesProfiles);
}
async function checkLoginStatus() {
  return await IPCService.invoke(AppChannel.IsLoggedIn);
}
async function setUserProfile() {
  return await IPCService.invoke(AppChannel.GetProfile);
}
class CloudState {
  userProfile = null;
  currentDeviceProfiles = null;
  allDevicesProfiles = null;
}
const CloudDataContext = reactExports.createContext(new CloudState());
const CloudDataUpdateContext = reactExports.createContext({});
const useCloudDataContext = () => reactExports.useContext(CloudDataContext);
const useCloudDataUpdateContext = () => reactExports.useContext(CloudDataUpdateContext);
const CloudContext = ({ children }) => {
  const stateReference = reactExports.useRef(new CloudState());
  const [displayState, setDisplayState] = reactExports.useState(stateReference.current);
  const { previewDevice } = useDevicesContext();
  const appDataContext = useAppDataContext();
  reactExports.useEffect(() => {
    const setUserProfile$1 = async () => {
      const profile = await setUserProfile();
      stateReference.current.userProfile = profile;
      setDisplayState(cloneState(stateReference.current));
    };
    const checkLoginStatus$1 = async () => {
      const isLoggedIn = await checkLoginStatus();
      if (isLoggedIn)
        await setUserProfile$1();
    };
    checkLoginStatus$1();
    AppEvent.subscribe(EventTypes.UserLoggedIn, setUserProfile$1);
    return () => AppEvent.unsubscribe(EventTypes.UserLoggedIn, setUserProfile$1);
  }, []);
  reactExports.useEffect(() => {
    if (!displayState.userProfile)
      return;
    getCloudCurrentDeviceProfiles$1();
  }, [displayState.userProfile, previewDevice, JSON.stringify(previewDevice?.deviceData?.profile)]);
  const getAllDevicesCloudProfiles$1 = async () => {
    try {
      const cloudProfiles = await getAllDevicesCloudProfiles();
      stateReference.current.allDevicesProfiles = cloudProfiles;
      setDisplayState(cloneState(stateReference.current));
    } catch (error) {
      console.error("Error getting cloud device profiles.");
      console.error(error);
    }
  };
  const cloneState = (toClone) => {
    const newState = new CloudState();
    newState.userProfile = toClone.userProfile;
    newState.currentDeviceProfiles = toClone.currentDeviceProfiles;
    newState.allDevicesProfiles = toClone.allDevicesProfiles;
    return newState;
  };
  const loginWindow$1 = async (page) => {
    const lang = appDataContext.language;
    await loginWindow(page, lang);
  };
  const getCloudCurrentDeviceProfiles$1 = async () => {
    if (!previewDevice)
      return;
    const cloudProfiles = await getCloudCurrentDeviceProfiles(previewDevice.SN);
    const localDeviceProfiles = DeviceService.getDeviceProfiles(previewDevice);
    const cloudProfilesMap = cloudProfiles.reduce((profilesMap, profile) => ({
      ...profilesMap,
      [profile.name]: profile
    }), {});
    localDeviceProfiles?.forEach((profile) => {
      const encodedProfileData = window.btoa(JSON.stringify(profile));
      const localCloudProfile = cloudProfilesMap[profile.profileName];
      if (!localCloudProfile)
        return;
      const decodedData = window.atob(localCloudProfile.data);
      const cloudProfileData = JSON.parse(decodedData);
      const profileCopy = structuredClone(cloudProfileData);
      delete profileCopy.lastModified;
      const cloudEncodedProfiledata = window.btoa(JSON.stringify(profile));
      localCloudProfile.isSynced = cloudEncodedProfiledata === encodedProfileData;
    });
    stateReference.current.currentDeviceProfiles = cloudProfilesMap;
    setDisplayState(cloneState(stateReference.current));
  };
  const saveLocalProfileToCloud$1 = async (profile, cloudProfileId) => {
    await saveLocalProfileToCloud(profile, cloudProfileId, previewDevice);
    getCloudCurrentDeviceProfiles$1();
  };
  const removeProfileFromCloud$1 = async (cloudProfileId) => {
    await removeProfileFromCloud(cloudProfileId);
    getCloudCurrentDeviceProfiles$1();
    getAllDevicesCloudProfiles$1();
  };
  const logout$1 = async () => {
    await logout();
    stateReference.current.userProfile = null;
    stateReference.current.currentDeviceProfiles = null;
    stateReference.current.allDevicesProfiles = null;
    setDisplayState(cloneState(stateReference.current));
  };
  const updateFunctions = {
    loginWindow: loginWindow$1,
    logout: logout$1,
    getCloudCurrentDeviceProfiles: getCloudCurrentDeviceProfiles$1,
    saveLocalProfileToCloud: saveLocalProfileToCloud$1,
    removeProfileFromCloud: removeProfileFromCloud$1,
    getAllDevicesCloudProfiles: getAllDevicesCloudProfiles$1
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(CloudDataContext.Provider, { value: displayState, children: /* @__PURE__ */ jsxRuntimeExports.jsx(CloudDataUpdateContext.Provider, { value: updateFunctions, children }) });
};
const svgIcon_component = "";
function SVGIconComponent(props) {
  const { src, active, selected: selected2, className, onClick } = props;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "i",
    {
      className: `icon ${className}`,
      onClick,
      style: {
        ["--icon-default"]: `url(${".."}${src})`,
        ["--icon-active"]: `url(${".."}${active})`,
        ["--icon-selected"]: `url(${".."}${selected2})`
      }
    }
  );
}
const ICONS_PATH = "/images/icons";
const ICONS$1 = {
  dynamicKeystroke: "dynamic_keystroke.svg",
  modTap: "mod_tap.svg",
  toggleKey: "toggle_key.svg",
  rightArrow: "right_arrow.svg",
  rightArrowOrange: "right_arrow_orange.svg",
  keystrokeSignle: "dynamic_keystroke_single_activation.svg",
  keystrokeContinuous: "dynamic_keystroke_continuous_activation.svg",
  delete: "delete.svg",
  deleteHover: "delete_hover.svg",
  // Profile icons
  deviceConnected: "device_connected.svg",
  greenBatteryPower: "green_battery_power.svg",
  greenConfirmation: "green_confirmation.svg",
  activeProfile: "active_profile.svg",
  cloudNotSynced: "cloud_not_synced.svg",
  localProfileNotSynced: "local_profile_not_synced.svg",
  applyProfile: "apply_profile.svg",
  deactivateProfile: "delete.svg",
  profileInfo: "profile_info.svg",
  cloudActive: "cloud_active.svg",
  closeModal: "close.svg",
  closeModalHover: "close_hover.svg"
};
const iconSrc = (fileName) => `${ICONS_PATH}/${fileName}`;
const deviceProfileInfoModal = "";
const DeviceProfileInfoModal = ({ profile, deviceName, isActive, toggleModal }) => {
  const translate = useTranslate();
  const appDataContext = useAppDataContext();
  const handleModalContentClick = (event) => {
    event.stopPropagation();
  };
  const modalDetails = reactExports.useMemo(() => {
    if (!profile)
      return { pollingRate: "", lightingEffect: "", lastUpdated: "" };
    return {
      pollingRate: profile.pollingrate ?? profile.performance?.pollingrate ?? "",
      lightingEffect: translate(profile.light_PRESETS_Data?.translate) ?? "",
      lastUpdated: profile.lastModified ? new Date(profile.lastModified).toLocaleString(appDataContext.language) : ""
    };
  }, [profile]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "profile-modal", onClick: handleModalContentClick, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "modal-header", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "modal-header-first-row", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "modal-profile-name", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: profile.profileName }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "modal-close-action", onClick: toggleModal, children: /* @__PURE__ */ jsxRuntimeExports.jsx(SVGIconComponent, { src: iconSrc(ICONS$1.closeModal) }) })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "modal-device-name", children: /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { children: deviceName }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "modal-hr" })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "modal-details", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "modal-profile-detail-row", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
          translate("Device_Home_Label_Profiles_Modal_Status", "Status"),
          ":"
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: translate(
          isActive ? "Device_Home_Label_Profiles_Active_Status" : "Device_Home_Label_Profiles_Inactive_Status",
          isActive ? "Active" : "Inactive"
        ) })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "modal-profile-detail-row", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
          translate("Device_Home_Label_Profiles_Modal_Last_Updated", "Last Updated"),
          ":"
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: modalDetails.lastUpdated })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "modal-profile-detail-row", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
          translate("Device_Home_Label_Profiles_Modal_Polling_Rate", "Polling Rate"),
          ":"
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
          modalDetails.pollingRate,
          " Hz"
        ] })
      ] }),
      !profile.pollingrate && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "modal-profile-detail-row", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
            translate("Device_Home_Label_Profiles_Modal_Motion_Sync", "Motion Sync"),
            ":"
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: profile.performance.MotionSyncFlag ? "On" : "Off" })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "modal-profile-detail-row", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "DPI:" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: profile.performance.DpiStage[profile.performance.dpiSelectIndex].value })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "modal-profile-detail-row", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
          translate("Device_Home_Label_Profiles_Modal_Lighting_Effect", "Lighting Effect"),
          ":"
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: modalDetails.lightingEffect })
      ] })
    ] })
  ] });
};
const deviceProfileTile = "";
const ProfileTile = ({
  profile,
  deviceName,
  cloudProfileId,
  isCloudProfile,
  isActive,
  isSynced,
  addLocalProfileFromCloud,
  removeLocalProfile,
  onActivate
}) => {
  const [isInfoModalOpen, setIsInfoModalOpen] = reactExports.useState(false);
  const translate = useTranslate();
  const { saveLocalProfileToCloud: saveLocalProfileToCloud2, removeProfileFromCloud: removeProfileFromCloud2 } = useCloudDataUpdateContext();
  const handleActivationClick = () => {
    if (onActivate)
      onActivate();
  };
  const handleLocalProfileRemovalClick = () => {
    if (removeLocalProfile)
      removeLocalProfile();
  };
  const handleLocalProfileAdditionClick = () => {
    if (addLocalProfileFromCloud)
      addLocalProfileFromCloud();
  };
  const toggleModal = () => setIsInfoModalOpen(!isInfoModalOpen);
  const syncIcon = isCloudProfile ? isSynced ? IconType.CloudCheck : IconType.CloudDisconnected : isSynced ? IconType.CloudCheck : IconType.FloppyDisk;
  const syncIconColor = isCloudProfile ? isSynced ? Color.GreenDark60 : Color.RedDark60 : isSynced ? Color.GreenDark60 : Color.Base20;
  const getStatusIconType = () => {
    if (isCloudProfile) {
      if (isSynced === void 0) {
        return IconType.PlusOutline;
      } else if (isSynced && isActive) {
        return IconType.SuccessCheck;
      } else {
        return IconType.SuccessCheck;
      }
    } else {
      if (isActive) {
        return IconType.SuccessCheck;
      } else {
        return IconType.PlusOutline;
      }
    }
  };
  const getStatusIconColor = () => {
    if (isActive) {
      return Color.GreenDark60;
    } else {
      return Color.Base50;
    }
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "profile-tile", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      "div",
      {
        className: "status-action",
        onClick: () => isCloudProfile ? handleLocalProfileAdditionClick() : handleActivationClick(),
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: getStatusIconType(), color: getStatusIconColor(), size: IconSize.Smaller })
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "profile-name", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: translate(`Cloud_Label_${profile.profileName}`, profile.profileName) }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "profile-status", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: isActive ? "active" : "inactive", children: translate(
      isActive ? "Device_Home_Label_Profiles_Active_Status" : "Device_Home_Label_Profiles_Inactive_Status",
      isActive ? "Active" : "Inactive"
    ) }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "sync-action", onClick: () => {
      console.log("add");
      saveLocalProfileToCloud2(profile, cloudProfileId);
    }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: syncIcon, size: IconSize.Smaller, color: syncIconColor }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "info-action", onClick: toggleModal, children: [
      isInfoModalOpen && /* @__PURE__ */ jsxRuntimeExports.jsx(
        DeviceProfileInfoModal,
        {
          deviceName,
          profile,
          isActive,
          toggleModal
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: IconType.InformationOutline, color: Color.Base50, size: IconSize.Smaller })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      "div",
      {
        className: "remove-action",
        onClick: () => isCloudProfile ? removeProfileFromCloud2(cloudProfileId) : handleLocalProfileRemovalClick(),
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: IconType.Trash, color: Color.Base50, size: IconSize.Smaller })
      }
    )
  ] });
};
class UpdatesServiceClass {
  versionData;
  lastUpdate = Date.now();
  refreshInterval = 60 * 60 * 1e3;
  /**
  *compare version
  * @param versionA number:A version
  * @param versionB number:B version
  * @param exponent number:exponent 
  * return result:
  * 0: is equal to
  * 1: is more than
  * -1: is less than
  */
  compareVersions(versionA, versionB, exponent) {
    exponent = exponent || 2;
    if (versionA === versionB) {
      return 0;
    }
    const length = Math.max(versionA.split(".").length, versionB.split(".").length);
    versionA = this.versionToNumber(versionA, length, exponent);
    versionB = this.versionToNumber(versionB, length, exponent);
    return versionA > versionB ? 1 : versionA < versionB ? -1 : 0;
  }
  versionToNumber(version2, length, exponent) {
    let workingString = version2;
    const metadataArray = workingString.split("+");
    workingString = metadataArray.shift();
    if (metadataArray.length > 0) {
      metadataArray[0].split(".");
    }
    const prereleaseTagArray = workingString.split("-");
    workingString = prereleaseTagArray.shift();
    if (prereleaseTagArray.length > 0) {
      prereleaseTagArray[0];
    }
    const versionNumberArray = workingString.split(".");
    let versionNumber = 0;
    versionNumberArray.forEach(function(value2, index2, array) {
      versionNumber += value2 * Math.pow(10, length * exponent - 1);
      length--;
    });
    return versionNumber.toString();
  }
  async getRemoteVersionManifest() {
    if (this.versionData == null || Date.now() - this.lastUpdate > this.refreshInterval) {
      const versionFileUrl2 = await AppService.getVersionFileUrl();
      this.versionData = await (await fetch(versionFileUrl2)).json();
    }
    return this.versionData;
  }
  async getCore2RemoteVersionManifest() {
    if (this.versionData == null || Date.now() - this.lastUpdate > this.refreshInterval) {
      const versionFileUrl2 = await AppService.getCore2VersionFileUrl();
      this.versionData = await (await fetch(versionFileUrl2)).json();
    }
    return this.versionData;
  }
  async checkIfAppHasUpdates(currentVersion) {
    const versionData = await this.getCore2RemoteVersionManifest();
    const appVersionData = versionData.AppSetting;
    if (appVersionData == null) {
      throw new Error("Unable to find AppSetting from remote version file.");
    }
    if (this.compareVersions(appVersionData.version, currentVersion, 2) == 1) {
      return true;
    }
    return false;
  }
  async getAppUpdaterSetupUrl() {
    const versionData = await this.getCore2RemoteVersionManifest();
    const appVersionData = versionData.AppSetting;
    if (appVersionData == null) {
      throw new Error("Unable to find AppSetting from remote version file.");
    }
    return appVersionData.downloadPath;
  }
  async checkIfDeviceHasUpdatesAvailable(previewDevice) {
    const versionData = await this.getRemoteVersionManifest();
    const devices = [...versionData.Mouse, ...versionData.Keyboard];
    for (let i2 = 0; i2 < devices.length; i2++) {
      const item = devices[i2];
      if (item.SN == previewDevice.SN) {
        if (this.compareVersions(item.version_Wired, previewDevice.version_Wired, 2) == 1) {
          return true;
        }
        if (this.compareVersions(item.version_Wireless, previewDevice.version_Wireless, 2) == 1) {
          return true;
        }
      }
    }
    return false;
  }
  async getDevicesWithUpdatesAvailable(forceUpdates = false) {
    const versionData = await this.getRemoteVersionManifest();
    const updatesAvailable = [];
    for (let deviceIndex = 0; deviceIndex < DeviceService.pluginDeviceData.length; deviceIndex++) {
      const deviceTarget = DeviceService.pluginDeviceData[deviceIndex];
      for (let mouseIndex = 0; mouseIndex < versionData.Mouse.length; mouseIndex++) {
        const item = versionData.Mouse[mouseIndex];
        if (forceUpdates == true) {
          updatesAvailable.push(item);
          continue;
        }
        if (item.SN == deviceTarget.SN) {
          if (this.compareVersions(item.version_Wired, deviceTarget.version_Wired, 2) == 1) {
            item.name = deviceTarget.devicename;
            item.battery = deviceTarget.deviceData?.battery;
            updatesAvailable.push(item);
            continue;
          }
          if (this.compareVersions(item.version_Wireless, deviceTarget.version_Wireless, 2) == 1) {
            item.name = deviceTarget.devicename;
            item.battery = deviceTarget.deviceData?.battery;
            updatesAvailable.push(item);
            continue;
          }
        }
      }
      for (let keyboardIndex = 0; keyboardIndex < versionData.Keyboard.length; keyboardIndex++) {
        const item = versionData.Keyboard[keyboardIndex];
        if (item.SN == deviceTarget.SN) {
          if (this.compareVersions(item.version_Wired, deviceTarget.version_Wired, 2) == 1) {
            item.name = deviceTarget.devicename;
            updatesAvailable.push(item);
            continue;
          }
        }
      }
    }
    return updatesAvailable;
  }
  async getDownloadedFirmwareUpdaters() {
    const response = await IPCService.invoke(MessageChannels.AppChannel.GetDownloadedFirmwareUpdaters);
    if (!response.success) {
      console.error(response);
    }
    return response.data;
  }
  downloadFirmwareUpdaters(items, onDownloadProgress) {
    if (items.length == 0) {
      return;
    }
    let downloadingItems = items.length;
    const downloadProgressHandler = (event) => {
      const data = event.detail;
      onDownloadProgress(data);
      if (data.type == "complete" || data.type == "error") {
        downloadingItems--;
        if (downloadingItems == 0) {
          AppEvent.unsubscribe(EventTypes.DownloadProgress, downloadProgressHandler);
          console.log("unsubscribed from download progress");
        }
      }
    };
    AppEvent.subscribe(EventTypes.DownloadProgress, downloadProgressHandler);
    console.log("subscribed to download progress");
    IPCService.invoke(MessageChannels.AppChannel.BeginFirmwareDownloads, items);
  }
  async downloadAppUpdate(url, onDownloadProgress) {
    const downloadProgressHandler = (event) => {
      const data = event.detail;
      onDownloadProgress(data);
      if (data.type == "complete" || data.type == "error") {
        AppEvent.unsubscribe(EventTypes.DownloadProgress, downloadProgressHandler);
        console.log("unsubscribed from download progress");
      }
    };
    AppEvent.subscribe(EventTypes.DownloadProgress, downloadProgressHandler);
    console.log("subscribed to download progress");
    return AppService.downloadAppUpdate(url);
  }
  async cancelAppUpdaterDownload() {
    return AppService.cancelAppUpdaterDownload();
  }
  async beginAppUpdate(fileName) {
  }
  beginFirmwareUpdates(items, onUpdateProgress) {
    if (items.length == 0) {
      return;
    }
    let updatingItems = items.length;
    const progressHandler = (event) => {
      const data = event.detail;
      onUpdateProgress(data);
      if (data.type == "complete" || data.type == "error") {
        updatingItems--;
        if (updatingItems == 0) {
          AppEvent.unsubscribe(EventTypes.UpdateFW, progressHandler);
          console.log("unsubscribed from update progress");
        }
      }
    };
    AppEvent.subscribe(EventTypes.UpdateFW, progressHandler);
    console.log("subscribed to update progress");
    IPCService.invoke(MessageChannels.AppChannel.BeginFirmwareUpdates, items);
  }
}
const UpdatesService = new UpdatesServiceClass();
const ICONS = {
  gloriousIdLabel: "glorious_id_label.svg",
  facebook: "facebook.png",
  google: "google.png"
};
function SettingsPage() {
  const translate = useTranslate();
  useTranslationsUpdateContext();
  const [appUpdateFailureReason, setAppUpdateFailureReason] = reactExports.useState("");
  const appDataContext = useAppDataContext();
  const {
    setLanguage,
    setOpenOnStartup,
    setMinimizedByDefault,
    setEnableAutomaticUpdates,
    setGlobalStandby,
    setGlobalStandbyTimer,
    setEnableTooltips,
    setTheme
  } = useAppDataUpdateContext();
  const { loginWindow: loginWindow2, logout: logout2, getAllDevicesCloudProfiles: getAllDevicesCloudProfiles2 } = useCloudDataUpdateContext();
  const { userProfile, allDevicesProfiles } = useCloudDataContext();
  const [sleepTimeout, setSleepTimeout] = reactExports.useState(appDataContext.sleeptime);
  const onSetSleepTimeout = (value2) => {
    setSleepTimeout(value2);
    setGlobalStandbyTimer(value2);
  };
  const [activeTab, setActiveTab] = reactExports.useState("settings");
  reactExports.useEffect(() => {
    if (activeTab !== "gloriousid")
      return;
    getAllDevicesCloudProfiles2();
  }, [activeTab]);
  const [appUpdateStatus, setAppUpdateStatus] = reactExports.useState(
    0
    /* CheckingForUpdate */
  );
  reactExports.useEffect(() => {
    refreshAppUpdateStatus();
  }, []);
  const refreshAppUpdateStatus = async () => {
    const hasUpdates = await UpdatesService.checkIfAppHasUpdates(appDataContext.version);
    console.log(hasUpdates);
    setAppUpdateStatus(
      hasUpdates == true ? 2 : 1
      /* UpToDate */
    );
  };
  const [downloadProgress, setDownloadProgress] = reactExports.useState(0);
  reactExports.useEffect(() => {
    if (appUpdateStatus == 3) {
      setDownloadProgress(0);
    } else if (appUpdateStatus == 4) {
      setTimeout(() => {
        AppService.quitApplication();
      }, 1e3);
    }
  }, [appUpdateStatus]);
  const isGoogleLinked = userProfile?.linkedAccounts.includes("google");
  const isMetaLinked = userProfile?.linkedAccounts.includes("facebook");
  console.log(userProfile?.linkedAccounts);
  const linkedAccountTiles = [
    { name: "Google", icon: ICONS.google, isLinked: isGoogleLinked },
    {
      name: "Meta",
      icon: ICONS.facebook,
      isLinked: isMetaLinked
    }
  ];
  const cloudProfileTiles = reactExports.useMemo(() => {
    if (!userProfile || !allDevicesProfiles)
      return;
    const groupedData = allDevicesProfiles?.reduce((groupedDevices, profile) => {
      const deviceName = profile.deviceName;
      (groupedDevices[deviceName] = groupedDevices[deviceName] || []).push(profile);
      return groupedDevices;
    }, {});
    return Object.entries(groupedData).map(([deviceName, profiles]) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "profiles-group", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "device-name-title", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: deviceName }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "profiles-tiles", children: profiles.map((profile, idx) => {
        const profileData = JSON.parse(window.atob(profile.data));
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          ProfileTile,
          {
            profile: profileData,
            deviceName: profile.deviceName,
            cloudProfileId: profile.id,
            isCloudProfile: true,
            isActive: false,
            isSynced: true
          },
          `${profile.deviceName}_${profile.profileName}_${idx}`
        );
      }) })
    ] }, deviceName));
  }, [allDevicesProfiles, userProfile]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "settings-page", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "title", children: [
      activeTab === "settings" ? /* @__PURE__ */ jsxRuntimeExports.jsx(SVGImage, { type: SVGImageType.Core2WordMark }) : void 0,
      activeTab === "gloriousid" ? /* @__PURE__ */ jsxRuntimeExports.jsx(SVGImage, { type: SVGImageType.GloriousIDWordMark }) : void 0
    ] }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("ul", { className: "panel tabs", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { className: "tab", onClick: () => setActiveTab("settings"), children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          Icon,
          {
            type: IconType.CogFilled,
            color: Color.Base50,
            size: IconSize.Small,
            className: "icon tab"
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: translate("Settings_Tab_Settings", "Settings") })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { className: "tab", onClick: () => setActiveTab("gloriousid"), children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          Icon,
          {
            type: IconType.GloriousID,
            color: Color.Base50,
            size: IconSize.Small,
            className: "icon tab"
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: translate("Settings_Tab_Glorious_ID", "Glorious ID") })
      ] })
    ] }),
    activeTab === "settings" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "tab-content settings", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel version-info", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "top", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "version", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "title", children: translate("Settings_Version", "Version") }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: appDataContext.version })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("button", { type: "button", className: "secondary", onClick: () => {
            setAppUpdateStatus(
              0
              /* CheckingForUpdate */
            );
            setTimeout(() => {
              refreshAppUpdateStatus();
            }, 500);
          }, children: translate("Button_CheckForAppUpdates", "Check for Updates") })
        ] }),
        appUpdateStatus == 2 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "update-link", onClick: async () => {
          const url = await UpdatesService.getAppUpdaterSetupUrl();
          setAppUpdateStatus(
            3
            /* DownloadingUpdate */
          );
          await UpdatesService.downloadAppUpdate(url, (update2) => {
            if (update2.type == "start") {
              setDownloadProgress(0);
            } else if (update2.type == "progress") {
              setDownloadProgress(Math.round(update2.value.progress));
            } else if (update2.type == "complete") {
              setDownloadProgress(100);
              setAppUpdateStatus(
                4
                /* Updating */
              );
            } else if (update2.type == "error") {
              setAppUpdateFailureReason("An error occurred during the download.");
              setAppUpdateStatus(
                5
                /* UpdateFailed */
              );
            }
          });
        }, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: IconType.ExclamationPoint, size: IconSize.Small, color: Color.Glorange60 }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "A new version of CORE 2.0 is available!" })
        ] }) : appUpdateStatus == 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "checking-version", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: IconType.CircleArrow, size: IconSize.Small, color: Color.Glorange60 }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Checking for update..." })
        ] }) : appUpdateStatus == 3 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "downloading", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: IconType.UpArrowOutline, size: IconSize.Small, color: Color.Glorange60 }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Downloading..." }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("progress", { min: 0, max: 100, value: downloadProgress }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
            downloadProgress,
            "%"
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("button", { type: "button", onClick: () => {
            UpdatesService.cancelAppUpdaterDownload();
            setAppUpdateStatus(
              5
              /* UpdateFailed */
            );
            setAppUpdateFailureReason("User canceled download");
          }, children: "Cancel Download" })
        ] }) : appUpdateStatus == 5 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "update-failed", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: IconType.CancelCross, size: IconSize.XSmall, color: Color.RedDark60 }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Update Failed:" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: appUpdateFailureReason })
        ] }) : appUpdateStatus == 4 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "updating", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: IconType.CircleArrow, size: IconSize.Small, color: Color.GreenDark60 }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Starting Update..." }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: appUpdateFailureReason })
        ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {})
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel app-config", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: translate(
            "Settings_LaunchOnStartup",
            "Automatically launch CORE on PC startup"
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            ToggleComponent,
            {
              value: appDataContext.startup,
              onChange: async (value2) => {
                setOpenOnStartup(value2);
              }
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: translate("Settings_MinimizedByDefault", "Launch CORE minimized by default") }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            ToggleComponent,
            {
              value: appDataContext.minimize,
              onChange: async (value2) => {
                setMinimizedByDefault(value2);
              }
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: translate("Settings_Tooltips", "CORE tooltips") }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            ToggleComponent,
            {
              value: appDataContext.tooltip,
              onChange: async (value2) => {
                setEnableTooltips(value2);
              }
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: translate("Settings_AutomaticUpdates", "Enable Automatic Updates") }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            ToggleComponent,
            {
              value: appDataContext.update,
              onChange: async (value2) => {
                setEnableAutomaticUpdates(value2);
              }
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel global-device-config", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field global-standby", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: translate("Settings_GlobalStandby", "Global Standby") }),
          " ",
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            ToggleComponent,
            {
              value: appDataContext.sleep,
              onChange: async (value2) => {
                setGlobalStandby(value2);
              }
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field time-slider-control", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: translate("Settings_TurnOffAfterActivity", "Turn off after activity") }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "label", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "input",
                {
                  type: "text",
                  pattern: "([0-9]|∞)+",
                  className: "time-input",
                  value: sleepTimeout < 100 ? sleepTimeout : String.fromCodePoint(8734),
                  onChange: (e) => {
                    if (e.target.value.length == 0) {
                      onSetSleepTimeout(0);
                      return;
                    }
                    const val = parseInt(e.target.value);
                    if (!isNaN(val) && val >= 0 && val <= 100) {
                      onSetSleepTimeout(val);
                    }
                  },
                  onFocus: (e) => e.target.select()
                }
              ),
              "min"
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(RangeComponent, { value: appDataContext.sleeptime, onChange: onSetSleepTimeout }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "result" })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "panel language", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field language", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: translate("Settings_Language", "Language") }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          OptionSelectComponent,
          {
            options: appDataContext.languageOptions.map((item) => {
              return {
                value: item.optionKey,
                label: translate(item.translationKey, item.value)
              };
            }),
            value: appDataContext.language,
            onChange: async (value2) => {
              setLanguage(value2);
            }
          }
        )
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "panel support", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "support", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "label", children: translate("Settings_Support", "Support") }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "actions", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              type: "button",
              className: "hollow",
              onClick: () => {
                const url = "https://www.gloriousgaming.com/pages/product-registration";
                AppService.openHyperlink(url);
              },
              children: translate("Button_ExtendWarranty", "Extend Warranty")
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              type: "button",
              className: "hollow",
              onClick: () => {
                const url = "https://www.gloriousgaming.com/en-ca/pages/support";
                AppService.openHyperlink(url);
              },
              children: translate("Button_SupportHomepage", "Support Homepage")
            }
          )
        ] })
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "panel feature-request", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "label", children: translate(
          "Settings_FeatureRequestPrompt",
          "Is there a feature you would like to request?"
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "actions", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            type: "button",
            className: "hollow",
            onClick: () => {
              const url = "https://gloriouspcgaming.featureupvote.com/";
              AppService.openHyperlink(url);
            },
            children: translate("Button_FeatureUpvote", "Feature Upvote")
          }
        ) })
      ] }) })
    ] }),
    activeTab === "gloriousid" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "tab-content glorious-id", children: [
      !userProfile && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "panel welcome", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: IconType.GloriousID, size: IconSize.Large, color: Color.GIDLogoMark }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { children: translate("Settings_Glorious_Welcome", "Welcome to GLORIOUS ID") }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: translate(
          "Settings_Glorious_Welcome_create_account",
          "Creating an account allows you to do X, Y, Z and so much more!"
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "features", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "feature", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: IconType.SuccessCheck, size: IconSize.Medium, color: Color.GreenDark60 }),
            translate(
              "Settings_Glorious_Welcome_feature_1",
              "Features list X."
            )
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "feature", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: IconType.SuccessCheck, size: IconSize.Medium, color: Color.GreenDark60 }),
            translate(
              "Settings_Glorious_Welcome_feature_2",
              "Features list Y."
            )
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "feature", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: IconType.SuccessCheck, size: IconSize.Medium, color: Color.GreenDark60 }),
            translate(
              "Settings_Glorious_Welcome_feature_3",
              "Features list Z."
            )
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "actions", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              type: "button",
              className: "primary",
              onClick: () => loginWindow2("signIn"),
              children: translate("Settings_Glorious_Welcome_Login", "Login")
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              type: "button",
              className: "secondary",
              onClick: () => loginWindow2("signUp"),
              children: translate("Settings_Glorious_Welcome_Register", "Register")
            }
          )
        ] })
      ] }) }),
      userProfile && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "panel logged-in", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "user-profile", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "profile-data", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("h3", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: IconType.GloriousID, size: IconSize.Medium, color: Color.GIDLogoMark }),
              userProfile.email
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: translate(
              "Settings_Glorious_Welcome_LoggedIn",
              "Welcome to Glorious ID! Creating an account allows you to do X, Y, Z and so much more!"
            ) })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "profile-actions", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                type: "button",
                className: "secondary hollow",
                onClick: () => logout2(),
                children: translate("Settings_Glorious_Welcome_Logout", "Logout")
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(SVGImage, { type: SVGImageType.GloriousIDLabel })
          ] })
        ] }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel cloud-profiles", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "profiles-header", children: /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { children: translate(
            "Settings_Glorious_Cloud_Profiles",
            "Glorious Cloud Profiles"
          ) }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: cloudProfileTiles })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel linked-accounts", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { children: translate(
            "Settings_Glorious_Linked_Accounts_SSO_Account",
            "SSO Account"
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: translate(
            "Settings_Glorious_Linked_Accounts_Connect_Your_Customer_Account",
            "Connect your gloriousgaming.com customer account..."
          ) }),
          linkedAccountTiles.map((account) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "linked-account-row", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "linked-account-tile", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "sso-name", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: IconType.GloriousID, size: IconSize.Medium, color: Color.GIDLogoMark }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: account.name })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `sso-status ${account.isLinked && "active"}`, children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: account.isLinked ? translate(
                "Settings_Glorious_Linked_Connected",
                "Connected"
              ) : translate(
                "Settings_Glorious_Linked_NotConnected",
                "Not Connected"
              ) }) })
            ] }),
            !account.isLinked && /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                type: "button",
                className: "primary",
                onClick: () => loginWindow2("signIn"),
                children: translate(
                  "Settings_Glorious_Linked_Accounts_Connect",
                  "Connect"
                )
              }
            )
          ] }, account.name))
        ] })
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("footer", {})
  ] }) });
}
const rgbsync_page = "";
const devicesDrawer_component = "";
function DevicesDrawer(props) {
  useParams();
  const devicesContext = useDevicesContext();
  useUIContext();
  useUIUpdateContext();
  useTranslate();
  const [rotateHandle, setRotateHandle] = reactExports.useState(false);
  const handleRotate = () => setRotateHandle(!rotateHandle);
  const handleRotationStyle = rotateHandle ? "rotate(0deg)" : "rotate(180deg)";
  const drawerItemStyle = { display: rotateHandle ? "none" : "block" };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "devices", children: [
    devicesContext.devices ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
      " ",
      devicesContext.devices.map((device2, index2) => {
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "drawer-item", style: drawerItemStyle, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { style: { width: 60, height: 24, fontSize: 8 }, children: device2.devicename }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "item-box", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: device2.iconType, size: IconSize.Larger }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("input", { type: "checkbox" })
          ] })
        ] }, device2.SN + index2);
      })
    ] }) : "loading...",
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "drawer-handle", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "handle-box", style: { transform: handleRotationStyle, transition: "transform 150ms ease-out" }, onClick: () => handleRotate(), children: "▶" }) }, "handle")
  ] }) });
}
function RGBSyncArrangement(props) {
  useParams();
  useDevicesContext();
  useUIContext();
  useUIUpdateContext();
  useTranslate();
  return /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: " RGBSyncArrangement " });
}
function RGBSyncBreadcrumbs(props) {
  useParams();
  useUIContext();
  useUIUpdateContext();
  useTranslate();
  return /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: " RGBSyncBreadcrumbs " });
}
function RGBSyncSettings(props) {
  useParams();
  useDevicesContext();
  useUIContext();
  useUIUpdateContext();
  useTranslate();
  return /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: " RGBSyncSettings " });
}
function RGBSyncPage(props) {
  useDevicesContext();
  useTranslate();
  useAppDataContext();
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "rgbsync-page", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "drawer", children: /* @__PURE__ */ jsxRuntimeExports.jsx(DevicesDrawer, {}) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "arrangement", children: /* @__PURE__ */ jsxRuntimeExports.jsx(RGBSyncArrangement, {}) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "breadcrumbs", children: /* @__PURE__ */ jsxRuntimeExports.jsx(RGBSyncBreadcrumbs, {}) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "settings", children: /* @__PURE__ */ jsxRuntimeExports.jsx(RGBSyncSettings, {}) })
  ] }) });
}
const colorPicker_component = "";
function u() {
  return (u = Object.assign || function(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t2 = arguments[r2];
      for (var n2 in t2)
        Object.prototype.hasOwnProperty.call(t2, n2) && (e[n2] = t2[n2]);
    }
    return e;
  }).apply(this, arguments);
}
function c(e, r2) {
  if (null == e)
    return {};
  var t2, n2, o = {}, a = Object.keys(e);
  for (n2 = 0; n2 < a.length; n2++)
    r2.indexOf(t2 = a[n2]) >= 0 || (o[t2] = e[t2]);
  return o;
}
function i(e) {
  var t2 = reactExports.useRef(e), n2 = reactExports.useRef(function(e2) {
    t2.current && t2.current(e2);
  });
  return t2.current = e, n2.current;
}
var s = function(e, r2, t2) {
  return void 0 === r2 && (r2 = 0), void 0 === t2 && (t2 = 1), e > t2 ? t2 : e < r2 ? r2 : e;
}, f = function(e) {
  return "touches" in e;
}, v = function(e) {
  return e && e.ownerDocument.defaultView || self;
}, d = function(e, r2, t2) {
  var n2 = e.getBoundingClientRect(), o = f(r2) ? function(e2, r3) {
    for (var t3 = 0; t3 < e2.length; t3++)
      if (e2[t3].identifier === r3)
        return e2[t3];
    return e2[0];
  }(r2.touches, t2) : r2;
  return { left: s((o.pageX - (n2.left + v(e).pageXOffset)) / n2.width), top: s((o.pageY - (n2.top + v(e).pageYOffset)) / n2.height) };
}, h = function(e) {
  !f(e) && e.preventDefault();
}, m = React.memo(function(o) {
  var a = o.onMove, l2 = o.onKey, s2 = c(o, ["onMove", "onKey"]), m2 = reactExports.useRef(null), g2 = i(a), p2 = i(l2), b2 = reactExports.useRef(null), _ = reactExports.useRef(false), x2 = reactExports.useMemo(function() {
    var e = function(e2) {
      h(e2), (f(e2) ? e2.touches.length > 0 : e2.buttons > 0) && m2.current ? g2(d(m2.current, e2, b2.current)) : t2(false);
    }, r2 = function() {
      return t2(false);
    };
    function t2(t3) {
      var n2 = _.current, o2 = v(m2.current), a2 = t3 ? o2.addEventListener : o2.removeEventListener;
      a2(n2 ? "touchmove" : "mousemove", e), a2(n2 ? "touchend" : "mouseup", r2);
    }
    return [function(e2) {
      var r3 = e2.nativeEvent, n2 = m2.current;
      if (n2 && (h(r3), !function(e3, r4) {
        return r4 && !f(e3);
      }(r3, _.current) && n2)) {
        if (f(r3)) {
          _.current = true;
          var o2 = r3.changedTouches || [];
          o2.length && (b2.current = o2[0].identifier);
        }
        n2.focus(), g2(d(n2, r3, b2.current)), t2(true);
      }
    }, function(e2) {
      var r3 = e2.which || e2.keyCode;
      r3 < 37 || r3 > 40 || (e2.preventDefault(), p2({ left: 39 === r3 ? 0.05 : 37 === r3 ? -0.05 : 0, top: 40 === r3 ? 0.05 : 38 === r3 ? -0.05 : 0 }));
    }, t2];
  }, [p2, g2]), C2 = x2[0], E2 = x2[1], H2 = x2[2];
  return reactExports.useEffect(function() {
    return H2;
  }, [H2]), React.createElement("div", u({}, s2, { onTouchStart: C2, onMouseDown: C2, className: "react-colorful__interactive", ref: m2, onKeyDown: E2, tabIndex: 0, role: "slider" }));
}), g = function(e) {
  return e.filter(Boolean).join(" ");
}, p = function(r2) {
  var t2 = r2.color, n2 = r2.left, o = r2.top, a = void 0 === o ? 0.5 : o, l2 = g(["react-colorful__pointer", r2.className]);
  return React.createElement("div", { className: l2, style: { top: 100 * a + "%", left: 100 * n2 + "%" } }, React.createElement("div", { className: "react-colorful__pointer-fill", style: { backgroundColor: t2 } }));
}, b = function(e, r2, t2) {
  return void 0 === r2 && (r2 = 0), void 0 === t2 && (t2 = Math.pow(10, r2)), Math.round(t2 * e) / t2;
}, y = function(e) {
  var r2 = e.s, t2 = e.v, n2 = e.a, o = (200 - r2) * t2 / 100;
  return { h: b(e.h), s: b(o > 0 && o < 200 ? r2 * t2 / 100 / (o <= 100 ? o : 200 - o) * 100 : 0), l: b(o / 2), a: b(n2, 2) };
}, q = function(e) {
  var r2 = y(e);
  return "hsl(" + r2.h + ", " + r2.s + "%, " + r2.l + "%)";
}, I = function(e) {
  var r2 = e.h, t2 = e.s, n2 = e.v, o = e.a;
  r2 = r2 / 360 * 6, t2 /= 100, n2 /= 100;
  var a = Math.floor(r2), l2 = n2 * (1 - t2), u2 = n2 * (1 - (r2 - a) * t2), c2 = n2 * (1 - (1 - r2 + a) * t2), i2 = a % 6;
  return { r: b(255 * [n2, u2, l2, l2, c2, n2][i2]), g: b(255 * [c2, n2, n2, u2, l2, l2][i2]), b: b(255 * [l2, l2, c2, n2, n2, u2][i2]), a: b(o, 2) };
}, L = function(e) {
  var r2 = e.r, t2 = e.g, n2 = e.b, o = e.a, a = Math.max(r2, t2, n2), l2 = a - Math.min(r2, t2, n2), u2 = l2 ? a === r2 ? (t2 - n2) / l2 : a === t2 ? 2 + (n2 - r2) / l2 : 4 + (r2 - t2) / l2 : 0;
  return { h: b(60 * (u2 < 0 ? u2 + 6 : u2)), s: b(a ? l2 / a * 100 : 0), v: b(a / 255 * 100), a: o };
}, S = React.memo(function(r2) {
  var t2 = r2.hue, n2 = r2.onChange, o = g(["react-colorful__hue", r2.className]);
  return React.createElement("div", { className: o }, React.createElement(m, { onMove: function(e) {
    n2({ h: 360 * e.left });
  }, onKey: function(e) {
    n2({ h: s(t2 + 360 * e.left, 0, 360) });
  }, "aria-label": "Hue", "aria-valuenow": b(t2), "aria-valuemax": "360", "aria-valuemin": "0" }, React.createElement(p, { className: "react-colorful__hue-pointer", left: t2 / 360, color: q({ h: t2, s: 100, v: 100, a: 1 }) })));
}), T = React.memo(function(r2) {
  var t2 = r2.hsva, n2 = r2.onChange, o = { backgroundColor: q({ h: t2.h, s: 100, v: 100, a: 1 }) };
  return React.createElement("div", { className: "react-colorful__saturation", style: o }, React.createElement(m, { onMove: function(e) {
    n2({ s: 100 * e.left, v: 100 - 100 * e.top });
  }, onKey: function(e) {
    n2({ s: s(t2.s + 100 * e.left, 0, 100), v: s(t2.v - 100 * e.top, 0, 100) });
  }, "aria-label": "Color", "aria-valuetext": "Saturation " + b(t2.s) + "%, Brightness " + b(t2.v) + "%" }, React.createElement(p, { className: "react-colorful__saturation-pointer", top: 1 - t2.v / 100, left: t2.s / 100, color: q(t2) })));
}), F = function(e, r2) {
  if (e === r2)
    return true;
  for (var t2 in e)
    if (e[t2] !== r2[t2])
      return false;
  return true;
};
function Y(e, t2, l2) {
  var u2 = i(l2), c2 = reactExports.useState(function() {
    return e.toHsva(t2);
  }), s2 = c2[0], f2 = c2[1], v2 = reactExports.useRef({ color: t2, hsva: s2 });
  reactExports.useEffect(function() {
    if (!e.equal(t2, v2.current.color)) {
      var r2 = e.toHsva(t2);
      v2.current = { hsva: r2, color: t2 }, f2(r2);
    }
  }, [t2, e]), reactExports.useEffect(function() {
    var r2;
    F(s2, v2.current.hsva) || e.equal(r2 = e.fromHsva(s2), v2.current.color) || (v2.current = { hsva: s2, color: r2 }, u2(r2));
  }, [s2, e, u2]);
  var d2 = reactExports.useCallback(function(e2) {
    f2(function(r2) {
      return Object.assign({}, r2, e2);
    });
  }, []);
  return [s2, d2];
}
var V = "undefined" != typeof window ? reactExports.useLayoutEffect : reactExports.useEffect, $ = function() {
  return "undefined" != typeof __webpack_nonce__ ? __webpack_nonce__ : void 0;
}, J = /* @__PURE__ */ new Map(), Q = function(e) {
  V(function() {
    var r2 = e.current ? e.current.ownerDocument : document;
    if (void 0 !== r2 && !J.has(r2)) {
      var t2 = r2.createElement("style");
      t2.innerHTML = `.react-colorful{position:relative;display:flex;flex-direction:column;width:200px;height:200px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.react-colorful__saturation{position:relative;flex-grow:1;border-color:transparent;border-bottom:12px solid #000;border-radius:8px 8px 0 0;background-image:linear-gradient(0deg,#000,transparent),linear-gradient(90deg,#fff,hsla(0,0%,100%,0))}.react-colorful__alpha-gradient,.react-colorful__pointer-fill{content:"";position:absolute;left:0;top:0;right:0;bottom:0;pointer-events:none;border-radius:inherit}.react-colorful__alpha-gradient,.react-colorful__saturation{box-shadow:inset 0 0 0 1px rgba(0,0,0,.05)}.react-colorful__alpha,.react-colorful__hue{position:relative;height:24px}.react-colorful__hue{background:linear-gradient(90deg,red 0,#ff0 17%,#0f0 33%,#0ff 50%,#00f 67%,#f0f 83%,red)}.react-colorful__last-control{border-radius:0 0 8px 8px}.react-colorful__interactive{position:absolute;left:0;top:0;right:0;bottom:0;border-radius:inherit;outline:none;touch-action:none}.react-colorful__pointer{position:absolute;z-index:1;box-sizing:border-box;width:28px;height:28px;transform:translate(-50%,-50%);background-color:#fff;border:2px solid #fff;border-radius:50%;box-shadow:0 2px 4px rgba(0,0,0,.2)}.react-colorful__interactive:focus .react-colorful__pointer{transform:translate(-50%,-50%) scale(1.1)}.react-colorful__alpha,.react-colorful__alpha-pointer{background-color:#fff;background-image:url('data:image/svg+xml;charset=utf-8,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill-opacity=".05"><path d="M8 0h8v8H8zM0 8h8v8H0z"/></svg>')}.react-colorful__saturation-pointer{z-index:3}.react-colorful__hue-pointer{z-index:2}`, J.set(r2, t2);
      var n2 = $();
      n2 && t2.setAttribute("nonce", n2), r2.head.appendChild(t2);
    }
  }, []);
}, U = function(t2) {
  var n2 = t2.className, o = t2.colorModel, a = t2.color, l2 = void 0 === a ? o.defaultColor : a, i2 = t2.onChange, s2 = c(t2, ["className", "colorModel", "color", "onChange"]), f2 = reactExports.useRef(null);
  Q(f2);
  var v2 = Y(o, l2, i2), d2 = v2[0], h2 = v2[1], m2 = g(["react-colorful", n2]);
  return React.createElement("div", u({}, s2, { ref: f2, className: m2 }), React.createElement(T, { hsva: d2, onChange: h2 }), React.createElement(S, { hue: d2.h, onChange: h2, className: "react-colorful__last-control" }));
}, Me = { defaultColor: { r: 0, g: 0, b: 0 }, toHsva: function(e) {
  return L({ r: e.r, g: e.g, b: e.b, a: 1 });
}, fromHsva: function(e) {
  return { r: (r2 = I(e)).r, g: r2.g, b: r2.b };
  var r2;
}, equal: F }, Ne = function(r2) {
  return React.createElement(U, u({}, r2, { colorModel: Me }));
};
const DEFAULT_COLOR = RGBAColor.fromRGB(255, 0, 0);
const DefaultSwatches = [
  RGBAColor.fromHex("#FF1E00"),
  RGBAColor.fromHex("#040AFF"),
  RGBAColor.fromHex("#1DFF00"),
  RGBAColor.fromHex("#BA01FF"),
  RGBAColor.fromHex("#FFF000"),
  RGBAColor.fromHex("#FFFFFF")
];
function ColorPickerComponent(props) {
  const { value: value2, onChange, userSwatches, expanded, suspendUpdates } = props;
  const translate = useTranslate();
  const initialColor = value2 == null ? DEFAULT_COLOR : value2;
  const [selectedColor, setSelectedColor] = reactExports.useState(initialColor);
  const [selectedSwatch, setSelectedSwatch] = reactExports.useState(-1);
  const [swatches, setSwatches] = reactExports.useState(DefaultSwatches);
  const [targetColor, setTargetColor] = reactExports.useState(initialColor);
  const [targetHex, setTargetHex] = reactExports.useState(initialColor.toHex());
  const [targetRed, setTargetRed] = reactExports.useState(initialColor.r);
  const [targetGreen, setTargetGreen] = reactExports.useState(initialColor.g);
  const [targeBlue, setTargetBlue] = reactExports.useState(initialColor.b);
  reactExports.useRef(false);
  reactExports.useRef(null);
  const onMouseUpdate = (value22) => {
    const color2 = RGBAColor.fromRGB(value22.r, value22.g, value22.b);
    setTargetHex(color2.toHex());
    setTargetRed(color2.r);
    setTargetGreen(color2.g);
    setTargetBlue(color2.b);
    setTargetColor(color2);
    setSelectedColor(color2);
  };
  reactExports.useEffect(() => {
    if (onChange != null) {
      onChange(selectedColor);
    }
  }, [selectedColor]);
  reactExports.useEffect(() => {
    if (value2 == null) {
      return;
    }
    setTargetColor(value2);
    setTargetHex(value2.toHex());
    setTargetRed(value2.r);
    setTargetGreen(value2.g);
    setTargetBlue(value2.b);
  }, [value2]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { "data-color-picker": true, className: expanded == true ? "expanded" : "", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "active-color", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: translate("Device_Lighting_Label_ActiveColor", "Active Color") }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field hex", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "label", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "color-preview", style: { backgroundColor: targetColor?.toHex() } }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "input",
          {
            type: "text",
            value: targetHex,
            name: "hex",
            onChange: (event) => {
              let value22 = event.currentTarget.value.toUpperCase();
              if (value22 == "") {
                value22 = "#";
              }
              if (value22.length > 7) {
                value22 = value22.substring(0, 7);
              }
              setTargetHex(value22);
              const isFullHexColorRegex = /^#[0-9A-F]{6}$/i;
              const isHexColor = isFullHexColorRegex.test(value22);
              if (isHexColor) {
                const hexColor = RGBAColor.fromHex(value22);
                setSelectedColor(hexColor);
              }
            }
          }
        )
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "integer-values", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field red", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "label", children: translate("Device_Lighting_Label_Red", "Red") }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              value: targetRed,
              onChange: (event) => {
                const stringValue = event.target.value;
                const intValue = parseInt(stringValue);
                if (isNaN(intValue)) {
                  return;
                }
                setTargetRed(intValue);
                if (intValue < 0 || intValue > 255) {
                  return;
                }
                const color2 = structuredClone(selectedColor);
                color2.r = intValue;
                setSelectedColor(color2);
              }
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field green", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "label", children: translate("Device_Lighting_Label_Green", "Green") }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              value: targetGreen,
              onChange: (event) => {
                const stringValue = event.target.value;
                const intValue = parseInt(stringValue);
                if (isNaN(intValue)) {
                  return;
                }
                setTargetGreen(intValue);
                if (intValue < 0 || intValue > 255) {
                  return;
                }
                const color2 = structuredClone(selectedColor);
                color2.g = intValue;
                setSelectedColor(color2);
              }
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field blue", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "label", children: translate("Device_Lighting_Label_Blue", "Blue") }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              value: targeBlue,
              onChange: (event) => {
                const stringValue = event.target.value;
                const intValue = parseInt(stringValue);
                if (isNaN(intValue)) {
                  return;
                }
                setTargetBlue(intValue);
                if (intValue < 0 || intValue > 255) {
                  return;
                }
                const color2 = structuredClone(selectedColor);
                color2.b = intValue;
                setSelectedColor(color2);
              }
            }
          )
        ] })
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("header", { className: "color-picker-heading", children: translate("Device_Lighting_Label_ColorPicker", "Color Picker") }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Ne,
      {
        color: { r: selectedColor.r, g: selectedColor.g, b: selectedColor.b },
        onChange: onMouseUpdate
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "swatches", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: translate("Device_Lighting_Label_Swatches", "Swatches") }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("ul", { className: "items", children: swatches.map((swatch, i2) => {
        let classes = "swatch";
        if (selectedSwatch == i2) {
          classes += " selected";
        }
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          "div",
          {
            style: { backgroundColor: swatch.toHex() },
            className: classes,
            onClick: () => {
              setSelectedSwatch(i2);
              onMouseUpdate(swatches[i2]);
            }
          },
          i2
        );
      }) })
    ] })
  ] });
}
const header = "_header_fylt2_1";
const body = "_body_fylt2_19";
const footer = "_footer_fylt2_29";
const style$2 = {
  header,
  body,
  footer
};
function ContentDialogComponent({ open, actions, title, icon, children, className }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("dialog", { open, className: `modal${className == null ? "" : ` ${className}`}`, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("header", { className: style$2["header"], children: [
      icon,
      title
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("section", { className: style$2["body"], children }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("footer", { className: style$2["footer"], children: actions })
  ] });
}
const editableList_component = "";
function EditableListComponent(props) {
  const {
    className,
    items,
    onButtonClick,
    onClick,
    onChange,
    editIcon,
    removeIcon,
    noItemsMessage,
    externalEditor,
    selectedID
  } = props;
  const [_items, set_items] = reactExports.useState([]);
  const [showInputIndex, setShowInputIndex] = reactExports.useState(-1);
  reactExports.useEffect(() => {
    console.log("selectedId", selectedID);
    set_items(items);
  }, [items, selectedID]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `editable-list${className == null ? "" : " " + className}`, children: _items == null || _items.length == 0 ? noItemsMessage ?? /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "No Items" }) : _items.map((item, i2) => {
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "li",
      {
        className: _items[i2].id == selectedID ? "selected" : void 0,
        onClick: () => {
          if (onClick != null) {
            onClick(_items[i2], i2);
          }
        },
        children: [
          showInputIndex == i2 ? /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              defaultValue: item.label,
              autoFocus: true,
              onKeyDown: (event) => {
                if (event.code == "Tab" || event.code == "Enter") {
                  event.stopPropagation();
                  event.preventDefault();
                  setShowInputIndex(-1);
                  if (onChange != null) {
                    onChange(event.currentTarget.value, item);
                  }
                  return;
                }
              },
              onKeyUp: (event) => {
                if (event.code != "Tab" && event.code != "Enter") {
                  item.label = event.currentTarget.value;
                }
              }
            }
          ) : /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", title: item.label ?? "No Label", children: item.label ?? "No Label" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "actions", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                className: "edit",
                title: showInputIndex == i2 ? "Save" : "Edit",
                onClick: () => {
                  if (!externalEditor) {
                    if (showInputIndex == -1) {
                      setShowInputIndex(i2);
                    } else {
                      setShowInputIndex(-1);
                    }
                  }
                  if (onButtonClick) {
                    onButtonClick("edit", item, i2);
                  }
                },
                children: editIcon != null ? editIcon : showInputIndex != i2 ? /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: IconType.Edit, size: IconSize.XSmall, color: Color.Base20 }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: IconType.SuccessCheck, size: IconSize.XSmall, color: Color.Base20, hoverColor: Color.Glorange60 })
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                className: "remove",
                title: "Delete",
                onClick: () => {
                  if (onButtonClick == null) {
                    return;
                  }
                  onButtonClick("remove", item, i2);
                },
                children: removeIcon != null ? removeIcon : /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: IconType.Trash, size: IconSize.XSmall, color: Color.Base20 })
              }
            )
          ] })
        ]
      },
      i2
    );
  }) });
}
class MacroItemEntry {
  inputName;
  startTime;
  endTime;
  get description() {
    let inputValue = this.inputName.replace("Key", "");
    inputValue = inputValue.replace("Left", "");
    inputValue = inputValue.replace("Right", "");
    inputValue = inputValue.replace(/([A-Z]|(?<!F|\d)\d+)/g, " $1").trim();
    let label = this.inputName.replace(/([A-Z]|(?<!F|\d)\d+)/g, " $1").trim();
    return { inputValue, label };
  }
  constructor(inputName, startTime, endTime) {
    this.inputName = inputName;
    this.startTime = startTime;
    this.endTime = endTime;
  }
}
class MacroItem {
  targetIndex = -1;
  data = [];
}
class MacroContent {
  static getSize(macroContent) {
    return Object.getOwnPropertyNames(macroContent).length;
  }
}
class MacroRecord extends AppRecord {
  name = "New Macro";
  value = 0;
  content = {};
  m_Identifier = "1";
  constructor(data) {
    super();
    this.content = data?.content ?? this.content;
    this.m_Identifier = data?.m_Identifier ?? this.m_Identifier;
    this.name = data?.name ?? this.name;
    this.value = data?.value ?? this.value;
    this._id = data?._id ?? this._id;
  }
}
let macroRecords = [];
let lightingLayoutRecords = [];
async function saveMacroRecord(record) {
  if (record.value < 0) {
    const records = await getMacros();
    const values = records.map((x2) => x2.value);
    let v2 = 0;
    for (; v2 < values.length; ++v2) {
      if (!values.includes(v2))
        break;
    }
    record.value = v2;
    return addMacroRecord(record);
  }
  const existingRecord = await getMacro(record.value);
  if (existingRecord == null) {
    return addMacroRecord(record);
  }
  return updateMacroRecord(record);
}
async function addMacroRecord(record) {
  await DataService.insertMacro(record);
}
async function updateMacroRecord(record) {
  const records = await getMacroRecords();
  for (let i2 = 0; i2 < records.length; i2++) {
    if (records[i2].value == record.value) {
      Object.assign(records[i2], record);
    }
  }
  await DataService.updateMacro(record.value, record);
}
async function getMacros(values) {
  const records = macroRecords.length == 0 ? await getMacroRecords() : macroRecords;
  if (values == null)
    return records;
  const filtered = records.filter((x2) => values.includes(x2.value));
  return filtered;
}
async function getMacroRecords() {
  const macros = await DataService.getMacro();
  macros.sort((a, b2) => a.value - b2.value);
  console.log(macros);
  const records = macros.map((x2) => {
    const record = new MacroRecord(x2);
    if (Array.isArray(x2.content) && x2.content.length == 0)
      record.content = {};
    return record;
  });
  console.log("getMacroFromDB", records);
  macroRecords = records;
  return macroRecords;
}
async function getMacro(value2) {
  const records = await getMacros();
  return records.find((x2) => x2.value == value2) ?? null;
}
async function deleteMacroRecord(value2) {
  await DataService.DeleteMacro(value2);
}
async function addLightingLayoutRecord(record) {
  lightingLayoutRecords.push(record);
  const compareData = (
    // copied from legacy code
    {
      "_id": "S21tw2mhN6A65aVZnS"
    }
  );
  DataService.updateLayoutAlldata(compareData, lightingLayoutRecords);
}
async function updateLightingLayoutRecord(record) {
  let existingLayout = null;
  for (let i2 = 0; i2 < lightingLayoutRecords.length; i2++) {
    if (lightingLayoutRecords[i2].SN == record.SN && lightingLayoutRecords[i2].value == record.value) {
      existingLayout = lightingLayoutRecords[i2];
    }
  }
  if (existingLayout == null) {
    addLightingLayoutRecord(record);
    return;
  } else {
    Object.assign(existingLayout, record);
  }
  const compareData = (
    // copied from legacy code
    {
      "_id": "S21tw2mhN6A65aVZnS"
    }
  );
  DataService.updateLayoutAlldata(compareData, lightingLayoutRecords);
}
async function getLightingLayoutRecords() {
  const allLightingData = await DataService.getLayout();
  const layouts = allLightingData.AllData;
  lightingLayoutRecords = layouts;
  return lightingLayoutRecords;
}
async function deleteLightingLayoutRecord(SN, value2) {
  let recordIndex = -1;
  for (let i2 = 0; i2 < lightingLayoutRecords.length; i2++) {
    if (lightingLayoutRecords[i2].SN == SN && lightingLayoutRecords[i2].value == value2) {
      recordIndex = i2;
    }
  }
  if (recordIndex > -1) {
    lightingLayoutRecords.splice(recordIndex, 1);
  }
  const compareData = (
    // copied from legacy code
    {
      "_id": "S21tw2mhN6A65aVZnS"
    }
  );
  DataService.updateLayoutAlldata(compareData, lightingLayoutRecords);
}
class RecordsState {
  macros = [];
  lightingLayouts = [];
}
const RecordsDisplayContext = reactExports.createContext(new RecordsState());
const RecordsUpdateContext = reactExports.createContext({});
function useRecordsContext() {
  return reactExports.useContext(RecordsDisplayContext);
}
function useRecordsUpdateContext() {
  return reactExports.useContext(RecordsUpdateContext);
}
function RecordsContext({ children }) {
  const stateReference = reactExports.useRef(new RecordsState());
  const [displayState, setDisplayState] = reactExports.useState(stateReference.current);
  reactExports.useEffect(() => {
    getMacros2();
    getLightingLayouts();
  }, []);
  const getMacros2 = async () => {
    const records = await getMacroRecords();
    stateReference.current.macros = records;
    setDisplayState(cloneState(stateReference.current));
  };
  const updateMacro = async (macro) => {
    await saveMacroRecord(macro);
    await getMacros2();
  };
  const deleteMacro = async (value2) => {
    await deleteMacroRecord(value2);
    await getMacros2();
  };
  const updateLightingLayout = async (lightingLayout) => {
    await updateLightingLayoutRecord(lightingLayout);
  };
  const deleteLightingLayout = async (SN, value2) => {
    await deleteLightingLayoutRecord(SN, value2);
  };
  const getLightingLayouts = async () => {
    const records = await getLightingLayoutRecords();
    stateReference.current.lightingLayouts = records;
    setDisplayState(cloneState(stateReference.current));
  };
  const cloneState = (toClone) => {
    const newState = new RecordsState();
    newState.macros = toClone.macros;
    newState.lightingLayouts = toClone.lightingLayouts;
    return newState;
  };
  const updateFunctions = {
    getMacros: getMacros2,
    updateMacro,
    deleteMacro,
    getLightingLayouts,
    updateLightingLayout,
    deleteLightingLayout
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(RecordsDisplayContext.Provider, { value: displayState, children: /* @__PURE__ */ jsxRuntimeExports.jsx(RecordsUpdateContext.Provider, { value: updateFunctions, children }) });
}
class LayoutNode {
  translationKey;
  isKey = true;
  isRotary = false;
  isSlider = false;
  isButton = false;
  hasLight = true;
  canBind = true;
  // canSetLighting: boolean = true; // some lighting is only for batteries. shouldn't render if it can't be set, but this might be useful?
  position = { x: 0, y: 0 };
  size;
  lines = [];
  terminationPoint = { x: 0, y: 0 };
  lineSide = "right";
  keybindArrayIndex = -1;
  hideUI = false;
  quickKeyIds = [
    6
    /* All */
  ];
  constructor(translationKey, options) {
    this.translationKey = translationKey;
    Object.assign(this, options);
    if (!this.isKey && !this.isRotary && !this.isSlider && !this.isButton) {
      this.canBind = false;
    }
  }
}
var QuickKeyId = /* @__PURE__ */ ((QuickKeyId2) => {
  QuickKeyId2[QuickKeyId2["WASD"] = 0] = "WASD";
  QuickKeyId2[QuickKeyId2["Numbers"] = 1] = "Numbers";
  QuickKeyId2[QuickKeyId2["Sidelights"] = 2] = "Sidelights";
  QuickKeyId2[QuickKeyId2["Modifiers"] = 3] = "Modifiers";
  QuickKeyId2[QuickKeyId2["FKeys"] = 4] = "FKeys";
  QuickKeyId2[QuickKeyId2["Arrows"] = 5] = "Arrows";
  QuickKeyId2[QuickKeyId2["All"] = 6] = "All";
  return QuickKeyId2;
})(QuickKeyId || {});
const QuickKeyIdGroupMap = /* @__PURE__ */ new Map([
  [0, [
    6,
    0
    /* WASD */
  ]],
  [1, [
    6,
    1
    /* Numbers */
  ]],
  [2, [
    6,
    2
    /* Sidelights */
  ]],
  [3, [
    6,
    3
    /* Modifiers */
  ]],
  [4, [
    6,
    4
    /* FKeys */
  ]],
  [5, [
    6,
    5
    /* Arrows */
  ]]
]);
const GMMKNumpadLayout = {
  nodeBaseOffset: { x: 590, y: 290 },
  selectedNodePosition: { x: 400, y: 60 },
  layoutNodes: [
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -175, y: 5 },
      size: { width: 90, height: 100 },
      isKey: false
    }),
    new LayoutNode("NumLock", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 5, y: 5 }, size: { width: 90, height: 90 } }),
    new LayoutNode("NumpadDivide", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 100, y: 5 }, size: { width: 90, height: 90 } }),
    new LayoutNode("NumpadMultiply", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 195, y: 5 }, size: { width: 90, height: 90 } }),
    new LayoutNode("NumpadSubtract", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 290, y: 5 }, size: { width: 90, height: 90 } }),
    new LayoutNode("ROTARY ENCODER", {
      position: { x: 428, y: 10 },
      size: { width: 90, height: 90 },
      hasLight: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 600, y: 5 },
      size: { width: 90, height: 100 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -175, y: 100 },
      size: { width: 90, height: 100 },
      isKey: false
    }),
    new LayoutNode("Numpad7", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 5, y: 100 }, size: { width: 90, height: 90 } }),
    new LayoutNode("Numpad8", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 100, y: 100 }, size: { width: 90, height: 90 } }),
    new LayoutNode("Numpad9", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 195, y: 100 }, size: { width: 90, height: 90 } }),
    new LayoutNode("NumpadAdd", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 290, y: 100 }, size: { width: 90, height: 180 } }),
    new LayoutNode("slider", {
      position: { x: 420, y: 180 },
      size: { width: 105, height: 65 },
      isSlider: true,
      hasLight: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 600, y: 100 },
      size: { width: 90, height: 100 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -175, y: 195 },
      size: { width: 90, height: 100 },
      isKey: false
    }),
    new LayoutNode("Numpad4", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 5, y: 195 }, size: { width: 90, height: 90 } }),
    new LayoutNode("Numpad5", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 100, y: 195 }, size: { width: 90, height: 90 } }),
    new LayoutNode("Numpad6", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 195, y: 195 }, size: { width: 90, height: 90 } }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 600, y: 195 },
      size: { width: 90, height: 100 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -175, y: 290 },
      size: { width: 90, height: 100 },
      isKey: false
    }),
    new LayoutNode("Numpad1", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 5, y: 290 }, size: { width: 90, height: 90 } }),
    new LayoutNode("Numpad2", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 100, y: 290 }, size: { width: 90, height: 90 } }),
    new LayoutNode("Numpad3", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 195, y: 290 }, size: { width: 90, height: 90 } }),
    new LayoutNode("NumpadEnter", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 290, y: 290 }, size: { width: 90, height: 180 } }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 600, y: 290 },
      size: { width: 90, height: 100 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -175, y: 385 },
      size: { width: 90, height: 100 },
      isKey: false
    }),
    new LayoutNode("Numpad0", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 5, y: 385 }, size: { width: 180, height: 90 } }),
    new LayoutNode("NumpadDecimal", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 195, y: 385 }, size: { width: 90, height: 90 } }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 600, y: 385 },
      size: { width: 90, height: 100 },
      isKey: false
    })
  ]
};
const GMMKPROLayout = {
  nodeBaseOffset: { x: 265, y: 297 },
  selectedNodePosition: { x: 240, y: 100 },
  layoutNodes: [
    //"Escape", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "PrintScreen", "ScrollWheel"/"ROTARY ENCODER",
    new LayoutNode("Escape", { position: { x: 0, y: 0 } }),
    new LayoutNode("F1", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 90, y: 0 } }),
    new LayoutNode("F2", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 163, y: 0 } }),
    new LayoutNode("F3", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 235, y: 0 } }),
    new LayoutNode("F4", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 305, y: 0 } }),
    new LayoutNode("F5", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 390, y: 0 } }),
    new LayoutNode("F6", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 463, y: 0 } }),
    new LayoutNode("F7", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 535, y: 0 } }),
    new LayoutNode("F8", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 605, y: 0 } }),
    new LayoutNode("F9", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 690, y: 0 } }),
    new LayoutNode("F10", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 763, y: 0 } }),
    new LayoutNode("F11", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 835, y: 0 } }),
    new LayoutNode("F12", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 905, y: 0 } }),
    new LayoutNode("PrintScreen", { position: { x: 995, y: 0 } }),
    new LayoutNode("ROTARY ENCODER", { position: { x: 1100, y: 5 }, hasLight: false }),
    //"Backquote", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "Digit0", "Minus", "Equal", "Backspace", "End",
    new LayoutNode("Backquote", { position: { x: 0, y: 87 } }),
    new LayoutNode("Digit1", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 70, y: 87 } }),
    new LayoutNode("Digit2", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 140, y: 87 } }),
    new LayoutNode("Digit3", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 210, y: 87 } }),
    new LayoutNode("Digit4", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 280, y: 87 } }),
    new LayoutNode("Digit5", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 350, y: 87 } }),
    new LayoutNode("Digit6", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 420, y: 87 } }),
    new LayoutNode("Digit7", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 490, y: 87 } }),
    new LayoutNode("Digit8", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 563, y: 87 } }),
    new LayoutNode("Digit9", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 635, y: 87 } }),
    new LayoutNode("Digit0", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 710, y: 87 } }),
    new LayoutNode("Minus", { position: { x: 780, y: 87 } }),
    new LayoutNode("Equal", { position: { x: 855, y: 87 } }),
    new LayoutNode("Backspace", { position: { x: 930, y: 87 }, size: { width: 130, height: 65 } }),
    new LayoutNode("End", { position: { x: 1100, y: 87 } }),
    //"Tab", "KeyQ", "KeyW", "KeyE", "KeyR", "KeyT", "KeyY", "KeyU", "KeyI", "KeyO", "KeyP", "BracketLeft", "BracketRight", "Backslash", "PageUp",
    new LayoutNode("Tab", { position: { x: 0, y: 157 }, size: { width: 100, height: 65 } }),
    new LayoutNode("KeyQ", { position: { x: 105, y: 157 } }),
    new LayoutNode("KeyW", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 177, y: 157 } }),
    new LayoutNode("KeyE", { position: { x: 248, y: 157 } }),
    new LayoutNode("KeyR", { position: { x: 320, y: 157 } }),
    new LayoutNode("KeyT", { position: { x: 393, y: 157 } }),
    new LayoutNode("KeyY", { position: { x: 465, y: 157 } }),
    new LayoutNode("KeyU", { position: { x: 533, y: 157 } }),
    new LayoutNode("KeyI", { position: { x: 603, y: 157 } }),
    new LayoutNode("KeyO", { position: { x: 673, y: 157 } }),
    new LayoutNode("KeyP", { position: { x: 745, y: 157 } }),
    new LayoutNode("BracketLeft", { position: { x: 815, y: 157 } }),
    new LayoutNode("BracketRight", { position: { x: 885, y: 157 } }),
    new LayoutNode("Backslash", { position: { x: 960, y: 157 }, size: { width: 100, height: 65 } }),
    new LayoutNode("PageUp", { position: { x: 1100, y: 157 } }),
    //"CapsLock", "KeyA", "KeyS", "KeyD", "KeyF", "KeyG", "KeyH", "KeyJ", "KeyK", "KeyL", "Semicolon", "Quote", "Enter", "PageDown",
    new LayoutNode("CapsLock", { position: { x: 0, y: 228 }, size: { width: 120, height: 65 } }),
    new LayoutNode("KeyA", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 125, y: 228 } }),
    new LayoutNode("KeyS", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 195, y: 228 } }),
    new LayoutNode("KeyD", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 265, y: 228 } }),
    new LayoutNode("KeyF", { position: { x: 340, y: 228 } }),
    new LayoutNode("KeyG", { position: { x: 410, y: 228 } }),
    new LayoutNode("KeyH", { position: { x: 478, y: 228 } }),
    new LayoutNode("KeyJ", { position: { x: 550, y: 228 } }),
    new LayoutNode("KeyK", { position: { x: 622, y: 228 } }),
    new LayoutNode("KeyL", { position: { x: 693, y: 228 } }),
    new LayoutNode("Semicolon", { position: { x: 765, y: 228 } }),
    new LayoutNode("Quote", { position: { x: 835, y: 228 } }),
    new LayoutNode("Enter", { position: { x: 910, y: 228 }, size: { width: 148, height: 65 } }),
    new LayoutNode("PageDown", { position: { x: 1100, y: 228 } }),
    //"ShiftLeft", "KeyZ", "KeyX", "KeyC", "KeyV", "KeyB", "KeyN", "KeyM", "Comma", "Period", "Slash", "ShiftRight", "ArrowUp", "Delete",
    new LayoutNode("ShiftLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 0, y: 298 }, size: { width: 150, height: 65 } }),
    new LayoutNode("KeyZ", { position: { x: 160, y: 298 } }),
    new LayoutNode("KeyX", { position: { x: 230, y: 298 } }),
    new LayoutNode("KeyC", { position: { x: 300, y: 298 } }),
    new LayoutNode("KeyV", { position: { x: 370, y: 298 } }),
    new LayoutNode("KeyB", { position: { x: 440, y: 298 } }),
    new LayoutNode("KeyN", { position: { x: 510, y: 298 } }),
    new LayoutNode("KeyM", { position: { x: 583, y: 298 } }),
    new LayoutNode("Comma", { position: { x: 655, y: 298 } }),
    new LayoutNode("Period", { position: { x: 730, y: 298 } }),
    new LayoutNode("Slash", { position: { x: 800, y: 298 } }),
    new LayoutNode("ShiftRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 870, y: 298 }, size: { width: 120, height: 65 } }),
    new LayoutNode("ArrowUp", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 1010, y: 315 } }),
    new LayoutNode("Delete", { position: { x: 1100, y: 298 } }),
    //"ControlLeft", "MetaLeft", "AltLeft", "Space", "AltRight", "Custom_Fnkey", "ControlRight", "ArrowLeft", "ArrowDown", "ArrowRight"
    new LayoutNode("ControlLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 0, y: 369 }, size: { width: 85, height: 65 } }),
    new LayoutNode("MetaLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 88, y: 369 }, size: { width: 85, height: 65 } }),
    new LayoutNode("AltLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 175, y: 369 }, size: { width: 85, height: 65 } }),
    new LayoutNode("Space", { position: { x: 270, y: 369 }, size: { width: 430, height: 65 } }),
    new LayoutNode("AltRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 710, y: 369 } }),
    new LayoutNode("Custom_Fnkey", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 780, y: 369 } }),
    new LayoutNode("ControlRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 852, y: 369 } }),
    new LayoutNode("ArrowLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 940, y: 383 } }),
    new LayoutNode("ArrowDown", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 1010, y: 383 } }),
    new LayoutNode("ArrowRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 1080, y: 383 } }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -130, y: 50 },
      size: { width: 40, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -130, y: 120 },
      size: { width: 40, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -130, y: 190 },
      size: { width: 40, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -130, y: 260 },
      size: { width: 40, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -130, y: 330 },
      size: { width: 40, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 1250, y: 50 },
      size: { width: 40, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 1250, y: 120 },
      size: { width: 40, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 1250, y: 190 },
      size: { width: 40, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 1250, y: 260 },
      size: { width: 40, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 1250, y: 330 },
      size: { width: 40, height: 70 },
      isKey: false
    })
  ]
};
const GMMKPROISOLayout = {
  nodeBaseOffset: { x: 265, y: 297 },
  selectedNodePosition: { x: 240, y: 100 },
  layoutNodes: [
    //"Escape", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "PrintScreen", "ScrollWheel"/"ROTARY ENCODER",
    new LayoutNode("Escape", { position: { x: 0, y: 0 } }),
    new LayoutNode("F1", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 90, y: 0 } }),
    new LayoutNode("F2", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 163, y: 0 } }),
    new LayoutNode("F3", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 235, y: 0 } }),
    new LayoutNode("F4", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 305, y: 0 } }),
    new LayoutNode("F5", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 390, y: 0 } }),
    new LayoutNode("F6", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 463, y: 0 } }),
    new LayoutNode("F7", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 535, y: 0 } }),
    new LayoutNode("F8", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 605, y: 0 } }),
    new LayoutNode("F9", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 690, y: 0 } }),
    new LayoutNode("F10", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 763, y: 0 } }),
    new LayoutNode("F11", { position: { x: 835, y: 0 } }),
    new LayoutNode("F12", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 905, y: 0 } }),
    new LayoutNode("PrintScreen", { position: { x: 995, y: 0 } }),
    new LayoutNode("ROTARY ENCODER", { position: { x: 1100, y: 5 }, hasLight: false }),
    //"Backquote", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "Digit0", "Minus", "Equal", "Backspace", "End",
    new LayoutNode("Backquote", { position: { x: 0, y: 87 } }),
    new LayoutNode("Digit1", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 70, y: 87 } }),
    new LayoutNode("Digit2", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 140, y: 87 } }),
    new LayoutNode("Digit3", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 210, y: 87 } }),
    new LayoutNode("Digit4", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 280, y: 87 } }),
    new LayoutNode("Digit5", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 350, y: 87 } }),
    new LayoutNode("Digit6", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 420, y: 87 } }),
    new LayoutNode("Digit7", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 490, y: 87 } }),
    new LayoutNode("Digit8", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 563, y: 87 } }),
    new LayoutNode("Digit9", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 635, y: 87 } }),
    new LayoutNode("Digit0", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 710, y: 87 } }),
    new LayoutNode("Minus", { position: { x: 780, y: 87 } }),
    new LayoutNode("Equal", { position: { x: 855, y: 87 } }),
    new LayoutNode("Backspace", { position: { x: 930, y: 87 }, size: { width: 130, height: 65 } }),
    new LayoutNode("End", { position: { x: 1100, y: 87 } }),
    //"Tab", "KeyQ", "KeyW", "KeyE", "KeyR", "KeyT", "KeyY", "KeyU", "KeyI", "KeyO", "KeyP", "BracketLeft", "BracketRight", "Backslash", "PageUp",
    new LayoutNode("Tab", { position: { x: 0, y: 157 }, size: { width: 100, height: 65 } }),
    new LayoutNode("KeyQ", { position: { x: 105, y: 157 } }),
    new LayoutNode("KeyW", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 177, y: 157 } }),
    new LayoutNode("KeyE", { position: { x: 248, y: 157 } }),
    new LayoutNode("KeyR", { position: { x: 320, y: 157 } }),
    new LayoutNode("KeyT", { position: { x: 393, y: 157 } }),
    new LayoutNode("KeyY", { position: { x: 465, y: 157 } }),
    new LayoutNode("KeyU", { position: { x: 533, y: 157 } }),
    new LayoutNode("KeyI", { position: { x: 603, y: 157 } }),
    new LayoutNode("KeyO", { position: { x: 673, y: 157 } }),
    new LayoutNode("KeyP", { position: { x: 745, y: 157 } }),
    new LayoutNode("BracketLeft", { position: { x: 815, y: 157 } }),
    new LayoutNode("BracketRight", { position: { x: 885, y: 157 } }),
    new LayoutNode("Enter", { position: { x: 960, y: 157 }, size: { width: 100, height: 65 } }),
    new LayoutNode("PageUp", { position: { x: 1100, y: 157 } }),
    //"CapsLock", "KeyA", "KeyS", "KeyD", "KeyF", "KeyG", "KeyH", "KeyJ", "KeyK", "KeyL", "Semicolon", "Quote", "Enter", "PageDown",
    new LayoutNode("CapsLock", { position: { x: 0, y: 228 }, size: { width: 120, height: 65 } }),
    new LayoutNode("KeyA", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 125, y: 228 } }),
    new LayoutNode("KeyS", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 195, y: 228 } }),
    new LayoutNode("KeyD", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 265, y: 228 } }),
    new LayoutNode("KeyF", { position: { x: 340, y: 228 } }),
    new LayoutNode("KeyG", { position: { x: 410, y: 228 } }),
    new LayoutNode("KeyH", { position: { x: 478, y: 228 } }),
    new LayoutNode("KeyJ", { position: { x: 550, y: 228 } }),
    new LayoutNode("KeyK", { position: { x: 622, y: 228 } }),
    new LayoutNode("KeyL", { position: { x: 693, y: 228 } }),
    new LayoutNode("Semicolon", { position: { x: 765, y: 228 } }),
    new LayoutNode("Quote", { position: { x: 835, y: 228 } }),
    new LayoutNode("Backslash", { position: { x: 905, y: 228 } }),
    new LayoutNode("Enter", { position: { x: 980, y: 218 }, size: { width: 80, height: 75 } }),
    new LayoutNode("PageDown", { position: { x: 1100, y: 228 } }),
    //"ShiftLeft", "IntlBackslash", "KeyZ", "KeyX", "KeyC", "KeyV", "KeyB", "KeyN", "KeyM", "Comma", "Period", "Slash", "ShiftRight", "ArrowUp", "Delete",
    new LayoutNode("ShiftLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 0, y: 298 }, size: { width: 75, height: 65 } }),
    new LayoutNode("IntlBackslash", { position: { x: 85, y: 298 } }),
    new LayoutNode("KeyZ", { position: { x: 160, y: 298 } }),
    new LayoutNode("KeyX", { position: { x: 230, y: 298 } }),
    new LayoutNode("KeyC", { position: { x: 300, y: 298 } }),
    new LayoutNode("KeyV", { position: { x: 370, y: 298 } }),
    new LayoutNode("KeyB", { position: { x: 440, y: 298 } }),
    new LayoutNode("KeyN", { position: { x: 510, y: 298 } }),
    new LayoutNode("KeyM", { position: { x: 583, y: 298 } }),
    new LayoutNode("Comma", { position: { x: 655, y: 298 } }),
    new LayoutNode("Period", { position: { x: 730, y: 298 } }),
    new LayoutNode("Slash", { position: { x: 800, y: 298 } }),
    new LayoutNode("ShiftRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 870, y: 298 }, size: { width: 120, height: 65 } }),
    new LayoutNode("ArrowUp", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 1010, y: 315 } }),
    new LayoutNode("Delete", { position: { x: 1100, y: 298 } }),
    //"ControlLeft", "MetaLeft", "AltLeft", "Space", "AltRight", "Custom_Fnkey", "ControlRight", "ArrowLeft", "ArrowDown", "ArrowRight"
    new LayoutNode("ControlLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 0, y: 369 }, size: { width: 85, height: 65 } }),
    new LayoutNode("MetaLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 88, y: 369 }, size: { width: 85, height: 65 } }),
    new LayoutNode("AltLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 175, y: 369 }, size: { width: 85, height: 65 } }),
    new LayoutNode("Space", { position: { x: 270, y: 369 }, size: { width: 430, height: 65 } }),
    new LayoutNode("AltRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 710, y: 369 } }),
    new LayoutNode("Custom_Fnkey", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 780, y: 369 } }),
    new LayoutNode("ControlRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 852, y: 369 } }),
    new LayoutNode("ArrowLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 940, y: 383 } }),
    new LayoutNode("ArrowDown", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 1010, y: 383 } }),
    new LayoutNode("ArrowRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 1080, y: 383 } }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -130, y: 50 },
      size: { width: 40, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -130, y: 120 },
      size: { width: 40, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -130, y: 190 },
      size: { width: 40, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -130, y: 260 },
      size: { width: 40, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -130, y: 330 },
      size: { width: 40, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 1250, y: 50 },
      size: { width: 40, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 1250, y: 120 },
      size: { width: 40, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 1250, y: 190 },
      size: { width: 40, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 1250, y: 260 },
      size: { width: 40, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 1250, y: 330 },
      size: { width: 40, height: 70 },
      isKey: false
    })
  ]
};
const GMMKV265Layout = {
  nodeBaseOffset: { x: 283, y: 273 },
  selectedNodePosition: { x: 260, y: 100 },
  layoutNodes: [
    //"Escape", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "Digit0", "Minus", "Equal", "Backspace", "Delete",
    new LayoutNode("Escape", { position: { x: 0, y: 0 } }),
    new LayoutNode("Digit1", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 70, y: 0 } }),
    new LayoutNode("Digit2", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 140, y: 0 } }),
    new LayoutNode("Digit3", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 210, y: 0 } }),
    new LayoutNode("Digit4", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 280, y: 0 } }),
    new LayoutNode("Digit5", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 350, y: 0 } }),
    new LayoutNode("Digit6", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 420, y: 0 } }),
    new LayoutNode("Digit7", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 490, y: 0 } }),
    new LayoutNode("Digit8", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 560, y: 0 } }),
    new LayoutNode("Digit9", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 630, y: 0 } }),
    new LayoutNode("Digit0", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 700, y: 0 } }),
    new LayoutNode("Minus", { position: { x: 770, y: 0 } }),
    new LayoutNode("Equal", { position: { x: 840, y: 0 } }),
    new LayoutNode("Backspace", { position: { x: 920, y: 0 }, size: { width: 135, height: 65 } }),
    new LayoutNode("Delete", { position: { x: 1060, y: 0 } }),
    //"Backquote", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "Digit0", "Minus", "Equal", "Backspace", "NumLock", "NumpadDivide", "NumpadMultiply", "NumpadSubtract",
    // new LayoutNode("Backquote", { position: {x: 13, y: 73 } }),
    //"Tab", "KeyQ", "KeyW", "KeyE", "KeyR", "KeyT", "KeyY", "KeyU", "KeyI", "KeyO", "KeyP", "BracketLeft", "BracketRight", "Backslash", "PageUp",
    new LayoutNode("Tab", { position: { x: 0, y: 70 }, size: { width: 95, height: 65 } }),
    new LayoutNode("KeyQ", { position: { x: 100, y: 70 } }),
    new LayoutNode("KeyW", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 170, y: 70 } }),
    new LayoutNode("KeyE", { position: { x: 240, y: 70 } }),
    new LayoutNode("KeyR", { position: { x: 310, y: 70 } }),
    new LayoutNode("KeyT", { position: { x: 380, y: 70 } }),
    new LayoutNode("KeyY", { position: { x: 450, y: 70 } }),
    new LayoutNode("KeyU", { position: { x: 521, y: 70 } }),
    new LayoutNode("KeyI", { position: { x: 593, y: 70 } }),
    new LayoutNode("KeyO", { position: { x: 665, y: 70 } }),
    new LayoutNode("KeyP", { position: { x: 736, y: 70 } }),
    new LayoutNode("BracketLeft", { position: { x: 810, y: 70 } }),
    new LayoutNode("BracketRight", { position: { x: 880, y: 70 } }),
    new LayoutNode("Backslash", { position: { x: 950, y: 70 }, size: { width: 105, height: 65 } }),
    new LayoutNode("PageUp", { position: { x: 1060, y: 70 } }),
    //"CapsLock", "KeyA", "KeyS", "KeyD", "KeyF", "KeyG", "KeyH", "KeyJ", "KeyK", "KeyL", "Semicolon", "Quote", "Enter", "PageDown",
    new LayoutNode("CapsLock", { position: { x: 0, y: 140 }, size: { width: 115, height: 65 } }),
    new LayoutNode("KeyA", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 120, y: 140 } }),
    new LayoutNode("KeyS", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 190, y: 140 } }),
    new LayoutNode("KeyD", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 260, y: 140 } }),
    new LayoutNode("KeyF", { position: { x: 330, y: 140 } }),
    new LayoutNode("KeyG", { position: { x: 400, y: 140 } }),
    new LayoutNode("KeyH", { position: { x: 470, y: 140 } }),
    new LayoutNode("KeyJ", { position: { x: 540, y: 140 } }),
    new LayoutNode("KeyK", { position: { x: 610, y: 140 } }),
    new LayoutNode("KeyL", { position: { x: 683, y: 140 } }),
    new LayoutNode("Semicolon", { position: { x: 755, y: 140 } }),
    new LayoutNode("Quote", { position: { x: 825, y: 140 } }),
    new LayoutNode("Enter", { position: { x: 900, y: 140 }, size: { width: 155, height: 65 } }),
    new LayoutNode("PageDown", { position: { x: 1060, y: 140 } }),
    //"ShiftLeft", "KeyZ", "KeyX", "KeyC", "KeyV", "KeyB", "KeyN", "KeyM", "Comma", "Period", "Slash", "ShiftRight", "ArrowUp", "End",
    new LayoutNode("ShiftLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 0, y: 210 }, size: { width: 150, height: 65 } }),
    new LayoutNode("KeyZ", { position: { x: 155, y: 210 } }),
    new LayoutNode("KeyX", { position: { x: 225, y: 210 } }),
    new LayoutNode("KeyC", { position: { x: 295, y: 210 } }),
    new LayoutNode("KeyV", { position: { x: 365, y: 210 } }),
    new LayoutNode("KeyB", { position: { x: 435, y: 210 } }),
    new LayoutNode("KeyN", { position: { x: 505, y: 210 } }),
    new LayoutNode("KeyM", { position: { x: 577, y: 210 } }),
    new LayoutNode("Comma", { position: { x: 648, y: 210 } }),
    new LayoutNode("Period", { position: { x: 720, y: 210 } }),
    new LayoutNode("Slash", { position: { x: 795, y: 210 } }),
    new LayoutNode("ShiftRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 865, y: 210 }, size: { width: 115, height: 65 } }),
    new LayoutNode("ArrowUp", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 988, y: 210 } }),
    new LayoutNode("End", { position: { x: 1060, y: 210 } }),
    //"ControlLeft", "MetaLeft", "AltLeft", "Space", "AltRight", "Custom_Fnkey", "ArrowLeft", "ArrowDown", "ArrowRight"
    new LayoutNode("ControlLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 0, y: 280 }, size: { width: 80, height: 65 } }),
    new LayoutNode("MetaLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 85, y: 280 }, size: { width: 80, height: 65 } }),
    new LayoutNode("AltLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 170, y: 280 }, size: { width: 80, height: 65 } }),
    new LayoutNode("Space", { position: { x: 255, y: 280 }, size: { width: 445, height: 65 } }),
    new LayoutNode("AltRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 705, y: 280 }, size: { width: 80, height: 65 } }),
    new LayoutNode("Custom_Fnkey", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 790, y: 280 }, size: { width: 80, height: 65 } }),
    new LayoutNode("ArrowLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 918, y: 280 } }),
    new LayoutNode("ArrowDown", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 988, y: 280 } }),
    new LayoutNode("ArrowRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 1060, y: 280 } }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -100, y: 0 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -100, y: 70 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -100, y: 140 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -100, y: 210 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -100, y: 280 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 1200, y: 0 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 1200, y: 70 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 1200, y: 140 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 1200, y: 210 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 1200, y: 280 },
      size: { width: 20, height: 70 },
      isKey: false
    })
  ]
};
const GMMKV265LayoutISO = {
  nodeBaseOffset: { x: 283, y: 273 },
  selectedNodePosition: { x: 260, y: 100 },
  layoutNodes: [
    //"Escape", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "Digit0", "Minus", "Equal", "Backspace", "Delete",
    new LayoutNode("Escape", { position: { x: 0, y: 0 } }),
    new LayoutNode("Digit1", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 70, y: 0 } }),
    new LayoutNode("Digit2", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 140, y: 0 } }),
    new LayoutNode("Digit3", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 210, y: 0 } }),
    new LayoutNode("Digit4", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 280, y: 0 } }),
    new LayoutNode("Digit5", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 350, y: 0 } }),
    new LayoutNode("Digit6", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 420, y: 0 } }),
    new LayoutNode("Digit7", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 490, y: 0 } }),
    new LayoutNode("Digit8", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 560, y: 0 } }),
    new LayoutNode("Digit9", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 630, y: 0 } }),
    new LayoutNode("Digit0", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 700, y: 0 } }),
    new LayoutNode("Minus", { position: { x: 770, y: 0 } }),
    new LayoutNode("Equal", { position: { x: 840, y: 0 } }),
    new LayoutNode("Backspace", { position: { x: 920, y: 0 }, size: { width: 135, height: 65 } }),
    new LayoutNode("Delete", { position: { x: 1060, y: 0 } }),
    //"Backquote", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "Digit0", "Minus", "Equal", "Backspace", "NumLock", "NumpadDivide", "NumpadMultiply", "NumpadSubtract",
    // new LayoutNode("Backquote", { position: {x: 13, y: 73 } }),
    //"Tab", "KeyQ", "KeyW", "KeyE", "KeyR", "KeyT", "KeyY", "KeyU", "KeyI", "KeyO", "KeyP", "BracketLeft", "BracketRight", "Backslash", "PageUp",
    new LayoutNode("Tab", { position: { x: 0, y: 70 }, size: { width: 95, height: 65 } }),
    new LayoutNode("KeyQ", { position: { x: 100, y: 70 } }),
    new LayoutNode("KeyW", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 170, y: 70 } }),
    new LayoutNode("KeyE", { position: { x: 240, y: 70 } }),
    new LayoutNode("KeyR", { position: { x: 310, y: 70 } }),
    new LayoutNode("KeyT", { position: { x: 380, y: 70 } }),
    new LayoutNode("KeyY", { position: { x: 450, y: 70 } }),
    new LayoutNode("KeyU", { position: { x: 521, y: 70 } }),
    new LayoutNode("KeyI", { position: { x: 593, y: 70 } }),
    new LayoutNode("KeyO", { position: { x: 665, y: 70 } }),
    new LayoutNode("KeyP", { position: { x: 736, y: 70 } }),
    new LayoutNode("BracketLeft", { position: { x: 810, y: 70 } }),
    new LayoutNode("BracketRight", { position: { x: 880, y: 70 } }),
    new LayoutNode("Enter", { position: { x: 950, y: 70 }, size: { width: 105, height: 65 } }),
    new LayoutNode("PageUp", { position: { x: 1060, y: 70 } }),
    //"CapsLock", "KeyA", "KeyS", "KeyD", "KeyF", "KeyG", "KeyH", "KeyJ", "KeyK", "KeyL", "Semicolon", "Quote", "Enter", "PageDown",
    new LayoutNode("CapsLock", { position: { x: 0, y: 140 }, size: { width: 115, height: 65 } }),
    new LayoutNode("KeyA", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 120, y: 140 } }),
    new LayoutNode("KeyS", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 190, y: 140 } }),
    new LayoutNode("KeyD", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 260, y: 140 } }),
    new LayoutNode("KeyF", { position: { x: 330, y: 140 } }),
    new LayoutNode("KeyG", { position: { x: 400, y: 140 } }),
    new LayoutNode("KeyH", { position: { x: 470, y: 140 } }),
    new LayoutNode("KeyJ", { position: { x: 540, y: 140 } }),
    new LayoutNode("KeyK", { position: { x: 610, y: 140 } }),
    new LayoutNode("KeyL", { position: { x: 683, y: 140 } }),
    new LayoutNode("Semicolon", { position: { x: 755, y: 140 } }),
    new LayoutNode("Quote", { position: { x: 825, y: 140 } }),
    new LayoutNode("Backslash", { position: { x: 900, y: 140 } }),
    new LayoutNode("Enter", { position: { x: 970, y: 130 }, size: { width: 85, height: 75 } }),
    new LayoutNode("PageDown", { position: { x: 1060, y: 140 } }),
    //"ShiftLeft", "KeyZ", "KeyX", "KeyC", "KeyV", "KeyB", "KeyN", "KeyM", "Comma", "Period", "Slash", "ShiftRight", "ArrowUp", "End",
    new LayoutNode("ShiftLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 0, y: 210 }, size: { width: 80, height: 65 } }),
    new LayoutNode("IntlBackslash", { position: { x: 85, y: 210 } }),
    new LayoutNode("KeyZ", { position: { x: 155, y: 210 } }),
    new LayoutNode("KeyX", { position: { x: 225, y: 210 } }),
    new LayoutNode("KeyC", { position: { x: 295, y: 210 } }),
    new LayoutNode("KeyV", { position: { x: 365, y: 210 } }),
    new LayoutNode("KeyB", { position: { x: 435, y: 210 } }),
    new LayoutNode("KeyN", { position: { x: 505, y: 210 } }),
    new LayoutNode("KeyM", { position: { x: 577, y: 210 } }),
    new LayoutNode("Comma", { position: { x: 648, y: 210 } }),
    new LayoutNode("Period", { position: { x: 720, y: 210 } }),
    new LayoutNode("Slash", { position: { x: 795, y: 210 } }),
    new LayoutNode("ShiftRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 865, y: 210 }, size: { width: 115, height: 65 } }),
    new LayoutNode("ArrowUp", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 988, y: 210 } }),
    new LayoutNode("End", { position: { x: 1060, y: 210 } }),
    //"ControlLeft", "MetaLeft", "AltLeft", "Space", "AltRight", "Custom_Fnkey", "ArrowLeft", "ArrowDown", "ArrowRight"
    new LayoutNode("ControlLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 0, y: 280 }, size: { width: 80, height: 65 } }),
    new LayoutNode("MetaLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 85, y: 280 }, size: { width: 80, height: 65 } }),
    new LayoutNode("AltLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 170, y: 280 }, size: { width: 80, height: 65 } }),
    new LayoutNode("Space", { position: { x: 255, y: 280 }, size: { width: 445, height: 65 } }),
    new LayoutNode("AltRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 705, y: 280 }, size: { width: 80, height: 65 } }),
    new LayoutNode("Custom_Fnkey", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 790, y: 280 }, size: { width: 80, height: 65 } }),
    new LayoutNode("ArrowLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 918, y: 280 } }),
    new LayoutNode("ArrowDown", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 988, y: 280 } }),
    new LayoutNode("ArrowRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 1060, y: 280 } }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -100, y: 0 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -100, y: 70 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -100, y: 140 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -100, y: 210 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -100, y: 280 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 1200, y: 0 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 1200, y: 70 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 1200, y: 140 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 1200, y: 210 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 1200, y: 280 },
      size: { width: 20, height: 70 },
      isKey: false
    })
  ]
};
const GMMKV296Layout = {
  // nodeBaseSize: { width: 60, height: 60 },
  nodeBaseOffset: { x: 193, y: 238 },
  selectedNodePosition: { x: 180, y: 60 },
  layoutNodes: [
    //"Escape", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "PrintScreen", "Delete", "Insert", "PageUp", "PageDown",
    new LayoutNode("Escape", { position: { x: 0, y: 0 } }),
    new LayoutNode("F1", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 86, y: 0 } }),
    new LayoutNode("F2", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 153, y: 0 } }),
    new LayoutNode("F3", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 220, y: 0 } }),
    new LayoutNode("F4", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 286, y: 0 } }),
    new LayoutNode("F5", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 372, y: 0 } }),
    new LayoutNode("F6", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 440, y: 0 } }),
    new LayoutNode("F7", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 507, y: 0 } }),
    new LayoutNode("F8", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 567, y: 0 } }),
    new LayoutNode("F9", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 663, y: 0 } }),
    new LayoutNode("F10", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 731, y: 0 } }),
    new LayoutNode("F11", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 799, y: 0 } }),
    new LayoutNode("F12", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 867, y: 0 } }),
    new LayoutNode("PrintScreen", { position: { x: 952, y: 0 } }),
    new LayoutNode("Delete", { position: { x: 1040, y: 0 } }),
    new LayoutNode("Insert", { position: { x: 1108, y: 0 } }),
    new LayoutNode("PageUp", { position: { x: 1176, y: 0 } }),
    new LayoutNode("PageDown", { position: { x: 1244, y: 0 } }),
    //"Backquote", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "Digit0", "Minus", "Equal", "Backspace", "NumLock", "NumpadDivide", "NumpadMultiply", "NumpadSubtract",
    new LayoutNode("Backquote", { position: { x: 0, y: 73 } }),
    new LayoutNode("Digit1", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 68, y: 73 } }),
    new LayoutNode("Digit2", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 136, y: 73 } }),
    new LayoutNode("Digit3", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 204, y: 73 } }),
    new LayoutNode("Digit4", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 272, y: 73 } }),
    new LayoutNode("Digit5", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 340, y: 73 } }),
    new LayoutNode("Digit6", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 408, y: 73 } }),
    new LayoutNode("Digit7", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 476, y: 73 } }),
    new LayoutNode("Digit8", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 544, y: 73 } }),
    new LayoutNode("Digit9", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 612, y: 73 } }),
    new LayoutNode("Digit0", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 680, y: 73 } }),
    new LayoutNode("Minus", { position: { x: 748, y: 73 } }),
    new LayoutNode("Equal", { position: { x: 816, y: 73 } }),
    new LayoutNode("Backspace", { position: { x: 884, y: 73 }, size: { width: 132, height: 65 } }),
    new LayoutNode("NumLock", { position: { x: 1040, y: 73 } }),
    new LayoutNode("NumpadDivide", { position: { x: 1108, y: 73 } }),
    new LayoutNode("NumpadDivide", { position: { x: 1176, y: 73 } }),
    new LayoutNode("NumpadMultiply", { position: { x: 1244, y: 73 } }),
    //"Tab", "KeyQ", "KeyW", "KeyE", "KeyR", "KeyT", "KeyY", "KeyU", "KeyI", "KeyO", "KeyP", "BracketLeft", "BracketRight", "Backslash", "Numpad7", "Numpad8", "Numpad9", "NumpadAdd",
    new LayoutNode("Tab", { position: { x: 0, y: 142 }, size: { width: 100, height: 65 } }),
    new LayoutNode("KeyQ", { position: { x: 102, y: 142 } }),
    new LayoutNode("KeyW", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 168, y: 142 } }),
    new LayoutNode("KeyE", { position: { x: 236, y: 142 } }),
    new LayoutNode("KeyR", { position: { x: 303, y: 142 } }),
    new LayoutNode("KeyT", { position: { x: 370, y: 142 } }),
    new LayoutNode("KeyY", { position: { x: 438, y: 142 } }),
    new LayoutNode("KeyU", { position: { x: 506, y: 142 } }),
    new LayoutNode("KeyI", { position: { x: 574, y: 142 } }),
    new LayoutNode("KeyO", { position: { x: 642, y: 142 } }),
    new LayoutNode("KeyP", { position: { x: 710, y: 142 } }),
    new LayoutNode("BracketLeft", { position: { x: 778, y: 142 } }),
    new LayoutNode("BracketRight", { position: { x: 846, y: 142 } }),
    new LayoutNode("Backslash", { position: { x: 914, y: 142 }, size: { width: 102, height: 65 } }),
    // new LayoutNode('Enter', { position: { x: 914, y: 142 }, size: { width: 72, height: 65 } }),
    new LayoutNode("Numpad7", { position: { x: 1040, y: 142 } }),
    new LayoutNode("Numpad8", { position: { x: 1108, y: 142 } }),
    new LayoutNode("Numpad9", { position: { x: 1176, y: 142 } }),
    new LayoutNode("NumpadAdd", { position: { x: 1244, y: 142 }, size: { width: 65, height: 130 } }),
    //"CapsLock", "KeyA", "KeyS", "KeyD", "KeyF", "KeyG", "KeyH", "KeyJ", "KeyK", "KeyL", "Semicolon", "Quote", "Enter", "Numpad4", "Numpad5", "Numpad6",
    new LayoutNode("CapsLock", { position: { x: 0, y: 210 }, size: { width: 115, height: 65 } }),
    new LayoutNode("KeyA", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 116, y: 210 } }),
    new LayoutNode("KeyS", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 184, y: 210 } }),
    new LayoutNode("KeyD", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 252, y: 210 } }),
    new LayoutNode("KeyF", { position: { x: 320, y: 210 } }),
    new LayoutNode("KeyG", { position: { x: 388, y: 210 } }),
    new LayoutNode("KeyH", { position: { x: 456, y: 210 } }),
    new LayoutNode("KeyJ", { position: { x: 524, y: 210 } }),
    new LayoutNode("KeyK", { position: { x: 592, y: 210 } }),
    new LayoutNode("KeyL", { position: { x: 660, y: 210 } }),
    new LayoutNode("Semicolon", { position: { x: 728, y: 210 } }),
    new LayoutNode("Quote", { position: { x: 796, y: 210 } }),
    // new LayoutNode('Backslash', { position: { x: 864, y: 210 } }),
    new LayoutNode("Enter", { position: { x: 864, y: 210 }, size: { width: 152, height: 65 } }),
    new LayoutNode("Numpad4", { position: { x: 1040, y: 210 } }),
    new LayoutNode("Numpad5", { position: { x: 1108, y: 210 } }),
    new LayoutNode("Numpad6", { position: { x: 1176, y: 210 } }),
    //"ShiftLeft", "KeyZ", "KeyX", "KeyC", "KeyV", "KeyB", "KeyN", "KeyM", "Comma", "Period", "Slash", "ShiftRight", "ArrowUp", "Numpad1", "Numpad2", "Numpad3", "NumpadEnter",
    new LayoutNode("ShiftLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 0, y: 278 }, size: { width: 150, height: 65 } }),
    // new LayoutNode('IntlBackslash', { position: { x: 152, y: 278 } }),
    new LayoutNode("KeyZ", { position: { x: 152, y: 278 } }),
    new LayoutNode("KeyX", { position: { x: 220, y: 278 } }),
    new LayoutNode("KeyC", { position: { x: 288, y: 278 } }),
    new LayoutNode("KeyV", { position: { x: 356, y: 278 } }),
    new LayoutNode("KeyB", { position: { x: 424, y: 278 } }),
    new LayoutNode("KeyN", { position: { x: 492, y: 278 } }),
    new LayoutNode("KeyM", { position: { x: 560, y: 278 } }),
    new LayoutNode("Comma", { position: { x: 628, y: 278 } }),
    new LayoutNode("Period", { position: { x: 696, y: 278 } }),
    new LayoutNode("Slash", { position: { x: 764, y: 278 } }),
    new LayoutNode("ShiftRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 832, y: 278 }, size: { width: 115, height: 65 } }),
    new LayoutNode("ArrowUp", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 960, y: 285 } }),
    new LayoutNode("Numpad1", { position: { x: 1040, y: 278 } }),
    new LayoutNode("Numpad2", { position: { x: 1108, y: 278 } }),
    new LayoutNode("Numpad3", { position: { x: 1176, y: 278 } }),
    new LayoutNode("NumpadEnter", { position: { x: 1244, y: 278 }, size: { width: 65, height: 130 } }),
    //"ControlLeft", "MetaLeft", "AltLeft", "Space", "AltRight", "Custom_Fnkey","ControlRight", "ArrowLeft", "ArrowDown", "ArrowRight", "Numpad0", "NumpadDecimal"
    new LayoutNode("ControlLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 0, y: 346 }, size: { width: 80, height: 65 } }),
    new LayoutNode("MetaLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 83, y: 346 }, size: { width: 80, height: 65 } }),
    new LayoutNode("AltLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 165, y: 346 }, size: { width: 80, height: 65 } }),
    new LayoutNode("Space", { position: { x: 250, y: 346 }, size: { width: 425, height: 65 } }),
    new LayoutNode("AltRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 680, y: 346 } }),
    new LayoutNode("Custom_Fnkey", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 748, y: 346 } }),
    new LayoutNode("ControlRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 815, y: 346 } }),
    new LayoutNode("ArrowLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 892, y: 351 } }),
    new LayoutNode("ArrowDown", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 960, y: 351 } }),
    new LayoutNode("ArrowRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 1028, y: 351 } }),
    new LayoutNode("Numpad0", { position: { x: 1108, y: 346 } }),
    new LayoutNode("NumpadDecimal", { position: { x: 1176, y: 346 } }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -80, y: 0 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -80, y: 70 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -80, y: 140 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -80, y: 210 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -80, y: 280 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -80, y: 350 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 1380, y: 0 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 1380, y: 70 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 1380, y: 140 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 1380, y: 210 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 1380, y: 280 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 1380, y: 350 },
      size: { width: 20, height: 70 },
      isKey: false
    })
  ]
};
const GMMKV296ISOLayout = {
  // nodeBaseSize: { width: 60, height: 60 },
  nodeBaseOffset: { x: 193, y: 238 },
  selectedNodePosition: { x: 180, y: 60 },
  layoutNodes: [
    //"Escape", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "PrintScreen", "Delete", "Insert", "PageUp", "PageDown",
    new LayoutNode("Escape", { position: { x: 0, y: 0 } }),
    new LayoutNode("F1", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 86, y: 0 } }),
    new LayoutNode("F2", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 153, y: 0 } }),
    new LayoutNode("F3", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 220, y: 0 } }),
    new LayoutNode("F4", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 286, y: 0 } }),
    new LayoutNode("F5", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 372, y: 0 } }),
    new LayoutNode("F6", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 440, y: 0 } }),
    new LayoutNode("F7", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 507, y: 0 } }),
    new LayoutNode("F8", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 567, y: 0 } }),
    new LayoutNode("F9", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 663, y: 0 } }),
    new LayoutNode("F10", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 731, y: 0 } }),
    new LayoutNode("F11", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 799, y: 0 } }),
    new LayoutNode("F12", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 867, y: 0 } }),
    new LayoutNode("PrintScreen", { position: { x: 952, y: 0 } }),
    new LayoutNode("Delete", { position: { x: 1040, y: 0 } }),
    new LayoutNode("Insert", { position: { x: 1108, y: 0 } }),
    new LayoutNode("PageUp", { position: { x: 1176, y: 0 } }),
    new LayoutNode("PageDown", { position: { x: 1244, y: 0 } }),
    //"Backquote", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "Digit0", "Minus", "Equal", "Backspace", "NumLock", "NumpadDivide", "NumpadMultiply", "NumpadSubtract",
    new LayoutNode("Backquote", { position: { x: 0, y: 73 } }),
    new LayoutNode("Digit1", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 68, y: 73 } }),
    new LayoutNode("Digit2", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 136, y: 73 } }),
    new LayoutNode("Digit3", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 204, y: 73 } }),
    new LayoutNode("Digit4", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 272, y: 73 } }),
    new LayoutNode("Digit5", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 340, y: 73 } }),
    new LayoutNode("Digit6", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 408, y: 73 } }),
    new LayoutNode("Digit7", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 476, y: 73 } }),
    new LayoutNode("Digit8", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 544, y: 73 } }),
    new LayoutNode("Digit9", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 612, y: 73 } }),
    new LayoutNode("Digit0", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 680, y: 73 } }),
    new LayoutNode("Minus", { position: { x: 748, y: 73 } }),
    new LayoutNode("Equal", { position: { x: 816, y: 73 } }),
    new LayoutNode("Backspace", { position: { x: 884, y: 73 }, size: { width: 132, height: 65 } }),
    new LayoutNode("NumLock", { position: { x: 1040, y: 73 } }),
    new LayoutNode("NumpadDivide", { position: { x: 1108, y: 73 } }),
    new LayoutNode("NumpadDivide", { position: { x: 1176, y: 73 } }),
    new LayoutNode("NumpadMultiply", { position: { x: 1244, y: 73 } }),
    //"Tab", "KeyQ", "KeyW", "KeyE", "KeyR", "KeyT", "KeyY", "KeyU", "KeyI", "KeyO", "KeyP", "BracketLeft", "BracketRight", "Backslash", "Numpad7", "Numpad8", "Numpad9", "NumpadAdd",
    new LayoutNode("Tab", { position: { x: 0, y: 142 }, size: { width: 100, height: 65 } }),
    new LayoutNode("KeyQ", { position: { x: 102, y: 142 } }),
    new LayoutNode("KeyW", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 168, y: 142 } }),
    new LayoutNode("KeyE", { position: { x: 236, y: 142 } }),
    new LayoutNode("KeyR", { position: { x: 303, y: 142 } }),
    new LayoutNode("KeyT", { position: { x: 370, y: 142 } }),
    new LayoutNode("KeyY", { position: { x: 438, y: 142 } }),
    new LayoutNode("KeyU", { position: { x: 506, y: 142 } }),
    new LayoutNode("KeyI", { position: { x: 574, y: 142 } }),
    new LayoutNode("KeyO", { position: { x: 642, y: 142 } }),
    new LayoutNode("KeyP", { position: { x: 710, y: 142 } }),
    new LayoutNode("BracketLeft", { position: { x: 778, y: 142 } }),
    new LayoutNode("BracketRight", { position: { x: 846, y: 142 } }),
    new LayoutNode("Backslash", { position: { x: 914, y: 142 }, size: { width: 102, height: 65 } }),
    // new LayoutNode('Enter', { position: { x: 914, y: 142 }, size: { width: 72, height: 65 } }),
    new LayoutNode("Numpad7", { position: { x: 1040, y: 142 } }),
    new LayoutNode("Numpad8", { position: { x: 1108, y: 142 } }),
    new LayoutNode("Numpad9", { position: { x: 1176, y: 142 } }),
    new LayoutNode("NumpadAdd", { position: { x: 1244, y: 142 }, size: { width: 65, height: 130 } }),
    //"CapsLock", "KeyA", "KeyS", "KeyD", "KeyF", "KeyG", "KeyH", "KeyJ", "KeyK", "KeyL", "Semicolon", "Quote", "Enter", "Numpad4", "Numpad5", "Numpad6",
    new LayoutNode("CapsLock", { position: { x: 0, y: 210 }, size: { width: 115, height: 65 } }),
    new LayoutNode("KeyA", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 116, y: 210 } }),
    new LayoutNode("KeyS", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 184, y: 210 } }),
    new LayoutNode("KeyD", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 252, y: 210 } }),
    new LayoutNode("KeyF", { position: { x: 320, y: 210 } }),
    new LayoutNode("KeyG", { position: { x: 388, y: 210 } }),
    new LayoutNode("KeyH", { position: { x: 456, y: 210 } }),
    new LayoutNode("KeyJ", { position: { x: 524, y: 210 } }),
    new LayoutNode("KeyK", { position: { x: 592, y: 210 } }),
    new LayoutNode("KeyL", { position: { x: 660, y: 210 } }),
    new LayoutNode("Semicolon", { position: { x: 728, y: 210 } }),
    new LayoutNode("Quote", { position: { x: 796, y: 210 } }),
    // new LayoutNode('Backslash', { position: { x: 864, y: 210 } }),
    new LayoutNode("Enter", { position: { x: 864, y: 210 }, size: { width: 152, height: 65 } }),
    new LayoutNode("Numpad4", { position: { x: 1040, y: 210 } }),
    new LayoutNode("Numpad5", { position: { x: 1108, y: 210 } }),
    new LayoutNode("Numpad6", { position: { x: 1176, y: 210 } }),
    //"ShiftLeft", "KeyZ", "KeyX", "KeyC", "KeyV", "KeyB", "KeyN", "KeyM", "Comma", "Period", "Slash", "ShiftRight", "ArrowUp", "Numpad1", "Numpad2", "Numpad3", "NumpadEnter",
    new LayoutNode("ShiftLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 0, y: 278 }, size: { width: 150, height: 65 } }),
    // new LayoutNode('IntlBackslash', { position: { x: 152, y: 278 } }),
    new LayoutNode("KeyZ", { position: { x: 152, y: 278 } }),
    new LayoutNode("KeyX", { position: { x: 220, y: 278 } }),
    new LayoutNode("KeyC", { position: { x: 288, y: 278 } }),
    new LayoutNode("KeyV", { position: { x: 356, y: 278 } }),
    new LayoutNode("KeyB", { position: { x: 424, y: 278 } }),
    new LayoutNode("KeyN", { position: { x: 492, y: 278 } }),
    new LayoutNode("KeyM", { position: { x: 560, y: 278 } }),
    new LayoutNode("Comma", { position: { x: 628, y: 278 } }),
    new LayoutNode("Period", { position: { x: 696, y: 278 } }),
    new LayoutNode("Slash", { position: { x: 764, y: 278 } }),
    new LayoutNode("ShiftRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 832, y: 278 }, size: { width: 115, height: 65 } }),
    new LayoutNode("ArrowUp", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 960, y: 285 } }),
    new LayoutNode("Numpad1", { position: { x: 1040, y: 278 } }),
    new LayoutNode("Numpad2", { position: { x: 1108, y: 278 } }),
    new LayoutNode("Numpad3", { position: { x: 1176, y: 278 } }),
    new LayoutNode("NumpadEnter", { position: { x: 1244, y: 278 }, size: { width: 65, height: 130 } }),
    //"ControlLeft", "MetaLeft", "AltLeft", "Space", "AltRight", "Custom_Fnkey","ControlRight", "ArrowLeft", "ArrowDown", "ArrowRight", "Numpad0", "NumpadDecimal"
    new LayoutNode("ControlLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 0, y: 346 }, size: { width: 80, height: 65 } }),
    new LayoutNode("MetaLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 83, y: 346 }, size: { width: 80, height: 65 } }),
    new LayoutNode("AltLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 165, y: 346 }, size: { width: 80, height: 65 } }),
    new LayoutNode("Space", { position: { x: 250, y: 346 }, size: { width: 425, height: 65 } }),
    new LayoutNode("AltRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 680, y: 346 } }),
    new LayoutNode("Custom_Fnkey", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 748, y: 346 } }),
    new LayoutNode("ControlRight", { position: { x: 815, y: 346 } }),
    new LayoutNode("ArrowLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 892, y: 351 } }),
    new LayoutNode("ArrowDown", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 960, y: 351 } }),
    new LayoutNode("ArrowRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 1028, y: 351 } }),
    new LayoutNode("Numpad0", { position: { x: 1108, y: 346 } }),
    new LayoutNode("NumpadDecimal", { position: { x: 1176, y: 346 } }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -80, y: 0 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -80, y: 70 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -80, y: 140 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -80, y: 210 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -80, y: 280 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: -80, y: 350 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 1380, y: 0 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 1380, y: 70 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 1380, y: 140 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 1380, y: 210 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 1380, y: 280 },
      size: { width: 20, height: 70 },
      isKey: false
    }),
    new LayoutNode("Side Light", {
      quickKeyIds: QuickKeyIdGroupMap.get(
        2
        /* Sidelights */
      ),
      position: { x: 1380, y: 350 },
      size: { width: 20, height: 70 },
      isKey: false
    })
  ]
};
const valueDvalueBvalueC100Layout = {
  nodeBaseSize: { width: 60, height: 60 },
  nodeBaseOffset: { x: 168, y: 307 },
  selectedNodePosition: { x: 240, y: 100 },
  layoutNodes: [
    //"Escape", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "PrintScreen", "Delete", "Insert", "PageUp", "PageDown",
    new LayoutNode("Escape", { position: { x: 0, y: 0 } }),
    new LayoutNode("F1", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 125, y: 0 } }),
    new LayoutNode("F2", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 187, y: 0 } }),
    new LayoutNode("F3", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 248, y: 0 } }),
    new LayoutNode("F4", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 310, y: 0 } }),
    new LayoutNode("F5", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 393, y: 0 } }),
    new LayoutNode("F6", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 455, y: 0 } }),
    new LayoutNode("F7", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 517, y: 0 } }),
    new LayoutNode("F8", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 575, y: 0 } }),
    new LayoutNode("F9", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 665, y: 0 } }),
    new LayoutNode("F10", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 725, y: 0 } }),
    new LayoutNode("F11", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 785, y: 0 } }),
    new LayoutNode("F12", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 845, y: 0 } }),
    new LayoutNode("PrintScreen", { position: { x: 923, y: 0 } }),
    new LayoutNode("ScreenLock", { position: { x: 983, y: 0 } }),
    new LayoutNode("Pause", { position: { x: 1043, y: 0 } }),
    new LayoutNode("Badge", { position: { x: 1228, y: -30 }, size: { width: 55, height: 85 }, isKey: false }),
    new LayoutNode("ROTARYENCODER", { position: { x: 1300, y: 0 }, size: { width: 65, height: 65 } }),
    //"Backquote", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "Digit0", "Minus", "Equal", "Backspace", "NumLock", "NumpadDivide", "NumpadMultiply", "NumpadSubtract",
    new LayoutNode("Backquote", { position: { x: 0, y: 80 } }),
    new LayoutNode("Digit1", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 64, y: 80 } }),
    new LayoutNode("Digit2", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 126, y: 80 } }),
    new LayoutNode("Digit3", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 188, y: 80 } }),
    new LayoutNode("Digit4", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 248, y: 80 } }),
    new LayoutNode("Digit5", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 308, y: 80 } }),
    new LayoutNode("Digit6", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 368, y: 80 } }),
    new LayoutNode("Digit7", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 428, y: 80 } }),
    new LayoutNode("Digit8", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 488, y: 80 } }),
    new LayoutNode("Digit9", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 548, y: 80 } }),
    new LayoutNode("Digit0", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 608, y: 80 } }),
    new LayoutNode("Minus", { position: { x: 668, y: 80 } }),
    new LayoutNode("Equal", { position: { x: 728, y: 80 } }),
    new LayoutNode("Backspace", { position: { x: 788, y: 80 }, size: { width: 115, height: 60 } }),
    new LayoutNode("Insert", { position: { x: 923, y: 80 } }),
    new LayoutNode("Home", { position: { x: 983, y: 80 } }),
    new LayoutNode("PageUp", { position: { x: 1043, y: 80 } }),
    new LayoutNode("NumLock", { position: { x: 1120, y: 80 } }),
    new LayoutNode("NumpadDivide", { position: { x: 1180, y: 80 } }),
    new LayoutNode("NumpadMultiply", { position: { x: 1240, y: 80 } }),
    new LayoutNode("NumpadMinus", { position: { x: 1300, y: 80 } }),
    //"Tab", "KeyQ", "KeyW", "KeyE", "KeyR", "KeyT", "KeyY", "KeyU", "KeyI", "KeyO", "KeyP", "BracketLeft", "BracketRight", "Backslash", "Numpad7", "Numpad8", "Numpad9", "NumpadAdd",
    new LayoutNode("Tab", { position: { x: 0, y: 140 }, size: { width: 90, height: 60 } }),
    new LayoutNode("KeyQ", { position: { x: 93, y: 140 } }),
    new LayoutNode("KeyW", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 153, y: 140 } }),
    new LayoutNode("KeyE", { position: { x: 213, y: 140 } }),
    new LayoutNode("KeyR", { position: { x: 273, y: 140 } }),
    new LayoutNode("KeyT", { position: { x: 333, y: 140 } }),
    new LayoutNode("KeyY", { position: { x: 393, y: 140 } }),
    new LayoutNode("KeyU", { position: { x: 453, y: 140 } }),
    new LayoutNode("KeyI", { position: { x: 513, y: 140 } }),
    new LayoutNode("KeyO", { position: { x: 573, y: 140 } }),
    new LayoutNode("KeyP", { position: { x: 633, y: 140 } }),
    new LayoutNode("BracketLeft", { position: { x: 693, y: 140 } }),
    new LayoutNode("BracketRight", { position: { x: 753, y: 140 } }),
    new LayoutNode("Backslash", { position: { x: 813, y: 140 }, size: { width: 90, height: 60 } }),
    new LayoutNode("Delete", { position: { x: 923, y: 140 } }),
    new LayoutNode("End", { position: { x: 983, y: 140 } }),
    new LayoutNode("PageDown", { position: { x: 1043, y: 140 } }),
    new LayoutNode("Numpad7", { position: { x: 1120, y: 140 } }),
    new LayoutNode("Numpad8", { position: { x: 1180, y: 140 } }),
    new LayoutNode("Numpad9", { position: { x: 1240, y: 140 } }),
    new LayoutNode("NumpadAdd", { position: { x: 1300, y: 140 }, size: { width: 60, height: 120 } }),
    //"CapsLock", "KeyA", "KeyS", "KeyD", "KeyF", "KeyG", "KeyH", "KeyJ", "KeyK", "KeyL", "Semicolon", "Quote", "Enter", "Numpad4", "Numpad5", "Numpad6",
    new LayoutNode("CapsLock", { position: { x: 0, y: 200 }, size: { width: 105, height: 60 } }),
    new LayoutNode("KeyA", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 108, y: 200 } }),
    new LayoutNode("KeyS", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 168, y: 200 } }),
    new LayoutNode("KeyD", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 228, y: 200 } }),
    new LayoutNode("KeyF", { position: { x: 288, y: 200 } }),
    new LayoutNode("KeyG", { position: { x: 348, y: 200 } }),
    new LayoutNode("KeyH", { position: { x: 408, y: 200 } }),
    new LayoutNode("KeyJ", { position: { x: 468, y: 200 } }),
    new LayoutNode("KeyK", { position: { x: 528, y: 200 } }),
    new LayoutNode("KeyL", { position: { x: 588, y: 200 } }),
    new LayoutNode("Semicolon", { position: { x: 650, y: 200 } }),
    new LayoutNode("Quote", { position: { x: 713, y: 200 } }),
    new LayoutNode("Enter", { position: { x: 775, y: 200 }, size: { width: 127, height: 60 } }),
    new LayoutNode("Numpad4", { position: { x: 1120, y: 200 } }),
    new LayoutNode("Numpad5", { position: { x: 1180, y: 200 } }),
    new LayoutNode("Numpad6", { position: { x: 1240, y: 200 } }),
    //"ShiftLeft", "KeyZ", "KeyX", "KeyC", "KeyV", "KeyB", "KeyN", "KeyM", "Comma", "Period", "Slash", "ShiftRight", "ArrowUp", "Numpad1", "Numpad2", "Numpad3", "NumpadEnter",
    new LayoutNode("ShiftLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 0, y: 260 }, size: { width: 135, height: 60 } }),
    new LayoutNode("KeyZ", { position: { x: 138, y: 260 } }),
    new LayoutNode("KeyX", { position: { x: 198, y: 260 } }),
    new LayoutNode("KeyC", { position: { x: 258, y: 260 } }),
    new LayoutNode("KeyV", { position: { x: 319, y: 260 } }),
    new LayoutNode("KeyB", { position: { x: 378, y: 260 } }),
    new LayoutNode("KeyN", { position: { x: 438, y: 260 } }),
    new LayoutNode("KeyM", { position: { x: 498, y: 260 } }),
    new LayoutNode("Comma", { position: { x: 558, y: 260 } }),
    new LayoutNode("Period", { position: { x: 618, y: 260 } }),
    new LayoutNode("Slash", { position: { x: 678, y: 260 } }),
    new LayoutNode("ShiftRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 738, y: 260 }, size: { width: 164, height: 60 } }),
    new LayoutNode("ArrowUp", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 983, y: 260 } }),
    new LayoutNode("Numpad1", { position: { x: 1120, y: 260 } }),
    new LayoutNode("Numpad2", { position: { x: 1180, y: 260 } }),
    new LayoutNode("Numpad3", { position: { x: 1240, y: 260 } }),
    new LayoutNode("NumpadEnter", { position: { x: 1300, y: 260 }, size: { width: 60, height: 120 } }),
    //"ControlLeft", "MetaLeft", "AltLeft", "Space", "AltRight", "Custom_Fnkey","ControlRight", "ArrowLeft", "ArrowDown", "ArrowRight", "Numpad0", "NumpadDecimal"
    new LayoutNode("ControlLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 0, y: 320 }, size: { width: 75, height: 60 } }),
    new LayoutNode("MetaLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 77, y: 320 }, size: { width: 75, height: 60 } }),
    new LayoutNode("AltLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 154, y: 320 }, size: { width: 75, height: 60 } }),
    new LayoutNode("Space", { position: { x: 231, y: 320 }, size: { width: 371, height: 60 } }),
    new LayoutNode("AltRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 605, y: 320 }, size: { width: 75, height: 60 } }),
    new LayoutNode("Custom_Fnkey", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 679, y: 320 }, size: { width: 75, height: 60 } }),
    new LayoutNode("Menu", { position: { x: 755, y: 320 }, size: { width: 75, height: 60 } }),
    new LayoutNode("ControlRight", { position: { x: 830, y: 320 }, size: { width: 75, height: 60 } }),
    new LayoutNode("ArrowLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 923, y: 320 } }),
    new LayoutNode("ArrowDown", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 983, y: 320 } }),
    new LayoutNode("ArrowRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 1043, y: 320 } }),
    new LayoutNode("Numpad0", { position: { x: 1120, y: 320 }, size: { width: 120, height: 60 } }),
    new LayoutNode("NumpadDecimal", { position: { x: 1240, y: 320 } })
  ]
};
const valueDvalueBvalueC100ISOLayout = {
  nodeBaseSize: { width: 60, height: 60 },
  nodeBaseOffset: { x: 168, y: 307 },
  selectedNodePosition: { x: 240, y: 100 },
  layoutNodes: [
    //"Escape", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "PrintScreen", "Delete", "Insert", "PageUp", "PageDown",
    new LayoutNode("Escape", { position: { x: 0, y: 0 } }),
    new LayoutNode("F1", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 125, y: 0 } }),
    new LayoutNode("F2", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 187, y: 0 } }),
    new LayoutNode("F3", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 248, y: 0 } }),
    new LayoutNode("F4", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 310, y: 0 } }),
    new LayoutNode("F5", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 393, y: 0 } }),
    new LayoutNode("F6", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 455, y: 0 } }),
    new LayoutNode("F7", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 517, y: 0 } }),
    new LayoutNode("F8", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 575, y: 0 } }),
    new LayoutNode("F9", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 665, y: 0 } }),
    new LayoutNode("F10", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 725, y: 0 } }),
    new LayoutNode("F11", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 785, y: 0 } }),
    new LayoutNode("F12", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 845, y: 0 } }),
    new LayoutNode("PrintScreen", { position: { x: 923, y: 0 } }),
    new LayoutNode("ScreenLock", { position: { x: 983, y: 0 } }),
    new LayoutNode("Pause", { position: { x: 1043, y: 0 } }),
    new LayoutNode("Badge", { position: { x: 1228, y: -30 }, size: { width: 55, height: 85 }, isKey: false }),
    new LayoutNode("ROTARYENCODER", { position: { x: 1300, y: 0 }, size: { width: 65, height: 65 } }),
    //"Backquote", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "Digit0", "Minus", "Equal", "Backspace", "NumLock", "NumpadDivide", "NumpadMultiply", "NumpadSubtract",
    new LayoutNode("Backquote", { position: { x: 0, y: 80 } }),
    new LayoutNode("Digit1", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 64, y: 80 } }),
    new LayoutNode("Digit2", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 126, y: 80 } }),
    new LayoutNode("Digit3", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 188, y: 80 } }),
    new LayoutNode("Digit4", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 248, y: 80 } }),
    new LayoutNode("Digit5", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 308, y: 80 } }),
    new LayoutNode("Digit6", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 368, y: 80 } }),
    new LayoutNode("Digit7", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 428, y: 80 } }),
    new LayoutNode("Digit8", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 488, y: 80 } }),
    new LayoutNode("Digit9", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 548, y: 80 } }),
    new LayoutNode("Digit0", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 608, y: 80 } }),
    new LayoutNode("Minus", { position: { x: 668, y: 80 } }),
    new LayoutNode("Equal", { position: { x: 728, y: 80 } }),
    new LayoutNode("Backspace", { position: { x: 788, y: 80 }, size: { width: 115, height: 60 } }),
    new LayoutNode("Insert", { position: { x: 923, y: 80 } }),
    new LayoutNode("Home", { position: { x: 983, y: 80 } }),
    new LayoutNode("PageUp", { position: { x: 1043, y: 80 } }),
    new LayoutNode("NumLock", { position: { x: 1120, y: 80 } }),
    new LayoutNode("NumpadDivide", { position: { x: 1180, y: 80 } }),
    new LayoutNode("NumpadMultiply", { position: { x: 1240, y: 80 } }),
    new LayoutNode("NumpadMinus", { position: { x: 1300, y: 80 } }),
    //"Tab", "KeyQ", "KeyW", "KeyE", "KeyR", "KeyT", "KeyY", "KeyU", "KeyI", "KeyO", "KeyP", "BracketLeft", "BracketRight", "Backslash", "Numpad7", "Numpad8", "Numpad9", "NumpadAdd",
    new LayoutNode("Tab", { position: { x: 0, y: 140 }, size: { width: 90, height: 60 } }),
    new LayoutNode("KeyQ", { position: { x: 93, y: 140 } }),
    new LayoutNode("KeyW", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 153, y: 140 } }),
    new LayoutNode("KeyE", { position: { x: 213, y: 140 } }),
    new LayoutNode("KeyR", { position: { x: 273, y: 140 } }),
    new LayoutNode("KeyT", { position: { x: 333, y: 140 } }),
    new LayoutNode("KeyY", { position: { x: 393, y: 140 } }),
    new LayoutNode("KeyU", { position: { x: 453, y: 140 } }),
    new LayoutNode("KeyI", { position: { x: 513, y: 140 } }),
    new LayoutNode("KeyO", { position: { x: 573, y: 140 } }),
    new LayoutNode("KeyP", { position: { x: 633, y: 140 } }),
    new LayoutNode("BracketLeft", { position: { x: 693, y: 140 } }),
    new LayoutNode("BracketRight", { position: { x: 753, y: 140 } }),
    new LayoutNode("Enter", { position: { x: 753, y: 140 } }),
    new LayoutNode("Delete", { position: { x: 923, y: 140 } }),
    new LayoutNode("End", { position: { x: 983, y: 140 } }),
    new LayoutNode("PageDown", { position: { x: 1043, y: 140 } }),
    new LayoutNode("Numpad7", { position: { x: 1120, y: 140 } }),
    new LayoutNode("Numpad8", { position: { x: 1180, y: 140 } }),
    new LayoutNode("Numpad9", { position: { x: 1240, y: 140 } }),
    new LayoutNode("NumpadAdd", { position: { x: 1300, y: 140 }, size: { width: 60, height: 120 } }),
    //"CapsLock", "KeyA", "KeyS", "KeyD", "KeyF", "KeyG", "KeyH", "KeyJ", "KeyK", "KeyL", "Semicolon", "Quote", "Enter", "Numpad4", "Numpad5", "Numpad6",
    new LayoutNode("CapsLock", { position: { x: 0, y: 200 }, size: { width: 105, height: 60 } }),
    new LayoutNode("KeyA", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 108, y: 200 } }),
    new LayoutNode("KeyS", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 168, y: 200 } }),
    new LayoutNode("KeyD", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 228, y: 200 } }),
    new LayoutNode("KeyF", { position: { x: 288, y: 200 } }),
    new LayoutNode("KeyG", { position: { x: 348, y: 200 } }),
    new LayoutNode("KeyH", { position: { x: 408, y: 200 } }),
    new LayoutNode("KeyJ", { position: { x: 468, y: 200 } }),
    new LayoutNode("KeyK", { position: { x: 528, y: 200 } }),
    new LayoutNode("KeyL", { position: { x: 588, y: 200 } }),
    new LayoutNode("Semicolon", { position: { x: 650, y: 200 } }),
    new LayoutNode("Quote", { position: { x: 713, y: 200 } }),
    new LayoutNode("Backslash", { position: { x: 813, y: 140 }, size: { width: 90, height: 60 } }),
    new LayoutNode("Enter", { position: { x: 775, y: 200 }, size: { width: 127, height: 60 } }),
    new LayoutNode("Numpad4", { position: { x: 1120, y: 200 } }),
    new LayoutNode("Numpad5", { position: { x: 1180, y: 200 } }),
    new LayoutNode("Numpad6", { position: { x: 1240, y: 200 } }),
    //"ShiftLeft", "KeyZ", "KeyX", "KeyC", "KeyV", "KeyB", "KeyN", "KeyM", "Comma", "Period", "Slash", "ShiftRight", "ArrowUp", "Numpad1", "Numpad2", "Numpad3", "NumpadEnter",
    new LayoutNode("ShiftLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 0, y: 260 }, size: { width: 65, height: 60 } }),
    new LayoutNode("IntlBackslash", { position: { x: 68, y: 260 } }),
    new LayoutNode("KeyZ", { position: { x: 138, y: 260 } }),
    new LayoutNode("KeyX", { position: { x: 198, y: 260 } }),
    new LayoutNode("KeyC", { position: { x: 258, y: 260 } }),
    new LayoutNode("KeyV", { position: { x: 319, y: 260 } }),
    new LayoutNode("KeyB", { position: { x: 378, y: 260 } }),
    new LayoutNode("KeyN", { position: { x: 438, y: 260 } }),
    new LayoutNode("KeyM", { position: { x: 498, y: 260 } }),
    new LayoutNode("Comma", { position: { x: 558, y: 260 } }),
    new LayoutNode("Period", { position: { x: 618, y: 260 } }),
    new LayoutNode("Slash", { position: { x: 678, y: 260 } }),
    new LayoutNode("ShiftRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 738, y: 260 }, size: { width: 164, height: 60 } }),
    new LayoutNode("ArrowUp", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 983, y: 260 } }),
    new LayoutNode("Numpad1", { position: { x: 1120, y: 260 } }),
    new LayoutNode("Numpad2", { position: { x: 1180, y: 260 } }),
    new LayoutNode("Numpad3", { position: { x: 1240, y: 260 } }),
    new LayoutNode("NumpadEnter", { position: { x: 1300, y: 260 }, size: { width: 60, height: 120 } }),
    //"ControlLeft", "MetaLeft", "AltLeft", "Space", "AltRight", "Custom_Fnkey","ControlRight", "ArrowLeft", "ArrowDown", "ArrowRight", "Numpad0", "NumpadDecimal"
    new LayoutNode("ControlLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 0, y: 320 }, size: { width: 75, height: 60 } }),
    new LayoutNode("MetaLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 77, y: 320 }, size: { width: 75, height: 60 } }),
    new LayoutNode("AltLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 154, y: 320 }, size: { width: 75, height: 60 } }),
    new LayoutNode("Space", { position: { x: 231, y: 320 }, size: { width: 371, height: 60 } }),
    new LayoutNode("AltRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 605, y: 320 }, size: { width: 75, height: 60 } }),
    new LayoutNode("Custom_Fnkey", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 679, y: 320 }, size: { width: 75, height: 60 } }),
    new LayoutNode("Menu", { position: { x: 755, y: 320 }, size: { width: 75, height: 60 } }),
    new LayoutNode("ControlRight", { position: { x: 830, y: 320 }, size: { width: 75, height: 60 } }),
    new LayoutNode("ArrowLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 923, y: 320 } }),
    new LayoutNode("ArrowDown", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 983, y: 320 } }),
    new LayoutNode("ArrowRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 1043, y: 320 } }),
    new LayoutNode("Numpad0", { position: { x: 1120, y: 320 }, size: { width: 120, height: 60 } }),
    new LayoutNode("NumpadDecimal", { position: { x: 1240, y: 320 } })
  ]
};
const valueDvalueBvalueC75Layout = {
  nodeBaseSize: { width: 60, height: 60 },
  nodeBaseOffset: { x: 365, y: 309 },
  selectedNodePosition: { x: 240, y: 100 },
  layoutNodes: [
    //"Escape", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "PrintScreen", "Delete", "Insert", "PageUp", "PageDown",
    new LayoutNode("Escape", { position: { x: 0, y: 0 } }),
    new LayoutNode("F1", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 80, y: 0 } }),
    new LayoutNode("F2", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 140, y: 0 } }),
    new LayoutNode("F3", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 200, y: 0 } }),
    new LayoutNode("F4", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 260, y: 0 } }),
    new LayoutNode("F5", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 335, y: 0 } }),
    new LayoutNode("F6", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 395, y: 0 } }),
    new LayoutNode("F7", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 455, y: 0 } }),
    new LayoutNode("F8", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 515, y: 0 } }),
    new LayoutNode("F9", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 590, y: 0 } }),
    new LayoutNode("F10", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 650, y: 0 } }),
    new LayoutNode("F11", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 710, y: 0 } }),
    new LayoutNode("F12", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 770, y: 0 } }),
    new LayoutNode("Badge", { position: { x: 838, y: -40 }, size: { width: 60, height: 95 }, isKey: false }),
    new LayoutNode("ROTARY ENCODER", {
      position: { x: 903, y: 0 },
      size: { width: 65, height: 65 },
      hasLight: false
    }),
    //"Backquote", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "Digit0", "Minus", "Equal", "Backspace", "NumLock", "NumpadDivide", "NumpadMultiply", "NumpadSubtract",
    new LayoutNode("Backquote", { position: { x: 0, y: 78 } }),
    new LayoutNode("Digit1", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 63, y: 78 } }),
    new LayoutNode("Digit2", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 123, y: 78 } }),
    new LayoutNode("Digit3", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 183, y: 78 } }),
    new LayoutNode("Digit4", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 243, y: 78 } }),
    new LayoutNode("Digit5", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 305, y: 78 } }),
    new LayoutNode("Digit6", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 365, y: 78 } }),
    new LayoutNode("Digit7", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 425, y: 78 } }),
    new LayoutNode("Digit8", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 485, y: 78 } }),
    new LayoutNode("Digit9", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 548, y: 78 } }),
    new LayoutNode("Digit0", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 608, y: 78 } }),
    new LayoutNode("Minus", { position: { x: 670, y: 78 } }),
    new LayoutNode("Equal", { position: { x: 730, y: 78 } }),
    new LayoutNode("Backspace", { position: { x: 790, y: 78 }, size: { width: 120, height: 60 } }),
    new LayoutNode("Delete", { position: { x: 910, y: 78 } }),
    //"Tab", "KeyQ", "KeyW", "KeyE", "KeyR", "KeyT", "KeyY", "KeyU", "KeyI", "KeyO", "KeyP", "BracketLeft", "BracketRight", "Numpad7", "Numpad8", "Numpad9", "NumpadAdd",
    new LayoutNode("Tab", { position: { x: 0, y: 138 }, size: { width: 90, height: 60 } }),
    new LayoutNode("KeyQ", { position: { x: 93, y: 138 } }),
    new LayoutNode("KeyW", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 153, y: 138 } }),
    new LayoutNode("KeyE", { position: { x: 213, y: 138 } }),
    new LayoutNode("KeyR", { position: { x: 273, y: 138 } }),
    new LayoutNode("KeyT", { position: { x: 333, y: 138 } }),
    new LayoutNode("KeyY", { position: { x: 393, y: 138 } }),
    new LayoutNode("KeyU", { position: { x: 453, y: 138 } }),
    new LayoutNode("KeyI", { position: { x: 513, y: 138 } }),
    new LayoutNode("KeyO", { position: { x: 573, y: 138 } }),
    new LayoutNode("KeyP", { position: { x: 633, y: 138 } }),
    new LayoutNode("BracketLeft", { position: { x: 693, y: 138 } }),
    new LayoutNode("BracketRight", { position: { x: 753, y: 138 } }),
    // new LayoutNode('Enter', { position: { x: 850, y: 138 }, size: { width: 75, height: 60 } }),
    new LayoutNode("Backslash", { position: { x: 813, y: 138 }, size: { width: 95, height: 60 } }),
    new LayoutNode("PageUp", { position: { x: 910, y: 138 } }),
    //"CapsLock", "KeyA", "KeyS", "KeyD", "KeyF", "KeyG", "KeyH", "KeyJ", "KeyK", "KeyL", "Semicolon", "Quote", "Backslash", "Enter", "Numpad4", "Numpad5", "Numpad6",
    new LayoutNode("CapsLock", { position: { x: 0, y: 198 }, size: { width: 105, height: 60 } }),
    new LayoutNode("KeyA", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 108, y: 198 } }),
    new LayoutNode("KeyS", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 168, y: 198 } }),
    new LayoutNode("KeyD", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 228, y: 198 } }),
    new LayoutNode("KeyF", { position: { x: 288, y: 198 } }),
    new LayoutNode("KeyG", { position: { x: 348, y: 198 } }),
    new LayoutNode("KeyH", { position: { x: 408, y: 198 } }),
    new LayoutNode("KeyJ", { position: { x: 468, y: 198 } }),
    new LayoutNode("KeyK", { position: { x: 528, y: 198 } }),
    new LayoutNode("KeyL", { position: { x: 588, y: 198 } }),
    new LayoutNode("Semicolon", { position: { x: 648, y: 198 } }),
    new LayoutNode("Quote", { position: { x: 708, y: 198 } }),
    // new LayoutNode('Backslash', { position: { x: 768, y: 198 }, size: { width: 75, height: 60 } }),
    new LayoutNode("Enter", { position: { x: 768, y: 198 }, size: { width: 138, height: 60 } }),
    new LayoutNode("PageDown", { position: { x: 910, y: 198 } }),
    //"ShiftLeft", "IntlBackslash", "KeyZ", "KeyX", "KeyC", "KeyV", "KeyB", "KeyN", "KeyM", "Comma", "Period", "Slash", "ShiftRight", "ArrowUp", "Numpad1", "Numpad2", "Numpad3", "NumpadEnter",
    new LayoutNode("ShiftLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 0, y: 258 }, size: { width: 135, height: 60 } }),
    // new LayoutNode('IntlBackslash', { position: { x: 0, y: 258 } }),
    new LayoutNode("KeyZ", { position: { x: 138, y: 258 } }),
    new LayoutNode("KeyX", { position: { x: 198, y: 258 } }),
    new LayoutNode("KeyC", { position: { x: 258, y: 258 } }),
    new LayoutNode("KeyV", { position: { x: 320, y: 258 } }),
    new LayoutNode("KeyB", { position: { x: 380, y: 258 } }),
    new LayoutNode("KeyN", { position: { x: 440, y: 258 } }),
    new LayoutNode("KeyM", { position: { x: 500, y: 258 } }),
    new LayoutNode("Comma", { position: { x: 560, y: 258 } }),
    new LayoutNode("Period", { position: { x: 620, y: 258 } }),
    new LayoutNode("Slash", { position: { x: 680, y: 258 } }),
    new LayoutNode("ShiftRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 740, y: 258 }, size: { width: 105, height: 60 } }),
    new LayoutNode("ArrowUp", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 847, y: 258 } }),
    new LayoutNode("End", { position: { x: 910, y: 258 } }),
    //"ControlLeft", "MetaLeft", "AltLeft", "Space", "AltRight", "Custom_Fnkey", "ControlRight", "ArrowLeft", "ArrowDown", "ArrowRight", "Numpad0", "NumpadDecimal"
    new LayoutNode("ControlLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 0, y: 318 }, size: { width: 75, height: 60 } }),
    new LayoutNode("MetaLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 78, y: 318 }, size: { width: 75, height: 60 } }),
    new LayoutNode("AltLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 156, y: 318 }, size: { width: 70, height: 60 } }),
    new LayoutNode("Space", { position: { x: 230, y: 318 }, size: { width: 370, height: 60 } }),
    new LayoutNode("AltRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 603, y: 318 }, size: { width: 78, height: 60 } }),
    new LayoutNode("Custom_Fnkey", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 680, y: 318 }, size: { width: 78, height: 60 } }),
    // new LayoutNode("ControlRight", { position: {x: 644, y: 318 }}),
    new LayoutNode("ArrowLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 785, y: 318 } }),
    new LayoutNode("ArrowDown", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 847, y: 318 } }),
    new LayoutNode("ArrowRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 910, y: 318 } })
  ]
};
const valueDvalueBvalueC75ISOLayout = {
  nodeBaseSize: { width: 60, height: 60 },
  nodeBaseOffset: { x: 365, y: 309 },
  selectedNodePosition: { x: 240, y: 100 },
  layoutNodes: [
    //"Escape", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "PrintScreen", "Delete", "Insert", "PageUp", "PageDown",
    new LayoutNode("Escape", { position: { x: 0, y: 0 } }),
    new LayoutNode("F1", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 80, y: 0 } }),
    new LayoutNode("F2", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 140, y: 0 } }),
    new LayoutNode("F3", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 200, y: 0 } }),
    new LayoutNode("F4", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 260, y: 0 } }),
    new LayoutNode("F5", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 335, y: 0 } }),
    new LayoutNode("F6", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 395, y: 0 } }),
    new LayoutNode("F7", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 455, y: 0 } }),
    new LayoutNode("F8", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 515, y: 0 } }),
    new LayoutNode("F9", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 590, y: 0 } }),
    new LayoutNode("F10", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 650, y: 0 } }),
    new LayoutNode("F11", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 710, y: 0 } }),
    new LayoutNode("F12", { quickKeyIds: QuickKeyIdGroupMap.get(
      4
      /* FKeys */
    ), position: { x: 770, y: 0 } }),
    new LayoutNode("Badge", { position: { x: 838, y: -40 }, size: { width: 60, height: 95 } }),
    new LayoutNode("ROTARY ENCODER", {
      position: { x: 903, y: 0 },
      size: { width: 65, height: 65 },
      hasLight: false
    }),
    //"Backquote", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "Digit0", "Minus", "Equal", "Backspace", "NumLock", "NumpadDivide", "NumpadMultiply", "NumpadSubtract",
    new LayoutNode("Backquote", { position: { x: 0, y: 78 } }),
    new LayoutNode("Digit1", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 63, y: 78 } }),
    new LayoutNode("Digit2", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 123, y: 78 } }),
    new LayoutNode("Digit3", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 183, y: 78 } }),
    new LayoutNode("Digit4", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 243, y: 78 } }),
    new LayoutNode("Digit5", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 305, y: 78 } }),
    new LayoutNode("Digit6", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 365, y: 78 } }),
    new LayoutNode("Digit7", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 425, y: 78 } }),
    new LayoutNode("Digit8", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 485, y: 78 } }),
    new LayoutNode("Digit9", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 548, y: 78 } }),
    new LayoutNode("Digit0", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 608, y: 78 } }),
    new LayoutNode("Minus", { position: { x: 670, y: 78 } }),
    new LayoutNode("Equal", { position: { x: 730, y: 78 } }),
    new LayoutNode("Backspace", { position: { x: 790, y: 78 }, size: { width: 120, height: 60 } }),
    new LayoutNode("Delete", { position: { x: 910, y: 78 } }),
    //"Tab", "KeyQ", "KeyW", "KeyE", "KeyR", "KeyT", "KeyY", "KeyU", "KeyI", "KeyO", "KeyP", "BracketLeft", "BracketRight", "Numpad7", "Numpad8", "Numpad9", "NumpadAdd",
    new LayoutNode("Tab", { position: { x: 0, y: 138 }, size: { width: 90, height: 60 } }),
    new LayoutNode("KeyQ", { position: { x: 93, y: 138 } }),
    new LayoutNode("KeyW", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 153, y: 138 } }),
    new LayoutNode("KeyE", { position: { x: 213, y: 138 } }),
    new LayoutNode("KeyR", { position: { x: 273, y: 138 } }),
    new LayoutNode("KeyT", { position: { x: 333, y: 138 } }),
    new LayoutNode("KeyY", { position: { x: 393, y: 138 } }),
    new LayoutNode("KeyU", { position: { x: 453, y: 138 } }),
    new LayoutNode("KeyI", { position: { x: 513, y: 138 } }),
    new LayoutNode("KeyO", { position: { x: 573, y: 138 } }),
    new LayoutNode("KeyP", { position: { x: 633, y: 138 } }),
    new LayoutNode("BracketLeft", { position: { x: 693, y: 138 } }),
    new LayoutNode("BracketRight", { position: { x: 753, y: 138 } }),
    // new LayoutNode('Enter', { position: { x: 850, y: 138 }, size: { width: 75, height: 60 } }),
    new LayoutNode("Backslash", { position: { x: 813, y: 138 }, size: { width: 95, height: 60 } }),
    new LayoutNode("PageUp", { position: { x: 910, y: 138 } }),
    //"CapsLock", "KeyA", "KeyS", "KeyD", "KeyF", "KeyG", "KeyH", "KeyJ", "KeyK", "KeyL", "Semicolon", "Quote", "Backslash", "Enter", "Numpad4", "Numpad5", "Numpad6",
    new LayoutNode("CapsLock", { position: { x: 0, y: 198 }, size: { width: 105, height: 60 } }),
    new LayoutNode("KeyA", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 108, y: 198 } }),
    new LayoutNode("KeyS", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 168, y: 198 } }),
    new LayoutNode("KeyD", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 228, y: 198 } }),
    new LayoutNode("KeyF", { position: { x: 288, y: 198 } }),
    new LayoutNode("KeyG", { position: { x: 348, y: 198 } }),
    new LayoutNode("KeyH", { position: { x: 408, y: 198 } }),
    new LayoutNode("KeyJ", { position: { x: 468, y: 198 } }),
    new LayoutNode("KeyK", { position: { x: 528, y: 198 } }),
    new LayoutNode("KeyL", { position: { x: 588, y: 198 } }),
    new LayoutNode("Semicolon", { position: { x: 648, y: 198 } }),
    new LayoutNode("Quote", { position: { x: 708, y: 198 } }),
    // new LayoutNode('Backslash', { position: { x: 768, y: 198 }, size: { width: 75, height: 60 } }),
    new LayoutNode("Enter", { position: { x: 768, y: 198 }, size: { width: 138, height: 60 } }),
    new LayoutNode("PageDown", { position: { x: 910, y: 198 } }),
    //"ShiftLeft", "IntlBackslash", "KeyZ", "KeyX", "KeyC", "KeyV", "KeyB", "KeyN", "KeyM", "Comma", "Period", "Slash", "ShiftRight", "ArrowUp", "Numpad1", "Numpad2", "Numpad3", "NumpadEnter",
    new LayoutNode("ShiftLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 0, y: 258 }, size: { width: 135, height: 60 } }),
    // new LayoutNode('IntlBackslash', { position: { x: 0, y: 258 } }),
    new LayoutNode("KeyZ", { position: { x: 138, y: 258 } }),
    new LayoutNode("KeyX", { position: { x: 198, y: 258 } }),
    new LayoutNode("KeyC", { position: { x: 258, y: 258 } }),
    new LayoutNode("KeyV", { position: { x: 320, y: 258 } }),
    new LayoutNode("KeyB", { position: { x: 380, y: 258 } }),
    new LayoutNode("KeyN", { position: { x: 440, y: 258 } }),
    new LayoutNode("KeyM", { position: { x: 500, y: 258 } }),
    new LayoutNode("Comma", { position: { x: 560, y: 258 } }),
    new LayoutNode("Period", { position: { x: 620, y: 258 } }),
    new LayoutNode("Slash", { position: { x: 680, y: 258 } }),
    new LayoutNode("ShiftRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 740, y: 258 }, size: { width: 105, height: 60 } }),
    new LayoutNode("ArrowUp", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 847, y: 258 } }),
    new LayoutNode("End", { position: { x: 910, y: 258 } }),
    //"ControlLeft", "MetaLeft", "AltLeft", "Space", "AltRight", "Custom_Fnkey", "ControlRight", "ArrowLeft", "ArrowDown", "ArrowRight", "Numpad0", "NumpadDecimal"
    new LayoutNode("ControlLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 0, y: 318 }, size: { width: 75, height: 60 } }),
    new LayoutNode("MetaLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 78, y: 318 }, size: { width: 75, height: 60 } }),
    new LayoutNode("AltLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 156, y: 318 }, size: { width: 70, height: 60 } }),
    new LayoutNode("Space", { position: { x: 230, y: 318 }, size: { width: 370, height: 60 } }),
    new LayoutNode("AltRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 603, y: 318 }, size: { width: 78, height: 60 } }),
    new LayoutNode("Custom_Fnkey", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 680, y: 318 }, size: { width: 78, height: 60 } }),
    // new LayoutNode("ControlRight", { position: {x: 644, y: 318 }}),
    new LayoutNode("ArrowLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 785, y: 318 } }),
    new LayoutNode("ArrowDown", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 847, y: 318 } }),
    new LayoutNode("ArrowRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 910, y: 318 } })
  ]
};
const valueDvalueBvalueC65Layout = {
  nodeBaseSize: { width: 60, height: 60 },
  nodeBaseOffset: { x: 363, y: 309 },
  selectedNodePosition: { x: 240, y: 100 },
  layoutNodes: [
    //"Escape", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "Digit0", "Minus", "Equal", "Backspace", "Delete",
    new LayoutNode("Escape", { position: { x: 0, y: 0 } }),
    new LayoutNode("Digit1", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 60, y: 0 } }),
    new LayoutNode("Digit2", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 120, y: 0 } }),
    new LayoutNode("Digit3", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 180, y: 0 } }),
    new LayoutNode("Digit4", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 240, y: 0 } }),
    new LayoutNode("Digit5", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 300, y: 0 } }),
    new LayoutNode("Digit6", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 360, y: 0 } }),
    new LayoutNode("Digit7", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 420, y: 0 } }),
    new LayoutNode("Digit8", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 480, y: 0 } }),
    new LayoutNode("Digit9", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 540, y: 0 } }),
    new LayoutNode("Digit0", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 600, y: 0 } }),
    new LayoutNode("Minus", { position: { x: 662, y: 0 } }),
    new LayoutNode("Equal", { position: { x: 723, y: 0 } }),
    new LayoutNode("Backspace", { position: { x: 785, y: 0 }, size: { width: 120, height: 60 } }),
    // new LayoutNode("Delete", { position: {x: 1015, y: 256 } }),
    new LayoutNode("ROTARY ENCODER", {
      position: { x: 925, y: -5 },
      size: { width: 65, height: 65 },
      hasLight: false
    }),
    //"Backquote", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "Digit0", "Minus", "Equal", "Backspace", "NumLock", "NumpadDivide", "NumpadMultiply", "NumpadSubtract",
    // new LayoutNode("Backquote", { position: {x: 13, y: 73 } }),
    //"Tab", "KeyQ", "KeyW", "KeyE", "KeyR", "KeyT", "KeyY", "KeyU", "KeyI", "KeyO", "KeyP", "BracketLeft", "BracketRight", "Backslash", "PageUp",
    new LayoutNode("Tab", { position: { x: 0, y: 60 }, size: { width: 88, height: 60 } }),
    new LayoutNode("KeyQ", { position: { x: 90, y: 60 } }),
    new LayoutNode("KeyW", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 150, y: 60 } }),
    new LayoutNode("KeyE", { position: { x: 210, y: 60 } }),
    new LayoutNode("KeyR", { position: { x: 270, y: 60 } }),
    new LayoutNode("KeyT", { position: { x: 330, y: 60 } }),
    new LayoutNode("KeyY", { position: { x: 390, y: 60 } }),
    new LayoutNode("KeyU", { position: { x: 450, y: 60 } }),
    new LayoutNode("KeyI", { position: { x: 510, y: 60 } }),
    new LayoutNode("KeyO", { position: { x: 570, y: 60 } }),
    new LayoutNode("KeyP", { position: { x: 630, y: 60 } }),
    new LayoutNode("BracketLeft", { position: { x: 692, y: 60 } }),
    new LayoutNode("BracketRight", { position: { x: 753, y: 60 } }),
    new LayoutNode("Backslash", { position: { x: 815, y: 60 }, size: { width: 90, height: 60 } }),
    new LayoutNode("Badge", { position: { x: 910, y: 60 }, size: { width: 100, height: 60 }, isKey: false }),
    //"CapsLock", "KeyA", "KeyS", "KeyD", "KeyF", "KeyG", "KeyH", "KeyJ", "KeyK", "KeyL", "Semicolon", "Quote", "Enter", "PageDown",
    new LayoutNode("CapsLock", { position: { x: 0, y: 120 }, size: { width: 105, height: 60 } }),
    new LayoutNode("KeyA", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 107, y: 120 } }),
    new LayoutNode("KeyS", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 167, y: 120 } }),
    new LayoutNode("KeyD", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 227, y: 120 } }),
    new LayoutNode("KeyF", { position: { x: 287, y: 120 } }),
    new LayoutNode("KeyG", { position: { x: 347, y: 120 } }),
    new LayoutNode("KeyH", { position: { x: 407, y: 120 } }),
    new LayoutNode("KeyJ", { position: { x: 467, y: 120 } }),
    new LayoutNode("KeyK", { position: { x: 527, y: 120 } }),
    new LayoutNode("KeyL", { position: { x: 587, y: 120 } }),
    new LayoutNode("Semicolon", { position: { x: 649, y: 120 } }),
    new LayoutNode("Quote", { position: { x: 710, y: 120 } }),
    // new LayoutNode('Backslash', { position: { x: 988, y: 310 }, size: { width: 70, height: 60 } }),
    new LayoutNode("Enter", { position: { x: 770, y: 120 }, size: { width: 135, height: 60 } }),
    new LayoutNode("PageDown", { position: { x: 910, y: 120 } }),
    //"ShiftLeft", "KeyZ", "KeyX", "KeyC", "KeyV", "KeyB", "KeyN", "KeyM", "Comma", "Period", "Slash", "ShiftRight", "ArrowUp", "End",
    new LayoutNode("ShiftLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 0, y: 180 }, size: { width: 135, height: 60 } }),
    // new LayoutNode('IntlBackslash', { position: { x: 412, y: 407 } }),
    new LayoutNode("KeyZ", { position: { x: 137, y: 180 } }),
    new LayoutNode("KeyX", { position: { x: 197, y: 180 } }),
    new LayoutNode("KeyC", { position: { x: 257, y: 180 } }),
    new LayoutNode("KeyV", { position: { x: 317, y: 180 } }),
    new LayoutNode("KeyB", { position: { x: 377, y: 180 } }),
    new LayoutNode("KeyN", { position: { x: 437, y: 180 } }),
    new LayoutNode("KeyM", { position: { x: 497, y: 180 } }),
    new LayoutNode("Comma", { position: { x: 557, y: 180 } }),
    new LayoutNode("Period", { position: { x: 617, y: 180 } }),
    new LayoutNode("Slash", { position: { x: 677, y: 180 } }),
    new LayoutNode("ShiftRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 737, y: 180 }, size: { width: 113, height: 60 } }),
    new LayoutNode("ArrowUp", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 850, y: 180 } }),
    new LayoutNode("End", { position: { x: 910, y: 180 } }),
    //"ControlLeft", "MetaLeft", "AltLeft", "Space", "AltRight", "Custom_Fnkey", "ArrowLeft", "ArrowDown", "ArrowRight"
    new LayoutNode("ControlLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 0, y: 240 }, size: { width: 70, height: 60 } }),
    new LayoutNode("MetaLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 75, y: 240 }, size: { width: 75, height: 60 } }),
    new LayoutNode("AltLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 155, y: 240 }, size: { width: 70, height: 60 } }),
    new LayoutNode("Space", { position: { x: 228, y: 240 }, size: { width: 375, height: 60 } }),
    new LayoutNode("AltRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 603, y: 240 }, size: { width: 75, height: 60 } }),
    new LayoutNode("Custom_Fnkey", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 683, y: 240 }, size: { width: 75, height: 60 } }),
    new LayoutNode("ArrowLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 790, y: 240 } }),
    new LayoutNode("ArrowDown", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 850, y: 240 } }),
    new LayoutNode("ArrowRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 910, y: 240 } })
  ]
};
const valueDvalueBvalueC65ISOLayout = {
  nodeBaseSize: { width: 60, height: 60 },
  nodeBaseOffset: { x: 363, y: 309 },
  selectedNodePosition: { x: 240, y: 100 },
  layoutNodes: [
    //"Escape", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "Digit0", "Minus", "Equal", "Backspace", "Delete",
    new LayoutNode("Escape", { position: { x: 0, y: 0 } }),
    new LayoutNode("Digit1", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 60, y: 0 } }),
    new LayoutNode("Digit2", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 120, y: 0 } }),
    new LayoutNode("Digit3", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 180, y: 0 } }),
    new LayoutNode("Digit4", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 240, y: 0 } }),
    new LayoutNode("Digit5", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 300, y: 0 } }),
    new LayoutNode("Digit6", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 360, y: 0 } }),
    new LayoutNode("Digit7", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 420, y: 0 } }),
    new LayoutNode("Digit8", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 480, y: 0 } }),
    new LayoutNode("Digit9", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 540, y: 0 } }),
    new LayoutNode("Digit0", { quickKeyIds: QuickKeyIdGroupMap.get(
      1
      /* Numbers */
    ), position: { x: 600, y: 0 } }),
    new LayoutNode("Minus", { position: { x: 662, y: 0 } }),
    new LayoutNode("Equal", { position: { x: 723, y: 0 } }),
    new LayoutNode("Backspace", { position: { x: 785, y: 0 }, size: { width: 120, height: 60 } }),
    // new LayoutNode("Delete", { position: {x: 1015, y: 256 } }),
    new LayoutNode("ROTARY ENCODER", {
      position: { x: 925, y: -5 },
      size: { width: 65, height: 65 },
      hasLight: false
    }),
    //"Backquote", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "Digit0", "Minus", "Equal", "Backspace", "NumLock", "NumpadDivide", "NumpadMultiply", "NumpadSubtract",
    // new LayoutNode("Backquote", { position: {x: 13, y: 73 } }),
    //"Tab", "KeyQ", "KeyW", "KeyE", "KeyR", "KeyT", "KeyY", "KeyU", "KeyI", "KeyO", "KeyP", "BracketLeft", "BracketRight", "Backslash", "PageUp",
    new LayoutNode("Tab", { position: { x: 0, y: 60 }, size: { width: 88, height: 60 } }),
    new LayoutNode("KeyQ", { position: { x: 90, y: 60 } }),
    new LayoutNode("KeyW", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 150, y: 60 } }),
    new LayoutNode("KeyE", { position: { x: 210, y: 60 } }),
    new LayoutNode("KeyR", { position: { x: 270, y: 60 } }),
    new LayoutNode("KeyT", { position: { x: 330, y: 60 } }),
    new LayoutNode("KeyY", { position: { x: 390, y: 60 } }),
    new LayoutNode("KeyU", { position: { x: 450, y: 60 } }),
    new LayoutNode("KeyI", { position: { x: 510, y: 60 } }),
    new LayoutNode("KeyO", { position: { x: 570, y: 60 } }),
    new LayoutNode("KeyP", { position: { x: 630, y: 60 } }),
    new LayoutNode("BracketLeft", { position: { x: 692, y: 60 } }),
    new LayoutNode("BracketRight", { position: { x: 753, y: 60 } }),
    new LayoutNode("Backslash", { position: { x: 815, y: 60 }, size: { width: 90, height: 60 } }),
    new LayoutNode("Badge", { position: { x: 910, y: 60 }, size: { width: 100, height: 60 }, isKey: false }),
    //"CapsLock", "KeyA", "KeyS", "KeyD", "KeyF", "KeyG", "KeyH", "KeyJ", "KeyK", "KeyL", "Semicolon", "Quote", "Enter", "PageDown",
    new LayoutNode("CapsLock", { position: { x: 0, y: 120 }, size: { width: 105, height: 60 } }),
    new LayoutNode("KeyA", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 107, y: 120 } }),
    new LayoutNode("KeyS", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 167, y: 120 } }),
    new LayoutNode("KeyD", { quickKeyIds: QuickKeyIdGroupMap.get(
      0
      /* WASD */
    ), position: { x: 227, y: 120 } }),
    new LayoutNode("KeyF", { position: { x: 287, y: 120 } }),
    new LayoutNode("KeyG", { position: { x: 347, y: 120 } }),
    new LayoutNode("KeyH", { position: { x: 407, y: 120 } }),
    new LayoutNode("KeyJ", { position: { x: 467, y: 120 } }),
    new LayoutNode("KeyK", { position: { x: 527, y: 120 } }),
    new LayoutNode("KeyL", { position: { x: 587, y: 120 } }),
    new LayoutNode("Semicolon", { position: { x: 649, y: 120 } }),
    new LayoutNode("Quote", { position: { x: 710, y: 120 } }),
    // new LayoutNode('Backslash', { position: { x: 988, y: 310 }, size: { width: 70, height: 60 } }),
    new LayoutNode("Enter", { position: { x: 770, y: 120 }, size: { width: 135, height: 60 } }),
    new LayoutNode("PageDown", { position: { x: 910, y: 120 } }),
    //"ShiftLeft", "KeyZ", "KeyX", "KeyC", "KeyV", "KeyB", "KeyN", "KeyM", "Comma", "Period", "Slash", "ShiftRight", "ArrowUp", "End",
    new LayoutNode("ShiftLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 0, y: 180 }, size: { width: 135, height: 60 } }),
    // new LayoutNode('IntlBackslash', { position: { x: 412, y: 407 } }),
    new LayoutNode("KeyZ", { position: { x: 137, y: 180 } }),
    new LayoutNode("KeyX", { position: { x: 197, y: 180 } }),
    new LayoutNode("KeyC", { position: { x: 257, y: 180 } }),
    new LayoutNode("KeyV", { position: { x: 317, y: 180 } }),
    new LayoutNode("KeyB", { position: { x: 377, y: 180 } }),
    new LayoutNode("KeyN", { position: { x: 437, y: 180 } }),
    new LayoutNode("KeyM", { position: { x: 497, y: 180 } }),
    new LayoutNode("Comma", { position: { x: 557, y: 180 } }),
    new LayoutNode("Period", { position: { x: 617, y: 180 } }),
    new LayoutNode("Slash", { position: { x: 677, y: 180 } }),
    new LayoutNode("ShiftRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 737, y: 180 }, size: { width: 113, height: 60 } }),
    new LayoutNode("ArrowUp", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 850, y: 180 } }),
    new LayoutNode("End", { position: { x: 910, y: 180 } }),
    //"ControlLeft", "MetaLeft", "AltLeft", "Space", "AltRight", "Custom_Fnkey", "ArrowLeft", "ArrowDown", "ArrowRight"
    new LayoutNode("ControlLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 0, y: 240 }, size: { width: 70, height: 60 } }),
    new LayoutNode("MetaLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 75, y: 240 }, size: { width: 75, height: 60 } }),
    new LayoutNode("AltLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 155, y: 240 }, size: { width: 70, height: 60 } }),
    new LayoutNode("Space", { position: { x: 228, y: 240 }, size: { width: 375, height: 60 } }),
    new LayoutNode("AltRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 603, y: 240 }, size: { width: 75, height: 60 } }),
    new LayoutNode("Custom_Fnkey", { quickKeyIds: QuickKeyIdGroupMap.get(
      3
      /* Modifiers */
    ), position: { x: 683, y: 240 }, size: { width: 75, height: 60 } }),
    new LayoutNode("ArrowLeft", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 790, y: 240 } }),
    new LayoutNode("ArrowDown", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 850, y: 240 } }),
    new LayoutNode("ArrowRight", { quickKeyIds: QuickKeyIdGroupMap.get(
      5
      /* Arrows */
    ), position: { x: 910, y: 240 } })
  ]
};
const ModelOLayout = {
  // nodeBaseSize: { width: 60, height: 60 },
  nodeBaseOffset: { x: 230, y: 0 },
  // selectedNodePosition: { x: 240, y: 100 },
  layoutNodes: [
    new LayoutNode("LeftButton", {
      position: { x: 0, y: 75 },
      lines: [{ length: 148 }, { y: 20, x: 140, length: 60, angle: 45 }],
      terminationPoint: { x: 520, y: 150 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true
    }),
    new LayoutNode("MiddleButton", {
      position: { x: 0, y: 165 },
      lines: [{ length: 242 }, { y: -17, x: 235, length: 50, angle: 315 }],
      terminationPoint: { x: 612, y: 160 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true,
      lineSide: "right"
    }),
    new LayoutNode("RightButton", {
      position: { x: 850, y: 160 },
      lines: [
        { x: -110, length: 110 },
        { y: -20, x: -160, length: 60, angle: 45 }
      ],
      terminationPoint: { x: 690, y: 150 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true,
      lineSide: "left"
    }),
    new LayoutNode("Forward", {
      position: { x: 0, y: 270 },
      lines: [{ length: 76 }],
      terminationPoint: { x: 410, y: 305 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true
    }),
    new LayoutNode("Back", {
      position: { x: 0, y: 370 },
      lines: [{ length: 76 }],
      terminationPoint: { x: 410, y: 405 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true
    }),
    new LayoutNode("DPISelect", {
      position: { x: 850, y: 255 },
      lines: [{ x: -235, length: 235 }],
      terminationPoint: { x: 612, y: 290 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true,
      lineSide: "left"
    })
  ]
};
const ModelO2Layout = {
  // nodeBaseSize: { width: 60, height: 60 },
  nodeBaseOffset: { x: 230, y: 0 },
  // selectedNodePosition: { x: 240, y: 100 },
  layoutNodes: [
    new LayoutNode("LeftButton", {
      position: { x: 0, y: 75 },
      lines: [{ length: 148 }, { y: 20, x: 140, length: 60, angle: 45 }],
      terminationPoint: { x: 520, y: 150 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true
    }),
    new LayoutNode("MiddleButton", {
      position: { x: 0, y: 185 },
      lines: [{ length: 242 }, { y: -18, x: 235, length: 50, angle: -45 }],
      terminationPoint: { x: 610, y: 180 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true,
      lineSide: "right"
    }),
    new LayoutNode("RightButton", {
      position: { x: 850, y: 160 },
      lines: [
        { x: -110, length: 110 },
        { y: -20, x: -160, length: 60, angle: 45 }
      ],
      terminationPoint: { x: 690, y: 150 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true,
      lineSide: "left"
    }),
    new LayoutNode("Forward", {
      position: { x: 0, y: 290 },
      lines: [{ length: 76 }],
      terminationPoint: { x: 410, y: 325 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true
    }),
    new LayoutNode("Back", {
      position: { x: 0, y: 390 },
      lines: [{ length: 76 }],
      terminationPoint: { x: 410, y: 425 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true
    }),
    new LayoutNode("DPISelect", {
      position: { x: 850, y: 290 },
      lines: [{ x: -235, length: 235 }],
      terminationPoint: { x: 610, y: 325 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true,
      lineSide: "left"
    })
  ]
};
const ModelO2ProLayout = {
  // nodeBaseSize: { width: 60, height: 60 },
  nodeBaseOffset: { x: 230, y: 0 },
  // selectedNodePosition: { x: 240, y: 100 },
  layoutNodes: [
    new LayoutNode("LeftButton", {
      position: { x: 0, y: 75 },
      lines: [{ length: 148 }, { y: 20, x: 140, length: 60, angle: 45 }],
      terminationPoint: { x: 520, y: 150 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true
    }),
    new LayoutNode("MiddleButton", {
      position: { x: 0, y: 185 },
      lines: [{ length: 258 }, { y: -18, x: 250, length: 50, angle: -45 }],
      terminationPoint: { x: 625, y: 180 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true,
      lineSide: "right"
    }),
    new LayoutNode("RightButton", {
      position: { x: 850, y: 160 },
      lines: [
        { x: -110, length: 110 },
        { y: -20, x: -160, length: 60, angle: 45 }
      ],
      terminationPoint: { x: 690, y: 150 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true,
      lineSide: "left"
    }),
    new LayoutNode("Forward", {
      position: { x: 0, y: 290 },
      lines: [{ length: 86 }],
      terminationPoint: { x: 420, y: 325 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true
    }),
    new LayoutNode("Back", {
      position: { x: 0, y: 390 },
      lines: [{ length: 86 }],
      terminationPoint: { x: 420, y: 425 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true
    }),
    new LayoutNode("DPISelect", {
      position: { x: 850, y: 270 },
      lines: [{ x: -225, length: 225 }],
      terminationPoint: { x: 625, y: 305 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true,
      lineSide: "left"
    })
  ]
};
const valueHProLayout = {
  // nodeBaseSize: { width: 60, height: 60 },
  nodeBaseOffset: { x: 230, y: 30 },
  // selectedNodePosition: { x: 240, y: 100 },
  layoutNodes: [
    new LayoutNode("LeftButton", {
      position: { x: 0, y: 75 },
      lines: [{ length: 148 }, { y: 20, x: 140, length: 60, angle: 45 }],
      terminationPoint: { x: 520, y: 150 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true
    }),
    new LayoutNode("MiddleButton", {
      position: { x: 0, y: 185 },
      lines: [{ length: 242 }, { y: -18, x: 235, length: 50, angle: 315 }],
      terminationPoint: { x: 610, y: 180 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true,
      lineSide: "right"
    }),
    new LayoutNode("RightButton", {
      position: { x: 850, y: 160 },
      lines: [
        { x: -110, length: 110 },
        { y: -20, x: -160, length: 60, angle: 45 }
      ],
      terminationPoint: { x: 690, y: 150 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true,
      lineSide: "left"
    }),
    new LayoutNode("Forward", {
      position: { x: 0, y: 290 },
      lines: [{ length: 76 }],
      terminationPoint: { x: 410, y: 325 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true
    }),
    new LayoutNode("Back", {
      position: { x: 0, y: 390 },
      lines: [{ length: 76 }],
      terminationPoint: { x: 410, y: 425 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true
    }),
    new LayoutNode("DPISelect", {
      position: { x: 850, y: 270 },
      lines: [{ x: -235, length: 235 }],
      terminationPoint: { x: 615, y: 305 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true,
      lineSide: "left"
    })
  ]
};
const ModelDLayout = {
  // nodeBaseSize: { width: 60, height: 60 },
  nodeBaseOffset: { x: 230, y: 0 },
  // selectedNodePosition: { x: 240, y: 100 },
  layoutNodes: [
    new LayoutNode("LeftButton", {
      position: { x: 0, y: 75 },
      lines: [{ length: 148 }, { y: 20, x: 140, length: 60, angle: 45 }],
      terminationPoint: { x: 520, y: 150 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true
    }),
    new LayoutNode("MiddleButton", {
      position: { x: 0, y: 185 },
      lines: [{ length: 240 }, { y: -18, x: 233, length: 50, angle: 315 }],
      terminationPoint: { x: 610, y: 180 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true,
      lineSide: "right"
    }),
    new LayoutNode("RightButton", {
      position: { x: 850, y: 160 },
      lines: [
        { x: -110, length: 110 },
        { y: -20, x: -160, length: 60, angle: 45 }
      ],
      terminationPoint: { x: 690, y: 150 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true,
      lineSide: "left"
    }),
    new LayoutNode("Forward", {
      position: { x: 0, y: 290 },
      lines: [{ length: 78 }],
      terminationPoint: { x: 410, y: 325 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true
    }),
    new LayoutNode("Back", {
      position: { x: 0, y: 390 },
      lines: [{ length: 76 }],
      terminationPoint: { x: 410, y: 425 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true
    }),
    new LayoutNode("DPISelect", {
      position: { x: 850, y: 290 },
      lines: [{ x: -235, length: 235 }],
      terminationPoint: { x: 610, y: 325 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true,
      lineSide: "left"
    })
  ]
};
const ModelDProLayout = {
  // nodeBaseSize: { width: 60, height: 60 },
  nodeBaseOffset: { x: 230, y: 0 },
  // selectedNodePosition: { x: 240, y: 100 },
  layoutNodes: [
    new LayoutNode("LeftButton", {
      position: { x: 0, y: 75 },
      lines: [{ length: 148 }, { y: 20, x: 140, length: 60, angle: 45 }],
      terminationPoint: { x: 520, y: 150 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true
    }),
    new LayoutNode("MiddleButton", {
      position: { x: 0, y: 185 },
      lines: [{ length: 243 }, { y: -18, x: 236, length: 50, angle: 315 }],
      terminationPoint: { x: 615, y: 180 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true,
      lineSide: "right"
    }),
    new LayoutNode("RightButton", {
      position: { x: 850, y: 160 },
      lines: [
        { x: -110, length: 110 },
        { y: -20, x: -160, length: 60, angle: 45 }
      ],
      terminationPoint: { x: 690, y: 150 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true,
      lineSide: "left"
    }),
    new LayoutNode("Forward", {
      position: { x: 0, y: 290 },
      lines: [{ length: 78 }],
      terminationPoint: { x: 410, y: 325 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true
    }),
    new LayoutNode("Back", {
      position: { x: 0, y: 390 },
      lines: [{ length: 76 }],
      terminationPoint: { x: 410, y: 425 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true
    }),
    new LayoutNode("DPISelect", {
      position: { x: 850, y: 290 },
      lines: [{ x: -235, length: 235 }],
      terminationPoint: { x: 615, y: 325 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true,
      lineSide: "left"
    })
  ]
};
const ModelD2Layout = {
  // nodeBaseSize: { width: 60, height: 60 },
  nodeBaseOffset: { x: 230, y: 50 },
  // selectedNodePosition: { x: 240, y: 100 },
  layoutNodes: [
    new LayoutNode("LeftButton", {
      position: { x: 0, y: 75 },
      lines: [{ length: 148 }, { y: 20, x: 140, length: 60, angle: 45 }],
      terminationPoint: { x: 520, y: 150 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true
    }),
    new LayoutNode("MiddleButton", {
      position: { x: 0, y: 185 },
      lines: [{ length: 240 }, { y: -67, x: 233, length: 50, angle: -45 }],
      terminationPoint: { x: 610, y: 180 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true,
      lineSide: "right"
    }),
    new LayoutNode("RightButton", {
      position: { x: 850, y: 160 },
      lines: [
        { x: -110, length: 110 },
        { y: -20, x: -160, length: 60, angle: 45 }
      ],
      terminationPoint: { x: 690, y: 150 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true,
      lineSide: "left"
    }),
    new LayoutNode("Forward", {
      position: { x: 0, y: 290 },
      lines: [{ length: 98 }],
      terminationPoint: { x: 430, y: 325 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true
    }),
    new LayoutNode("Back", {
      position: { x: 0, y: 390 },
      lines: [{ length: 96 }],
      terminationPoint: { x: 430, y: 425 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true
    }),
    new LayoutNode("DPISelect", {
      position: { x: 850, y: 290 },
      lines: [{ x: -235, length: 235 }],
      terminationPoint: { x: 610, y: 325 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true,
      lineSide: "left"
    })
  ]
};
const ModelD2ProLayout = {
  // nodeBaseSize: { width: 60, height: 60 },
  nodeBaseOffset: { x: 230, y: 0 },
  // selectedNodePosition: { x: 240, y: 100 },
  layoutNodes: [
    new LayoutNode("LeftButton", {
      position: { x: 0, y: 75 },
      lines: [{ length: 148 }, { y: 20, x: 140, length: 60, angle: 45 }],
      terminationPoint: { x: 520, y: 150 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true
    }),
    new LayoutNode("MiddleButton", {
      position: { x: 0, y: 185 },
      lines: [{ length: 258 }, { y: -18, x: 250, length: 50, angle: -45 }],
      terminationPoint: { x: 625, y: 180 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true,
      lineSide: "right"
    }),
    new LayoutNode("RightButton", {
      position: { x: 850, y: 160 },
      lines: [
        { x: -110, length: 110 },
        { y: -20, x: -160, length: 60, angle: 45 }
      ],
      terminationPoint: { x: 690, y: 150 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true,
      lineSide: "left"
    }),
    new LayoutNode("Forward", {
      position: { x: 0, y: 310 },
      lines: [{ length: 86 }],
      terminationPoint: { x: 420, y: 345 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true
    }),
    new LayoutNode("Back", {
      position: { x: 0, y: 410 },
      lines: [{ length: 86 }],
      terminationPoint: { x: 420, y: 445 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true
    }),
    new LayoutNode("DPISelect", {
      position: { x: 850, y: 290 },
      lines: [{ x: -225, length: 225 }],
      terminationPoint: { x: 625, y: 325 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true,
      lineSide: "left"
    })
  ]
};
const ModelILayout = {
  // nodeBaseSize: { width: 60, height: 60 },
  nodeBaseOffset: { x: 230, y: 0 },
  // selectedNodePosition: { x: 240, y: 100 },
  layoutNodes: [
    new LayoutNode("LeftButton", {
      position: { x: 0, y: 25 },
      lines: [{ length: 102 }, { y: 45, x: 80, length: 125, angle: 45 }],
      terminationPoint: { x: 520, y: 150 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true
    }),
    new LayoutNode("MiddleButton", {
      position: { x: 0, y: 145 },
      lines: [{ length: 288 }],
      terminationPoint: { x: 623, y: 180 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true,
      lineSide: "right"
    }),
    new LayoutNode("RightButton", {
      position: { x: 850, y: 160 },
      lines: [
        { x: -110, length: 110 },
        { y: -20, x: -160, length: 60, angle: 45 }
      ],
      terminationPoint: { x: 690, y: 150 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true,
      lineSide: "left"
    }),
    new LayoutNode("Forward", {
      position: { x: 0, y: 440 },
      lines: [{ length: 50 }, { y: -18, x: 40, length: 50, angle: 315 }],
      terminationPoint: { x: 410, y: 440 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true
    }),
    new LayoutNode("Back", {
      position: { x: 0, y: 530 },
      lines: [{ length: 15 }, { y: -30, x: 3, length: 85, angle: 315 }],
      terminationPoint: { x: 410, y: 500 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true
    }),
    new LayoutNode("DPIUp", {
      position: { x: 850, y: 290 },
      lines: [{ x: -225, length: 225 }],
      terminationPoint: { x: 623, y: 325 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true,
      lineSide: "left"
    }),
    new LayoutNode("ScrollUp", { hideUI: true }),
    new LayoutNode("ScrollDown", { hideUI: true }),
    new LayoutNode("DPI Lock", {
      position: { x: -40, y: 240 },
      lines: [{ length: 45 }, { y: 30, x: 30, length: 90, angle: 45 }],
      terminationPoint: { x: 400, y: 340 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true,
      lineSide: "right"
    }),
    new LayoutNode("Home", {
      position: { x: 0, y: 350 },
      lines: [{ length: 75 }],
      terminationPoint: { x: 410, y: 385 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true
    }),
    new LayoutNode("DPIDown", {
      position: { x: 850, y: 400 },
      lines: [
        { x: -180, length: 180 },
        { y: -25, x: -240, length: 70, angle: 45 }
      ],
      terminationPoint: { x: 622, y: 390 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true,
      lineSide: "left"
    })
  ]
};
const ModelI2Layout = {
  // nodeBaseSize: { width: 60, height: 60 },
  nodeBaseOffset: { x: 235, y: 30 },
  // selectedNodePosition: { x: 240, y: 100 },
  layoutNodes: [
    new LayoutNode("LeftButton", {
      position: { x: 0, y: 25 },
      lines: [{ length: 102 }, { y: 45, x: 80, length: 125, angle: 45 }],
      terminationPoint: { x: 520, y: 150 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true
    }),
    new LayoutNode("MiddleButton", {
      position: { x: 0, y: 145 },
      lines: [{ length: 288 }],
      terminationPoint: { x: 623, y: 180 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true,
      lineSide: "right"
    }),
    new LayoutNode("RightButton", {
      position: { x: 850, y: 160 },
      lines: [
        { x: -110, length: 110 },
        { y: -20, x: -160, length: 60, angle: 45 }
      ],
      terminationPoint: { x: 690, y: 150 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true,
      lineSide: "left"
    }),
    new LayoutNode("Forward", {
      position: { x: 0, y: 440 },
      lines: [{ length: 50 }, { y: -18, x: 40, length: 50, angle: 315 }],
      terminationPoint: { x: 410, y: 440 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true
    }),
    new LayoutNode("Back", {
      position: { x: 0, y: 530 },
      lines: [{ length: 15 }, { y: -30, x: 3, length: 85, angle: 315 }],
      terminationPoint: { x: 410, y: 500 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true
    }),
    new LayoutNode("DPIUp", {
      position: { x: 850, y: 290 },
      lines: [{ x: -225, length: 225 }],
      terminationPoint: { x: 623, y: 325 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true,
      lineSide: "left"
    }),
    new LayoutNode("ScrollUp", { hideUI: true }),
    new LayoutNode("ScrollDown", { hideUI: true }),
    new LayoutNode("DPI Lock", {
      position: { x: -40, y: 240 },
      lines: [{ length: 45 }, { y: 30, x: 30, length: 90, angle: 45 }],
      terminationPoint: { x: 400, y: 340 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true,
      lineSide: "right"
    }),
    new LayoutNode("Home", {
      position: { x: 0, y: 350 },
      lines: [{ length: 75 }],
      terminationPoint: { x: 410, y: 385 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true
    }),
    new LayoutNode("DPIDown", {
      position: { x: 850, y: 400 },
      lines: [
        { x: -180, length: 180 },
        { y: -25, x: -240, length: 70, angle: 45 }
      ],
      terminationPoint: { x: 622, y: 390 },
      size: { width: 340, height: 77 },
      isKey: false,
      isButton: true,
      lineSide: "left"
    })
  ]
};
const DeviceInputLayoutMap = /* @__PURE__ */ new Map([
  // GMMK Numpad
  ["0x320F0x5088", GMMKNumpadLayout],
  // GMMK PRO
  ["0x320F0x5044", GMMKPROLayout],
  ["0x320F0x5092", GMMKPROLayout],
  ["0x320F0x5046", GMMKPROISOLayout],
  ["0x320F0x5093", GMMKPROISOLayout],
  // GMMK 2
  ["0x320F0x5045", GMMKV265Layout],
  ["0x320F0x504A", GMMKV265LayoutISO],
  ["0x320F0x504B", GMMKV296Layout],
  ["0x320F0x505A", GMMKV296ISOLayout],
  // valueD
  ["0x342D0xE3C8", valueDvalueBvalueC100Layout],
  // 100 Wired
  ["0x342D0xE3DF", valueDvalueBvalueC100Layout],
  // 100 HE
  ["0x342D0xE3D1", valueDvalueBvalueC100ISOLayout],
  // 100 ISO
  // ['0x342D0xE3D4', valueDvalueBvalueC100ISOLayout],  // 100 HE ISO
  ["0x342D0xE3C9", valueDvalueBvalueC75Layout],
  // 75 Wired
  ["0x342D0xE3DE", valueDvalueBvalueC75Layout],
  // 75 HE
  ["0x342D0xE3D2", valueDvalueBvalueC75ISOLayout],
  // 75 ISO
  // ['0x342D0xE3D5', valueDvalueBvalueC75ISOLayout],   // 75 HE ISO
  ["0x342D0xE3CA", valueDvalueBvalueC65Layout],
  // 65 Wired
  ["0x342D0xE3DD", valueDvalueBvalueC65Layout],
  // 65 HE
  ["0x342D0xE3D3", valueDvalueBvalueC65ISOLayout],
  // 65 ISO
  // ['0x342D0xE3D6', valueDvalueBvalueC65ISOLayout],   // 65 HE ISO
  // valueB
  ["0x342D0xE3C5", valueDvalueBvalueC100Layout],
  // 100 Wired
  ["0x342D0xE3CB", valueDvalueBvalueC100Layout],
  // 100 Wireless
  ["0x342D0xE3CE", valueDvalueBvalueC100ISOLayout],
  // 100 ISO
  ["0x342D0xE3D4", valueDvalueBvalueC100ISOLayout],
  // 100 Wireless ISO
  ["0x342D0xE3C6", valueDvalueBvalueC75Layout],
  // 75 Wired
  ["0x342D0xE3CC", valueDvalueBvalueC75Layout],
  // 75 Wireless
  ["0x342D0xE3CF", valueDvalueBvalueC75ISOLayout],
  // 75 ISO
  ["0x342D0xE3D5", valueDvalueBvalueC75ISOLayout],
  // 75 Wireless ISO
  ["0x342D0xE3C7", valueDvalueBvalueC65Layout],
  // 65 Wired
  ["0x342D0xE3CD", valueDvalueBvalueC65Layout],
  // 65 Wireless
  ["0x342D0xE3D0", valueDvalueBvalueC65ISOLayout],
  // 65 ISO
  ["0x342D0xE3D6", valueDvalueBvalueC65ISOLayout],
  // 65 Wireless ISO
  // valueC
  ["0x342D0xE3DC", valueDvalueBvalueC100Layout],
  // 100 Wired
  ["0x342D0xE3D9", valueDvalueBvalueC100Layout],
  // 100 Wireless
  ["0x342D0xE3F1", valueDvalueBvalueC100ISOLayout],
  // 100 ISO
  ["0x342D0xE3EE", valueDvalueBvalueC100ISOLayout],
  // 100 Wireless ISO
  ["0x342D0xE3DB", valueDvalueBvalueC75Layout],
  // 75 Wired
  ["0x342D0xE3D8", valueDvalueBvalueC75Layout],
  // 75 Wireless
  ["0x342D0xE3F0", valueDvalueBvalueC75ISOLayout],
  // 75 ISO
  ["0x342D0xE3ED", valueDvalueBvalueC75ISOLayout],
  // 75 Wireless ISO
  ["0x342D0xE3DA", valueDvalueBvalueC65Layout],
  // 65 Wired
  ["0x342D0xE3D7", valueDvalueBvalueC65Layout],
  // 65 Wireless
  ["0x342D0xE3EF", valueDvalueBvalueC65ISOLayout],
  // 65 ISO
  ["0x342D0xE3EC", valueDvalueBvalueC65ISOLayout],
  // 65 Wireless ISO
  ["0x320F0x8888", ModelOLayout],
  // Model O Wired
  ["0x258A0x2011", ModelOLayout],
  // Model O Wireless
  ["0x258A0x2036", ModelOLayout],
  // Model O Minus Wired
  ["0x258A0x2013", ModelOLayout],
  // Model O Minus Wireless
  ["0x258A0x2015", ModelOLayout],
  // Model O Pro Wireless
  ["0x320F0x823A", ModelO2Layout],
  // Model O2 Wired
  ["0x093A0x822A", ModelO2Layout],
  // Model O2 Wireless
  ["0x093A0x826A", ModelO2Layout],
  //valueF Wireless
  ["0x320F0x827A", ModelO2Layout],
  //valueF
  ["0x258A0x2019", ModelO2ProLayout],
  // Model O2 Pro 1k
  ["0x258A0x201B", ModelO2ProLayout],
  // Model O 2 Pro 8k
  ["0x258A0x2012", ModelDLayout],
  // Model D Wireless
  ["0x258A0x2014", ModelDLayout],
  // Model D Minus Wireless
  ["0x258A0x2017", ModelDProLayout],
  // Model D Pro Wireless
  ["0x320F0x825A", ModelD2Layout],
  // Model D2 Wired
  ["0x093A0x824A", ModelD2Layout],
  // Model D2 Wireless
  ["0x258A0x201A", ModelD2ProLayout],
  // Model D 2 Pro 1k
  ["0x258A0x201C", ModelD2ProLayout],
  // Model D 2 Pro 8k
  ["0x22D40x1503", ModelILayout],
  // Model I
  ["0x093A0x821A", ModelI2Layout],
  // Model I2 Wireless
  ["0x320F0x831A", ModelI2Layout],
  // Model valueG
  ["0x258A0x2018", ModelOLayout],
  // Series One Pro Wireless
  ["0x258A0x201D", valueHProLayout]
  //valueH Pro (8k wireless)
]);
const FKeyDeviceSNs = [
  "0x320F0x5044",
  "0x320F0x5092",
  "0x320F0x5046",
  "0x320F0x5093",
  "0x320F0x504B",
  "0x320F0x505A",
  "0x342D0xE3C8",
  "0x342D0xE3DF",
  "0x342D0xE3D1",
  "0x342D0xE3C9",
  "0x342D0xE3DE",
  "0x342D0xE3D2",
  "0x342D0xE3C5",
  "0x342D0xE3CB",
  "0x342D0xE3CE",
  "0x342D0xE3D4",
  "0x342D0xE3C6",
  "0x342D0xE3CC",
  "0x342D0xE3CF",
  "0x342D0xE3D5",
  "0x342D0xE3DC",
  "0x342D0xE3D9",
  "0x342D0xE3F1",
  "0x342D0xE3EE",
  "0x342D0xE3DB",
  "0x342D0xE3D8",
  "0x342D0xE3F0",
  "0x342D0xE3ED"
];
function KeyboardLightingManagementPage(props) {
  const devicesContext = useDevicesContext();
  const uiContext = useUIContext();
  const {
    setColor_PresetColorPicker,
    setColor_PerKeyColorPicker,
    setColor_ModalColorPicker,
    setLightingColorStyle,
    setLightSettingMode,
    openColorModal,
    setSelectedPerKeyAction
  } = useUIUpdateContext();
  const {
    getCurrentProfile,
    setSelectedPerKeyLayout,
    setKeyboardPresetLightingEffect,
    setPresetLightingSpeed,
    setPresetLightingWiredBrightness,
    setPresetLightingWirelessBrightness,
    setPresetSeparateWiredWirelessBrightness,
    setKeyboardPresetLightingColor,
    setKeyboardPresetLightingColorStyle,
    // addToPerKeyLayoutSelection,
    addQuickKeysToPerKeyLayoutSelection,
    removeFromPerKeyLayoutSelection
  } = useDevicesManagementContext();
  const { getLightingLayouts, updateLightingLayout, deleteLightingLayout } = useRecordsUpdateContext();
  const recordsContext = useRecordsContext();
  const translate = useTranslate();
  const [presetEffectOptions, setPresetEffectOptions] = reactExports.useState([]);
  const [currentGradient, setCurrentGradient] = reactExports.useState();
  const [colorDialogIsOpen, setColorDialogIsOpen] = reactExports.useState(false);
  const [deviceLayoutRecords, setDeviceLayoutRecords] = reactExports.useState([]);
  const [layoutItems, setLayoutItems] = reactExports.useState([]);
  const colorArray = reactExports.useMemo(() => {
    return getCurrentProfile()?.light_PRESETS_Data?.colors ?? [];
  }, [getCurrentProfile()?.light_PRESETS_Data?.colors]);
  const selectedPresetColor = reactExports.useMemo(() => {
    const colorArray2 = getCurrentProfile()?.light_PRESETS_Data?.colors;
    if (colorArray2 == null || colorArray2.length <= uiContext.selectedColorIndex)
      return "#000000";
    return colorArray2[uiContext.selectedColorIndex];
  }, [uiContext.selectedColorIndex, colorArray]);
  const ColorPicker_OnChange = (color2) => {
    setColor_PresetColorPicker(color2);
    colorArray[uiContext.selectedColorIndex] = color2.toHex();
    setKeyboardPresetLightingColor(colorArray);
  };
  const ColorPickerExpanded_OnChange = (color2) => {
    setColor_ModalColorPicker(color2);
    colorArray[uiContext.selectedColorIndex] = color2.toHex();
    setKeyboardPresetLightingColor(colorArray);
  };
  reactExports.useEffect(() => {
    if (devicesContext.previewDevice == null) {
      return;
    }
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Profile is undefined");
    }
    setPresetEffectOptions(
      devicesContext.previewDevice.lightingEffects.map((item) => {
        return {
          value: item.value,
          label: translate(item.translationKey, item.data?.translationFallback)
        };
      })
    );
    const items = [];
    const records = [];
    for (let i2 = 0; i2 < recordsContext.lightingLayouts.length; i2++) {
      if (recordsContext.lightingLayouts[i2].SN == devicesContext.previewDevice.SN) {
        items.push({ label: recordsContext.lightingLayouts[i2].name, id: items.length });
        records.push(recordsContext.lightingLayouts[i2]);
      }
    }
    setLayoutItems(items);
    setDeviceLayoutRecords(records);
    for (let i2 = 0; i2 < devicesContext.previewDevice.rgbGradients.length; i2++) {
      const gradient = devicesContext.previewDevice.rgbGradients[i2];
      const stops = gradient.data?.stops;
      if (stops == null) {
        return;
      }
      let foundMismatch = false;
      for (let j = 0; j < stops.length; j++) {
        if (profile.lighting?.Color[j] == null) {
          foundMismatch = true;
          break;
        }
        const profileColor = RGBAColor.fromRGB(
          profile.lighting?.Color[j].R,
          profile.lighting?.Color[j].G,
          profile.lighting?.Color[j].B
        );
        if (profileColor.toHex() != stops[j].hex.toLowerCase()) {
          foundMismatch = true;
          break;
        }
      }
      if (foundMismatch) {
        continue;
      }
      setCurrentGradient(gradient);
      break;
    }
  }, [devicesContext.previewDevice]);
  reactExports.useEffect(() => {
    if (devicesContext.previewDevice == null) {
      return;
    }
    const items = [];
    const records = [];
    for (let i2 = 0; i2 < recordsContext.lightingLayouts.length; i2++) {
      if (recordsContext.lightingLayouts[i2].SN == devicesContext.previewDevice.SN) {
        items.push({ label: recordsContext.lightingLayouts[i2].name, id: items.length });
        records.push(recordsContext.lightingLayouts[i2]);
      }
    }
    setLayoutItems(items);
    setDeviceLayoutRecords(records);
  }, [recordsContext.lightingLayouts]);
  reactExports.useEffect(() => {
    const profile = getCurrentProfile();
    if (profile == null) {
      return;
    }
    if (uiContext.lightSettingMode == "per-key") {
      if (profile.light_PERKEY_Data == null) {
        console.error(new Error("Current Device's perkey lighting data is undefined."));
        return;
      }
      const lightingLayout = recordsContext.lightingLayouts[profile.light_PERKEY_Data.value];
      const lightingArray = lightingLayout.content.AllBlockColor;
      if (uiContext.perKeyLightingSelectedNode == null) {
        return;
      }
      const lightingItem = lightingArray[uiContext.perKeyLightingSelectedNode.keybindArrayIndex];
      lightingItem.color = [
        uiContext.activeLightingPicker_selectedColor.r,
        uiContext.activeLightingPicker_selectedColor.g,
        uiContext.activeLightingPicker_selectedColor.b,
        1
      ];
    }
  }, [uiContext.lightSettingMode]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "div",
      {
        className: `layout lighting keyboard${uiContext.lightSettingMode == "none" ? "" : ` ${uiContext.lightSettingMode}`}`,
        children: [
          uiContext.lightSettingMode == "none" ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "panel main", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "stack mode-select", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "a",
              {
                className: "option",
                onClick: () => {
                  setLightSettingMode("preset");
                },
                children: translate("Option_LightSettingMode_PresetEffects", "Preset Effects")
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "a",
              {
                className: "option",
                onClick: () => {
                  setLightSettingMode("per-key");
                },
                children: translate("Option_LightSettingMode_CustomPerKey", "Custom Per Key")
              }
            )
          ] }) }) }) : null,
          uiContext.lightSettingMode == "preset" ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel main", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("Device_Lighting_Label_PresetEffect", "Preset Effect") }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                OptionSelectComponent,
                {
                  options: presetEffectOptions,
                  value: getCurrentProfile()?.light_PRESETS_Data?.value,
                  onChange: (value2) => {
                    const index2 = parseInt(value2);
                    setKeyboardPresetLightingEffect(index2);
                  }
                }
              ),
              DevicesAdapter.isWirelessKeyboard(devicesContext.previewDevice?.SN) ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "setting separate-brightness", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("header", { className: "", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate(
                  "Device_Lighting_Label_SeparateBrightness_WiredWireless",
                  "Separate Wired / Wireless Brightness Setting"
                ) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  ToggleComponent,
                  {
                    value: getCurrentProfile()?.light_PRESETS_Data?.separateBrightness,
                    onChange: (value2) => {
                      setPresetSeparateWiredWirelessBrightness(value2);
                    }
                  }
                ) })
              ] }) }) : /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {})
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "panel second", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "controls", children: [
              getCurrentProfile()?.light_PRESETS_Data.value != 0 ? (
                // glorious mode is a single rate
                /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field rate", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "label", children: [
                    translate("Device_Lighting_Label_Rate", "Rate"),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "result", children: [
                      getCurrentProfile()?.light_PRESETS_Data?.speed,
                      "%"
                    ] })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    RangeComponent,
                    {
                      value: getCurrentProfile()?.light_PRESETS_Data?.speed,
                      onChange: (value2) => {
                        setPresetLightingSpeed(value2);
                      }
                    }
                  )
                ] })
              ) : /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                "label",
                {
                  className: "field wireless-brightness",
                  style: {
                    "--opacity": getCurrentProfile()?.light_PRESETS_Data?.separateBrightness == true ? 1 : 0,
                    "--height": getCurrentProfile()?.light_PRESETS_Data?.separateBrightness == true ? "auto" : "0"
                  },
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "label", children: [
                      translate("Device_Lighting_Label_Brightness_Wireless", "Wireless Brightness"),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "result", children: [
                        getCurrentProfile()?.light_PRESETS_Data?.wirelessBrightness,
                        "%"
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      RangeComponent,
                      {
                        value: getCurrentProfile()?.light_PRESETS_Data?.wirelessBrightness,
                        onChange: (value2) => {
                          setPresetLightingWirelessBrightness(value2);
                        }
                      }
                    )
                  ]
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field brightness", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "label", children: [
                  translate("Device_Lighting_Label_Brightness", "Brightness"),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "result", children: [
                    getCurrentProfile()?.light_PRESETS_Data?.brightness,
                    "%"
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  RangeComponent,
                  {
                    value: getCurrentProfile()?.light_PRESETS_Data?.brightness,
                    onChange: (value2) => {
                      setPresetLightingWiredBrightness(value2);
                    }
                  }
                )
              ] })
            ] }) }),
            devicesContext.presetEffectHasFixedColors == true ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel third color-picker", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("header", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("ColorPicker_Label_ColorPicker", "Color Picker") }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    type: "button",
                    onClick: () => {
                      setColorDialogIsOpen(true);
                    },
                    children: translate("Button_Expand", "Expand")
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                ColorPickerComponent,
                {
                  value: RGBAColor.fromHex(selectedPresetColor),
                  onChange: ColorPicker_OnChange
                }
              )
            ] })
          ] }) : null,
          uiContext.lightSettingMode == "per-key" ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "panel main", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "stack-container custom-layouts", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("header", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("Device_Lighting_Label_CustomPerKey", "Custom Per Key") }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    onClick: () => {
                      const layout = new LightingLayoutRecord();
                      layout.SN = devicesContext.previewDevice.SN;
                      layout.devicename = devicesContext.previewDevice.devicename;
                      const highestValue = deviceLayoutRecords.reduce((highest, item, index2) => {
                        if (item.value >= highest) {
                          return item.value;
                        } else {
                          return highest;
                        }
                      }, 1);
                      layout.value = highestValue + 1;
                      layout.name = `Layout ${layout.value}`;
                      const allBlockColor = [].fill(
                        new LightingLayoutBlockColor(),
                        0,
                        getCurrentProfile().maxKayCapNumber
                      );
                      layout.content = new LightingLayoutContent(
                        allBlockColor,
                        new LightingLayoutLightData()
                      );
                      updateLightingLayout(layout);
                      setTimeout(() => {
                        getLightingLayouts();
                      }, 3);
                    },
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: IconType.PlusOutline, size: IconSize.XSmall, color: Color.Base30 })
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                EditableListComponent,
                {
                  noItemsMessage: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: translate("Device_Lighting_Label_NoCustomLayouts", "No Custom Layouts") }),
                  items: layoutItems,
                  onClick: (value2, index2) => {
                    setSelectedPerKeyLayout(index2 + 1);
                  },
                  selectedID: getCurrentProfile()?.light_PERKEY_Data.value - 1,
                  onButtonClick: (action, item, index2) => {
                    if (action == "remove") {
                      const layout = deviceLayoutRecords[index2];
                      deleteLightingLayout(layout.SN, layout.value);
                      setTimeout(() => {
                        getLightingLayouts();
                      }, 3);
                      return;
                    } else if (action == "edit") {
                      const layout = deviceLayoutRecords[index2];
                      layout.name = item.label;
                      updateLightingLayout(layout);
                      setTimeout(() => {
                        getLightingLayouts();
                      }, 3);
                    }
                  }
                }
              )
            ] }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel second per-key-settings", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "top-row", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "action", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("header", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("Device_Lighting_Label_Action", "Action") }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "status", children: uiContext.selectedPerKeyAction == PerKeyAction.Add ? translate("Device_Lighting_Label_Add", "Add") : translate("Device_Lighting_Label_Remove", "Remove") })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: IconType.CancelCross, size: IconSize.XSmall, color: uiContext.selectedPerKeyAction == PerKeyAction.Remove ? Color.Glorange60 : Color.Base20 }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      ToggleComponent,
                      {
                        value: uiContext.selectedPerKeyAction == PerKeyAction.Add,
                        onChange: (value2) => {
                          setSelectedPerKeyAction(value2 == PerKeyAction.Add);
                        }
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: IconType.Edit, size: IconSize.Smaller, color: uiContext.selectedPerKeyAction == PerKeyAction.Add ? Color.Glorange60 : Color.Base20 })
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "breathing", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("header", { className: "title", children: translate("Device_Lighting_Label_Breathing", "Breathing") }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    ToggleComponent,
                    {
                      value: uiContext.selectedPerKeyData?.breathing,
                      onChange: (value2) => {
                      }
                    }
                  ) })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "brightness", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("header", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("Device_Lighting_Label_Brightness", "Brightness") }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: uiContext.selectedPerKeyData?.brightness })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    RangeComponent,
                    {
                      className: "brightness",
                      value: uiContext.selectedPerKeyData?.brightness,
                      onChange: (value2) => {
                      }
                    }
                  )
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "quick-keys", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("Device_Lighting_Label_QuickKeySelection", "Quick Key Selection") }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "options", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "row one", children: [
                    devicesContext.previewDevice?.SN != "0x320F0x5088" && /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        className: "hollow",
                        onClick: () => {
                          addQuickKeysToPerKeyLayoutSelection(QuickKeyId.WASD);
                        },
                        children: translate("Option_QuickKeySelection_WASD", "WASD")
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        className: "hollow",
                        onClick: () => {
                          addQuickKeysToPerKeyLayoutSelection(QuickKeyId.Numbers);
                        },
                        children: translate("Option_QuickKeySelection_Numbers", "Numbers")
                      }
                    ),
                    false
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "row two", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        className: "hollow",
                        onClick: () => {
                          addQuickKeysToPerKeyLayoutSelection(QuickKeyId.Modifiers);
                        },
                        children: translate("Option_QuickKeySelection_Modifiers", "Modifiers")
                      }
                    ),
                    devicesContext.previewDevice != null && FKeyDeviceSNs.indexOf(devicesContext.previewDevice.SN) > -1 && /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        className: "hollow",
                        onClick: () => {
                          addQuickKeysToPerKeyLayoutSelection(QuickKeyId.FKeys);
                        },
                        children: translate("Option_QuickKeySelection_FKeys", "F Keys")
                      }
                    ),
                    devicesContext.previewDevice?.SN != "0x320F0x5088" && /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        className: "hollow",
                        onClick: () => {
                          addQuickKeysToPerKeyLayoutSelection(QuickKeyId.Arrows);
                        },
                        children: translate("Option_QuickKeySelection_Arrows", "Arrows")
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        className: "hollow",
                        onClick: () => {
                          addQuickKeysToPerKeyLayoutSelection(QuickKeyId.All);
                        },
                        children: translate("Option_QuickKeySelection_All", "All")
                      }
                    )
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "result" })
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel third color-picker", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("header", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("ColorPicker_Label_ColorPicker", "Color Picker") }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    type: "button",
                    onClick: () => {
                      setColorDialogIsOpen(true);
                    },
                    children: translate("Button_Expand", "Expand")
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                ColorPickerComponent,
                {
                  value: uiContext.colorPickerValue_PerKeyLighting,
                  onChange: (color2) => {
                    setColor_PerKeyColorPicker(color2);
                  }
                }
              )
            ] })
          ] }) : null
        ]
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      ContentDialogComponent,
      {
        className: "color",
        title: "Color Picker",
        open: colorDialogIsOpen,
        actions: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              type: "button",
              onClick: () => {
                setColorDialogIsOpen(false);
              },
              children: translate("Button_Cancel", "Cancel")
            },
            0
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              type: "button",
              onClick: () => {
                setColorDialogIsOpen(false);
              },
              children: translate("Button_Ok", "Ok")
            },
            1
          )
        ],
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          ColorPickerComponent,
          {
            expanded: true,
            value: RGBAColor.fromHex(selectedPresetColor),
            onChange: ColorPickerExpanded_OnChange
          }
        )
      }
    )
  ] });
}
function MouseLightingManagementPage(props) {
  const devicesContext = useDevicesContext();
  const {
    getCurrentProfile,
    setLightingEffect,
    setSeparateWiredWirelessBrightness,
    setWiredBrightness,
    setWirelessBrightness,
    setRate,
    setMouseLightingColor,
    setSelectedPresetGradient
  } = useDevicesManagementContext();
  const uiContext = useUIContext();
  const {
    setColor_PresetColorPicker,
    setColor_ModalColorPicker
    // setLightingColorStyle
  } = useUIUpdateContext();
  const translate = useTranslate();
  const [presetEffectOptions, setPresetEffectOptions] = reactExports.useState([]);
  const [currentGradient, setCurrentGradient] = reactExports.useState();
  const [colorDialogIsOpen, setColorDialogIsOpen] = reactExports.useState(false);
  const colorArray = reactExports.useMemo(() => {
    return getCurrentProfile()?.lighting?.Color ?? [];
  }, [getCurrentProfile()?.lighting?.Color]);
  const selectedColor = reactExports.useMemo(() => {
    if (colorArray.length <= uiContext.selectedColorIndex) {
      return new RGBAColor();
    }
    const color2 = colorArray[uiContext.selectedColorIndex];
    return RGBAColor.fromRGB(color2.R, color2.G, color2.B);
  }, [uiContext.selectedColorIndex]);
  reactExports.useEffect(() => {
    if (devicesContext.previewDevice == null) {
      return;
    }
    const profile = getCurrentProfile();
    if (profile == null) {
      throw new Error("Profile is undefined");
    }
    setPresetEffectOptions(
      devicesContext.previewDevice.lightingEffects.map((item) => {
        return {
          value: item.value,
          label: translate(item.translationKey, item.data?.translationFallback)
        };
      })
    );
    for (let i2 = 0; i2 < devicesContext.previewDevice.rgbGradients.length; i2++) {
      const gradient = devicesContext.previewDevice.rgbGradients[i2];
      const stops = gradient.data?.stops;
      if (stops == null) {
        console.log("stops == null");
        return;
      }
      let foundMismatch = false;
      for (let j = 0; j < stops.length; j++) {
        if (profile.lighting?.Color[j] == null) {
          foundMismatch = true;
          break;
        }
        const profileColor = RGBAColor.fromRGB(
          profile.lighting?.Color[j].R,
          profile.lighting?.Color[j].G,
          profile.lighting?.Color[j].B
        );
        if (profileColor.toHex() != stops[j].hex.toLowerCase()) {
          foundMismatch = true;
          break;
        }
      }
      if (foundMismatch) {
        continue;
      }
      setCurrentGradient(gradient);
      break;
    }
  }, [devicesContext.previewDevice]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "layout lighting mouse preset", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel main", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("Device_Lighting_Label_Effect", "Effect") }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          OptionSelectComponent,
          {
            options: presetEffectOptions,
            value: getCurrentProfile()?.lighting?.Effect,
            onChange: (value2) => {
              setLightingEffect(parseInt(value2));
            }
          }
        ),
        devicesContext.previewDevice?.SN && DevicePairableDevices.get(devicesContext.previewDevice.SN) != null && DevicePairableDevices.get(devicesContext.previewDevice.SN).length > 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "setting separate-brightness", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate(
            "Device_Lighting_Label_SeparateBrightness_WiredWireless",
            "Separate Wired / Wireless Brightness Setting"
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            ToggleComponent,
            {
              value: getCurrentProfile()?.lighting?.SepatateCheckValue,
              onChange: (value2) => {
                setSeparateWiredWirelessBrightness(value2);
              }
            }
          ) })
        ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {})
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "panel second", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "controls", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "label", children: [
            getCurrentProfile()?.lighting?.SepatateCheckValue == true ? `${translate("Device_Lighting_Label_Brightness_WiredPrefix", "Wired")} ` : "",
            translate("Device_Lighting_Label_Brightness", "Brightness"),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "result", children: [
              getCurrentProfile()?.lighting?.WiredBrightnessValue,
              "%"
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            RangeComponent,
            {
              value: getCurrentProfile()?.lighting?.WiredBrightnessValue,
              onChange: (value2) => {
                setWiredBrightness(value2);
              }
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "label",
          {
            className: "field wireless-brightness",
            style: {
              "--opacity": getCurrentProfile()?.lighting?.SepatateCheckValue == true ? 1 : 0,
              "--height": getCurrentProfile()?.lighting?.SepatateCheckValue == true ? "auto" : "0"
            },
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "label", children: [
                translate("Device_Lighting_Label_Brightness_Wireless", "Wireless Brightness"),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "result", children: [
                  getCurrentProfile()?.lighting?.WirelessBrightnessValue,
                  "%"
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                RangeComponent,
                {
                  value: getCurrentProfile()?.lighting?.WirelessBrightnessValue,
                  onChange: (value2) => {
                    setWirelessBrightness(value2);
                  }
                }
              )
            ]
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "label", children: [
            translate("Device_Lighting_Label_Rate", "Rate"),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "result", children: [
              getCurrentProfile()?.lighting?.RateValue,
              "%"
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            RangeComponent,
            {
              value: getCurrentProfile()?.lighting?.RateValue,
              onChange: (value2) => {
                setRate(value2);
              }
            }
          )
        ] })
      ] }) }),
      function() {
        console.log("show color", uiContext.lightingSelectedPreset?.data?.enableColorSelection, uiContext.lightingSelectedColorStyle?.optionKey);
        return void 0;
      }(),
      getCurrentProfile()?.lighting?.Effect == 0 ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}) : getCurrentProfile()?.lighting?.Effect != null && uiContext.lightingSelectedPreset?.data?.enableGradients && uiContext.lightingSelectedColorStyle?.optionKey == "rgbGradient" ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel third", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("Device_Lighting_Label_RGBGradient", "RGB Gradient") }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "stack gradient-select", children: devicesContext.previewDevice?.rgbGradients.map((gradient, index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "a",
          {
            className: `option${gradient == uiContext.lightingPresetGradient ? " selected" : ""}`,
            title: translate(gradient.translationKey, gradient.data?.translationFallback),
            onClick: () => {
              setSelectedPresetGradient(gradient);
            },
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "name", children: translate(gradient.translationKey, gradient.data?.translationFallback) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "span",
                {
                  className: "gradient",
                  style: {
                    background: `linear-gradient(to right, ${gradient.data?.stops.reduce(
                      (accumulatedString, stop, i2) => {
                        const stopString = stop.stop == void 0 ? stop.hex : `${stop.hex} ${stop.stop}`;
                        if (i2 == gradient.data.stops.length - 1) {
                          accumulatedString += stopString;
                        } else {
                          accumulatedString += stopString + ", ";
                        }
                        return accumulatedString;
                      },
                      ""
                    )})`
                  }
                }
              )
            ]
          },
          index2
        )) })
      ] }) : getCurrentProfile()?.lighting?.Effect != null && uiContext.lightingSelectedPreset?.data?.enableColorSelection ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel third color-picker", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("header", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("ColorPicker_Label_ColorPicker", "Color Picker") }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              type: "button",
              onClick: () => {
                setColorDialogIsOpen(true);
              },
              children: translate("Button_Expand", "Expand")
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          ColorPickerComponent,
          {
            value: selectedColor,
            onChange: (color2) => {
              setColor_PresetColorPicker(color2);
              colorArray[uiContext.selectedColorIndex] = { R: color2.r, G: color2.g, B: color2.b, flag: true };
              setMouseLightingColor(colorArray);
            }
          }
        )
      ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {})
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      ContentDialogComponent,
      {
        className: "color",
        title: "Color Picker",
        open: colorDialogIsOpen,
        actions: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              type: "button",
              onClick: () => {
                setColorDialogIsOpen(false);
                colorArray[uiContext.selectedColorIndex] = {
                  R: uiContext.colorPickerValue_PresetLighting.r,
                  G: uiContext.colorPickerValue_PresetLighting.g,
                  B: uiContext.colorPickerValue_PresetLighting.b,
                  flag: true
                };
                setMouseLightingColor(colorArray);
              },
              children: translate("Button_Cancel", "Cancel")
            },
            0
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              type: "button",
              onClick: () => {
                setColorDialogIsOpen(false);
                colorArray[uiContext.selectedColorIndex] = {
                  R: uiContext.colorPickerValue_ColorPickerModal.r,
                  G: uiContext.colorPickerValue_ColorPickerModal.g,
                  B: uiContext.colorPickerValue_ColorPickerModal.b,
                  flag: true
                };
                setMouseLightingColor(colorArray);
              },
              children: translate("Button_Ok", "Ok")
            },
            1
          )
        ],
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          ColorPickerComponent,
          {
            expanded: true,
            value: selectedColor,
            onChange: (color2) => {
              setColor_ModalColorPicker(color2);
              colorArray[uiContext.selectedColorIndex] = { R: color2.r, G: color2.g, B: color2.b, flag: true };
              setMouseLightingColor(colorArray);
            }
          }
        )
      }
    )
  ] });
}
const lightingManagement_page = "";
function LightingManagementPage(props) {
  const devicesContext = useDevicesContext();
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: devicesContext.previewDevice?.deviceCategoryName == "Mouse" ? /* @__PURE__ */ jsxRuntimeExports.jsx(MouseLightingManagementPage, {}) : devicesContext.previewDevice?.deviceCategoryName == "Keyboard" || devicesContext.previewDevice?.deviceCategoryName == "Numpad" ? /* @__PURE__ */ jsxRuntimeExports.jsx(KeyboardLightingManagementPage, {}) : devicesContext.previewDevice?.deviceCategoryName == "valueJ" ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("valueJLightingManagementPage", {}) }) : devicesContext.previewDevice?.deviceCategoryName == "valueE" ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("a", { children: "An Error has occurred." }) }) : /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}) });
}
const device_page = "";
const tooltip_component = "";
function TooltipComponent(props) {
  const [open, setOpen] = reactExports.useState(false);
  const [openOnHover, setOpenOnHover] = reactExports.useState(false);
  const { message, hover } = props;
  const appDataContext = useAppDataContext();
  reactExports.useEffect(() => {
    setOpenOnHover(hover);
  }, [hover]);
  const handleOffComponentClick = reactExports.useCallback((event) => {
    event.preventDefault();
    event.stopPropagation();
    if (event.target.closest("[data-selection]") == null) {
      setOpen(false);
      window.removeEventListener("click", handleOffComponentClick);
    }
  }, []);
  const handleClick = (event) => {
    event.preventDefault();
    event.stopPropagation();
    const newValue = !open;
    setOpen(newValue);
    window.removeEventListener("click", handleOffComponentClick);
    if (newValue == true) {
      window.addEventListener("click", handleOffComponentClick, { once: true });
    }
  };
  if (openOnHover == true && appDataContext.tooltip) {
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "div",
      {
        className: "tooltip hover",
        onMouseEnter: () => {
          setOpen(true);
        },
        onMouseLeave: () => {
          setOpen(false);
        },
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "display", children: "?" }),
          !open ? "" : props.children != null ? props.children : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "message", children: message })
        ]
      }
    );
  }
  return appDataContext.tooltip ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "tooltip click", onClick: handleClick, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "display", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: IconType.QuestionMark, color: Color.Base20, size: IconSize.Smaller }) }),
    !open ? "" : props.children != null ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "shade" }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "tip", children: props.children }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("button", { className: "close-button", onClick: () => setOpen(false), children: /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: IconType.CancelCross, color: Color.Base50, size: IconSize.Small }) })
      ] })
    ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "shade" }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "tip", children: message }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("button", { className: "close-button", onClick: () => setOpen(false), children: /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: IconType.CancelCross, color: Color.Base50, size: IconSize.Medium }) })
      ] })
    ] })
  ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {});
}
function MouseDeviceSettingsManagementPage() {
  const { previewDevice } = useDevicesContext();
  const { getCurrentProfile } = useDevicesManagementContext();
  const translate = useTranslate();
  const { setPollingRate, setLiftOffDistance, setDebounceTime, setIsMotionSyncActive } = useDevicesManagementContext();
  const { pollingRate, liftOffDistance, debounceTime, motionSyncEnable } = reactExports.useMemo(() => {
    const performance2 = getCurrentProfile()?.performance;
    if (!performance2)
      return { pollingRate: 0, liftOffDistance: 0, debounceTime: 0, motionSyncEnable: false };
    return {
      pollingRate: performance2.pollingrate,
      liftOffDistance: performance2.LodValue,
      debounceTime: performance2.DebounceValue,
      motionSyncEnable: performance2.MotionSyncFlag ?? false
    };
  }, [previewDevice]);
  const pollingRateOptions = reactExports.useMemo(() => {
    let pollingRateOptions2 = [];
    if (previewDevice?.pollingRates != null) {
      pollingRateOptions2 = previewDevice.pollingRates.flatMap((option) => {
        return {
          value: option.value,
          label: translate(option.translationKey, option.data?.translationFallback) ?? ""
        };
      });
    }
    return pollingRateOptions2;
  }, [previewDevice?.pollingRates]);
  const liftOffDistanceOptions = reactExports.useMemo(() => {
    let liftOffDistanceOptions2 = [];
    if (previewDevice?.liftoffDistances != null) {
      liftOffDistanceOptions2 = previewDevice.liftoffDistances.flatMap((option) => {
        return {
          value: option.value,
          label: translate(option.translationKey, option.data?.translationFallback) ?? ""
        };
      });
    }
    return liftOffDistanceOptions2;
  }, [previewDevice?.liftoffDistances]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel settings mouse", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "column", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "label", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text", children: translate("Device_Settings_Label_PollingRate", "Polling Rate") }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(TooltipComponent, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: translate("Tooltip_PollingRate_Title", "Polling Rate") }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "message", children: translate(
              "Tooltip_PollingRate_Description",
              "Polling Rate is how often your OS checks for input. This is a factor in determining the maximum input latency of key presses. A high polling rate takes up more CPU resources than lower polling rates."
            ) })
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          OptionSelectComponent,
          {
            options: pollingRateOptions,
            value: pollingRate,
            onChange: (value2) => {
              setPollingRate(value2);
            }
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "result" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field motion-sync", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "label", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text", children: translate("Device_Settings_Label_MotionSync", "Motion Sync") }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(TooltipComponent, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: translate("Tooltip_MotionSync_Title", "Motion Sync") }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "message", children: translate(
              "Tooltip_MotionSync_Description",
              "Motion Sync optimizes mouse tracking by synchronizing sensor and USB polling events."
            ) })
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          ToggleComponent,
          {
            value: motionSyncEnable,
            onChange: (value2) => {
              setIsMotionSyncActive(value2);
            }
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "column", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "label", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text", children: translate("Device_Settings_Label_LiftOffDistance", "Lift-off Distance") }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(TooltipComponent, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: translate("Tooltip_LiftOffDistance_Title", "Lift Off Distance") }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "message", children: translate(
            "Tooltip_LiftOffDistance_Description",
            "Lift-off Distance is how far the mouse sensor has to be from the valueJ or surface to stop tracking."
          ) })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        OptionSelectComponent,
        {
          options: liftOffDistanceOptions,
          value: liftOffDistance,
          onChange: (value2) => {
            setLiftOffDistance(value2);
          }
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "result" })
    ] }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "column", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field debounce-time", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: translate("Device_Settings_Label_DebounceTime", "Debounce Time") }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "result", children: [
        debounceTime,
        "ms"
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(TooltipComponent, { className: "tooltip", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: translate("Tooltip_DebounceTime_Title", "Debounce Time") }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "message", children: translate(
          "Tooltip_DebounceTime_Description",
          "Debounce Time is a delay in detecting clicks after an initial click."
        ) })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        RangeComponent,
        {
          value: debounceTime,
          min: 0,
          max: 16,
          step: 2,
          onChange: (value2) => {
            setDebounceTime(value2);
          }
        }
      )
    ] }) })
  ] }) });
}
const deviceSettingsManagement_page = "";
function MouseProDeviceSettingsManagementPage(props) {
  const devicesContext = useDevicesContext();
  const { getCurrentProfile } = useDevicesManagementContext();
  const translate = useTranslate();
  const uiContext = useUIContext();
  const { openAdvDebounce, closeAdvDebounce } = useUIUpdateContext();
  const {
    setPollingRate,
    setWirelessPollingRate,
    setLiftOffDistance,
    setDebounceTime,
    setIsMotionSyncActive,
    setSeparatePollingActive,
    setAdvDebounceActive,
    setLiftOffPressTime,
    setAfterPressTime,
    setBeforePressTime,
    setAfterReleaseTime,
    setBeforeReleaseTime
  } = useDevicesManagementContext();
  const advDialogRef = reactExports.useRef(null);
  const pollingRateOptions = devicesContext.previewDevice?.pollingRates.map((option, index2) => {
    return { value: option.value, label: translate(option.translationKey, option.data?.translationFallback) };
  });
  const wirelessPollingRateOptions = devicesContext.previewDevice?.wirelessPollingRates.map(
    (option, index2) => {
      return { value: option.value, label: translate(option.translationKey, option.data?.translationFallback) };
    }
  );
  const liftOffDistanceOptions = devicesContext.previewDevice?.liftoffDistances.map(
    (option, index2) => {
      return { value: option.value, label: translate(option.translationKey, option.data?.translationFallback) };
    }
  );
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel settings mouse", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "column nogap", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field polling-rate", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "label", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text", children: translate("Device_Settings_Label_PollingRate", "Polling Rate") }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(TooltipComponent, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: translate("Tooltip_PollingRate_Title", "Polling Rate") }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "message", children: translate(
              "Tooltip_PollingRate_Description",
              "Polling Rate is how often your OS checks for input. This is a factor in determining the maximum input latency of key presses. A high polling rate takes up more CPU resources than lower polling rates."
            ) })
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          OptionSelectComponent,
          {
            options: pollingRateOptions,
            value: getCurrentProfile()?.performance?.pollingratearray[0],
            onChange: (value2) => {
              setPollingRate(value2);
            }
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "result" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "label",
        {
          className: "field polling-rate",
          style: {
            opacity: getCurrentProfile()?.performance?.pollingrateSelect == true ? 1 : 0,
            height: getCurrentProfile()?.performance?.pollingrateSelect == true ? "auto" : "0"
          },
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text", children: translate("Device_Settings_Label_WirelessPollingRate", "Wireless Polling Rate") }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              OptionSelectComponent,
              {
                options: wirelessPollingRateOptions,
                value: getCurrentProfile()?.performance?.pollingratearray[1],
                onChange: (value2) => {
                  setWirelessPollingRate(value2);
                }
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "result" })
          ]
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "label",
        {
          className: "field separate-polling",
          style: {
            marginTop: getCurrentProfile()?.performance?.pollingrateSelect == false ? "57px" : "0px",
            padding: getCurrentProfile()?.performance?.pollingrateSelect == false ? "10px" : "7px 10px 10px 10px"
          },
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text", children: translate(
              "Device_Settings_Label_SeparatePollingRate",
              "Separate polling for wired/wireless"
            ) }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              ToggleComponent,
              {
                value: getCurrentProfile()?.performance?.pollingrateSelect,
                onChange: (value2) => {
                  setSeparatePollingActive(value2);
                }
              }
            )
          ]
        }
      )
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "column", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field debounce-time", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text", children: translate("Device_Settings_Label_DebounceTime", "Debounce Time") }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "result", children: [
          getCurrentProfile()?.performance?.DebounceValue,
          "ms"
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "debounce-desc", children: translate(
          "Tooltip_DebounceTime_Description",
          "Debounce Time is a delay in detecting clicks after an initial click."
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          RangeComponent,
          {
            value: getCurrentProfile()?.performance?.DebounceValue,
            min: 0,
            max: 16,
            step: 2,
            onChange: (value2) => {
              setDebounceTime(value2);
            }
          }
        )
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field advanced-settings", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "label", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text", children: translate("Device_Settings_Label_Advanced_Settings", "Advanced Settings") }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(TooltipComponent, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: translate("Tooltip_AdvancedDebounce_Title", "Advanced Debounce Settings") }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "message", children: translate(
              "Tooltip_AdvancedDebounce_Description",
              "Select this option so that you can further specify when and where your debounce timers are triggered. All debounce options are applied to all buttons on the mouse."
            ) })
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "adv-edit-container", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            ToggleComponent,
            {
              value: getCurrentProfile()?.performance?.AdvancedDebounce?.AdvancedSwitch || false,
              onChange: (value2) => {
                setAdvDebounceActive(value2);
              }
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx("button", { className: "hollow edit-adv-debounce", onClick: () => openAdvDebounce(), children: "Edit" })
        ] })
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "column", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field lift-off", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "label", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text", children: translate("Device_Settings_Label_LiftOffDistance", "Lift-off Distance") }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(TooltipComponent, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: translate("Tooltip_LiftOffDistance_Title", "Lift Off Distance") }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "message", children: translate(
              "Tooltip_LiftOffDistance_Description",
              "Lift-off Distance is how far the mouse sensor has to be from the valueJ or surface to stop tracking."
            ) })
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          OptionSelectComponent,
          {
            options: liftOffDistanceOptions,
            value: getCurrentProfile()?.performance?.LodValue,
            onChange: (value2) => {
              setLiftOffDistance(value2);
            }
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "result" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field pro-motion-sync", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "label", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text", children: translate("Device_Settings_Label_MotionSync", "Motion Sync") }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(TooltipComponent, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: translate("Tooltip_MotionSync_Title", "Motion Sync") }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "message", children: translate(
              "Tooltip_MotionSync_Description",
              "Motion Sync optimizes mouse tracking by synchronizing sensor and USB polling events."
            ) })
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          ToggleComponent,
          {
            value: getCurrentProfile()?.performance?.MotionSyncFlag,
            onChange: (value2) => {
              setIsMotionSyncActive(value2);
            }
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "adv-debounce-settings-container", ref: advDialogRef, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
      ContentDialogComponent,
      {
        className: "adv-debounce-dialog",
        title: translate("Dialog_AdvancedDebounceSettings_Title", "Advanced Debounce Settings"),
        icon: /* @__PURE__ */ jsxRuntimeExports.jsx(
          SVGIconComponent,
          {
            className: "adv-debounce-close",
            onClick: () => closeAdvDebounce(),
            src: iconSrc(ICONS$1.closeModal),
            selected: iconSrc(ICONS$1.closeModalHover)
          }
        ),
        open: uiContext.advDebounce_isOpen,
        actions: [],
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "adv-debounce-modal", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "column", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field press-time", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label group", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text", children: translate("Device_Settings_Label_PressTime", "Press Time") }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "presstime-desc", children: translate(
              "Tooltip_PressTime_Description",
              "Adjust debounce delay at the exact moment you begin pressing or have fully pressed the mouse button."
            ) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "mini-label before-press", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text", children: translate("Device_Settings_Label_BeforePress", "Before Press") }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "result before-press", children: [
              getCurrentProfile()?.performance?.AdvancedDebounce.BeforePressValue,
              "ms"
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              RangeComponent,
              {
                value: getCurrentProfile()?.performance?.AdvancedDebounce.BeforePressValue,
                min: 0,
                max: 16,
                step: 2,
                onChange: (value2) => {
                  setBeforePressTime(value2);
                }
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "mini-label after-press", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text", children: translate("Device_Settings_Label_AfterPress", "After Press") }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "result after-press", children: [
              getCurrentProfile()?.performance?.AdvancedDebounce.AfterPressValue,
              "ms"
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              RangeComponent,
              {
                value: getCurrentProfile()?.performance?.AdvancedDebounce.AfterPressValue,
                min: 0,
                max: 16,
                step: 2,
                onChange: (value2) => {
                  setAfterPressTime(value2);
                }
              }
            )
          ] }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "column", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field release-time", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label group", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text", children: translate("Device_Settings_Label_ReleaseTime", "Release Time") }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "releasetime-desc", children: translate(
              "Tooltip_ReleaseTime_Description",
              "Adjust debounce delay at the exact moment you begin releasing, or have fully released the mouse button."
            ) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "mini-label before-release", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text", children: translate("Device_Settings_Label_BeforeRelease", "Before Release") }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "result before-release", children: [
              getCurrentProfile()?.performance?.AdvancedDebounce.BeforeReleaseValue,
              "ms"
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              RangeComponent,
              {
                value: getCurrentProfile()?.performance?.AdvancedDebounce.BeforeReleaseValue,
                min: 0,
                max: 16,
                step: 2,
                onChange: (value2) => {
                  setBeforeReleaseTime(value2);
                }
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "mini-label after-release", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text", children: translate("Device_Settings_Label_AfterRelease", "After Release") }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "result after-release", children: [
              getCurrentProfile()?.performance?.AdvancedDebounce.AfterReleaseValue,
              "ms"
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              RangeComponent,
              {
                value: getCurrentProfile()?.performance?.AdvancedDebounce.AfterReleaseValue,
                min: 0,
                max: 16,
                step: 2,
                onChange: (value2) => {
                  setAfterReleaseTime(value2);
                }
              }
            )
          ] }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "column", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field lift-off-press", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label group", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text", children: translate("Device_Settings_Label_LiftOffPressTime", "Lift-off Press Time") }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "result", children: [
              getCurrentProfile()?.performance?.AdvancedDebounce.LiftOffPressValue,
              "ms"
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "lift-off-press-desc", children: translate(
              "Tooltip_LiftOffPressTime_Description",
              "Adjust debounce delay at the exact moment you have lifted and placed the mouse back down on the surface."
            ) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              RangeComponent,
              {
                value: getCurrentProfile()?.performance?.AdvancedDebounce.LiftOffPressValue,
                min: 0,
                max: 16,
                step: 2,
                onChange: (value2) => {
                  setLiftOffPressTime(value2);
                }
              }
            )
          ] }) })
        ] })
      }
    ) })
  ] }) });
}
function DeviceSettingsManagementPage(props) {
  const devicesContext = useDevicesContext();
  return devicesContext.previewDevice?.deviceCategoryName == "Mouse" ? DevicesAdapter.isAdvDebounceCapable(devicesContext.previewDevice.SN) ? /* @__PURE__ */ jsxRuntimeExports.jsx(MouseProDeviceSettingsManagementPage, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(MouseDeviceSettingsManagementPage, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx("a", { children: "An Error has occurred." });
}
const macroEditor_component = "";
const toggleChoice_component = "";
function ToggleChoiceComponent(props) {
  const { choice, onChange, thumbContent, choiceAContent, choiceBContent, disableChoiceA, disableChoiceB } = props;
  const [checked, setChecked] = reactExports.useState(choice == null ? false : choice == "b");
  const [choiceA, setChoiceA] = reactExports.useState(/* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: "Option A" }));
  const [choiceB, setChoiceB] = reactExports.useState(/* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: "Option B" }));
  const [selectedChoice, setSelectedChoice] = reactExports.useState("a");
  reactExports.useEffect(() => {
    if (selectedChoice == null) {
      return;
    }
    setSelectedChoice(selectedChoice);
  }, [selectedChoice]);
  reactExports.useEffect(() => {
    if (choiceAContent == null) {
      return;
    }
    setChoiceA(choiceAContent);
  }, [choiceAContent]);
  reactExports.useEffect(() => {
    if (choiceAContent == null) {
      return;
    }
    setChoiceB(choiceBContent);
  }, [choiceBContent]);
  reactExports.useEffect(() => {
    setChecked(choice == "b");
  }, [choice]);
  reactExports.useEffect(() => {
    const value2 = checked ? "b" : "a";
    setSelectedChoice(value2);
    if (onChange != null) {
      onChange(value2);
    }
  }, [checked]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "track", "data-toggle-choice": true, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("input", { type: "checkbox", checked, onChange: () => {
      if (disableChoiceA || disableChoiceB) {
        return;
      }
      const value2 = !checked;
      setChecked(value2);
    } }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `choice a${disableChoiceA == true ? " disabled" : ""}`, children: choiceA }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `choice b${disableChoiceB == true ? " disabled" : ""}`, children: choiceB }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "thumb", children: thumbContent == null ? null : thumbContent })
  ] });
}
var lib = {};
Object.defineProperty(lib, "__esModule", { value: true });
var ViewportList = lib.ViewportList = void 0;
const jsx_runtime_1 = jsxRuntimeExports;
const react_1 = reactExports;
const IS_SSR = typeof window === "undefined";
const IS_TOUCH_DEVICE = !IS_SSR && (() => {
  try {
    return "ontouchstart" in window || navigator.maxTouchPoints;
  } catch (_a) {
    return false;
  }
})();
const IS_OVERFLOW_ANCHOR_SUPPORTED = !IS_SSR && (() => {
  try {
    return window.CSS.supports("overflow-anchor: auto");
  } catch (_a) {
    return false;
  }
})();
const SHOULD_DELAY_SCROLL = IS_TOUCH_DEVICE && !IS_OVERFLOW_ANCHOR_SUPPORTED;
const PROP_NAME_FOR_Y_AXIS = {
  top: "top",
  bottom: "bottom",
  clientHeight: "clientHeight",
  scrollHeight: "scrollHeight",
  scrollTop: "scrollTop",
  overflowY: "overflowY",
  height: "height",
  minHeight: "minHeight",
  maxHeight: "maxHeight",
  marginTop: "marginTop"
};
const PROP_NAME_FOR_X_AXIS = {
  top: "left",
  bottom: "right",
  scrollHeight: "scrollWidth",
  clientHeight: "clientWidth",
  scrollTop: "scrollLeft",
  overflowY: "overflowX",
  minHeight: "minWidth",
  height: "width",
  maxHeight: "maxWidth",
  marginTop: "marginLeft"
};
const normalizeValue = (min, value2, max = Infinity) => Math.max(Math.min(value2, max), min);
const getDiff = (value1, value2, step) => Math.ceil(Math.abs(value1 - value2) / step);
const useIsomorphicLayoutEffect = IS_SSR ? react_1.useEffect : react_1.useLayoutEffect;
const generateArray = (from, to, generate) => {
  const array = [];
  for (let index2 = from; index2 < to; index2++) {
    array.push(generate(index2));
  }
  return array;
};
const findElement = ({ fromElement, toElement, fromIndex, asc = true, compare }) => {
  let index2 = fromIndex;
  let element = fromElement;
  while (element && element !== toElement) {
    if (compare(element, index2)) {
      return [element, index2];
    }
    if (asc) {
      index2++;
      element = element.nextSibling;
    } else {
      index2--;
      element = element.previousSibling;
    }
  }
  return [null, -1];
};
const SCROLLABLE_REGEXP = /auto|scroll/gi;
const findNearestScrollableElement = (propName, node) => {
  if (!node || node === document.body || node === document.documentElement) {
    return document.documentElement;
  }
  const style2 = window.getComputedStyle(node);
  if (SCROLLABLE_REGEXP.test(style2[propName.overflowY]) || SCROLLABLE_REGEXP.test(style2.overflow)) {
    return node;
  }
  return findNearestScrollableElement(propName, node.parentNode);
};
const getStyle = (propName, size, marginTop = 0) => ({
  padding: 0,
  margin: 0,
  border: "none",
  visibility: "hidden",
  overflowAnchor: "none",
  [propName.minHeight]: size,
  [propName.height]: size,
  [propName.maxHeight]: size,
  [propName.marginTop]: marginTop
});
const ViewportListInner = ({ items = [], count, children, viewportRef, itemSize = 0, itemMargin = -1, overscan = 1, axis = "y", initialIndex = -1, initialAlignToTop = true, initialOffset = 0, initialDelay = -1, initialPrerender = 0, onViewportIndexesChange, overflowAnchor = "auto", withCache = true, scrollThreshold = 0, renderSpacer = ({ ref: ref2, style: style2 }) => (0, jsx_runtime_1.jsx)("div", { ref: ref2, style: style2 }), indexesShift = 0, getItemBoundingClientRect = (element) => element.getBoundingClientRect() }, ref) => {
  const propName = axis === "y" ? PROP_NAME_FOR_Y_AXIS : PROP_NAME_FOR_X_AXIS;
  const withCount = typeof count === "number";
  const maxIndex = (withCount ? count : items.length) - 1;
  const [[estimatedItemHeight, estimatedItemMargin], setItemDimensions] = (0, react_1.useState)(() => [
    normalizeValue(0, itemSize),
    normalizeValue(-1, itemMargin)
  ]);
  const itemHeightWithMargin = normalizeValue(0, estimatedItemHeight + estimatedItemMargin);
  const overscanSize = normalizeValue(0, Math.ceil(overscan * itemHeightWithMargin));
  const [indexes, setIndexes] = (0, react_1.useState)([initialIndex - initialPrerender, initialIndex + initialPrerender]);
  const anchorElementRef = (0, react_1.useRef)(null);
  const anchorIndexRef = (0, react_1.useRef)(-1);
  const topSpacerRef = (0, react_1.useRef)(null);
  const bottomSpacerRef = (0, react_1.useRef)(null);
  const ignoreOverflowAnchorRef = (0, react_1.useRef)(false);
  const lastIndexesShiftRef = (0, react_1.useRef)(indexesShift);
  const cacheRef = (0, react_1.useRef)([]);
  const scrollToIndexOptionsRef = (0, react_1.useRef)(initialIndex >= 0 ? {
    index: initialIndex,
    alignToTop: initialAlignToTop,
    offset: initialOffset,
    delay: initialDelay,
    prerender: initialPrerender
  } : null);
  const scrollToIndexTimeoutIdRef = (0, react_1.useRef)(null);
  const marginTopRef = (0, react_1.useRef)(0);
  const viewportIndexesRef = (0, react_1.useRef)([-1, -1]);
  const scrollTopRef = (0, react_1.useRef)(null);
  const [startIndex, endIndex] = (0, react_1.useMemo)(() => {
    indexes[0] = normalizeValue(0, indexes[0], maxIndex);
    indexes[1] = normalizeValue(indexes[0], indexes[1], maxIndex);
    const shift = indexesShift - lastIndexesShiftRef.current;
    lastIndexesShiftRef.current = indexesShift;
    const topSpacer = topSpacerRef.current;
    if (topSpacer && shift) {
      indexes[0] = normalizeValue(0, indexes[0] + shift, maxIndex);
      indexes[1] = normalizeValue(indexes[0], indexes[1] + shift, maxIndex);
      anchorElementRef.current = topSpacer.nextSibling;
      anchorIndexRef.current = indexes[0];
      ignoreOverflowAnchorRef.current = true;
    }
    return indexes;
  }, [indexesShift, indexes, maxIndex]);
  const topSpacerStyle = (0, react_1.useMemo)(() => getStyle(propName, (withCache ? cacheRef.current : []).slice(0, startIndex).reduce((sum, next) => sum + (next - estimatedItemHeight), startIndex * itemHeightWithMargin), marginTopRef.current), [propName, withCache, startIndex, itemHeightWithMargin, estimatedItemHeight]);
  const bottomSpacerStyle = (0, react_1.useMemo)(() => getStyle(propName, (withCache ? cacheRef.current : []).slice(endIndex + 1, maxIndex + 1).reduce((sum, next) => sum + (next - estimatedItemHeight), itemHeightWithMargin * (maxIndex - endIndex))), [propName, withCache, endIndex, maxIndex, itemHeightWithMargin, estimatedItemHeight]);
  const getViewport = (0, react_1.useMemo)(() => {
    let autoViewport = null;
    return () => {
      if (viewportRef) {
        if (viewportRef.current === document.body) {
          return document.documentElement;
        }
        return viewportRef.current;
      }
      if (autoViewport && autoViewport.isConnected) {
        return autoViewport;
      }
      const topSpacer = topSpacerRef.current;
      if (!topSpacer) {
        return null;
      }
      autoViewport = findNearestScrollableElement(propName, topSpacer.parentNode);
      return autoViewport;
    };
  }, [propName, viewportRef]);
  const mainFrameRef = (0, react_1.useRef)(() => {
  });
  const getScrollPositionRef = (0, react_1.useRef)(() => ({ index: -1, offset: 0 }));
  useIsomorphicLayoutEffect(() => {
    mainFrameRef.current = () => {
      const viewport = getViewport();
      const topSpacer = topSpacerRef.current;
      const bottomSpacer = bottomSpacerRef.current;
      if (!viewport || !topSpacer || !bottomSpacer) {
        return;
      }
      const topElement = topSpacer.nextSibling;
      const bottomElement = bottomSpacer.previousSibling;
      const viewportRect = viewport.getBoundingClientRect();
      const topSpacerRect = topSpacer.getBoundingClientRect();
      const bottomSpacerRect = bottomSpacer.getBoundingClientRect();
      const limits = {
        [propName.top]: viewport === document.documentElement ? 0 : viewportRect[propName.top],
        [propName.bottom]: viewport === document.documentElement ? document.documentElement[propName.clientHeight] : viewportRect[propName.bottom]
      };
      const limitsWithOverscanSize = {
        [propName.top]: limits[propName.top] - overscanSize,
        [propName.bottom]: limits[propName.bottom] + overscanSize
      };
      if (marginTopRef.current < 0 && topSpacerRect[propName.top] - marginTopRef.current >= limitsWithOverscanSize[propName.top] || marginTopRef.current > 0 && topSpacerRect[propName.top] >= limitsWithOverscanSize[propName.top] || marginTopRef.current && scrollToIndexOptionsRef.current) {
        topSpacer.style[propName.marginTop] = "0px";
        viewport.style[propName.overflowY] = "hidden";
        viewport[propName.scrollTop] += -marginTopRef.current;
        viewport.style[propName.overflowY] = "";
        marginTopRef.current = 0;
        return;
      }
      if (estimatedItemHeight === 0 || estimatedItemMargin === -1) {
        let itemsHeightSum = 0;
        findElement({
          fromElement: topElement,
          toElement: bottomSpacer,
          fromIndex: startIndex,
          compare: (element) => {
            itemsHeightSum += getItemBoundingClientRect(element)[propName.height];
            return false;
          }
        });
        if (!itemsHeightSum) {
          return;
        }
        const renderedItemsCount = endIndex - startIndex + 1;
        const nextItemHeight = estimatedItemHeight === 0 ? Math.ceil(itemsHeightSum / renderedItemsCount) : estimatedItemHeight;
        const nextItemMargin = estimatedItemMargin === -1 ? Math.ceil((bottomSpacerRect[propName.top] - topSpacerRect[propName.bottom] - itemsHeightSum) / renderedItemsCount) : estimatedItemMargin;
        setItemDimensions([nextItemHeight, nextItemMargin]);
        return;
      }
      if (scrollToIndexTimeoutIdRef.current) {
        return;
      }
      if (scrollToIndexOptionsRef.current) {
        const targetIndex = normalizeValue(0, scrollToIndexOptionsRef.current.index, maxIndex);
        if (targetIndex < startIndex || targetIndex > endIndex) {
          setIndexes([
            targetIndex - scrollToIndexOptionsRef.current.prerender,
            targetIndex + scrollToIndexOptionsRef.current.prerender
          ]);
          return;
        }
        const [targetElement] = findElement({
          fromElement: topElement,
          toElement: bottomSpacer,
          fromIndex: startIndex,
          compare: (_, index2) => index2 === targetIndex
        });
        if (!targetElement) {
          return;
        }
        const { alignToTop, offset, delay } = scrollToIndexOptionsRef.current;
        scrollToIndexOptionsRef.current = null;
        const scrollToElement = () => {
          const elementRect = getItemBoundingClientRect(targetElement);
          const shift = alignToTop ? elementRect[propName.top] - limits[propName.top] + offset : elementRect[propName.bottom] - limits[propName.top] - viewport[propName.clientHeight] + offset;
          viewport[propName.scrollTop] += shift;
          scrollToIndexTimeoutIdRef.current = null;
        };
        const scrollToElementDelay = delay < 0 && SHOULD_DELAY_SCROLL ? 30 : delay;
        if (scrollToElementDelay > 0) {
          scrollToIndexTimeoutIdRef.current = setTimeout(scrollToElement, scrollToElementDelay);
          return;
        }
        scrollToElement();
        return;
      }
      if (scrollTopRef.current === null) {
        scrollTopRef.current = viewport.scrollTop;
      } else if (scrollTopRef.current !== viewport.scrollTop) {
        const diff = Math.abs(viewport.scrollTop - scrollTopRef.current);
        scrollTopRef.current = viewport.scrollTop;
        if (scrollThreshold > 0 && diff > scrollThreshold) {
          return;
        }
      }
      const topSecondElement = topElement === bottomSpacer ? bottomSpacer : topElement.nextSibling;
      const bottomSecondElement = bottomElement === topSpacer ? topSpacer : bottomElement.previousSibling;
      const averageSize = Math.ceil((bottomSpacerRect[propName.top] - topSpacerRect[propName.bottom]) / (endIndex + 1 - startIndex));
      const isAllAboveTop = topSpacerRect[propName.bottom] > limitsWithOverscanSize[propName.bottom];
      const isAllBelowBottom = bottomSpacerRect[propName.top] < limitsWithOverscanSize[propName.top];
      const isTopBelowTop = !isAllAboveTop && !isAllBelowBottom && topSpacerRect[propName.bottom] > limitsWithOverscanSize[propName.top];
      const isBottomAboveBottom = !isAllAboveTop && !isAllBelowBottom && bottomSpacerRect[propName.top] < limitsWithOverscanSize[propName.bottom];
      const isBottomSecondAboveTop = !isAllAboveTop && !isAllBelowBottom && (bottomSecondElement === topSpacer ? topSpacerRect : getItemBoundingClientRect(bottomSecondElement))[propName.bottom] > limitsWithOverscanSize[propName.bottom];
      const isTopSecondAboveTop = !isAllAboveTop && !isAllBelowBottom && (topSecondElement === bottomSpacer ? bottomSpacerRect : getItemBoundingClientRect(topSecondElement))[propName.top] < limitsWithOverscanSize[propName.top];
      let nextStartIndex = startIndex;
      let nextEndIndex = endIndex;
      if (isAllAboveTop) {
        nextStartIndex -= getDiff(topSpacerRect[propName.bottom], limitsWithOverscanSize[propName.top], averageSize);
        nextEndIndex -= getDiff(bottomSpacerRect[propName.top], limitsWithOverscanSize[propName.bottom], averageSize);
      }
      if (isAllBelowBottom) {
        nextEndIndex += getDiff(bottomSpacerRect[propName.top], limitsWithOverscanSize[propName.bottom], averageSize);
        nextStartIndex += getDiff(topSpacerRect[propName.bottom], limitsWithOverscanSize[propName.top], averageSize);
      }
      if (isTopBelowTop) {
        nextStartIndex -= getDiff(topSpacerRect[propName.bottom], limitsWithOverscanSize[propName.top], averageSize);
      }
      if (isBottomAboveBottom) {
        nextEndIndex += getDiff(bottomSpacerRect[propName.top], limitsWithOverscanSize[propName.bottom], averageSize);
      }
      if (isBottomSecondAboveTop) {
        const [, index2] = findElement({
          fromElement: bottomElement,
          toElement: topSpacer,
          fromIndex: endIndex,
          asc: false,
          compare: (element) => getItemBoundingClientRect(element)[propName.bottom] <= limitsWithOverscanSize[propName.bottom]
        });
        if (index2 !== -1) {
          nextEndIndex = index2 + 1;
        }
      }
      if (isTopSecondAboveTop) {
        const [, index2] = findElement({
          fromElement: topElement,
          toElement: bottomSpacer,
          fromIndex: startIndex,
          compare: (element) => getItemBoundingClientRect(element)[propName.top] >= limitsWithOverscanSize[propName.top]
        });
        if (index2 !== -1) {
          nextStartIndex = index2 - 1;
        }
      }
      if (onViewportIndexesChange) {
        let [, startViewportIndex] = findElement({
          fromElement: topElement,
          toElement: bottomSpacer,
          fromIndex: startIndex,
          compare: (element) => getItemBoundingClientRect(element)[propName.bottom] > limits[propName.top]
        });
        if (startViewportIndex === -1) {
          startViewportIndex = startIndex;
        }
        let [, endViewportIndex] = findElement({
          fromElement: bottomElement,
          toElement: topSpacer,
          fromIndex: endIndex,
          asc: false,
          compare: (element) => getItemBoundingClientRect(element)[propName.top] < limits[propName.bottom]
        });
        if (endViewportIndex === -1) {
          endViewportIndex = endIndex;
        }
        if (startViewportIndex !== viewportIndexesRef.current[0] || endViewportIndex !== viewportIndexesRef.current[1]) {
          viewportIndexesRef.current = [startViewportIndex, endViewportIndex];
          onViewportIndexesChange(viewportIndexesRef.current);
        }
      }
      nextStartIndex = normalizeValue(0, nextStartIndex, maxIndex);
      nextEndIndex = normalizeValue(nextStartIndex, nextEndIndex, maxIndex);
      if (nextStartIndex === startIndex && nextEndIndex === endIndex) {
        return;
      }
      if (nextStartIndex !== startIndex) {
        if (startIndex >= nextStartIndex) {
          anchorElementRef.current = topElement;
          anchorIndexRef.current = startIndex;
        } else {
          const [anchorElement, anchorElementIndex] = findElement({
            fromElement: topElement,
            toElement: bottomSpacer,
            fromIndex: startIndex,
            compare: (element, index2) => {
              if (index2 === nextStartIndex) {
                return true;
              }
              const elementRect = getItemBoundingClientRect(element);
              if (elementRect[propName.height] !== estimatedItemHeight) {
                cacheRef.current[index2] = elementRect[propName.height];
              }
              return false;
            }
          });
          if (anchorElement) {
            anchorElementRef.current = anchorElement;
            anchorIndexRef.current = anchorElementIndex;
          } else {
            anchorElementRef.current = bottomElement;
            anchorIndexRef.current = endIndex;
          }
        }
      }
      setIndexes([nextStartIndex, nextEndIndex]);
    };
    getScrollPositionRef.current = () => {
      const viewport = getViewport();
      const topSpacer = topSpacerRef.current;
      const bottomSpacer = bottomSpacerRef.current;
      let scrollIndex = -1;
      let scrollOffset = 0;
      if (!viewport || !topSpacer || !bottomSpacer) {
        return { index: scrollIndex, offset: scrollOffset };
      }
      const topElement = topSpacer.nextSibling;
      const viewportRect = viewport.getBoundingClientRect();
      const limits = {
        [propName.top]: viewport === document.documentElement ? 0 : viewportRect[propName.top],
        [propName.bottom]: viewport === document.documentElement ? document.documentElement[propName.clientHeight] : viewportRect[propName.bottom]
      };
      findElement({
        fromElement: topElement,
        toElement: bottomSpacer,
        fromIndex: startIndex,
        compare: (element, index2) => {
          const rect = getItemBoundingClientRect(element);
          scrollIndex = index2;
          scrollOffset = limits[propName.top] - rect[propName.top];
          return rect[propName.bottom] > limits[propName.top];
        }
      });
      return { index: scrollIndex, offset: scrollOffset };
    };
  });
  let anchorHeightOnRender;
  if (anchorElementRef.current && getViewport() && topSpacerRef.current) {
    anchorHeightOnRender = getItemBoundingClientRect(anchorElementRef.current)[propName.top] - (getViewport() === document.documentElement ? 0 : getViewport().getBoundingClientRect()[propName.top]);
  }
  useIsomorphicLayoutEffect(() => {
    anchorElementRef.current = null;
    const anchorIndex = anchorIndexRef.current;
    const ignoreOverflowAnchor = ignoreOverflowAnchorRef.current;
    anchorIndexRef.current = -1;
    ignoreOverflowAnchorRef.current = false;
    const viewport = getViewport();
    const topSpacer = topSpacerRef.current;
    const bottomSpacer = bottomSpacerRef.current;
    if (anchorIndex === -1 || !viewport || !topSpacer || !bottomSpacer || anchorHeightOnRender === void 0 || IS_OVERFLOW_ANCHOR_SUPPORTED && overflowAnchor !== "none" && !ignoreOverflowAnchor) {
      return;
    }
    let top = null;
    if (anchorIndex >= startIndex && anchorIndex <= endIndex) {
      const [anchorElement] = findElement({
        fromElement: topSpacer.nextSibling,
        toElement: bottomSpacer,
        fromIndex: startIndex,
        compare: (_, index2) => index2 === anchorIndex
      });
      if (anchorElement) {
        top = getItemBoundingClientRect(anchorElement)[propName.top];
      }
    } else {
      if (anchorIndex < startIndex) {
        top = topSpacer.getBoundingClientRect()[propName.top] + (withCache ? cacheRef.current : []).slice(0, anchorIndex).reduce((sum, next) => sum + (next - estimatedItemHeight), anchorIndex * itemHeightWithMargin);
      } else if (anchorIndex <= maxIndex) {
        top = bottomSpacer.getBoundingClientRect()[propName.top] + (withCache ? cacheRef.current : []).slice(endIndex + 1, anchorIndex).reduce((sum, next) => sum + (next - estimatedItemHeight), itemHeightWithMargin * (anchorIndex - 1 - endIndex));
      }
    }
    if (top === null) {
      return;
    }
    const offset = top - (viewport === document.documentElement ? 0 : viewport.getBoundingClientRect()[propName.top]) - anchorHeightOnRender;
    if (!offset) {
      return;
    }
    if (IS_TOUCH_DEVICE) {
      marginTopRef.current -= offset;
      topSpacer.style[propName.marginTop] = `${marginTopRef.current}px`;
      return;
    }
    viewport[propName.scrollTop] += offset;
  }, [startIndex]);
  useIsomorphicLayoutEffect(() => {
    let frameId;
    const frame = () => {
      frameId = requestAnimationFrame(frame);
      mainFrameRef.current();
    };
    frame();
    return () => {
      cancelAnimationFrame(frameId);
      if (scrollToIndexTimeoutIdRef.current) {
        clearTimeout(scrollToIndexTimeoutIdRef.current);
      }
    };
  }, []);
  (0, react_1.useImperativeHandle)(ref, () => ({
    scrollToIndex: ({ index: index2 = -1, alignToTop = true, offset = 0, delay = -1, prerender = 0 }) => {
      scrollToIndexOptionsRef.current = { index: index2, alignToTop, offset, delay, prerender };
      mainFrameRef.current();
    },
    getScrollPosition: () => getScrollPositionRef.current()
  }), []);
  return (0, jsx_runtime_1.jsxs)(react_1.Fragment, { children: [renderSpacer({ ref: topSpacerRef, style: topSpacerStyle, type: "top" }), (!!count || !!items.length) && generateArray(startIndex, endIndex + 1, withCount ? children : (index2) => children(items[index2], index2, items)), renderSpacer({ ref: bottomSpacerRef, style: bottomSpacerStyle, type: "bottom" })] });
};
ViewportList = lib.ViewportList = (0, react_1.forwardRef)(ViewportListInner);
const MaxSupportedMilliseconds = 65535;
const MarkerInterval = 10;
const MarkerWidth = 30;
const TotalNumberOfMarkers = MaxSupportedMilliseconds / MarkerInterval;
const FieldMarkers = [];
for (let i2 = 0; i2 < TotalNumberOfMarkers; i2++) {
  const milliseconds = i2 * 10;
  FieldMarkers.push({ id: i2, milliseconds });
}
const MouseButtonKeyMap = ["mouse_left", "mouse_middle", "mouse_right", "mouse_back", "mouse_forward"];
function MacroEditorComponent(props) {
  const { selectedMacro, isOpen, onCloseClick, onSave } = props;
  useDevicesContext();
  const uiContext = useUIContext();
  const recordsContext = useRecordsContext();
  const translate = useTranslate();
  const [isRecording, setIsRecording] = reactExports.useState(false);
  const [isSelectingMode, setIsSelectingMode] = reactExports.useState(false);
  const [isShowingHelp, setIsShowingHelp] = reactExports.useState(false);
  const [entriesEndTime, setEntriesEndTime] = reactExports.useState(0);
  const [entriesStartTime, setEntriesStartTime] = reactExports.useState(0);
  const [editorIsOpen, setEditorIsOpen] = reactExports.useState(false);
  const [cursorPosition, setCursorPosition] = reactExports.useState(0);
  const [selectedMacroData, setSelectedMacroData] = reactExports.useState(null);
  const recordingMacroData = reactExports.useRef(null);
  const [delayType, setDelayType] = reactExports.useState("set-time");
  const [delayTime, setDelayTime] = reactExports.useState(30);
  const [isEditingName, setIsEditingName] = reactExports.useState(false);
  const nameInputRef = reactExports.useRef(null);
  const recordingStartTime = reactExports.useRef(0);
  const elapsedMilliseconds = reactExports.useRef(0);
  const recordingInProgress = reactExports.useRef(false);
  const recordingEntry = reactExports.useRef(null);
  const recordingInterval = reactExports.useRef(null);
  const lastRecordedTime = reactExports.useRef(null);
  const [modeSelectIsOpen, setModeSelectIsOpen] = reactExports.useState(false);
  const hasUnsavedData = reactExports.useRef(false);
  const viewportList = reactExports.useRef(null);
  const listHandle = reactExports.useRef(null);
  const [selectedItemKey, setSelectedItemKey] = reactExports.useState(void 0);
  const encodeKey = (index2, index22) => {
    if (index22 > 65535)
      throw new Error("index2 too large!");
    return (index2 + 1 << 16) + (index22 & 65535);
  };
  const decodeKey = (key) => {
    const index2 = ((key & ~65535) >> 16) - 1;
    const index22 = key & 65535;
    return { index: index2, index2: index22 };
  };
  const editEntry = async (key) => {
  };
  const deleteEntry = async (key) => {
    if (selectedMacroData == null)
      return;
    const keys = Object.getOwnPropertyNames(selectedMacroData.content);
    const asArray = keys.map((x2) => selectedMacroData.content[x2]);
    const { index: index2, index2: index22 } = decodeKey(key);
    const element = asArray[index2] ? asArray[index2].data[index22] : null;
    if (element) {
      selectedMacroData.content[keys[index2]].data.splice(index22, 1);
      setSelectedItemKey(void 0);
      setSelectedMacroData(structuredClone(selectedMacroData));
    }
  };
  reactExports.useEffect(() => {
    setSelectedItemKey(void 0);
    if (isRecording == true) {
      listenForInput();
      return () => removeInputListeners();
    }
    return () => {
    };
  }, [isRecording]);
  const beginRecording = () => {
    if (selectedMacroData == null) {
      throw new Error("No Macro data to record to.");
    }
    console.log("recording");
    recordingInProgress.current = true;
    setCursorPosition(0);
    recordingStartTime.current = Date.now();
    elapsedMilliseconds.current = 0;
    listHandle.current.scrollToIndex({ index: 0, offset: -10 });
    recordingMacroData.current = structuredClone(selectedMacroData);
    recordingMacroData.current.content = {};
    lastRecordedTime.current = null;
    setEntriesStartTime(0);
    setEntriesEndTime(0);
    setIsRecording(true);
  };
  const endRecording = () => {
    console.log("end recording");
    setIsRecording(false);
    recordingInProgress.current = false;
    recordingStartTime.current = 0;
    removeInputListeners();
  };
  const intervalHandler = () => {
    if (recordingInProgress.current == false) {
      if (recordingEntry.current?.endTime != null) {
        setEntriesEndTime(recordingEntry.current.endTime);
      }
      clearInterval(recordingInterval.current);
      return;
    }
    if (delayType == "as-recorded") {
      elapsedMilliseconds.current = Date.now() - recordingStartTime.current;
    }
    if (listHandle.current != null) {
      const scrollIndex = Math.floor(elapsedMilliseconds.current / 10 / 3);
      if (scrollIndex > 15) {
        listHandle.current.scrollToIndex({ index: scrollIndex - 15 });
      }
    }
    setCursorPosition(elapsedMilliseconds.current);
    if (recordingMacroData.current != null) {
      setSelectedMacroData(recordingMacroData.current);
      const items = Object.keys(recordingMacroData.current.content);
      if (items.length == 1 && recordingMacroData.current.content[items[0]].data[0].startTime > 0) {
        setEntriesStartTime(recordingMacroData.current.content[items[0]].data[0].startTime);
        setEntriesEndTime(recordingMacroData.current.content[items[0]].data[0].startTime);
      }
    }
    if (recordingEntry.current != null) {
      if (recordingEntry.current.endTime != null) {
        setEntriesEndTime(recordingEntry.current.endTime);
      } else {
        setEntriesEndTime(elapsedMilliseconds.current / 3);
      }
    }
  };
  const listenForInput = () => {
    recordingInterval.current = setInterval(intervalHandler, 15);
    document.addEventListener("keydown", key_onDown);
    document.addEventListener("keyup", key_onUp);
    document.addEventListener("mousedown", mouse_onDown);
    document.addEventListener("mouseup", mouse_onUp);
  };
  const key_onDown = (event) => {
    if (event.repeat == true) {
      return;
    }
    event.preventDefault();
    event.stopPropagation();
    const keyId = event.code;
    console.log("keydown", keyId);
    recordInputStart(keyId);
    return false;
  };
  const key_onUp = (event) => {
    const keyId = event.code;
    console.log("keyup", keyId);
    recordInputEnd(keyId);
  };
  const mouse_onDown = (event) => {
    event.preventDefault();
    event.stopPropagation();
    const clickTarget = event.target;
    const closestButton = clickTarget.tagName == "button" ? clickTarget : clickTarget.closest("button");
    if (closestButton != null && closestButton.classList.contains("no-record")) {
      return;
    }
    const buttonKey = event.button;
    const buttonId = MouseButtonKeyMap[buttonKey];
    console.log("mousedown", buttonId);
    recordInputStart(buttonId);
    return false;
  };
  const mouse_onUp = (event) => {
    event.preventDefault();
    event.stopPropagation();
    const clickTarget = event.target;
    const closestButton = clickTarget.tagName == "button" ? clickTarget : clickTarget.closest("button");
    if (closestButton != null && closestButton.classList.contains("no-record")) {
      return;
    }
    const buttonKey = event.button;
    const buttonId = MouseButtonKeyMap[buttonKey];
    console.log("mousedown", buttonId);
    recordInputEnd(buttonId);
  };
  const recordInputStart = (inputId) => {
    recordingEntry.current = new MacroItemEntry(inputId, elapsedMilliseconds.current / 3);
    recordingMacroData.current.content[inputId] ??= new MacroItem();
    recordingMacroData.current.content[inputId].data.push(recordingEntry.current);
    if (delayType == "set-time")
      elapsedMilliseconds.current += delayTime * 3;
  };
  const recordInputEnd = (inputId) => {
    if (recordingInProgress.current == false || recordingEntry.current == null) {
      return;
    }
    if (recordingMacroData.current.content[inputId] == null) {
      console.error("how did this happen?");
      return;
    }
    recordingMacroData.current.content[inputId].data.slice(-1)[0].endTime = elapsedMilliseconds.current / 3;
    if (delayType == "set-time")
      elapsedMilliseconds.current += delayTime * 3;
  };
  const removeInputListeners = () => {
    document.removeEventListener("keydown", key_onDown);
    document.removeEventListener("keyup", key_onUp);
    document.removeEventListener("mousedown", mouse_onDown);
    document.removeEventListener("mouseup", mouse_onUp);
    if (recordingInterval.current != null) {
      if (recordingEntry.current?.endTime != null) {
        setEntriesEndTime(recordingEntry.current.endTime);
      }
      clearInterval(recordingInterval.current);
    }
  };
  const classes = `macro-editor${isRecording ? " recording" : ""}${selectedMacroData && Object.getOwnPropertyNames(selectedMacroData.content).length > 0 ? " has-entries" : ""}`;
  reactExports.useEffect(() => {
    if (!isOpen)
      return;
    if (selectedMacro == null) {
      const macro = new MacroRecord();
      macro.value = recordsContext.macros.length + 1;
      setSelectedMacroData(macro);
      return;
    }
    const newMacro = new MacroRecord(selectedMacro);
    setSelectedMacroData(newMacro);
    const entryKeys = Object.keys(newMacro.content);
    let earliestStartTime = 0;
    let latestEndTime = 0;
    for (let i2 = 0; i2 < entryKeys.length; i2++) {
      const key = entryKeys[i2];
      const entry = selectedMacro.content[key];
      for (let j = 0; j < entry.data.length; j++) {
        const data = entry.data[j];
        if (data.endTime != null && data.endTime > latestEndTime) {
          latestEndTime = data.endTime;
        }
        earliestStartTime = earliestStartTime == 0 ? data.startTime : earliestStartTime > data.startTime ? data.startTime : earliestStartTime;
      }
    }
    setEntriesStartTime(earliestStartTime);
    setEntriesEndTime(latestEndTime);
    console.log(selectedMacro);
  }, [uiContext]);
  reactExports.useEffect(() => {
    if (isOpen == null) {
      setEditorIsOpen(false);
      return;
    }
    setEditorIsOpen(isOpen);
    if (isOpen == true) {
      setIsRecording(false);
      setIsSelectingMode(false);
      setIsShowingHelp(false);
    }
  }, [isOpen]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
    "dialog",
    {
      className: classes,
      open: editorIsOpen ? true : void 0,
      "data-recording": isRecording == true ? isRecording : null,
      "data-help": isShowingHelp == true ? isShowingHelp : null,
      "data-mode-select": isSelectingMode == true ? isSelectingMode : null,
      onClick: () => setSelectedItemKey(void 0),
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "panel macro-help", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            type: "button",
            onClick: () => {
              setIsShowingHelp(!isShowingHelp);
            },
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              SVGIconComponent,
              {
                className: "help",
                src: "/images/icons/more-info.svg",
                selected: "/images/icons/more-info.svg"
              }
            )
          }
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel name", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "unsaved-indicator" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              ref: nameInputRef,
              value: selectedMacroData?.name,
              disabled: !isEditingName,
              onFocus: (v2) => v2.target.select(),
              onChange: (event) => {
                if (selectedMacroData == null) {
                  return;
                }
                const data = structuredClone(selectedMacroData);
                data.name = event.currentTarget.value;
                setSelectedMacroData(data);
              },
              onBlur: () => {
                setIsEditingName(false);
              }
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              type: "button",
              onClick: () => {
                setIsEditingName(true);
                nameInputRef.current?.focus();
              },
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                SVGIconComponent,
                {
                  className: "help",
                  src: "/images/icons/rename.svg",
                  selected: "/images/icons/rename_hover.svg"
                }
              )
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "panel mode", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            type: "button",
            className: "button embed toggle-mode-select",
            onClick: () => {
              setModeSelectIsOpen(!modeSelectIsOpen);
            },
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "current", children: [
              selectedMacroData?.m_Identifier == "1" ? /* @__PURE__ */ jsxRuntimeExports.jsx(SVGIconComponent, { className: "macro-mode", src: "/images/icons/macro_no-repeat.svg" }) : selectedMacroData?.m_Identifier == "2" ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                SVGIconComponent,
                {
                  className: "macro-mode",
                  src: "/images/icons/macro_repeat-while-holding.svg"
                }
              ) : selectedMacroData?.m_Identifier == "3" ? /* @__PURE__ */ jsxRuntimeExports.jsx(SVGIconComponent, { className: "macro-mode", src: "/images/icons/macro_toggle.svg" }) : /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: selectedMacroData?.m_Identifier == "1" ? translate("Option_MacroType_NoRepeat", "No Repeat") : selectedMacroData?.m_Identifier == "2" ? translate("Option_MacroType_RepeatWhileHolding", "Repeat While Holding") : selectedMacroData?.m_Identifier == "3" ? translate("Option_MacroType_Toggle", "Toggle") : translate("Option_MacroType_SelectMode", "Select Mode") })
            ] })
          }
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel recording-actions", children: [
          !isRecording ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "button",
            {
              type: "button",
              className: "button start-recording no-record",
              title: "Start Recording",
              onClick: () => {
                beginRecording();
              },
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  SVGIconComponent,
                  {
                    className: "record start",
                    src: "/images/icons/macro_start-recording.svg",
                    selected: "/images/icons/macro_start-recording.svg"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text", children: translate("Button_MacroRecording_Start", "Record Keystrokes") })
              ]
            }
          ) : null,
          isRecording ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "button",
            {
              type: "button",
              className: "button stop-recording no-record",
              title: "Stop Recording",
              onClick: () => {
                endRecording();
              },
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  SVGIconComponent,
                  {
                    className: "record stop",
                    src: "/images/icons/macro_stop-recording.svg",
                    selected: "/images/icons/macro_stop-recording.svg"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text", children: translate("Button_MacroRecording_Stop", "Stop Recording") })
              ]
            }
          ) : null
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "panel close", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            type: "button",
            className: "button embed close no-record",
            title: "Close Macro Editor",
            onClick: () => {
              if (onCloseClick != null) {
                onCloseClick(hasUnsavedData.current);
              }
              hasUnsavedData.current = false;
            },
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              SVGIconComponent,
              {
                className: "close",
                src: "/images/icons/close.svg",
                selected: "/images/icons/close_hover.svg"
              }
            )
          }
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "panel field", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "scroll-container", ref: viewportList, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "div",
            {
              className: "recording-cursor",
              style: { ["--translation"]: `${cursorPosition}px` }
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "entries", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "entry-types", children: selectedMacroData != null && MacroContent.getSize(selectedMacroData.content) > 0 ? Object.getOwnPropertyNames(selectedMacroData.content).map(
              (key, index2) => {
                const entryDescription = getEntryDescription(key);
                let translationBuffer = 0;
                return /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "div",
                  {
                    className: "entry-type",
                    "data-input": entryDescription.inputValue,
                    children: selectedMacroData.content[key].data.map(
                      (entry, entryIndex) => {
                        let endTime = entry.endTime == null ? elapsedMilliseconds.current / 3 : entry.endTime;
                        const entryWidth = (endTime - entry.startTime) * 3;
                        const translation = entry.startTime * 3 - translationBuffer;
                        translationBuffer += entryWidth < 10 ? 10 : entryWidth;
                        const entryKey = encodeKey(index2, entryIndex);
                        return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "a",
                            {
                              className: "entry" + (selectedItemKey === entryKey ? " selected" : ""),
                              title: entryDescription.title,
                              style: {
                                ["--translation"]: `${translation}px 0`,
                                ["--entry-width"]: `${entryWidth}px`
                              },
                              onClick: (e) => {
                                e.preventDefault();
                                e.stopPropagation();
                                setSelectedItemKey(entryKey);
                              },
                              children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "name", children: entryDescription.inputValue })
                            },
                            entryKey
                          ),
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "div",
                            {
                              className: "callout" + (selectedItemKey === entryKey ? " selected" : ""),
                              style: {
                                ["--translation"]: `${translation - entryWidth}px`
                              },
                              children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "options", children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                  "button",
                                  {
                                    type: "button",
                                    title: "Edit",
                                    className: "button embed edit",
                                    onClick: () => editEntry(),
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                      SVGIconComponent,
                                      {
                                        className: "edit",
                                        src: "/images/icons/rename.svg",
                                        selected: "/images/icons/rename_hover.svg"
                                      }
                                    )
                                  }
                                ),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                  "button",
                                  {
                                    type: "button",
                                    title: "Delete",
                                    className: "button embed delete",
                                    onClick: () => deleteEntry(entryKey),
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                      SVGIconComponent,
                                      {
                                        className: "delete",
                                        src: "/images/icons/delete.svg",
                                        selected: "/images/icons/delete_hover.svg"
                                      }
                                    )
                                  }
                                )
                              ] })
                            }
                          )
                        ] });
                      }
                    )
                  },
                  index2
                );
              }
            ) : null }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "recorded-limits", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "handle start" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "div",
                {
                  className: "recording-span",
                  style: {
                    width: `${(entriesEndTime - entriesStartTime) * 3}px`,
                    ["--translation"]: `${entriesStartTime * 3}px 0`
                  }
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "handle end" })
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "markers", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            ViewportList,
            {
              viewportRef: viewportList,
              ref: listHandle,
              items: FieldMarkers,
              axis: "x",
              overscan: 20,
              children: (marker) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
                "div",
                {
                  className: "item",
                  style: {
                    ["--item-width"]: `${MarkerWidth}px`,
                    ["--translation"]: marker.id < 1e3 ? "-15%" : "-50%"
                  },
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "marker" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "label", children: [
                      marker.milliseconds,
                      marker.id != 0 ? "" : "ms"
                    ] })
                  ]
                },
                marker.id
              )
            }
          ) })
        ] }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel recording-type", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("MacroEditor_Label_Delay", "Delay") }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            ToggleChoiceComponent,
            {
              choice: delayType == "set-time" ? "a" : "b",
              choiceAContent: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(SVGIconComponent, { className: "set-time", src: "/images/icons/macro_set-time.svg" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: translate("Toggle_SetTime", "Set Time") })
              ] }),
              choiceBContent: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(SVGIconComponent, { className: "set-time", src: "/images/icons/macro_as-recorded.svg" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: translate("Toggle_AsRecorded", "As Recorded") })
              ] }),
              onChange: (choice) => {
                if (choice == "a") {
                  setDelayType("set-time");
                } else {
                  setDelayType("as-recorded");
                }
              }
            }
          ) }),
          delayType == "set-time" ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "description", children: translate(
              "MacroEditor_Label_SetTimeDescription",
              "A consistent time delay between all keystrokes. Set value from 10ms to 10000ms."
            ) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "number",
                className: "time",
                min: 10,
                max: 1e4,
                value: delayTime,
                onChange: (e) => setDelayTime(parseInt(e.currentTarget.value))
              }
            )
          ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "description", children: translate(
            "MacroEditor_Label_AsRecordedDescription",
            "The delays between keystrokes will appear accurate to their recorded time."
          ) })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "panel actions", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          {
            type: "button",
            className: "button save",
            title: "Save Macro",
            onClick: () => {
              if (onSave != null) {
                onSave(selectedMacroData);
              }
            },
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(SVGIconComponent, { className: "save", src: "/images/icons/save-check.svg" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: translate("Button_SaveMacro", "Save Macro") })
            ]
          }
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `macro-info${isShowingHelp == true ? " show" : ""}`, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "info-box name-info", children: translate(
            "Tooltip_Macro_Name",
            "Change the name of your macro and access this information anytime."
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "info-box macro-type-info", children: translate("Tooltip_Macro_Type", "Access the Macro Type selection menu.") }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "info-box start-info", children: translate(
            "Tooltip_Macro_ToggleButton",
            "Use this button to start and pause the macro keystroke recording."
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "info-box exit-info", children: translate("Tooltip_Macro_Exit", "Exit") }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "info-box recording-type-info", children: translate(
            "Tooltip_Macro_RecordingType",
            "Selecting between Set Time or As Recorded allows you to either automatically set consistent delays between inputs, or record/adjust manually."
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "info-box save-button-info", children: translate("Tooltip_Macro_SaveButton", "Save your macro.") })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `mode-options${modeSelectIsOpen == true ? " show" : ""}`, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: translate(
            "MacroEditor_Label_MacroType_Description",
            "Choose your desired type of macro to begin. You can change this at anytime."
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "options", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "div",
              {
                className: "option",
                onClick: () => {
                  if (selectedMacroData == null) {
                    return;
                  }
                  const data = structuredClone(selectedMacroData);
                  data.m_Identifier = "1";
                  setSelectedMacroData(data);
                  setModeSelectIsOpen(false);
                },
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("header", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("MacroEditor_Label_MacroType_NoRepeat_Title", "No Repeat") }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: IconType.MacroNoRepeat, color: Color.Base20, size: IconSize.Medium })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "description", children: translate(
                    "MacroEditor_Label_MacroType_NoRepeat_Description",
                    "A No Repeat macro performs once per activation of where it is assigned."
                  ) })
                ]
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "div",
              {
                className: "option",
                onClick: () => {
                  if (selectedMacroData == null) {
                    return;
                  }
                  const data = structuredClone(selectedMacroData);
                  data.m_Identifier = "2";
                  setSelectedMacroData(data);
                  setModeSelectIsOpen(false);
                },
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("header", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate(
                      "MacroEditor_Label_MacroType_RepeatWhileHolding_Title",
                      "Repeat While Holding"
                    ) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Icon,
                      {
                        type: IconType.MacroRepeatWhileHolding,
                        color: Color.Base20,
                        size: IconSize.Medium
                      }
                    )
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "description", children: translate(
                    "MacroEditor_Label_MacroType_RepeatWhileHolding_Description",
                    "The assigned macro will perform continuously for as long as it's assigned trigger is held down."
                  ) })
                ]
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "div",
              {
                className: "option",
                onClick: () => {
                  if (selectedMacroData == null) {
                    return;
                  }
                  const data = structuredClone(selectedMacroData);
                  data.m_Identifier = "3";
                  setSelectedMacroData(data);
                  setModeSelectIsOpen(false);
                },
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("header", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("MacroEditor_Label_MacroType_Toggle_Title", "Toggle") }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: IconType.MacroToggle, color: Color.Base20, size: IconSize.Medium })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "description", children: translate(
                    "MacroEditor_Label_MacroType_Toggle_Description",
                    "Upon activation, a Toggle macro performs continuously until activated a seconded time."
                  ) })
                ]
              }
            )
          ] })
        ] })
      ]
    }
  ) });
}
function getEntryDescription(inputName) {
  let inputValue = inputName.replace("Key", "");
  inputValue = inputValue.replace("Left", "");
  inputValue = inputValue.replace("Right", "");
  inputValue = inputValue.replace(/([A-Z]|(?<!F|\d)\d+)/g, " $1").trim();
  let title = inputName.replace(/([A-Z]|(?<!F|\d)\d+)/g, " $1").trim();
  return { inputValue, title };
}
const WindowsFunctionShortcuts = [
  new DisplayOption("none", "Option_WindowsFunctionShortcuts_none", -1, { translationFallback: "" }),
  new DisplayOption("email", "Option_WindowsFunctionShortcuts_email", 1, { translationFallback: "Email" }),
  new DisplayOption("calculator", "Option_WindowsFunctionShortcuts_calculator", 2, { translationFallback: "Calculator" }),
  new DisplayOption("myComputer", "Option_WindowsFunctionShortcuts_myComputer", 3, { translationFallback: "My Computer" }),
  new DisplayOption("explorer", "Option_WindowsFunctionShortcuts_explorer", 4, { translationFallback: "Explorer" }),
  new DisplayOption("browserHome", "Option_WindowsFunctionShortcuts_browserHome", 5, { translationFallback: "Browser - Home" }),
  new DisplayOption("browserRefresh", "Option_WindowsFunctionShortcuts_browserRefresh", 6, { translationFallback: "Browser - Refresh" }),
  new DisplayOption("browserStop", "Option_WindowsFunctionShortcuts_browserStop", 7, { translationFallback: "Browser - Stop" }),
  new DisplayOption("browserBack", "Option_WindowsFunctionShortcuts_browserBack", 8, { translationFallback: "Browser - Back" }),
  new DisplayOption("browserForward", "Option_WindowsFunctionShortcuts_browserForward", 9, { translationFallback: "Browser - Forward" }),
  new DisplayOption("browserSearch", "Option_WindowsFunctionShortcuts_browserSearch", 10, { translationFallback: "Browser - Search" })
];
const MultimediaOptionsWin = [
  new DisplayOption("none", "Option_MultimediaOptions_none", -1, { translationFallback: "none" }),
  new DisplayOption("openMediaPlayer", "Option_MultimediaOptions_openMediaPlayer", 1, {
    translationFallback: "Open Media Player",
    bindingValue: "Multimedia_Fun_0"
  }),
  new DisplayOption("playPause", "Option_MultimediaOptions_playPause", 2, {
    translationFallback: "Play / Pause",
    bindingValue: "Multimedia_Fun_1"
  }),
  new DisplayOption("next", "Option_MultimediaOptions_next", 3, {
    translationFallback: "Next",
    bindingValue: "Multimedia_Fun_2"
  }),
  new DisplayOption("previous", "Option_MultimediaOptions_previous", 4, {
    translationFallback: "Previous",
    bindingValue: "Multimedia_Fun_3"
  }),
  new DisplayOption("stop", "Option_MultimediaOptions_stop", 5, {
    translationFallback: "Stop",
    bindingValue: "Multimedia_Fun_4"
  }),
  new DisplayOption("mute", "Option_MultimediaOptions_mute", 6, {
    translationFallback: "Mute",
    bindingValue: "Multimedia_Fun_5"
  }),
  new DisplayOption("volumeUp", "Option_MultimediaOptions_volumeUp", 7, {
    translationFallback: "Volume Up",
    bindingValue: "Multimedia_Fun_6"
  }),
  new DisplayOption("volumeDown", "Option_MultimediaOptions_volumeDown", 8, {
    translationFallback: "Volume Down",
    bindingValue: "Multimedia_Fun_7"
  }),
  new DisplayOption("nextTrack", "Option_MultimediaOptions_nextTrack", 9, {
    translationFallback: "Next Track",
    bindingValue: "Multimedia_Fun_8"
  }),
  new DisplayOption("previousTrack", "Option_MultimediaOptions_previousTrack", 10, {
    translationFallback: "Previous Track",
    bindingValue: "Multimedia_Fun_9"
  })
];
const MultimediaOptionsMac = [
  new DisplayOption("none", "Option_MultimediaOptions_none", -1, { translationFallback: "none" }),
  new DisplayOption("playPause", "Option_MultimediaOptions_playPause", 2, {
    translationFallback: "Play / Pause",
    bindingValue: "Multimedia_Fun_1"
  }),
  new DisplayOption("next", "Option_MultimediaOptions_next", 3, {
    translationFallback: "Next",
    bindingValue: "Multimedia_Fun_2"
  }),
  new DisplayOption("previous", "Option_MultimediaOptions_previous", 4, {
    translationFallback: "Previous",
    bindingValue: "Multimedia_Fun_3"
  }),
  new DisplayOption("mute", "Option_MultimediaOptions_mute", 6, {
    translationFallback: "Mute",
    bindingValue: "Multimedia_Fun_5"
  }),
  new DisplayOption("volumeUp", "Option_MultimediaOptions_volumeUp", 7, {
    translationFallback: "Volume Up",
    bindingValue: "Multimedia_Fun_6"
  }),
  new DisplayOption("volumeDown", "Option_MultimediaOptions_volumeDown", 8, {
    translationFallback: "Volume Down",
    bindingValue: "Multimedia_Fun_7"
  }),
  new DisplayOption("nextTrack", "Option_MultimediaOptions_nextTrack", 9, {
    translationFallback: "Next Track",
    bindingValue: "Multimedia_Fun_8"
  }),
  new DisplayOption("previousTrack", "Option_MultimediaOptions_previousTrack", 10, {
    translationFallback: "Previous Track",
    bindingValue: "Multimedia_Fun_9"
  })
];
const MultimediaOptions = window.electron.process.platform === "darwin" ? MultimediaOptionsMac : MultimediaOptionsWin;
const MouseFunctions = [
  new DisplayOption("none", "Option_MouseFunctions_none", -1, { translationFallback: "none" }),
  new DisplayOption("leftClick", "Option_MouseFunctions_leftClick", 1, {
    translationFallback: "Left Click",
    bindingValue: "MOUSE_Fun_14"
  }),
  new DisplayOption("rightClick", "Option_MouseFunctions_rightClick", 2, {
    translationFallback: "Right Click",
    bindingValue: "MOUSE_Fun_15"
  }),
  new DisplayOption("middleClick", "Option_MouseFunctions_middleClick", 3, {
    translationFallback: "Middle Click",
    bindingValue: "MOUSE_Fun_16"
  }),
  new DisplayOption("forward", "Option_MouseFunctions_forward", 4, {
    translationFallback: "Forward",
    bindingValue: "MOUSE_Fun_17"
  }),
  new DisplayOption("back", "Option_MouseFunctions_back", 5, {
    translationFallback: "Back",
    bindingValue: "MOUSE_Fun_18"
  }),
  new DisplayOption("scrollUp", "Option_MouseFunctions_scrollUp", 6, {
    translationFallback: "Scroll Up",
    bindingValue: "MOUSE_Fun_19"
  }),
  new DisplayOption("scrollDown", "Option_MouseFunctions_scrollDown", 7, {
    translationFallback: "Scroll Down",
    bindingValue: "MOUSE_Fun_20"
  }),
  new DisplayOption("profileCycleUp", "Option_MouseFunctions_profileCycleUp", 9, {
    translationFallback: "Profile Cycle Up",
    bindingValue: "MOUSE_Fun_21"
  }),
  new DisplayOption("profileCycleDown", "Option_MouseFunctions_profileCycleDown", 8, {
    translationFallback: "Profile Cycle Down",
    bindingValue: "MOUSE_Fun_22"
  }),
  new DisplayOption("batteryStatusCheck", "Option_MouseFunctions_batteryStatusCheck", 10, {
    translationFallback: "Battery Status Check",
    bindingValue: "MOUSE_Fun_23"
  }),
  new DisplayOption("layerShift", "Option_MouseFunctions_layerShift", 12, {
    translationFallback: "Layer Shift",
    bindingValue: "LayerShift"
  })
];
const KeyboardFunctions = [
  new DisplayOption("none", "Option_KeyboardFunctions_none", -1, { translationFallback: "none" }),
  new DisplayOption("profileCycleUp", "Option_KeyboardFunctions_profileCycleUp", 1, {
    translationFallback: "Profile Cycle Up",
    bindingValue: "KEYBOARD_Fun_10"
  }),
  new DisplayOption("profileCycleDown", "Option_KeyboardFunctions_profileCycleDown", 2, {
    translationFallback: "Profile Cycle Down",
    bindingValue: "KEYBOARD_Fun_11"
  }),
  new DisplayOption("layerCycleUp", "Option_KeyboardFunctions_layerCycleUp", 3, {
    translationFallback: "Layer Cycle Up",
    bindingValue: "KEYBOARD_Fun_12"
  }),
  new DisplayOption("layerCycleDown", "Option_KeyboardFunctions_layerCycleDown", 4, {
    translationFallback: "Layer Cycle Down",
    bindingValue: "KEYBOARD_Fun_13"
  })
];
const RotaryEncoderActions = [
  new DisplayOption("none", "Option_RotaryEncoderAction_Push", 0, { translationFallback: "Knob Push" }),
  new DisplayOption("dpiStageUp", "Option_RotaryEncoderAction_Rotate", 1, { translationFallback: "Knob Rotation" })
];
const CURRENT_EXPORT_VERSION = 1;
const createSaveDialogOptions = (outputName) => {
  const sanitizedName = outputName.replace(/[<>:"\/\\|?*]+/g, "");
  return { defaultPath: sanitizedName, filters: [{ name: "Custom File Type", extensions: ["json"] }] };
};
const createOpenDialogOptions = () => {
  return { filters: [{ name: "Custom File Type", extensions: ["json"] }], properties: ["openFile"] };
};
const ExportMacro = async (macroID) => {
  const macroRecord = await getMacro(macroID);
  if (!macroRecord)
    return;
  const tmpRecord = structuredClone(macroRecord);
  tmpRecord.value = -1;
  delete tmpRecord._id;
  const response = await IPCService.invoke(AppChannel.ShowSaveDialog, createSaveDialogOptions(tmpRecord.name));
  if (!response.success)
    return { success: false, data: null };
  const exportPath = response.data;
  if (!exportPath)
    return { success: false, data: "Export path empty, likely user cancelled" };
  const data = {
    filename: tmpRecord.name,
    path: exportPath,
    exportVersion: 1,
    value: tmpRecord
  };
  return await IPCService.invoke(AppChannel.Tool_SaveFile, data);
};
const ImportMacro = async () => {
  const response = await IPCService.invoke(AppChannel.ShowOpenDialog, createOpenDialogOptions());
  if (!response.success)
    return { success: false, data: null };
  const importPath = response.data;
  const importResult = await IPCService.invoke(AppChannel.Tool_OpenFile, importPath);
  if (importResult.success) {
    const loaded = await importResult.data;
    try {
      const parsedResults = JSON.parse(loaded);
      if (parsedResults["exportVersion"] < CURRENT_EXPORT_VERSION) {
        console.warn(
          `Importing macro with different export version: ${parsedResults["exportVersion"]}, current: ${CURRENT_EXPORT_VERSION}`
        );
      }
      const macroData = parsedResults["value"];
      const macroRecord = new MacroRecord(macroData);
      return { success: true, data: await saveMacroRecord(macroRecord) };
    } catch (e) {
      return { success: false, data: e };
    }
  }
  return { success: false, data: importResult.data };
};
const style$1 = {
  "import-export-button": "_import-export-button_q0nxd_1"
};
function MacroSelectorComponent() {
  const translate = useTranslate();
  const { openMacroEditor } = useUIUpdateContext();
  const { setKeybindingType, setKeybindMacroSelection } = useDevicesManagementContext();
  const { keybindSelectedBindingType, keybindMacroSelection } = useUIContext();
  const { deleteMacro, getMacros: getMacros2 } = useRecordsUpdateContext();
  const { macros } = useRecordsContext();
  const importMacro = async () => {
    const result = await ImportMacro();
    console.log(`Import Macro: ${result.success ? "Success" : "Failure: " + result.data}`);
    getMacros2();
  };
  const exportMacro = async () => {
    if (!keybindMacroSelection)
      return;
    const result = await ExportMacro(keybindMacroSelection.value);
    console.log(`Export Macro: ${result.success ? "Success" : "Failure: " + result.data}`);
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "main macro", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: translate("Device_Keybinding_Label_Macros", "Macros") }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: translate(
        "Device_Keybinding_Label_MacroDescription1",
        "Selecting 'New Macro' will open the macro creation modal. Inside, you can choose the type of macro you want to create, set a name, and record & edit your inputs."
      ) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: translate(
        "Device_Keybinding_Label_MacroDescription2",
        "Saving from within the modal will add it to the macro list."
      ) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "button",
        {
          className: "glorious",
          type: "button",
          onClick: () => {
            setKeybindMacroSelection(void 0);
            openMacroEditor();
          },
          children: translate("Button_NewMacro", "New Macro")
        }
      )
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "second macro", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "stack-container macros", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        EditableListComponent,
        {
          className: style$1["macro-list"],
          items: macros.map((record) => {
            return { label: record.name, ref: record, id: record.value };
          }),
          noItemsMessage: translate("Device_Keybinding_Label_Macro_EmptyList", "No Macros Saved"),
          onClick: (item) => {
            setKeybindingType(
              BindingTypes_ButtonPress.find(
                (x2) => x2.optionKey == keybindSelectedBindingType?.optionKey
              )
            );
            setKeybindMacroSelection(item.ref);
          },
          onButtonClick: (action, item, _index) => {
            switch (action) {
              case "edit": {
                setKeybindMacroSelection(item.ref);
                openMacroEditor();
                break;
              }
              case "remove": {
                setKeybindMacroSelection(void 0);
                deleteMacro(item.ref.value);
                break;
              }
            }
          },
          externalEditor: true,
          selectedID: keybindMacroSelection?.value
        }
      ) }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "actions", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("button", { className: `hollow ${style$1["import-export-button"]}`, type: "button", onClick: importMacro, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(SVGIconComponent, { src: "/images/icons/download.svg" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: translate("Button_ImportMacro", "Import Macro") })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("button", { className: `hollow ${style$1["import-export-button"]}`, type: "button", onClick: exportMacro, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(SVGIconComponent, { src: "/images/icons/upload.svg" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: translate("Button_ExportMacro", "Export Macro") })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", {})
      ] })
    ] })
  ] });
}
const keyCharacterSelector = "";
const removeKeyType = (key) => key.replace("Key", "").replace("Digit", "");
function KeyCharacterSelector({ previewDevice, onKeySelect, onClose, position = "absolute" }) {
  const [selectedKey, setSelectedKey] = reactExports.useState(null);
  const translate = useTranslate();
  reactExports.useEffect(() => {
    const handleKeyDown = (event) => event.key === "Escape" && onClose();
    document.addEventListener("keydown", handleKeyDown);
    return () => {
      document.removeEventListener("keydown", handleKeyDown);
    };
  }, [onClose]);
  const getKeySectionsObject = () => {
    if (previewDevice) {
      const deviceInputLayout = DeviceInputLayoutMap.get(previewDevice.SN);
      const letters = [];
      const numbers = [];
      const fkeys = [];
      const others = [];
      deviceInputLayout.layoutNodes.forEach((key) => {
        if (key.translationKey.startsWith("Key")) {
          letters.push(key);
        } else if (key.translationKey.startsWith("Digit")) {
          numbers.push(key);
        } else if (key.translationKey.startsWith("F")) {
          fkeys.push(key);
        } else {
          others.push(key);
        }
      });
      const keySections = {
        Letters: letters,
        Numbers: numbers,
        FunctionKeys: fkeys,
        Others: others
      };
      return keySections;
    }
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "keys-character-selector-modal", style: { position: position ?? "absolute" }, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "keys-header", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { children: translate("Keybinding_Key_Character_Selector_Label", "Character Selector") }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: translate("Keybinding_Key_Character_Selector_Description", "Choose a character from below to assign to your selected field, then confirm your choice") })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "key-character-selector-actions", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "key-character", children: selectedKey && removeKeyType(selectedKey.translationKey) }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "div",
            {
              className: "save-key-character-selection",
              style: {
                pointerEvents: selectedKey ? "initial" : "none",
                cursor: selectedKey ? "pointer" : "initial"
              },
              onClick: () => {
                onKeySelect(selectedKey);
                setSelectedKey(null);
              },
              children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", {})
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "close-keys-character-selector-modal", onClick: onClose, children: /* @__PURE__ */ jsxRuntimeExports.jsx(SVGIconComponent, { src: "/images/icons/close.svg" }) })
        ] })
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "key-sections-container", children: Object.entries(getKeySectionsObject()).map(([sectionName, items]) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "key-section", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { children: sectionName }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "keys-container", children: items.map((item, index2) => /* @__PURE__ */ jsxRuntimeExports.jsx(
        "div",
        {
          className: `key-button ${selectedKey === item && "active"}`,
          onClick: () => setSelectedKey(item),
          children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: removeKeyType(item.translationKey) })
        },
        index2
      )) })
    ] }, sectionName)) })
  ] });
}
function KeyboardKeybindingManagementPage(props) {
  const devicesContext = useDevicesContext();
  useDevicesManagementContext();
  const uiContext = useUIContext();
  const recordsContext = useRecordsContext();
  const { updateMacro, deleteMacro, getMacros: getMacros2 } = useRecordsUpdateContext();
  const translate = useTranslate();
  const { openMacroEditor, closeMacroEditor } = useUIUpdateContext();
  const {
    setKeybindingType,
    setKeybindingKeyCode,
    setKeybindingKeyModifier,
    setKeybindingKeyboardFunction,
    setKeybindSelectedMouseFunction,
    setKeybindSelectedDPIOption,
    setKeybindSelectedMultimediaFunction,
    setKeybindSelectedShortcutType,
    setKeybindSelectedShortcutOption,
    setKeybindSelectedShortcutProgramPath,
    setKeybindSelectedShortcutUrl,
    setKeybindSelectedShortcutWindowsOption,
    setKeybindDisabledIsSelected,
    setKeybindSoundControlSelection,
    setKeybindAudioToggleTarget,
    setKeybindMacroSelection,
    setRotaryEncoderAction
  } = useDevicesManagementContext();
  const keystrokeModifierOptions = ModifierKeys.map((keyData, i2) => {
    return {
      value: keyData.optionKey,
      label: translate(keyData.translationKey, keyData.data?.translationFallback)
    };
  });
  const [macros, setMacros] = reactExports.useState([]);
  const [bindingTypes, setBindingTypes] = reactExports.useState([]);
  const [selectorVisible, showSelector] = reactExports.useState(false);
  reactExports.useEffect(() => {
    setMacros(recordsContext.macros);
  }, [recordsContext.macros]);
  reactExports.useEffect(() => {
    if (devicesContext.previewDevice == null || uiContext.keybindSelectedNode == null) {
      setBindingTypes(BindingTypes_KeyPress);
      return;
    }
    if (devicesContext.previewDevice.deviceCategoryName == "Numpad") {
      if (uiContext.keybindSelectedNode.isRotary) {
        if (uiContext.keybindSelectedRotaryEncoderAction?.value == 0) {
          setBindingTypes(BindingTypes_RotaryPress);
        } else if (uiContext.keybindSelectedRotaryEncoderAction?.value == 1) {
          setBindingTypes(BindingTypes_Rotation);
        } else {
          setBindingTypes(BindingTypes_KeyPress);
        }
      } else {
        setBindingTypes(BindingTypes_KeyPress);
      }
    } else if (devicesContext.previewDevice.deviceCategoryName == "Keyboard") {
      setBindingTypes(BindingTypes_KeyPress);
    }
  }, [devicesContext.previewDevice]);
  const selectShortcutProgramPath = async () => {
    const result = await AppService.dialogShortcutProgramPath();
    console.log(`Program Shortcut Selection: ${result.success ? "Success" + result.data : "Failure: "}`);
    setKeybindingType(
      BindingTypes_KeyPress.find((x2) => x2.optionKey == uiContext.keybindSelectedBindingType?.optionKey)
    );
    setKeybindSelectedShortcutProgramPath(result.data);
  };
  reactExports.useEffect(() => {
    setMacros(recordsContext.macros);
  }, [recordsContext.macros]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "layout keybinding keyboard", children: uiContext.keybindSelectedLayer?.optionKey == "none" ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "main", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "stack-container layers", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "stack", children: devicesContext.previewDevice?.keybindingLayers.map((data) => {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        "a",
        {
          onClick: () => {
            if (data.value > 2) {
              console.error(
                "A fourth keybinding layer is not currently supported."
              );
              return;
            }
            uiContext.keybindSelectedLayer = data;
          },
          children: data.translate
        },
        data.value
      );
    }) }) }) }) : uiContext.keybindSelectedBindingType?.optionKey == "none" ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "main", children: [
      uiContext.keybindSelectedNode?.isRotary == true ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "rotary-encoder-action", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            type: "button",
            className: "hollow",
            onClick: () => {
              setRotaryEncoderAction(RotaryEncoderActions[0]);
            },
            children: translate(
              RotaryEncoderActions[0].translationKey,
              RotaryEncoderActions[0].data?.translationFallback
            )
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            type: "button",
            className: "hollow",
            onClick: () => {
              setRotaryEncoderAction(RotaryEncoderActions[1]);
            },
            children: translate(
              RotaryEncoderActions[0].translationKey,
              RotaryEncoderActions[1].data?.translationFallback
            )
          }
        )
      ] }) : "",
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "stack-container binding-types", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate(
          uiContext.keybindSelectedLayer?.translationKey,
          uiContext.keybindSelectedLayer?.data?.translationFallback
        ) }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "stack", children: bindingTypes.map((option) => {
          if (option.optionKey == "none") {
            return null;
          }
          return /* @__PURE__ */ jsxRuntimeExports.jsx(
            "a",
            {
              onClick: () => {
                setKeybindingType(option);
              },
              children: translate(option.translationKey, option.data?.translationFallback)
            },
            option.value
          );
        }) })
      ] })
    ] }) }) : uiContext.keybindSelectedBindingType?.optionKey == "keystroke" ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "main keystroke", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("Device_Keybinding_Label_Keystroke", "Keystroke") }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field key", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: translate("Device_Keybinding_Label_Key", "Key") }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "input",
          {
            readOnly: true,
            value: uiContext.keybindSelectedKeyCode ?? "",
            onClick: () => showSelector(true),
            onKeyDown: (event) => {
              console.log("keybind");
              setKeybindingKeyCode(event.code);
            }
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "result" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field modifier", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: translate("Device_Keybinding_Label_Modifier", "Modifier") }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          OptionSelectComponent,
          {
            options: keystrokeModifierOptions,
            onChange: (value2) => {
              const option = ModifierKeys.find((item) => item.optionKey == value2);
              if (option == null) {
                throw new Error("Unknown modifier selected.");
              }
              setKeybindingKeyModifier(option);
            }
          }
        )
      ] })
    ] }) }) : uiContext.keybindSelectedBindingType?.optionKey == "keyboardFunction" ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "main", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "stack-container keyboard-functions", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("Device_Keybinding_Label_KeyboardFunction", "Keyboard Function") }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "stack", children: KeyboardFunctions.map((option) => {
        if (option.optionKey == "none") {
          return null;
        }
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          "a",
          {
            className: uiContext.keybindSelectedKeyboardFunction == option ? "selected" : "",
            onClick: () => {
              setKeybindingKeyboardFunction(option);
            },
            children: translate(option.translationKey, option.data?.translationFallback)
          },
          option.value
        );
      }) })
    ] }) }) }) : uiContext.keybindSelectedBindingType?.optionKey == "mouseFunction" ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "main", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "stack-container mouse-functions", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("Device_Keybinding_Label_MouseFunction", "Mouse Function") }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "stack", children: MouseFunctions.map((option) => {
        if (option.optionKey == "none") {
          return null;
        }
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          "a",
          {
            className: uiContext.keybindSelectedMouseFunction == option ? "selected" : "",
            onClick: () => {
              setKeybindSelectedMouseFunction(option);
            },
            children: translate(option.translationKey, option.data?.translationFallback)
          },
          option.value
        );
      }) })
    ] }) }) }) : uiContext.keybindSelectedBindingType?.optionKey == "macro" ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(MacroSelectorComponent, {}) }) : uiContext.keybindSelectedBindingType?.optionKey == "multimedia" ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "main", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "stack-container multimedia", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("Device_Keybinding_Label_Multimedia", "Multimedia") }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "stack", children: MultimediaOptions.map((option) => {
        if (option.optionKey == "none") {
          return null;
        }
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          "a",
          {
            className: uiContext.keybindSelectedMultimediaFunction == option ? "selected" : "",
            onClick: () => {
              setKeybindSelectedMultimediaFunction(option);
            },
            children: translate(option.translationKey, option.data?.translationFallback)
          },
          option.value
        );
      }) })
    ] }) }) }) : uiContext.keybindSelectedBindingType?.optionKey == "shortcuts" && (uiContext.keybindSelectedShortcutType == null || uiContext.keybindSelectedShortcutType.optionKey == "none") ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "main", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "stack-container shortcuts", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("Device_Keybinding_Label_Shortcuts", "Shortcuts") }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "stack", children: ShortcutTypes.map((option) => {
        if (option.optionKey == "none") {
          return null;
        }
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          "a",
          {
            onClick: () => {
              setKeybindSelectedShortcutType(option);
            },
            children: translate(option.translationKey, option.data?.translationFallback)
          },
          option.value
        );
      }) })
    ] }) }) }) : uiContext.keybindSelectedBindingType?.optionKey == "shortcuts" && (uiContext.keybindSelectedShortcutType == null || uiContext.keybindSelectedShortcutType.optionKey == "launchProgram") ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "main", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "stack-container launchProgram", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("Device_Keybinding_Label_Shortcuts", "Shortcuts") }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field path", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: translate("Device_Keybinding_Label_Path", "Path") }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "input",
          {
            placeholder: translate("Placeholder_LaunchProgramUrl", "Program Path"),
            defaultValue: uiContext.keybindSelectedShortcutProgramPath ?? "",
            onChange: (event) => {
              const value2 = event.currentTarget.value;
              setKeybindSelectedShortcutProgramPath(value2);
            }
          }
        )
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("button", { type: "button", className: "secondary", onClick: selectShortcutProgramPath, children: translate("Button_Browse", "Browse...") })
    ] }) }) }) : uiContext.keybindSelectedBindingType?.optionKey == "shortcuts" && (uiContext.keybindSelectedShortcutType == null || uiContext.keybindSelectedShortcutType.optionKey == "launchWebsite") ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "main", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "stack-container launchWebsite", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("Device_Keybinding_Label_Shortcuts", "Shortcuts") }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field url", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: translate("Device_Keybinding_Label_URL", "URL") }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "input",
          {
            placeholder: "Enter URL",
            defaultValue: uiContext.keybindSelectedShortcutUrl ?? "",
            onChange: (event) => {
              const value2 = event.currentTarget.value;
              setKeybindSelectedShortcutUrl(value2);
            }
          }
        )
      ] })
    ] }) }) }) : uiContext.keybindSelectedBindingType?.optionKey == "shortcuts" && (uiContext.keybindSelectedShortcutType == null || uiContext.keybindSelectedShortcutType.optionKey == "windows") ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "main", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "stack-container windows", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("Device_Keybinding_Label_Shortcuts", "Shortcuts") }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "stack", children: WindowsFunctionShortcuts.map((option) => {
        if (option.optionKey == "none") {
          return null;
        }
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          "a",
          {
            className: uiContext.keybindSelectedShortcutWindowsOption == option ? "selected" : "",
            onClick: () => {
              setKeybindSelectedShortcutWindowsOption(option);
            },
            children: translate(option.translationKey, option.data?.translationFallback)
          },
          option.value
        );
      }) })
    ] }) }) }) : uiContext.keybindSelectedBindingType?.optionKey == "disable" ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "main", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "stack-container disable-options", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("Device_Keybinding_Label_Disable", "Disable") }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "stack", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        "a",
        {
          className: uiContext.keybindDisabledIsSelected == true ? `selected` : "",
          onClick: () => {
            setKeybindDisabledIsSelected(!uiContext.keybindDisabledIsSelected);
          },
          children: translate("Device_Keybinding_Label_Disable", "Disable")
        }
      ) })
    ] }) }) }) : null }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      MacroEditorComponent,
      {
        selectedMacro: uiContext.keybindMacroSelection,
        isOpen: uiContext.macroModal_isOpen,
        onCloseClick: (hasUnsavedData) => {
          if (!hasUnsavedData) {
            closeMacroEditor();
          } else {
            closeMacroEditor();
            setKeybindMacroSelection(void 0);
          }
        },
        onSave: (macro) => {
          console.log(macro);
          updateMacro(macro);
          setKeybindMacroSelection(macro);
          closeMacroEditor();
        }
      }
    ),
    selectorVisible && /* @__PURE__ */ jsxRuntimeExports.jsx(
      KeyCharacterSelector,
      {
        onKeySelect: (selectedKey) => {
          console.log(selectedKey);
          const value2 = selectedKey.translationKey;
          setKeybindingKeyCode(value2);
          showSelector(false);
        },
        previewDevice: devicesContext.previewDevice,
        onClose: () => showSelector(false)
      }
    )
  ] });
}
const DPIOptions = [
  new DisplayOption("none", "Option_DPIOptions_none", -1, { translationFallback: "" }),
  new DisplayOption("dpiStageUp", "Option_DPIOptions_dpiStageUp", 1, { translationFallback: "DPI Stage Up" }),
  new DisplayOption("dpiStageDown", "Option_DPIOptions_dpiStageDown", 2, { translationFallback: "DPI Stage Down" }),
  new DisplayOption("dpiCycleUp", "Option_DPIOptions_dpiCycleUp", 3, { translationFallback: "DPI Cycle Up" }),
  new DisplayOption("dpiCycleDown", "Option_DPIOptions_dpiCycleDown", 4, { translationFallback: "DPI Cycle Down" }),
  new DisplayOption("dpiLock", "Option_DPIOptions_dpiLock", 5, { translationFallback: "DPI Lock" })
];
const SupportsLayerShift = [
  "0x22D40x1503",
  // Model I Wired
  "0x093A0x821A",
  // Model I2 Wireless
  "0x320F0x831A"
  // Model valueG
];
function MouseKeybindingManagementPage(props) {
  const devicesContext = useDevicesContext();
  const uiContext = useUIContext();
  const { setKeybindingType: setUIKeybindingType } = useUIUpdateContext();
  useRecordsContext();
  const translate = useTranslate();
  const { openMacroEditor, closeMacroEditor } = useUIUpdateContext();
  const {
    setKeybindingLayer,
    setKeybindingType,
    setKeybindingKeyCode,
    setKeybindingKeyModifier,
    setKeybindingKeyboardFunction,
    setKeybindSelectedMouseFunction,
    setKeybindSelectedDPIOption,
    setKeybindSelectedMultimediaFunction,
    setKeybindSelectedShortcutType,
    // setKeybindSelectedShortcutOption,
    setKeybindSelectedShortcutProgramPath,
    setKeybindSelectedShortcutUrl,
    setKeybindSelectedShortcutWindowsOption,
    setKeybindDisabledIsSelected,
    setKeybindSoundControlSelection,
    setKeybindAudioToggleTarget,
    setKeybindMacroSelection
  } = useDevicesManagementContext();
  const { updateMacro, deleteMacro } = useRecordsUpdateContext();
  const keystrokeModifierOptions = ModifierKeys.map((keyData, i2) => {
    return {
      value: keyData.optionKey,
      label: translate(keyData.translationKey, keyData.data?.translationFallback)
    };
  });
  reactExports.useState(null);
  reactExports.useRef();
  reactExports.useRef();
  const selectShortcutProgramPath = async () => {
    const result = await AppService.dialogShortcutProgramPath();
    console.log(`Program Shortcut Selection: ${result.success ? "Success" + result.data : "Failure: "}`);
    setKeybindingType(
      BindingTypes_ButtonPress.find((x2) => x2.optionKey == uiContext.keybindSelectedBindingType?.optionKey)
    );
    setKeybindSelectedShortcutProgramPath(result.data);
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "layout keybinding mouse", children: uiContext.keybindSelectedNodeIndex == -1 ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "panel no-device-input-selection", children: /* @__PURE__ */ jsxRuntimeExports.jsx("em", { children: translate(
      "Device_Keybinding_Mouse_SelectButton",
      "Select a Mouse Button, above, to see its keybinding options."
    ) }) }) : devicesContext.previewDevice?.SN == "0x093A0x821A" && uiContext.keybindSelectedLayer?.optionKey == "none" ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "panel main", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "stack-container layers", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "stack", children: devicesContext.previewDevice?.keybindingLayers.map((option) => {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        "a",
        {
          onClick: () => {
            setKeybindingLayer(option);
          },
          children: translate(option.optionKey, option.data?.translationFallback)
        },
        option.optionKey
      );
    }) }) }) }) : uiContext.keybindSelectedBindingType?.optionKey == "none" ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "panel main", children: uiContext.keybindSelectedLayer?.optionKey != "layerShift" || uiContext.keybindSelectedLayer?.optionKey == "layerShift" ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "stack-container binding-types", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate(
        uiContext.keybindSelectedLayer?.translationKey,
        uiContext.keybindSelectedLayer?.data?.translationFallback
      ) }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "stack", children: BindingTypes_ButtonPress.map((option) => {
        if (option.optionKey == "none") {
          return null;
        }
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          "a",
          {
            onClick: () => {
              setUIKeybindingType(option);
            },
            children: translate(option.translationKey, option.data?.translationFallback)
          },
          option.value
        );
      }) })
    ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("Device_Keybinding_Label_LayerShift_Heading", "Layer Shift") }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: translate(
        "Device_Keybinding_Label_LayerShift_Description",
        "A mouse button must be assigned as Layer Shift on the Standard layer under 'Mouse Function' in order to access the second layer of functionality."
      ) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "button",
        {
          type: "button",
          onClick: () => {
            setKeybindingLayer(devicesContext.previewDevice.keybindingLayers[0]);
          },
          children: translate("Button_Assign", "Assign")
        }
      )
    ] }) }) }) : uiContext.keybindSelectedBindingType?.optionKey == "keystroke" ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel main keystroke", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("Device_Keybinding_Label_Keystroke", "Keystroke") }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field key", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: translate("Device_Keybinding_Label_Key", "Key") }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "input",
          {
            readOnly: true,
            value: uiContext.keybindSelectedKeyCode ?? "",
            onKeyDown: (event) => {
              event?.stopPropagation();
              event?.preventDefault();
              const mappedItem = SupportData.KeyMapping.find(
                (item) => item.code == event.code
              );
              if (mappedItem == null) {
                throw new Error("Unknown Key pressed");
              }
              const value2 = mappedItem.value;
              setKeybindingType(
                BindingTypes_ButtonPress.find(
                  (x2) => x2.optionKey == uiContext.keybindSelectedBindingType?.optionKey
                )
              );
              setKeybindingKeyCode(value2);
              return false;
            }
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "result" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field modifier", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: translate("Device_Keybinding_Label_Modifier", "Modifier") }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          OptionSelectComponent,
          {
            options: keystrokeModifierOptions,
            onChange: (value2) => {
              const option = ModifierKeys.find((item) => item.optionKey == value2);
              if (option == null) {
                throw new Error("Unknown modifier selected.");
              }
              setKeybindingKeyModifier(option);
            }
          }
        )
      ] })
    ] }) }) : uiContext.keybindSelectedBindingType?.optionKey == "keyboardFunction" ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "panel main keyboard-functions", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "stack-container keyboard-functions", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("Device_Keybinding_Label_KeyboardFunction", "Keyboard Function") }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "stack", children: KeyboardFunctions.map((option) => {
        if (option.optionKey == "none") {
          return null;
        }
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          "a",
          {
            className: uiContext.keybindSelectedKeyboardFunction == option ? "selected" : "",
            onClick: () => {
              setKeybindingType(
                BindingTypes_ButtonPress.find(
                  (x2) => x2.optionKey == uiContext.keybindSelectedBindingType?.optionKey
                )
              );
              setKeybindingKeyboardFunction(option);
            },
            children: translate(option.translationKey, option.data?.translationFallback)
          },
          option.value
        );
      }) })
    ] }) }) }) : uiContext.keybindSelectedBindingType?.optionKey == "mouseFunction" ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "panel main mouse-functions", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "stack-container mouse-functions", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("Device_Keybinding_Label_MouseFunction", "Mouse Function") }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "stack", children: MouseFunctions.map((option) => {
        if (option.optionKey == "none") {
          return null;
        }
        if (option.optionKey == "layerShift" && !SupportsLayerShift.includes(devicesContext.previewDevice?.SN ?? "")) {
          return null;
        }
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          "a",
          {
            className: uiContext.keybindSelectedMouseFunction == option ? "selected" : "",
            onClick: () => {
              setKeybindingType(
                BindingTypes_ButtonPress.find(
                  (x2) => x2.optionKey == uiContext.keybindSelectedBindingType?.optionKey
                )
              );
              setKeybindSelectedMouseFunction(option);
            },
            children: translate(option.translationKey, option.data?.translationFallback)
          },
          option.value
        );
      }) })
    ] }) }) }) : uiContext.keybindSelectedBindingType?.optionKey == "dpi" ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "panel main dpi", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "stack-container dpi-options", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("Device_Keybinding_Label_DPI", "DPI") }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "stack", children: DPIOptions.map((option) => {
        if (option.optionKey == "none") {
          return null;
        }
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          "a",
          {
            className: uiContext.keybindSelectedDPIOption == option ? "selected" : "",
            onClick: () => {
              setKeybindingType(
                BindingTypes_ButtonPress.find(
                  (x2) => x2.optionKey == uiContext.keybindSelectedBindingType?.optionKey
                )
              );
              setKeybindSelectedDPIOption(option);
            },
            children: translate(option.translationKey, option.data?.translationFallback)
          },
          option.value
        );
      }) })
    ] }) }) }) : uiContext.keybindSelectedBindingType?.optionKey == "macro" ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(MacroSelectorComponent, {}) }) : uiContext.keybindSelectedBindingType?.optionKey == "multimedia" ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "panel main multimedia", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "stack-container multimedia", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("Device_Keybinding_Label_Multimedia", "Multimedia") }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "stack", children: MultimediaOptions.map((option) => {
        if (option.optionKey == "none") {
          return null;
        }
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          "a",
          {
            className: uiContext.keybindSelectedMultimediaFunction == option ? "selected" : "",
            onClick: () => {
              setKeybindingType(
                BindingTypes_ButtonPress.find(
                  (x2) => x2.optionKey == uiContext.keybindSelectedBindingType?.optionKey
                )
              );
              setKeybindSelectedMultimediaFunction(option);
            },
            children: translate(option.translationKey, option.data?.translationFallback)
          },
          option.value
        );
      }) })
    ] }) }) }) : uiContext.keybindSelectedBindingType?.optionKey == "shortcuts" && (uiContext.keybindSelectedShortcutType == null || uiContext.keybindSelectedShortcutType.optionKey == "none") ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "panel main shortcuts", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "stack-container shortcuts", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("Device_Keybinding_Label_Shortcuts", "Shortcuts") }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "stack", children: ShortcutTypes.map((option) => {
        if (option.optionKey == "none") {
          return null;
        }
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          "a",
          {
            onClick: () => {
              setKeybindingType(
                BindingTypes_ButtonPress.find(
                  (x2) => x2.optionKey == uiContext.keybindSelectedBindingType?.optionKey
                )
              );
              setKeybindSelectedShortcutType(option);
            },
            children: translate(option.translationKey, option.data?.translationFallback)
          },
          option.value
        );
      }) })
    ] }) }) }) : uiContext.keybindSelectedBindingType?.optionKey == "shortcuts" && (uiContext.keybindSelectedShortcutType == null || uiContext.keybindSelectedShortcutType.optionKey == "launchProgram") ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "panel main shortcuts", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "stack-container launchProgram", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("Device_Keybinding_Label_Shortcuts", "Shortcuts") }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field path", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: translate("Device_Keybinding_Label_Path", "Path") }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "input",
          {
            placeholder: "Enter Path",
            defaultValue: uiContext.keybindSelectedShortcutProgramPath ?? "",
            onChange: (event) => {
              const value2 = event.currentTarget.value;
              setKeybindingType(
                BindingTypes_ButtonPress.find(
                  (x2) => x2.optionKey == uiContext.keybindSelectedBindingType?.optionKey
                )
              );
              setKeybindSelectedShortcutProgramPath(value2);
            }
          }
        )
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("button", { type: "button", className: "secondary", onClick: selectShortcutProgramPath, children: translate("Button_Browse", "Browse...") })
    ] }) }) }) : uiContext.keybindSelectedBindingType?.optionKey == "shortcuts" && (uiContext.keybindSelectedShortcutType == null || uiContext.keybindSelectedShortcutType.optionKey == "launchWebsite") ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "panel main shortcuts", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "stack-container launchWebsite", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("Device_Keybinding_Label_Shortcuts", "Shortcuts") }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field url", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: translate("Device_Keybinding_Label_URL", "URL") }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "input",
          {
            placeholder: "Enter URL",
            defaultValue: uiContext.keybindSelectedShortcutUrl ?? "",
            onChange: (event) => {
              const value2 = event.currentTarget.value;
              setKeybindingType(
                BindingTypes_ButtonPress.find(
                  (x2) => x2.optionKey == uiContext.keybindSelectedBindingType?.optionKey
                )
              );
              setKeybindSelectedShortcutUrl(value2);
            }
          }
        )
      ] })
    ] }) }) }) : uiContext.keybindSelectedBindingType?.optionKey == "shortcuts" && (uiContext.keybindSelectedShortcutType == null || uiContext.keybindSelectedShortcutType.optionKey == "windows") ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "panel main windows", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "stack-container windows", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("Device_Keybinding_Label_Shortcuts", "Shortcuts") }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "stack", children: WindowsFunctionShortcuts.map((option) => {
        if (option.optionKey == "none") {
          return null;
        }
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          "a",
          {
            className: uiContext.keybindSelectedShortcutWindowsOption == option ? "selected" : "",
            onClick: () => {
              setKeybindingType(
                BindingTypes_ButtonPress.find(
                  (x2) => x2.optionKey == uiContext.keybindSelectedBindingType?.optionKey
                )
              );
              setKeybindSelectedShortcutWindowsOption(option);
            },
            children: translate(option.translationKey, option.data?.translationFallback)
          },
          option.value
        );
      }) })
    ] }) }) }) : uiContext.keybindSelectedBindingType?.optionKey == "disable" ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "panel main disable", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "stack-container disable-options", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("Device_Keybinding_Label_Disable", "Disable") }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "stack", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        "a",
        {
          className: uiContext.keybindDisabledIsSelected == true ? `selected` : "",
          onClick: () => {
            setKeybindingType(
              BindingTypes_ButtonPress.find(
                (x2) => x2.optionKey == uiContext.keybindSelectedBindingType?.optionKey
              )
            );
            setKeybindDisabledIsSelected(!uiContext.keybindDisabledIsSelected);
          },
          children: translate("Device_Keybinding_Label_Disable", "Disable")
        }
      ) })
    ] }) }) }) : null }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      MacroEditorComponent,
      {
        selectedMacro: uiContext.keybindMacroSelection,
        isOpen: uiContext.macroModal_isOpen,
        onCloseClick: (hasUnsavedData) => {
          if (!hasUnsavedData) {
            closeMacroEditor();
            return;
          }
        },
        onSave: (macro) => {
          console.log(macro);
          updateMacro(macro);
          setKeybindMacroSelection(macro);
          closeMacroEditor();
        }
      }
    )
  ] });
}
const keybindingManagement_page = "";
function KeybindingManagementPage(props) {
  const devicesContext = useDevicesContext();
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: devicesContext.previewDevice?.deviceCategoryName == "Mouse" ? /* @__PURE__ */ jsxRuntimeExports.jsx(MouseKeybindingManagementPage, {}) : devicesContext.previewDevice?.deviceCategoryName == "Keyboard" || devicesContext.previewDevice?.deviceCategoryName == "Numpad" ? /* @__PURE__ */ jsxRuntimeExports.jsx(KeyboardKeybindingManagementPage, {}) : devicesContext.previewDevice?.deviceCategoryName == "valueE" ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("a", { children: "None" }) }) : /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}) });
}
function KeyboardPerformanceManagementPage(props) {
  const devicesContext = useDevicesContext();
  const translate = useTranslate();
  const {
    getCurrentProfile,
    setPollingRate,
    setInputLatency,
    setRotarySensitivity,
    setStandbyType,
    setStandbyValue
  } = useDevicesManagementContext();
  const pollingRateOptions = devicesContext.previewDevice?.pollingRates.map((option, index2) => {
    return { value: option.value, label: translate(option.translationKey, option.data?.translationFallback) };
  });
  const inputLatencyOptions = devicesContext.previewDevice?.inputLatencies.map((option, index2) => {
    return { value: option.value, label: translate(option.translationKey, option.data?.translationFallback) };
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "panel performance keyboard", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "properties", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field polling-rate", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "label", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text", children: translate("Device_Performance_Label_PollingRate", "Polling Rate") }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(TooltipComponent, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: translate("Tooltip_PollingRate_Title", "Polling Rate") }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "message", children: translate(
            "Tooltip_PollingRate_Description",
            "Polling Rate is how often your OS checks for input. This is a factor in determining the maximum input latency of key presses. A high polling rate takes up more CPU resources than lower polling rates."
          ) })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        OptionSelectComponent,
        {
          options: pollingRateOptions,
          value: getCurrentProfile()?.pollingrate,
          onChange: (value2) => {
            setPollingRate(value2);
          },
          direction: "below"
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "result" })
    ] }),
    devicesContext.previewDevice?.deviceCategoryName == "Numpad" ? /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field standby", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "label", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text", children: translate("Device_Performance_Label_Standby", "Standby") }),
        getCurrentProfile() == null ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}) : getCurrentProfile().standbyvalue == 1 ? /* @__PURE__ */ jsxRuntimeExports.jsxs(TooltipComponent, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: translate("Tooltip_InheritGlobal_Title", "Inherit Global") }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "message", children: translate(
            "Tooltip_InheritGlobal_Description",
            "The device will adhere to the global standby timer setting."
          ) })
        ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(TooltipComponent, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: translate("Tooltip_DeviceSpecific_Title", "Device Specific") }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "message", children: translate(
            "Tooltip_DeviceSpecific_Description",
            "The device standby timer will be independent of the global standby timer."
          ) })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        OptionSelectComponent,
        {
          options: StandbyTypes.map((option) => {
            return {
              value: option.value,
              label: translate(option.translationKey, option.data?.translationFallback)
            };
          }),
          onChange: (value2) => {
            setStandbyType(value2);
          },
          direction: "below"
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        RangeComponent,
        {
          value: getCurrentProfile()?.standbyvalue,
          min: 0,
          max: 16,
          step: 2,
          onChange: (value2) => {
            setStandbyValue(value2);
          }
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "result", children: [
        getCurrentProfile()?.standbyvalue,
        "ms"
      ] })
    ] }) : null,
    /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field input-latency", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "label", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text", children: translate("Device_Performance_Label_InputLatency", "Input Latency") }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(TooltipComponent, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: translate("Tooltip_InputLatency_Title", "Input Latency") }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "message", children: translate(
            "Tooltip_InputLatency_Description",
            "Input latency is the amount of time that passes between sending an electrical signal and the occurrence of a corresponding action."
          ) })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        OptionSelectComponent,
        {
          options: inputLatencyOptions,
          value: getCurrentProfile()?.inputLatency,
          onChange: (value2) => {
            setInputLatency(value2);
          },
          direction: "above"
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "result" })
    ] }),
    devicesContext.previewDevice?.deviceCategoryName == "Numpad" ? /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field rotary-sensitivity", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "label", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text", children: translate("Device_Performance_Label_RotarySensitivity", "Rotary Sensitivity") }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(TooltipComponent, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: translate("Tooltip_RotarySensitivity_Title", "Rotary Sensitivity") }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "message", children: translate(
            "Tooltip_RotarySensitivity_Description",
            "Rotary Sensitivity controls the adjust increment between each step."
          ) })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        RangeComponent,
        {
          value: getCurrentProfile()?.sensitivity,
          min: 0,
          max: 16,
          step: 2,
          onChange: (value2) => {
            setRotarySensitivity(value2);
          }
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "result", children: [
        getCurrentProfile()?.sensitivity,
        "ms"
      ] })
    ] }) : null
  ] }) }) });
}
const performanceManagement_page = "";
function PerformanceManagementPage(props) {
  const devicesContext = useDevicesContext();
  const translate = useTranslate();
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: devicesContext.previewDevice?.deviceCategoryName == "Keyboard" || devicesContext.previewDevice?.deviceCategoryName == "Numpad" ? /* @__PURE__ */ jsxRuntimeExports.jsx(KeyboardPerformanceManagementPage, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: translate("Error_Device_LoadingSelectedDevice", "There was an error loading the selected device.") }) });
}
const dpiEditor_component = "";
const dpiGraphSection_component = "";
function DpiGraphSectionComponent(props) {
  const { min, max, ticks, sectionIndex, onClick } = props;
  const getTicks = () => {
    const tickElements = [];
    for (let i2 = 0; i2 < ticks + 1; i2++) {
      tickElements.push(/* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "range" }, i2));
    }
    return tickElements.length == 0 ? [/* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "range" })] : tickElements;
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx("section", { "data-min": min, "data-max": max, "data-index": sectionIndex, onClick, children: getTicks() });
}
const color$1 = "_color_ixei3_49";
const value$1 = "_value_ixei3_81";
const styles$3 = {
  "dpi-pill": "_dpi-pill_ixei3_1",
  "dpi-pill-default": "_dpi-pill-default_ixei3_39",
  color: color$1,
  "border-color": "_border-color_ixei3_69",
  value: value$1,
  "editable-value": "_editable-value_ixei3_101"
};
var DPIPillColorStyle = /* @__PURE__ */ ((DPIPillColorStyle2) => {
  DPIPillColorStyle2[DPIPillColorStyle2["Filled"] = 0] = "Filled";
  DPIPillColorStyle2[DPIPillColorStyle2["Border"] = 1] = "Border";
  return DPIPillColorStyle2;
})(DPIPillColorStyle || {});
const DPIPill = ({
  value: value2 = 0,
  color: color2 = Color.FriendlyYellow,
  size = 16,
  padding = 7,
  style: style2 = 0,
  isDefault = false,
  useHoverEffect = true,
  title,
  onClick,
  onChange
}) => {
  const [currentValue, setCurrentValue] = reactExports.useState(value2);
  reactExports.useEffect(() => {
    setCurrentValue(value2);
  }, [value2]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    "div",
    {
      className: `dpi-pill ${styles$3["dpi-pill"]}${isDefault == true ? ` ${styles$3["dpi-pill-default"]}` : ""}`,
      title,
      style: {
        "--dpi-padding": `${padding}px`,
        "--dpi-hover-border-color": useHoverEffect == true ? `var(${Color.Glorange60})` : `var(${Color.Base50})`,
        "--dpi-hover-text-color": useHoverEffect == true ? `var(${Color.Glorange60})` : `var(${Color.Base20})`,
        "--dpi-hover-cursor": useHoverEffect == true ? `pointer` : `default`
      },
      onClick: () => {
        if (onClick != null) {
          onClick();
        }
      },
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "span",
          {
            className: `${styles$3["color"]}${style2 == 1 ? ` ${styles$3["border-color"]}` : ""}`,
            style: {
              "--dpi-color": color2.startsWith("#") ? color2 : `var(${color2})`,
              "--dpi-size": `${size}px`
            }
          }
        ),
        onChange != null ? /* @__PURE__ */ jsxRuntimeExports.jsx("input", { type: "text", value: currentValue, className: styles$3["editable-value"], onChange: (event) => {
          const newValue = parseInt(event.currentTarget.value);
          if (isNaN(newValue)) {
            return;
          }
          setCurrentValue(newValue);
          if (onChange != null) {
            onChange(newValue);
          }
        } }) : /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: styles$3["value"], children: value2 })
      ]
    }
  );
};
const SECTION_WIDTH = 40;
const STAGE_NODE_SIZE = 15;
const defaultStageColors = [
  Color.FriendlyYellow,
  Color.FriendlyBlue,
  Color.FriendlyRed,
  Color.FriendlyGreen,
  Color.FriendlyPurple,
  Color.FriendlyTeal
];
const DPIColorHexMap = /* @__PURE__ */ new Map([
  [Color.FriendlyYellow, "FFA40D"],
  [Color.FriendlyBlue, "#26B4FF"],
  [Color.FriendlyRed, "#FF2626"],
  [Color.FriendlyGreen, "#18B30A"],
  [Color.FriendlyPurple, "#BA01FF"],
  [Color.FriendlyTeal, "#2EF6CA"]
]);
const defaultStageValues = [
  400,
  800,
  1600,
  3200,
  6400,
  12800
];
const TRACK_PADDING_X = 10;
const TRACK_PADDING_TOP = 20;
function DpiEditorComponent(props) {
  const { className } = props;
  const translate = useTranslate();
  const devicesContext = useDevicesContext();
  const { getCurrentProfile } = useDevicesManagementContext();
  const {
    addDPIStage,
    removeDPIStage,
    setDefaultDPIStage
  } = useDevicesManagementContext();
  const [stages, setStages] = reactExports.useState([]);
  const [sections, setSections] = reactExports.useState([]);
  const [caretPosition, setCaretPosition] = reactExports.useState(0);
  const track = reactExports.useRef(null);
  const caret = reactExports.useRef(null);
  const addDPIValue = reactExports.useRef(defaultStageValues[stages.length]);
  reactExports.useEffect(
    () => {
      if (devicesContext.previewDevice == null) {
        return;
      }
      const profile = getCurrentProfile();
      if (profile?.performance == null) {
        console.error("Device Performance data is undefined.");
        return;
      }
      setSections(devicesContext.previewDevice.dpiSections);
      const stages2 = [];
      for (let i2 = 0; i2 < profile.performance.DpiStage.length; i2++) {
        const stage = structuredClone(profile.performance.DpiStage[i2]);
        if (i2 == profile.performance.dpiSelectIndex) {
          stage.isDefault = true;
        } else {
          stage.isDefault = false;
        }
        if (!stage.color.startsWith("#")) {
          stage.color = "#" + stage.color;
        }
        stages2.push(stage);
      }
      setStages(stages2);
      addDPIValue.current = defaultStageValues[stages2.length];
    },
    [
      getCurrentProfile()?.performance?.DpiStage,
      getCurrentProfile()?.performance?.dpiSelectIndex
    ]
  );
  const getStageItems = (currentProfile) => {
    if (currentProfile == null) {
      return null;
    }
    const stageItems = [];
    for (let i2 = 0; i2 < stages.length; i2++) {
      stageItems.push(/* @__PURE__ */ jsxRuntimeExports.jsxs("li", { className: "item stage", "data-index": i2, style: { "--stage-color": stages[i2].color }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          DPIPill,
          {
            value: stages[i2].value,
            title: stages[i2].isDefault ? "Default" : "Set New Default?",
            color: stages[i2].color,
            isDefault: stages[i2].isDefault,
            onClick: (event) => {
              setDefaultDPIStage(i2);
            }
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx("button", { type: "button", className: "remove", title: "Remove Stage", onClick: () => {
          removeDPIStage(i2);
        }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: IconType.CancelCross, color: Color.Base50, size: IconSize.Smaller }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "default-title", children: stages[i2].isDefault ? "Default" : "Set New Default?" })
      ] }, i2));
    }
    return stageItems;
  };
  const getStageTrackNodes = () => {
    const stageItems = [];
    for (let i2 = 0; i2 < stages.length; i2++) {
      let xPosition = STAGE_NODE_SIZE / 2 * -1;
      let section = null;
      for (let j = 0; j < sections.length; j++) {
        if (sections[j].min <= stages[i2].value) {
          section = sections[j];
          const increment = section.max > stages[i2].value ? 0 : (section.ticks + 1) * SECTION_WIDTH;
          xPosition += increment;
          if (section.max > stages[i2].value) {
            break;
          }
        }
      }
      if (section != null) {
        const sectionRange = section.max - section.min;
        const normalizedValue = stages[i2].value - section.min;
        const percentageOfRange = normalizedValue / sectionRange * 100;
        let sectionWidth = (section.ticks + 1) * SECTION_WIDTH;
        sectionWidth = sectionWidth > 0 ? sectionWidth : SECTION_WIDTH;
        const sectionX = sectionWidth * (percentageOfRange / 100);
        xPosition += sectionX;
      }
      stageItems.push(/* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "stage", style: { "--stage-color": stages[i2].color, "--left": `${xPosition}px` } }, i2));
    }
    return stageItems;
  };
  const getColor = () => {
    return defaultStageColors[stages.length];
  };
  const getSectionFromCaret = () => {
    const caretRect = caret.current.getBoundingClientRect();
    const caretHalfWidth = caretRect.width / 2;
    const caretCenterX = track.current.offsetLeft + caretPosition + caretHalfWidth;
    if (caretCenterX > track.current.offsetWidth - 10) {
      const sectionElements = [...track.current.querySelectorAll("section")];
      return [sections[sections.length - 1], sectionElements.length > 0 ? sectionElements[sectionElements.length - 1] : null];
    } else if (caretCenterX <= 0) {
      return [sections[0], track.current.querySelector("section")];
    }
    const testPoint = {
      x: caretCenterX,
      y: caretRect.y + (caretRect.height / 2 + 1)
    };
    const elements = document.elementsFromPoint(testPoint.x, testPoint.y);
    let sectionElement = null;
    for (let i2 = 0; i2 < elements.length; i2++) {
      if (elements[i2].tagName == "SECTION" && elements[i2].parentElement == track.current) {
        sectionElement = elements[i2];
      }
    }
    if (sectionElement == null) {
      console.warn("Clicked section not found");
      return [sections[0], track.current.querySelector("section")];
    }
    const sectionIndex = parseInt(sectionElement.dataset.index);
    return [sections[sectionIndex], sectionElement];
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `dpi-editor${className == null ? "" : className}`, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "stages", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("Device_DPI_Label_DPIStages", "DPI Stages") }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("ul", { className: "items", children: [
        getStageItems(getCurrentProfile()),
        stages.length < 6 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { className: "item", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(DPIPill, { value: addDPIValue.current, color: getColor(), style: DPIPillColorStyle.Border, useHoverEffect: false, onChange: (value2) => {
            addDPIValue.current = value2;
          } }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("button", { type: "button", className: "add", title: "Add", onClick: () => {
            const value2 = addDPIValue.current > sections[sections.length - 1].max ? sections[sections.length - 1].max : addDPIValue.current;
            console.log(value2, sections);
            const color2 = getColor();
            const colorHex = DPIColorHexMap.get(color2);
            const stage = new DPIStageData(value2, colorHex);
            addDPIStage(stage);
          }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: IconType.CancelCross, color: Color.Base50, size: IconSize.Smaller }) })
        ] }) : void 0
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "div",
      {
        className: "track",
        ref: track,
        style: {
          "--track-padding-top": `${TRACK_PADDING_TOP}px`,
          "--track-padding-x": `${TRACK_PADDING_X}px`,
          "--section-width": `${SECTION_WIDTH}px`,
          "--stage-node-size": `${STAGE_NODE_SIZE}px`
        },
        onMouseMove: (event) => {
          const left = track.current.offsetLeft;
          const caretHalfWidth = caret.current.offsetWidth / 2;
          const trackWidth = track.current.offsetWidth - TRACK_PADDING_X * 2;
          const offset = event.pageX - left - caretHalfWidth;
          let newPosition = offset - TRACK_PADDING_X;
          if (newPosition < caretHalfWidth * -1) {
            newPosition = caretHalfWidth * -1;
          } else if (offset > trackWidth) {
            newPosition = trackWidth - caretHalfWidth;
          }
          setCaretPosition(newPosition);
        },
        onClick: (event) => {
          if (getCurrentProfile()?.performance == null || getCurrentProfile().performance.DpiStage.length >= 6) {
            return;
          }
          const caretHalfWidth = caret.current.offsetWidth / 2;
          const localPosition = caretPosition + caretHalfWidth;
          const [section, sectionElement] = getSectionFromCaret();
          if (sectionElement == null) {
            console.error("no section element found under cursor");
            return;
          }
          let percentage = (localPosition - sectionElement.offsetLeft + TRACK_PADDING_X) / sectionElement.offsetWidth * 100;
          percentage = percentage / 100;
          let dpiValue = section.min + (section.max - section.min) * percentage;
          if (dpiValue < 0) {
            dpiValue = devicesContext.previewDevice.dpiSections[0].min;
          }
          dpiValue = Math.round(dpiValue);
          if (dpiValue < 1e4) {
            dpiValue = Math.round(dpiValue / 10) * 10;
          }
          if (dpiValue >= 1e4) {
            dpiValue = Math.round(dpiValue / 100) * 100;
          }
          const color2 = getColor();
          const colorHex = DPIColorHexMap.get(color2);
          const stage = new DPIStageData(dpiValue, colorHex);
          addDPIStage(stage);
        },
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "caret", ref: caret, style: { "--caret-position": `${caretPosition}px` } }),
          sections.map((section, index2) => /* @__PURE__ */ jsxRuntimeExports.jsx(DpiGraphSectionComponent, { min: section.min, max: section.max, ticks: section.ticks, sectionIndex: index2 }, index2)),
          getStageTrackNodes()
        ]
      }
    )
  ] });
}
function MouseDPIManagementPage(props) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "panel dpi mouse", children: /* @__PURE__ */ jsxRuntimeExports.jsx(DpiEditorComponent, {}) }) });
}
function DPIManagementPage(props) {
  const devicesContext = useDevicesContext();
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: devicesContext.previewDevice?.deviceCategoryName == "Mouse" ? /* @__PURE__ */ jsxRuntimeExports.jsx(MouseDPIManagementPage, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx("a", { children: "An Error has occurred" }) });
}
const keyboardDeviceHome_page = "";
function KeyboardDeviceHomePage() {
  const translate = useTranslate();
  const { previewDevice } = useDevicesContext();
  const { userProfile, currentDeviceProfiles } = useCloudDataContext();
  const { loginWindow: loginWindow2 } = useCloudDataUpdateContext();
  const { setCurrentProfile, getCurrentProfile } = useDevicesManagementContext();
  const activateProfile = reactExports.useCallback(
    (profileIndex) => {
      if (profileIndex === previewDevice?.keyboardData?.profileindex)
        return;
      setCurrentProfile(profileIndex);
    },
    [previewDevice, setCurrentProfile]
  );
  const profileTiles = reactExports.useMemo(() => {
    if (previewDevice == null || previewDevice.deviceData == null)
      return;
    const profiles = previewDevice.deviceData.profileLayers.map((profileArray) => profileArray[0]);
    return profiles.map((profile, idx) => {
      const localCloudProfile = currentDeviceProfiles?.[profile.profileName];
      const cloudProfileId = localCloudProfile?.id;
      const isSynced = localCloudProfile?.isSynced;
      const isActive = previewDevice?.keyboardData?.profileindex === idx;
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        ProfileTile,
        {
          profile,
          deviceName: previewDevice.devicename,
          cloudProfileId,
          isActive,
          isSynced,
          isCloudProfile: false,
          onActivate: () => activateProfile(idx)
        },
        `Cloud_Label_${profile.profileName}`
      );
    });
  }, [currentDeviceProfiles, previewDevice?.keyboardData, activateProfile]);
  const cloudProfileTiles = reactExports.useMemo(() => {
    if (!currentDeviceProfiles)
      return null;
    return Object.values(currentDeviceProfiles).map((profile, idx) => {
      const decodedData = window.atob(profile.data);
      const profileData = JSON.parse(decodedData);
      const isActive = profile.isSynced ? profileData.profileName === getCurrentProfile()?.profileName : false;
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        ProfileTile,
        {
          profile: profileData,
          deviceName: profile.deviceName,
          cloudProfileId: profile.id,
          isSynced: profile.isSynced,
          isCloudProfile: true,
          isActive,
          onActivate: () => activateProfile(idx)
        },
        `Cloud_Label_${profileData.profileName}`
      );
    });
  }, [currentDeviceProfiles, activateProfile]);
  if (!previewDevice || !previewDevice.deviceData || !previewDevice.deviceData.profile) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "Loading..." });
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "layout home keyboard", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel main", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { children: translate("Device_Home_Label_Keyboard_Profiles_Header", "Keyboard Profiles") }),
      profileTiles
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `panel main cloud ${userProfile ? "is-logged-in" : ""}`, children: [
      !userProfile && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "login-backdrop", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "login-popup", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: IconType.GloriousID, size: IconSize.Medium, color: Color.GIDLogoMark }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("a", { onClick: () => loginWindow2("login"), children: translate("Device_Home_Label_Profiles_SignIn", "Sign In") }),
          "/",
          /* @__PURE__ */ jsxRuntimeExports.jsx("a", { onClick: () => loginWindow2("register"), children: translate("Device_Home_Label_Profiles_Register", "Register") }),
          " ",
          translate(
            "Device_Home_Label_Profiles_Cloud_Login_Text",
            "to Glorious ID in order to access cloud profiles!"
          )
        ] })
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { children: translate("Device_Home_Label_Keyboard_Profiles_Cloud_Header", "Cloud Profiles") }),
      userProfile && currentDeviceProfiles && cloudProfileTiles,
      !userProfile && previewDevice.deviceData.profile.map((profile) => /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "profile-tile" }, profile.profileName))
    ] })
  ] });
}
const deviceHome_page = "";
const mouseDeviceHome_page = "";
function MouseDeviceHomePage() {
  const translate = useTranslate();
  const { previewDevice } = useDevicesContext();
  const { userProfile, currentDeviceProfiles } = useCloudDataContext();
  const { loginWindow: loginWindow2 } = useCloudDataUpdateContext();
  const { setCurrentProfile, getCurrentProfile } = useDevicesManagementContext();
  const activateProfile = reactExports.useCallback(
    (profileIndex) => {
      if (profileIndex === previewDevice?.deviceData?.profileindex)
        return;
      setCurrentProfile(profileIndex);
    },
    [previewDevice, setCurrentProfile]
  );
  const profileTiles = reactExports.useMemo(() => {
    return previewDevice?.deviceData?.profile?.map((profile, idx) => {
      const localCloudProfile = currentDeviceProfiles?.[profile.profileName];
      const cloudProfileId = localCloudProfile?.id;
      const isSynced = localCloudProfile?.isSynced;
      const isActive = previewDevice?.deviceData?.profileindex === idx;
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        ProfileTile,
        {
          profile,
          deviceName: previewDevice.devicename,
          cloudProfileId,
          isActive,
          isSynced,
          isCloudProfile: false,
          onActivate: () => activateProfile(idx)
        },
        profile.profileName
      );
    });
  }, [currentDeviceProfiles, previewDevice?.deviceData, activateProfile]);
  const cloudProfileTiles = reactExports.useMemo(() => {
    if (!currentDeviceProfiles)
      return null;
    return Object.values(currentDeviceProfiles).map((profile, idx) => {
      const decodedData = window.atob(profile.data);
      const profileData = JSON.parse(decodedData);
      const isActive = profile.isSynced ? profileData.profileName === getCurrentProfile()?.profileName : false;
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        ProfileTile,
        {
          profile: profileData,
          deviceName: profile.deviceName,
          cloudProfileId: profile.id,
          isSynced: profile.isSynced,
          isCloudProfile: true,
          isActive,
          onActivate: () => activateProfile(idx)
        },
        `Cloud_Label_${profileData.profileName}`
      );
    });
  }, [currentDeviceProfiles, activateProfile]);
  if (!previewDevice || !previewDevice.deviceData || !previewDevice.deviceData.profile) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "Loading..." });
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "layout home mouse", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel main", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { children: translate("Device_Home_Label_Mouse_Profiles_Header", "Mouse Profiles") }),
      profileTiles
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `panel main cloud ${userProfile ? "is-logged-in" : ""}`, children: [
      !userProfile && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "login-backdrop", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "login-popup", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: IconType.GloriousID, size: IconSize.Medium, color: Color.GIDLogoMark }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("a", { onClick: () => loginWindow2("login"), children: translate("Device_Home_Label_Profiles_SignIn", "Sign In") }),
          "/",
          /* @__PURE__ */ jsxRuntimeExports.jsx("a", { onClick: () => loginWindow2("register"), children: translate("Device_Home_Label_Profiles_Register", "Register") }),
          " ",
          translate(
            "Device_Home_Label_Profiles_Cloud_Login_Text",
            "to Glorious ID in order to access cloud profiles!"
          )
        ] })
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { children: translate("Device_Home_Label_Mouse_Profiles_Cloud_Header", "Cloud Profiles") }),
      userProfile && currentDeviceProfiles && cloudProfileTiles,
      !userProfile && previewDevice.deviceData.profile.map((profile) => /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "profile-tile" }, profile.profileName))
    ] })
  ] });
}
function DeviceHomePage() {
  const { previewDevice } = useDevicesContext();
  const translate = useTranslate();
  const renderDevicePage = reactExports.useMemo(() => {
    if (!previewDevice) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: translate("Error_Device_NotFound", "Device not found.") });
    }
    switch (previewDevice.deviceCategoryName) {
      case "Mouse":
        return /* @__PURE__ */ jsxRuntimeExports.jsx(MouseDeviceHomePage, {});
      case "valueJ":
        return /* @__PURE__ */ jsxRuntimeExports.jsx("valueJDeviceHomePage", {});
      case "Keyboard":
      case "Numpad":
        return /* @__PURE__ */ jsxRuntimeExports.jsx(KeyboardDeviceHomePage, {});
      default:
        return /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: translate(
          "Error_Device_LoadingSelectedDevice",
          "There was an error loading the selected device."
        ) });
    }
  }, [previewDevice?.deviceCategoryName]);
  return renderDevicePage;
}
const deviceLightingPreview_component = "";
const animationSpeed_defaultAdjustment$1 = 0.5;
function MouseLightingPreviewComponent(props) {
  const devicesContext = useDevicesContext();
  const { getCurrentProfile } = useDevicesManagementContext();
  const lightingCanvas = reactExports.useRef(null);
  const gradientScrollOffset = reactExports.useRef(0);
  const breathing = reactExports.useRef({
    operationKey: "Lighten",
    lightnessPercent: 100,
    targetIndex: 0
  });
  const seamlessBreathing = reactExports.useRef({
    targetIndex: 0,
    mixIndex: 1,
    mixPercent: 0
  });
  const breathingSingleColor = reactExports.useRef({
    operationKey: "Lighten",
    lightnessPercent: 100
  });
  const tailProperties = reactExports.useRef({
    colorIndex: 0,
    // what color to show
    colorOffsetIndex: 0,
    // how much to shift the color array
    rotationIndex: 4,
    // 
    displayDuration: 10,
    elapsedDuration: 0
  });
  const raveProperties = reactExports.useRef({
    colorIndex: 0,
    directionIndex: 0,
    displayDuration: 10,
    elapsedDuration: 0
  });
  const animationFrameHandleReference = reactExports.useRef(null);
  const animationContext = reactExports.useRef(null);
  const canvasFillFunction = reactExports.useRef(null);
  const currentAnimationColor = reactExports.useRef(null);
  const currentAnimationColors = reactExports.useRef([]);
  const currentGradientStops = reactExports.useRef([]);
  reactExports.useEffect(() => {
    animationFrameHandleReference.current = requestAnimationFrame(animationLoop);
    return () => removeAnimationListeners();
  }, []);
  reactExports.useEffect(() => {
    const profile = getCurrentProfile();
    if (profile.lighting?.Effect == null) {
      return;
    }
    const effect = profile.lighting.Effect;
    if (effect == 0) {
      canvasFillFunction.current = createGradient_Glorious;
    } else if (effect == 1) {
      canvasFillFunction.current = createGradient_SeamlessBreathing;
    } else if (effect == 2) {
      canvasFillFunction.current = createGradient_Breathing;
    } else if (effect == 3) {
      canvasFillFunction.current = createGradient_SingleColor;
    } else if (effect == 4) {
      canvasFillFunction.current = createGradient_BreathingSingleColor;
    } else if (effect == 5) {
      canvasFillFunction.current = createGradient_Tail;
    } else if (effect == 6) {
      canvasFillFunction.current = createGradient_Rave;
    } else if (effect == 7) {
      canvasFillFunction.current = createGradient_Wave;
    } else if (effect == 8) {
      canvasFillFunction.current = createGradient_LEDOff;
    }
    updateGradientStops();
  }, [getCurrentProfile()?.lighting?.Effect]);
  reactExports.useEffect(() => {
    const profile = getCurrentProfile();
    if (profile == null || profile?.lighting?.Color == null) {
      return;
    }
    const colors = profile.lighting.Color.length == 0 ? [new DeviceRecordColorData(255, 255, 255, false)] : profile.lighting.Color;
    const color2 = colors[0];
    currentAnimationColor.current = RGBAColor.fromRGB(color2.R, color2.G, color2.B);
    currentAnimationColors.current = [];
    for (let i2 = 0; i2 < colors.length; i2++) {
      currentAnimationColors.current.push(RGBAColor.fromRGB(colors[i2].R, colors[i2].G, colors[i2].B));
    }
    updateGradientStops();
    console.log(currentAnimationColor.current, currentAnimationColors.current, currentGradientStops.current);
  }, [getCurrentProfile()?.lighting?.Color]);
  const updateGradientStops = () => {
    const profile = getCurrentProfile();
    if (profile?.lighting == null) {
      return;
    }
    const gradientStops = profile.lighting.Effect == 0 ? RGBGradients_Default[0].data.stops : (
      // GloriousMode
      profile.lighting.Color.map((color2) => {
        return { hex: RGBAColor.fromRGB(color2.R, color2.G, color2.B).toHex(), stop: void 0 };
      })
    );
    if (gradientStops.length == 1) {
      gradientStops.push(gradientStops[0]);
    }
    const composedStops = [];
    const stepValue = 100 / gradientStops.length;
    let currentStepValue = 0;
    for (let j = 0; j < gradientStops.length; j++) {
      if (gradientStops[j].stop != null) {
        composedStops.push(gradientStops[j]);
      } else {
        composedStops.push({ hex: gradientStops[j].hex, stop: currentStepValue });
      }
      currentStepValue += stepValue;
    }
    currentGradientStops.current = composedStops;
  };
  const removeAnimationListeners = () => {
    if (animationFrameHandleReference.current != null) {
      cancelAnimationFrame(animationFrameHandleReference.current);
    }
  };
  const getCurrentBreathingSingleColor = (animationSpeed, targetColor) => {
    if (breathingSingleColor.current.lightnessPercent <= 0) {
      breathingSingleColor.current.lightnessPercent = 0;
      breathingSingleColor.current.operationKey = "Lighten";
    } else if (breathingSingleColor.current.lightnessPercent >= 100) {
      breathingSingleColor.current.lightnessPercent = 100;
      breathingSingleColor.current.operationKey = "Darken";
    }
    const breathingStep = 1 * animationSpeed;
    if (breathingSingleColor.current.operationKey == "Darken") {
      breathingSingleColor.current.lightnessPercent = breathingSingleColor.current.lightnessPercent - breathingStep;
    } else if (breathingSingleColor.current.operationKey == "Lighten") {
      breathingSingleColor.current.lightnessPercent = breathingSingleColor.current.lightnessPercent + breathingStep;
    }
    const updatedRed = breathingSingleColor.current.lightnessPercent / 100 * targetColor.red;
    const updatedGreen = breathingSingleColor.current.lightnessPercent / 100 * targetColor.green;
    const updatedBlue = breathingSingleColor.current.lightnessPercent / 100 * targetColor.blue;
    return RGBAColor.fromRGB(updatedRed, updatedGreen, updatedBlue);
  };
  const getCurrentBreathingColor = (animationSpeed, targetColors) => {
    if (breathing.current.lightnessPercent <= 0) {
      breathing.current.lightnessPercent = 0;
      breathing.current.operationKey = "Lighten";
      breathing.current.targetIndex += 1;
      if (breathing.current.targetIndex > targetColors.length - 1) {
        breathing.current.targetIndex = 0;
      }
    } else if (breathing.current.lightnessPercent >= 100) {
      breathing.current.lightnessPercent = 100;
      breathing.current.operationKey = "Darken";
    }
    const breathingStep = 1 * animationSpeed;
    if (breathing.current.operationKey == "Darken") {
      breathing.current.lightnessPercent = breathing.current.lightnessPercent - breathingStep;
    } else if (breathing.current.operationKey == "Lighten") {
      breathing.current.lightnessPercent = breathing.current.lightnessPercent + breathingStep;
    }
    const targetColor = RGBAColor.fromRGB(targetColors[breathing.current.targetIndex].r, targetColors[breathing.current.targetIndex].g, targetColors[breathing.current.targetIndex].b);
    const updatedRed = breathing.current.lightnessPercent / 100 * targetColor.red;
    const updatedGreen = breathing.current.lightnessPercent / 100 * targetColor.green;
    const updatedBlue = breathing.current.lightnessPercent / 100 * targetColor.blue;
    return RGBAColor.fromRGB(updatedRed, updatedGreen, updatedBlue);
  };
  const getCurrentSeamlessBreathingColor = (animationSpeed, targetColors) => {
    if (seamlessBreathing.current.mixPercent >= 100) {
      seamlessBreathing.current.mixPercent = 0;
      seamlessBreathing.current.targetIndex += 1;
      seamlessBreathing.current.mixIndex = seamlessBreathing.current.targetIndex + 1;
    }
    if (seamlessBreathing.current.targetIndex > targetColors.length - 1) {
      seamlessBreathing.current.targetIndex = 0;
    }
    if (seamlessBreathing.current.mixIndex > targetColors.length - 1) {
      seamlessBreathing.current.mixIndex = 0;
    }
    const targetColor = RGBAColor.fromRGB(targetColors[seamlessBreathing.current.targetIndex].r, targetColors[seamlessBreathing.current.targetIndex].g, targetColors[seamlessBreathing.current.targetIndex].b);
    const mixColor = RGBAColor.fromRGB(targetColors[seamlessBreathing.current.mixIndex].r, targetColors[seamlessBreathing.current.mixIndex].g, targetColors[seamlessBreathing.current.mixIndex].b);
    const mixFloat = seamlessBreathing.current.mixPercent / 100;
    const updatedRed = Math.round(targetColor.red + mixFloat * (mixColor.red - targetColor.red));
    const updatedGreen = Math.round(targetColor.green + mixFloat * (mixColor.green - targetColor.green));
    const updatedBlue = Math.round(targetColor.blue + mixFloat * (mixColor.blue - targetColor.blue));
    seamlessBreathing.current.mixPercent += animationSpeed;
    return RGBAColor.fromRGB(updatedRed, updatedGreen, updatedBlue);
  };
  const interval = 1 / 30 * 1e3;
  const previousTime = reactExports.useRef(interval);
  const animationLoop = (time) => {
    let timeSinceLastFrame = time - previousTime.current;
    const animationSpeed = animationSpeed_defaultAdjustment$1;
    if (timeSinceLastFrame >= interval) {
      previousTime.current = time;
      onDrawUpdate(animationSpeed);
    }
    animationFrameHandleReference.current = requestAnimationFrame(animationLoop);
  };
  const onDrawUpdate = (animationSpeed) => {
    if (animationContext.current == null) {
      return;
    }
    if (canvasFillFunction.current == null) {
      return;
    }
    const result = canvasFillFunction.current(animationSpeed);
    if (result instanceof CanvasGradient) {
      animationContext.current.fillStyle = result;
    } else {
      animationContext.current.fillStyle = result.toHex();
    }
    animationContext.current.clearRect(0, 0, animationContext.current.canvas.width, animationContext.current.canvas.height);
    animationContext.current.fillRect(0, 0, animationContext.current.canvas.width, animationContext.current.canvas.height);
  };
  const createGradient_Glorious = (animationSpeed) => {
    const gradient = animationContext.current.createLinearGradient(animationContext.current.canvas.width / 2, 0, animationContext.current.canvas.width / 2, animationContext.current.canvas.height);
    for (let i2 = 0; i2 < currentGradientStops.current.length; i2++) {
      const stop = currentGradientStops.current[i2];
      let stopValue = stop.stop + gradientScrollOffset.current;
      if (stopValue > 100) {
        stopValue = stopValue - 100;
      }
      gradient.addColorStop(stopValue / 100, stop.hex);
    }
    gradientScrollOffset.current += 1 * animationSpeed;
    if (gradientScrollOffset.current > 100) {
      gradientScrollOffset.current = 0;
    }
    return gradient;
  };
  const createGradient_SeamlessBreathing = (animationSpeed) => {
    const targetColors = currentAnimationColors.current ?? [RGBAColor.fromRGB(255, 255, 255)];
    const updatedColor = getCurrentSeamlessBreathingColor(animationSpeed, targetColors);
    return updatedColor;
  };
  const createGradient_Breathing = (animationSpeed) => {
    const targetColors = currentAnimationColors.current ?? [RGBAColor.fromRGB(255, 255, 255)];
    const updatedColor = getCurrentBreathingColor(animationSpeed, targetColors);
    return updatedColor;
  };
  const createGradient_SingleColor = (animationSpeed) => {
    if (currentAnimationColor.current == null) {
      return RGBAColor.fromRGB(0, 0, 0);
    }
    return currentAnimationColor.current;
  };
  const createGradient_BreathingSingleColor = (animationSpeed) => {
    const targetColor = currentAnimationColor.current ?? RGBAColor.fromRGB(255, 255, 255);
    const updatedColor = getCurrentBreathingSingleColor(animationSpeed, targetColor);
    return updatedColor;
  };
  const createGradient_Tail = (animationSpeed) => {
    if (currentAnimationColor.current == null || animationContext.current == null) {
      return RGBAColor.fromRGB(0, 0, 0);
    }
    const gradient = animationContext.current.createLinearGradient(animationContext.current.canvas.width / 2, 0, animationContext.current.canvas.width / 2, animationContext.current.canvas.height);
    const profile = getCurrentProfile();
    const deviceColorsCopy = Array.from(profile.lighting.Color);
    const deviceColors = deviceColorsCopy.slice(tailProperties.current.colorOffsetIndex).concat(deviceColorsCopy.slice(0, tailProperties.current.colorOffsetIndex));
    if (profile != null) {
      const sectionHeight = animationContext.current.canvas.height / deviceColors.length;
      let currentColorIndex = tailProperties.current.colorIndex + tailProperties.current.colorOffsetIndex;
      while (currentColorIndex > deviceColors.length - 1) {
        currentColorIndex = currentColorIndex - deviceColors.length;
      }
      const currentDeviceColor = deviceColors[currentColorIndex];
      if (currentDeviceColor == null) {
        console.error("unexpected color", currentDeviceColor, currentColorIndex);
        return RGBAColor.fromRGB(0, 0, 0);
      }
      const currentY = tailProperties.current.rotationIndex * sectionHeight;
      const topAsDecimal = currentY / animationContext.current.canvas.height;
      const bottomAsDecimal = (currentY + sectionHeight) / animationContext.current.canvas.height;
      const colorHex = RGBAColor.fromRGB(currentDeviceColor.R, currentDeviceColor.B, currentDeviceColor.G).toHex();
      if (topAsDecimal > 0) {
        gradient.addColorStop(0, "#00000000");
        gradient.addColorStop(Math.max(topAsDecimal - 1e-4, 0), "#00000000");
      }
      gradient.addColorStop(topAsDecimal, colorHex);
      gradient.addColorStop(bottomAsDecimal, colorHex);
      gradient.addColorStop(Math.min(bottomAsDecimal + 1e-4, 1), "#00000000");
      gradient.addColorStop(1, "#00000000");
      if (tailProperties.current.elapsedDuration >= tailProperties.current.displayDuration) {
        tailProperties.current.rotationIndex++;
        if (tailProperties.current.rotationIndex > deviceColors.length - 1) {
          tailProperties.current.rotationIndex = 0;
          tailProperties.current.colorOffsetIndex++;
          if (tailProperties.current.colorOffsetIndex > deviceColors.length - 1) {
            tailProperties.current.colorOffsetIndex = 0;
          }
        }
        tailProperties.current.colorIndex++;
        if (tailProperties.current.colorIndex > deviceColors.length - 1) {
          tailProperties.current.colorIndex = 0;
        }
        tailProperties.current.elapsedDuration = 0;
      }
      tailProperties.current.elapsedDuration++;
    }
    return gradient;
  };
  const createGradient_Rave = (animationSpeed) => {
    const gradient = animationContext.current.createLinearGradient(animationContext.current.canvas.width / 2, 0, animationContext.current.canvas.width / 2, animationContext.current.canvas.height);
    const profile = getCurrentProfile();
    if (profile != null) {
      const colorHex = raveProperties.current.colorIndex == 0 ? RGBAColor.fromRGB(profile.lighting.Color[0].R, profile.lighting.Color[0].B, profile.lighting.Color[0].G).toHex() ?? "#FF0000" : RGBAColor.fromRGB(profile.lighting.Color[1].R, profile.lighting.Color[1].B, profile.lighting.Color[1].G).toHex() ?? "#B0B000";
      if (raveProperties.current.directionIndex == 0) {
        gradient.addColorStop(0, colorHex);
        gradient.addColorStop(1, "#000000");
      } else {
        gradient.addColorStop(0, "#000000");
        gradient.addColorStop(1, colorHex);
      }
      if (raveProperties.current.elapsedDuration >= raveProperties.current.displayDuration) {
        if (raveProperties.current.colorIndex == 0) {
          if (raveProperties.current.directionIndex == 0) {
            raveProperties.current.directionIndex = 1;
          } else {
            raveProperties.current.directionIndex = 0;
            raveProperties.current.colorIndex = 1;
          }
        } else {
          if (raveProperties.current.directionIndex == 0) {
            raveProperties.current.directionIndex = 1;
          } else {
            raveProperties.current.directionIndex = 0;
            raveProperties.current.colorIndex = 0;
          }
        }
        raveProperties.current.elapsedDuration = 0;
      }
      raveProperties.current.elapsedDuration++;
    }
    return gradient;
  };
  const createGradient_Wave = (animationSpeed) => {
    if (currentGradientStops.current.length == 0) {
      return RGBAColor.fromRGB(0, 0, 0);
    }
    const gradient = animationContext.current.createLinearGradient(animationContext.current.canvas.width / 2, 0, animationContext.current.canvas.width / 2, animationContext.current.canvas.height);
    for (let i2 = 0; i2 < currentGradientStops.current.length; i2++) {
      const stop = currentGradientStops.current[i2];
      let stopValue = stop.stop - gradientScrollOffset.current;
      if (stopValue < 0) {
        stopValue = 100 + stopValue;
      }
      gradient.addColorStop(stopValue / 100, stop.hex);
    }
    gradientScrollOffset.current += 1 * animationSpeed;
    if (gradientScrollOffset.current > 100) {
      gradientScrollOffset.current = 0;
    }
    return gradient;
  };
  const createGradient_LEDOff = (animationSpeed) => {
    return RGBAColor.fromRGB(0, 0, 0);
  };
  reactExports.useEffect(() => {
    updateScale();
  }, []);
  const updateScale = () => {
    if (devicesContext.previewDevice == null || devicesContext.previewDevice.showLightingCanvas != true) {
      return;
    }
    const lastItem = devicesContext.previewDevice.productScales[devicesContext.previewDevice.productScales.length - 1];
    const width = lastItem.imageSize.width;
    const height = lastItem.imageSize.height;
    if (lightingCanvas.current == null) {
      console.warn("No canvas established");
      return;
    }
    lightingCanvas.current.width = width;
    lightingCanvas.current.height = height;
  };
  reactExports.useEffect(() => {
    initAnimationContext();
  }, [devicesContext.previewDevice]);
  const initAnimationContext = () => {
    if (devicesContext.previewDevice == null || devicesContext.previewDevice.showLightingCanvas != true) {
      return;
    }
    if (lightingCanvas.current == null) {
      console.warn("No canvas established");
      return;
    }
    updateScale();
    const context = lightingCanvas.current.getContext("2d");
    animationContext.current = context;
  };
  return devicesContext.previewDevice != null && devicesContext.previewDevice.showLightingCanvas == true ? /* @__PURE__ */ jsxRuntimeExports.jsx("canvas", { ref: lightingCanvas }) : /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {});
}
const deviceLightingPreviewNode_component = "";
function DeviceLightingPreviewNodeComponent(props) {
  const { title, targetColor, currentColor, x: x2, y: y2, width, height, quickKeyIds } = props;
  const { subpage } = useParams();
  reactExports.useRef(null);
  reactExports.useRef(null);
  reactExports.useState(new Array());
  const [style2, setStyle] = reactExports.useState({
    backgroundColor: `rgb(${targetColor.red} ${targetColor.green} ${targetColor.blue} / ${targetColor.alpha})`,
    translate: `${x2}px ${y2}px`,
    width: `${width}px`,
    height: `${height}px`,
    opacity: "0"
  });
  reactExports.useEffect(() => {
    setStyle({
      backgroundColor: `rgb(${currentColor.red} ${currentColor.green} ${currentColor.blue} / ${currentColor.alpha})`,
      translate: `${x2}px ${y2}px`,
      width: `${width}px`,
      height: `${height}px`,
      opacity: style2.opacity
    });
  }, [currentColor]);
  reactExports.useEffect(() => {
    if (quickKeyIds.indexOf(2) > -1 && subpage != "lighting") {
      setStyle({ ...style2, opacity: "0" });
    } else {
      setStyle({ ...style2, opacity: "1" });
    }
    console.log("quick", quickKeyIds);
  }, [subpage]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
    "div",
    {
      className: "node",
      title,
      style: style2
    }
  ) });
}
const ColorSettingStyle = [
  new DisplayOption("customColor", "Option_ColorSettingStyle_customColor", -1, { translationFallback: "Custom Color" }),
  new DisplayOption("rgbGradient", "Option_ColorSettingStyle_rgbGradient", 7, { translationFallback: "RGB Gradient" })
];
const animationSpeed_defaultAdjustment = 0.5;
document.createElement("canvas").getContext("2d");
const CENTER_BLOCK_INDEX = 37;
const MIN_KEY_WIDTH = 43;
class Point {
  x;
  y;
  constructor(x2 = 0, y2 = 0) {
    this.x = x2;
    this.y = y2;
  }
}
class AnimationProperties_GloriousMode {
  layoutColors = [];
  // colors currently represented in the layout
  startPoint = new Point();
  modeStep = 0;
  centerNode = null;
  setRGB = [];
  averagearr = [];
  effectDelay = 600;
  elapsedTimeSinceUpdate = 0;
}
class AnimationProperties_Wave {
  layoutColors = [RGBAColor.fromRGB(255, 0, 0, 1)];
  // colors currently represented in the layout
  startPoint = new Point();
  modeStep = 0;
  centerNode = null;
  bandwidth = 20;
  baseSpeed = 140;
  angle = 40;
  theta = 0;
  dx = 0;
  dy = 0;
  position = 5;
  effectDelay = 150;
  elapsedTimeSinceUpdate = 0;
}
class AnimationProperties_SpiralingWave {
  layoutColors = [];
  // colors currently represented in the layout
  startPoint = new Point();
  modeStep = 0;
  centerNode = null;
  operationKey = "lighten";
  lightnessPercent = 100;
  targetIndex = 0;
  minIndex = 1;
  minPercent = 0;
  angle = 40;
  direction = 0;
  effectDelay = 150;
  elapsedTimeSinceUpdate = 0;
}
class AnimationProperties_AcidMode {
  layoutColors = [];
  // colors currently represented in the layout
  startPoint = new Point();
  modeStep = 0;
  centerNode = null;
  operationKey = "lighten";
  lightnessPercent = 100;
  targetIndex = 0;
  minIndex = 1;
  minPercent = 0;
  step = 0;
  nowStep = 0;
  repeatCount = 0;
  repeatCountList = [];
  minKeyWidth = 42;
  effectDelay = 150;
  elapsedTimeSinceUpdate = 0;
}
class AnimationProperties_Breathing {
  layoutColors = [];
  // colors currently represented in the layout
  startPoint = new Point();
  modeStep = 0;
  centerNode = null;
  operationKey = "lighten";
  lightnessPercent = 100;
  targetIndex = 0;
  minIndex = 1;
  minPercent = 0;
  effectDelay = 150;
  elapsedTimeSinceUpdate = 0;
}
class AnimationProperties_RippleGraff {
  layoutColors = [];
  // colors currently represented in the layout
  startPoint = new Point();
  modeStep = 0;
  centerNode = null;
  operationKey = "lighten";
  lightnessPercent = 100;
  targetIndex = 0;
  minIndex = 1;
  minPercent = 0;
  effectDelay = 150;
  elapsedTimeSinceUpdate = 0;
}
class AnimationProperties_PassWithoutTrace {
  layoutColors = [];
  // colors currently represented in the layout
  startPoint = new Point();
  modeStep = 0;
  centerNode = null;
  operationKey = "lighten";
  lightnessPercent = 100;
  targetIndex = 0;
  minIndex = 1;
  minPercent = 0;
  effectDelay = 150;
  elapsedTimeSinceUpdate = 0;
}
class AnimationProperties_FastRunWithoutTrace {
  layoutColors = [];
  // colors currently represented in the layout
  startPoint = new Point();
  modeStep = 0;
  centerNode = null;
  operationKey = "lighten";
  lightnessPercent = 100;
  targetIndex = 0;
  minIndex = 1;
  minPercent = 0;
  effectDelay = 150;
  elapsedTimeSinceUpdate = 0;
}
class AnimationProperties_Matrix2 {
  layoutColors = [];
  // colors currently represented in the layout
  startPoint = new Point();
  modeStep = 0;
  centerNode = null;
  operationKey = "lighten";
  lightnessPercent = 100;
  targetIndex = 0;
  minIndex = 1;
  minPercent = 0;
  intervalCount = 0;
  repeatCountList = [];
  RanRange = [];
  totalStep = 0;
  repeatCount = 0;
  effectDelay = 150;
  elapsedTimeSinceUpdate = 0;
}
class AnimationProperties_Matrix3 {
  layoutColors = [];
  // colors currently represented in the layout
  startPoint = new Point();
  modeStep = 0;
  centerNode = null;
  operationKey = "lighten";
  lightnessPercent = 100;
  targetIndex = 0;
  minIndex = 1;
  minPercent = 0;
  intervalCount = 0;
  repeatCountList = [];
  RanRange = [];
  totalStep = 0;
  repeatCount = 0;
  effectDelay = 150;
  elapsedTimeSinceUpdate = 0;
}
class AnimationProperties_Rainbow {
  layoutColors = [];
  // colors currently represented in the layout
  startPoint = new Point();
  modeStep = 0;
  centerNode = null;
  operationKey = "lighten";
  lightnessPercent = 100;
  targetIndex = 0;
  minIndex = 1;
  minPercent = 0;
  angle = 40;
  theta = 0;
  dx = 0;
  dy = 0;
  position = 5;
  bandwidth = 0;
  effectDelay = 150;
  elapsedTimeSinceUpdate = 0;
}
class AnimationProperties_HeartbeatSensor {
  layoutColors = [];
  // colors currently represented in the layout
  startPoint = new Point();
  modeStep = 0;
  centerNode = null;
  operationKey = "lighten";
  lightnessPercent = 100;
  targetIndex = 0;
  minIndex = 1;
  minPercent = 0;
  minKeyWidth = 42;
  horizontalList = [];
  share_RepeatCount = 0;
  effectDelay = 150;
  elapsedTimeSinceUpdate = 0;
}
class AnimationProperties_DigitalTimes {
  layoutColors = [];
  // colors currently represented in the layout
  startPoint = new Point();
  modeStep = 0;
  centerNode = null;
  operationKey = "lighten";
  lightnessPercent = 100;
  targetIndex = 0;
  minIndex = 1;
  minPercent = 0;
  effectDelay = 150;
  elapsedTimeSinceUpdate = 0;
}
class AnimationProperties_Kamehameha {
  layoutColors = [];
  // colors currently represented in the layout
  startPoint = new Point();
  modeStep = 0;
  centerNode = null;
  operationKey = "lighten";
  lightnessPercent = 100;
  targetIndex = 0;
  minIndex = 1;
  minPercent = 0;
  Step2_Range = [22, 23, 38, 52, 51, 36];
  Step1_Range = [0, 15, 30, 58, 71, 82];
  centerBlockIndex = 38;
  repeatCount = 0;
  setRGB = [];
  setArray = [];
  effectDelay = 150;
  elapsedTimeSinceUpdate = 0;
}
class AnimationProperties_PingPong {
  layoutColors = [];
  // colors currently represented in the layout
  startPoint = new Point();
  modeStep = 0;
  centerNode = null;
  operationKey = "lighten";
  lightnessPercent = 100;
  targetIndex = 0;
  minIndex = 1;
  minPercent = 0;
  intervalCount = 0;
  repeatCount = 0;
  effectDelay = 150;
  elapsedTimeSinceUpdate = 0;
}
class AnimationProperties_Surmount {
  layoutColors = [];
  // colors currently represented in the layout
  startPoint = new Point();
  modeStep = 0;
  centerNode = null;
  operationKey = "lighten";
  lightnessPercent = 100;
  targetIndex = 0;
  minIndex = 1;
  minPercent = 0;
  mode_step = 0;
  nowStep = 0;
  step = 0;
  minKeyWidth = 50;
  repeatCount = 0;
  effectDelay = 150;
  elapsedTimeSinceUpdate = 0;
}
function distanceCalculation(x1, y1, x2, y2) {
  return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
}
function KeyboardLightingPreviewComponent(props) {
  const devicesContext = useDevicesContext();
  const { getCurrentProfile } = useDevicesManagementContext();
  const uiContext = useUIContext();
  const animationFrameHandleReference = reactExports.useRef(null);
  reactExports.useRef(null);
  const animationFunction = reactExports.useRef(null);
  reactExports.useRef(null);
  reactExports.useRef([]);
  const interval = 1 / 30 * 1e3;
  const previousTime = reactExports.useRef(interval);
  const lightingNodes = reactExports.useRef(null);
  const [lightingNodeItems, setLightingNodeItems] = reactExports.useState(new Array());
  const lightingNodeItemsRef = reactExports.useRef(new Array());
  const presetColor = reactExports.useRef(uiContext.colorPickerValue_PresetLighting);
  const perKeyColor = reactExports.useRef(uiContext.colorPickerValue_PerKeyLighting);
  const modalColor = reactExports.useRef(uiContext.colorPickerValue_ColorPickerModal);
  reactExports.useEffect(() => {
    animationFrameHandleReference.current = requestAnimationFrame(animationLoop);
    return () => removeAnimationListeners();
  }, []);
  const animationLoop = (time) => {
    let timeSinceLastFrame = time - previousTime.current;
    const animationSpeed = animationSpeed_defaultAdjustment;
    if (timeSinceLastFrame >= interval) {
      previousTime.current = time;
      onDrawUpdate(timeSinceLastFrame, animationSpeed);
    }
    animationFrameHandleReference.current = requestAnimationFrame(animationLoop);
  };
  const removeAnimationListeners = () => {
    if (animationFrameHandleReference.current != null) {
      cancelAnimationFrame(animationFrameHandleReference.current);
    }
  };
  reactExports.useEffect(() => {
    if (devicesContext.previewDevice == null) {
      return;
    }
    const deviceInputLayout = DeviceInputLayoutMap.get(devicesContext.previewDevice.SN);
    if (deviceInputLayout == null) {
      return;
    }
    const colorNodes = [];
    for (let i2 = 0; i2 < deviceInputLayout.layoutNodes.length; i2++) {
      const node = deviceInputLayout.layoutNodes[i2];
      if (!node.hasLight) {
        continue;
      }
      colorNodes.push(node);
    }
    const nodeItems = [];
    for (let i2 = 0; i2 < colorNodes.length; i2++) {
      const nodeDefinition = colorNodes[i2];
      const colorSelectionValue = uiContext.lightSettingMode == "per-key" ? uiContext.colorPickerValue_PerKeyLighting : uiContext.colorPickerValue_PresetLighting;
      const color2 = colorSelectionValue == null ? [255, 120, 16, 1] : colorSelectionValue.toArray_rgba();
      const rgbaColor = RGBAColor.fromRGB(color2[0], color2[1], color2[2]);
      const position = {
        x: deviceInputLayout.nodeBaseOffset != null ? deviceInputLayout.nodeBaseOffset.x + nodeDefinition.position.x : nodeDefinition.position.x,
        y: deviceInputLayout.nodeBaseOffset != null ? deviceInputLayout.nodeBaseOffset.y + nodeDefinition.position.y : nodeDefinition.position.y
      };
      const size = {
        width: nodeDefinition.size == null ? deviceInputLayout.nodeBaseSize?.width ?? 65 : nodeDefinition.size.width,
        height: nodeDefinition.size == null ? deviceInputLayout.nodeBaseSize?.height ?? 65 : nodeDefinition.size.height
      };
      const nodeElement = /* @__PURE__ */ jsxRuntimeExports.jsx(
        DeviceLightingPreviewNodeComponent,
        {
          title: nodeDefinition.name,
          targetColor: rgbaColor,
          currentColor: rgbaColor,
          x: position.x,
          y: position.y,
          width: size.width,
          height: size.height,
          centerPoint: new Point(position.x + size.width / 2, position.y + size.height / 2),
          bottomLeftPoint: new Point(position.x, position.y + size.height),
          topRightPoint: new Point(position.x + size.width, position.y),
          quickKeyIds: nodeDefinition.quickKeyIds
        },
        i2
      );
      nodeItems.push(nodeElement);
      if (i2 == CENTER_BLOCK_INDEX) {
        gloriousMode.current.centerNode = nodeElement;
      }
    }
    lightingNodeItemsRef.current = nodeItems;
    setLightingNodeItems(lightingNodeItemsRef.current);
  }, [devicesContext.previewDevice]);
  reactExports.useEffect(() => {
    const effect = getCurrentProfile()?.light_PRESETS_Data?.value ?? 0;
    console.log("effect", effect);
    if (effect == 0) {
      initGloriousMode();
      animationFunction.current = getNodeColors_GloriousMode;
    } else if (effect == 1) {
      initWave(wave1Mode.current);
      animationFunction.current = getNodeColors_Wave.bind(this, wave1Mode.current);
    } else if (effect == 3) {
      initWave(wave2Mode.current);
      animationFunction.current = getNodeColors_Wave.bind(this, wave2Mode.current);
    } else if (effect == 4) {
      initSpiralingWave();
      animationFunction.current = getNodeColors_SpiralingWave;
    } else if (effect == 5) {
      initAcidMode();
      animationFunction.current = getNodeColors_AcidMode;
    } else if (effect == 2) {
      initBreathing();
      animationFunction.current = getNodeColors_Breathing;
    } else if (effect == 6) {
      animationFunction.current = getNodeColors_NormallyOn;
    } else if (effect == 7) {
      initRippleGraff();
      animationFunction.current = getNodeColors_RippleGraff;
    } else if (effect == 9) {
      initPassWithoutTrace();
      animationFunction.current = getNodeColors_PassWithoutTrace;
    } else if (effect == 10) {
      initFastRunWithoutTrace();
      animationFunction.current = getNodeColors_FastRunWithoutTrace;
    } else if (effect == 11) {
      initMatrix2();
      animationFunction.current = getNodeColors_Matrix2;
    } else if (effect == 12) {
      initMatrix3();
      animationFunction.current = getNodeColors_Matrix3;
    } else if (effect == 13) {
      initRainbow();
      animationFunction.current = getNodeColors_Rainbow;
    } else if (effect == 14) {
      initHeartbeatSensor();
      animationFunction.current = getNodeColors_HeartbeatSensor;
    } else if (effect == 15) {
      initDigitalTimes();
      animationFunction.current = getNodeColors_DigitalTimes;
    } else if (effect == 16) {
      initKamehameha();
      animationFunction.current = getNodeColors_Kamehameha;
    } else if (effect == 17) {
      initPingPong();
      animationFunction.current = getNodeColors_PingPong;
    } else if (effect == 18) {
      initSurmount();
      animationFunction.current = getNodeColors_Surmount;
    } else if (effect == 8) {
      animationFunction.current = getNodeColors_LEDOff;
    }
  }, [
    uiContext.lightingSelectedPreset,
    getCurrentProfile()?.light_PRESETS_Data?.colors,
    uiContext.lightingSelectedColorStyle
  ]);
  reactExports.useEffect(() => {
    presetColor.current = uiContext.colorPickerValue_PresetLighting;
    perKeyColor.current = uiContext.colorPickerValue_PerKeyLighting;
    modalColor.current = uiContext.colorPickerValue_ColorPickerModal;
  }, [
    uiContext.colorPickerValue_PresetLighting,
    uiContext.colorPickerValue_PerKeyLighting,
    uiContext.colorPickerValue_ColorPickerModal
  ]);
  const onDrawUpdate = (deltaTime, animationSpeed) => {
    if (animationFunction.current == null) {
      return;
    }
    const nodes = animationFunction.current(deltaTime, animationSpeed);
    const profile = getCurrentProfile();
    if (profile != null && profile.light_PERKEY_KeyAssignments != null) {
      const assignments = profile.light_PERKEY_KeyAssignments[0];
      for (let i2 = 0; i2 < assignments.length; i2++) {
        const lightingKeyData = assignments[i2];
        if (lightingKeyData.colorEnabled == true) {
          const updatedNode = React.cloneElement(lightingNodeItemsRef.current[i2], {
            currentColor: RGBAColor.fromRGB(...lightingKeyData.color)
          });
          nodes.splice(i2, 1, updatedNode);
        }
      }
    }
    lightingNodeItemsRef.current = nodes;
    setLightingNodeItems([...lightingNodeItemsRef.current]);
  };
  const gloriousMode = reactExports.useRef(new AnimationProperties_GloriousMode());
  const initGloriousMode = () => {
    if (gloriousMode.current.centerNode != null) {
      gloriousMode.current.startPoint = gloriousMode.current.centerNode.props.centerPoint ?? new Point();
    }
    console.log("Start Point", gloriousMode.current.startPoint);
    setAllNodes(RGBAColor.fromRGB(0, 0, 0, 1));
    const profile = getCurrentProfile();
    let gradientRGB = [];
    let T_RGB = profile.light_PRESETS_Data.colors.map((color2) => {
      return RGBAColor.fromHex(color2).toArray_rgba();
    });
    let g_totalStep = 3;
    let g_nowStep = 0;
    for (let i2 = 0; i2 < T_RGB.length - 1; i2++) {
      let T1Color = T_RGB[i2];
      let T2Color = T_RGB[i2 + 1];
      let gradient_COLOR = [0, 0, 0, 1];
      for (let i_2 = 0; i_2 < 3; i_2++) {
        gradient_COLOR[i_2] = (T1Color[i_2] * (g_totalStep - g_nowStep) + T2Color[i_2] * g_nowStep) / g_totalStep;
      }
      gradientRGB.push(gradient_COLOR);
      if (g_nowStep < g_totalStep) {
        g_nowStep += 1;
      } else {
        g_nowStep = 0;
      }
    }
    gloriousMode.current.setRGB = gradientRGB;
    console.log(gloriousMode.current.setRGB);
    let diameter = MIN_KEY_WIDTH * lightingNodeItemsRef.current.length * 2;
    console.log(diameter);
    for (let d_index = 0; d_index < gloriousMode.current.setRGB.length; d_index++) {
      var averagePrevious = diameter / gloriousMode.current.setRGB.length * d_index;
      var averageNext = averagePrevious + diameter / gloriousMode.current.setRGB.length;
      for (let index2 = 0; index2 < lightingNodeItemsRef.current.length; index2++) {
        let element = lightingNodeItemsRef.current[index2];
        let distance = distanceCalculation(
          gloriousMode.current.startPoint.x,
          gloriousMode.current.startPoint.y,
          element.props.centerPoint.x,
          element.props.centerPoint.y
        );
        if (distance >= averagePrevious && distance <= averageNext) {
          if (gloriousMode.current.averagearr.some((x2) => x2.recordIndex == index2) == false) {
            console.log(d_index);
            gloriousMode.current.averagearr.push({
              color: gloriousMode.current.setRGB[d_index],
              colorIndex: d_index,
              recordIndex: index2
            });
          }
        }
      }
    }
    console.log("%c mode_ConccRipple_averagearr", "color:rgb(255,75,255,1)", gloriousMode.current.averagearr);
  };
  const getNodeColors_GloriousMode = (deltaTime, animationSpeed) => {
    gloriousMode.current.elapsedTimeSinceUpdate += deltaTime;
    if (gloriousMode.current.elapsedTimeSinceUpdate < gloriousMode.current.effectDelay) {
      return lightingNodeItemsRef.current;
    }
    const nodes = [];
    for (let index2 = 0; index2 < gloriousMode.current.averagearr.length; index2++) {
      const element = gloriousMode.current.averagearr[index2];
      if (element.colorIndex > 0) {
        element.colorIndex -= 1;
      } else {
        element.colorIndex = gloriousMode.current.setRGB.length - 1;
      }
      if (lightingNodeItemsRef.current[element.recordIndex] != null) {
        const updatedNode = gloriousMode.current.setRGB[element.colorIndex] != null ? React.cloneElement(lightingNodeItemsRef.current[element.recordIndex], {
          currentColor: RGBAColor.fromRGB(
            gloriousMode.current.setRGB[element.colorIndex][0],
            gloriousMode.current.setRGB[element.colorIndex][1],
            gloriousMode.current.setRGB[element.colorIndex][2],
            gloriousMode.current.setRGB[element.colorIndex][3]
          )
        }) : React.cloneElement(lightingNodeItemsRef.current[element.recordIndex]);
        nodes[element.recordIndex] = updatedNode;
      }
    }
    gloriousMode.current.elapsedTimeSinceUpdate = 0;
    return nodes;
  };
  const wave1Mode = reactExports.useRef(new AnimationProperties_Wave());
  const wave2Mode = reactExports.useRef(new AnimationProperties_Wave());
  const initWave = (modeOptions) => {
    const profile = getCurrentProfile();
    if (modeOptions.centerNode != null) {
      modeOptions.startPoint = modeOptions.centerNode.props.centerPoint ?? new Point();
    }
    const rgbGradientsValue = ColorSettingStyle[1].value;
    if (uiContext.lightingSelectedColorStyle?.value == rgbGradientsValue) {
      modeOptions.layoutColors = profile.light_PRESETS_Data.colors.map((color2) => RGBAColor.fromHex(color2));
    } else {
      var maxPercent = 55;
      var currentPercent = 55;
      var tempColorArray = [];
      var inputColor_T = modeOptions.layoutColors[0].toArray_rgba();
      while (currentPercent > 25) {
        currentPercent -= 5;
        var tempColor = [0, 0, 0, 1];
        tempColor[0] = inputColor_T[0] * currentPercent / maxPercent;
        tempColor[1] = inputColor_T[1] * currentPercent / maxPercent;
        tempColor[2] = inputColor_T[2] * currentPercent / maxPercent;
        tempColorArray.push(tempColor);
      }
      modeOptions.layoutColors = tempColorArray.map((color2) => RGBAColor.fromRGB(color2[0], color2[1], color2[2]));
    }
    setAllNodes(RGBAColor.fromRGB(0, 0, 0, 1));
    modeOptions.theta = Math.PI * modeOptions.angle / 180;
    modeOptions.dx = Math.cos(modeOptions.theta);
    modeOptions.dy = -Math.sin(modeOptions.theta);
    if (Math.abs(modeOptions.dx) < 1e-5) {
      modeOptions.dx = 0;
    }
    if (Math.abs(modeOptions.dy) < 1e-5) {
      modeOptions.dy = 0;
    }
    modeOptions.position = 5;
  };
  const getNodeColors_Wave = (modeOptions, animationSpeed) => {
    const nodes = [];
    modeOptions.position += 50;
    modeOptions.position %= modeOptions.bandwidth * modeOptions.layoutColors.length;
    for (let index2 = 0; index2 < lightingNodeItems.length; index2++) {
      var element = lightingNodeItems[index2];
      if (element == null) {
        continue;
      }
      var OffsetValue = element.props.centerPoint.x * modeOptions.dx + element.props.centerPoint.y * modeOptions.dy;
      var scale = (OffsetValue - modeOptions.position) / modeOptions.bandwidth / modeOptions.layoutColors.length;
      var defaultscales = [0, 0.2, 0.4, 0.6, 0.8];
      var scales = defaultscales.slice(0);
      scale -= Math.floor(scale);
      var lower_index = -1;
      var lower_scale = 0;
      modeOptions.layoutColors.length;
      var upper_scale = 1;
      for (let i2 = 0; i2 < modeOptions.layoutColors.length; ++i2) {
        if (scales[i2] <= scale) {
          if (scales[i2] >= lower_scale)
            lower_scale = scales[lower_index = i2];
        } else {
          if (scales[i2] < upper_scale)
            upper_scale = scales[i2];
        }
      }
      if (lightingNodeItemsRef.current[index2] != null) {
        const updatedNode = React.cloneElement(lightingNodeItemsRef.current[index2], {
          currentColor: modeOptions.layoutColors[lower_index]
        });
        nodes[index2] = updatedNode;
      }
    }
    return nodes;
  };
  const spiralingWaveMode = reactExports.useRef(new AnimationProperties_SpiralingWave());
  const initSpiralingWave = () => {
    const profile = getCurrentProfile();
    spiralingWaveMode.current.layoutColors = profile.light_PRESETS_Data.colors.map(
      (color2) => RGBAColor.fromHex(color2)
    );
    console.log("%c mode_Spiral", "color:rgb(255,75,255,1)");
    var maxPercent = 55;
    var currentPercent = 55;
    var tempColorArray = [];
    var inputColor_T = spiralingWaveMode.current.layoutColors[0];
    console.log("%c inputColor_T", "color:rgb(255,75,255,1)", inputColor_T);
    while (currentPercent > 25) {
      currentPercent -= 5;
      var tempColor = [0, 0, 0, 1];
      tempColor[0] = inputColor_T.r * currentPercent / maxPercent;
      tempColor[1] = inputColor_T.g * currentPercent / maxPercent;
      tempColor[2] = inputColor_T.b * currentPercent / maxPercent;
      console.log("%c currentPercent>0", "color:rgb(255,75,255,1)", tempColor);
      tempColorArray.push(tempColor);
    }
    spiralingWaveMode.current.layoutColors = tempColorArray.map(
      (item) => RGBAColor.fromRGB(item[0], item[1], item[2], item[3])
    );
    console.log("%c tempColorArray", "color:rgb(255,75,255,1)", tempColorArray);
    setAllNodes(RGBAColor.fromRGB(0, 0, 0, 1));
    spiralingWaveMode.current.angle = 0;
  };
  const getNodeColors_SpiralingWave = (animationSpeed) => {
    if (devicesContext.previewDevice == null) {
      return lightingNodeItems;
    }
    const nodes = [];
    if (spiralingWaveMode.current.direction == 1) {
      spiralingWaveMode.current.angle += 10 * 1;
    } else {
      spiralingWaveMode.current.angle += 10 * -1;
    }
    var bandangle = 360 / spiralingWaveMode.current.layoutColors.length;
    spiralingWaveMode.current.angle % 360;
    for (let index2 = 0; index2 < lightingNodeItems.length; index2++) {
      var element = lightingNodeItems[index2];
      var center_Point = [
        devicesContext.previewDevice.deviceRenderAttributes.large.width / 2,
        devicesContext.previewDevice.deviceRenderAttributes.large.height / 2
      ];
      center_Point[0] -= 40;
      var PointRotation = rotatePoint(center_Point, element.props.centerPoint);
      if (PointRotation < 0) {
        PointRotation += 360;
      }
      var scale = (PointRotation - spiralingWaveMode.current.angle) / bandangle / spiralingWaveMode.current.layoutColors.length;
      var defaultscales = [0, 0.5, 0.1, 0.3, 0.5, 0.7, 0.9];
      scale -= Math.floor(scale);
      var scales = defaultscales.slice(0);
      var lower_index = 0;
      var lower_scale = 0;
      spiralingWaveMode.current.layoutColors.length;
      var upper_scale = 1;
      for (let i2 = 0; i2 < spiralingWaveMode.current.layoutColors.length; ++i2) {
        if (scales[i2] <= scale) {
          if (scales[i2] >= lower_scale)
            lower_scale = scales[lower_index = i2];
        } else {
          if (scales[i2] < upper_scale)
            upper_scale = scales[i2];
        }
      }
      console.log("lower_index", lower_index);
      if (lightingNodeItemsRef.current[index2] != null) {
        const updatedNode = React.cloneElement(lightingNodeItemsRef.current[index2], {
          currentColor: spiralingWaveMode.current.layoutColors[lower_index]
        });
        nodes[index2] = updatedNode;
      }
    }
    return nodes;
  };
  const acidModeMode = reactExports.useRef(new AnimationProperties_AcidMode());
  const initAcidMode = () => {
    getCurrentProfile();
    acidModeMode.current.layoutColors = [
      [255, 0, 0, 1],
      [0, 255, 0, 1],
      [0, 0, 255, 1]
    ].map((item) => RGBAColor.fromRGB(item[0], item[1], item[2], item[3]));
    acidModeMode.current.repeatCount = 0;
    acidModeMode.current.startPoint = lightingNodeItems.length ? lightingNodeItems[lightingNodeItems.length - 1].props?.centerPoint || new Point() : new Point();
    acidModeMode.current.step = 60;
    acidModeMode.current.nowStep = 0;
    setAllNodes(RGBAColor.fromRGB(0, 0, 0, 1));
    acidModeMode.current.repeatCountList = [];
    for (let i_compare = 0; i_compare < devicesContext.previewDevice.deviceRenderAttributes.large.width; i_compare += acidModeMode.current.minKeyWidth) {
      for (let index2 = 0; index2 < lightingNodeItems.length; index2++) {
        var element = lightingNodeItems[index2];
        var dis = distanceCalculation(
          acidModeMode.current.startPoint.x,
          acidModeMode.current.startPoint.y,
          element.props.centerPoint.x,
          element.props.centerPoint.y
        );
        if (dis <= i_compare && dis >= i_compare - acidModeMode.current.minKeyWidth) {
          acidModeMode.current.repeatCountList.push({
            color: acidModeMode.current.layoutColors[0],
            recordIndex: index2,
            repeatTime: getRandom(5, 25)
          });
        }
      }
    }
  };
  const getNodeColors_AcidMode = (animationSpeed) => {
    const nodes = [];
    var t_Count = acidModeMode.current.repeatCount % 3;
    var t_Count2;
    if (t_Count + 1 < acidModeMode.current.layoutColors.length) {
      t_Count2 = t_Count + 1;
    } else {
      t_Count2 = 0;
    }
    const indexesToUpdate = /* @__PURE__ */ new Map();
    for (let index2 = 0; index2 < acidModeMode.current.repeatCountList.length; index2++) {
      var nowColor = JSON.parse(
        JSON.stringify(acidModeMode.current.layoutColors.map((item) => item.toArray_rgba()))
      );
      var temp_colorData = [0, 0, 0, 1];
      for (let index22 = 0; index22 < 3; index22++) {
        temp_colorData[index22] = (nowColor[t_Count][index22] * (acidModeMode.current.step - acidModeMode.current.nowStep) + nowColor[t_Count2][index22] * acidModeMode.current.nowStep) / acidModeMode.current.step;
      }
      const toUpdate = lightingNodeItemsRef.current[acidModeMode.current.repeatCountList[index2].recordIndex];
      if (toUpdate != null) {
        indexesToUpdate.set(acidModeMode.current.repeatCountList[index2].recordIndex, temp_colorData);
      }
    }
    if (acidModeMode.current.nowStep < acidModeMode.current.step - 1) {
      acidModeMode.current.nowStep += 1;
    } else {
      acidModeMode.current.nowStep = 0;
      acidModeMode.current.repeatCount += 1;
    }
    for (let i2 = 0; i2 < lightingNodeItemsRef.current.length; i2++) {
      const updatedColor = indexesToUpdate.get(i2) ?? RGBAColor.fromRGB(0, 0, 0, 1);
      const updatedNode = React.cloneElement(lightingNodeItemsRef.current[i2], {
        currentColor: RGBAColor.fromRGB(updatedColor[0], updatedColor[1], updatedColor[2], updatedColor[3])
      });
      nodes.push(updatedNode);
    }
    return nodes;
  };
  const breathingMode = reactExports.useRef(new AnimationProperties_Breathing());
  const initBreathing = () => {
    const profile = getCurrentProfile();
    setAllNodes(RGBAColor.fromRGB(0, 0, 0, 1));
    breathingMode.current.layoutColors = new Array().fill(
      presetColor.current,
      0,
      lightingNodeItems.length
    );
    if (uiContext.lightingSelectedColorStyle?.optionKey == "rgbGradient") {
      if (profile.light_PRESETS_Data == null) {
        return;
      }
      const rowLength = devicesContext.previewDevice?.SN == "0x320F0x5044" ? 15 : 15;
      const splitLength = Math.ceil(rowLength / profile.light_PRESETS_Data.colors.length);
      let deviceColorsIndex = -1;
      for (let i2 = 0; i2 < lightingNodeItems.length; i2++) {
        if (i2 % splitLength == 0) {
          deviceColorsIndex++;
          if (deviceColorsIndex > profile.light_PRESETS_Data.colors.length - 1) {
            deviceColorsIndex = 0;
          }
        }
        breathingMode.current.layoutColors[i2] = RGBAColor.fromHex(
          profile.light_PRESETS_Data.colors[deviceColorsIndex]
        );
      }
    }
  };
  const getNodeColors_Breathing = (animationSpeed) => {
    const nodes = [];
    if (uiContext.lightingSelectedColorStyle?.optionKey == "customColor") {
      const color2 = getCurrentBreathingSingleColor(animationSpeed * 0.05, presetColor.current);
      for (let i2 = 0; i2 < lightingNodeItemsRef.current.length; i2++) {
        const updatedNode = React.cloneElement(lightingNodeItemsRef.current[i2], {
          currentColor: color2
        });
        nodes.push(updatedNode);
      }
    } else if (uiContext.lightingSelectedColorStyle?.optionKey == "rgbGradient") {
      for (let i2 = 0; i2 < lightingNodeItemsRef.current.length; i2++) {
        if (breathingMode.current.layoutColors[i2] == null) {
          continue;
        }
        const color2 = getCurrentBreathingSingleColor(
          animationSpeed * 0.05,
          breathingMode.current.layoutColors[i2]
        );
        const updatedNode = React.cloneElement(lightingNodeItemsRef.current[i2], {
          currentColor: color2
        });
        nodes.push(updatedNode);
      }
    }
    return nodes;
  };
  const getNodeColors_NormallyOn = (animationSpeed) => {
    const nodes = [];
    for (let i2 = 0; i2 < lightingNodeItemsRef.current.length; i2++) {
      const updatedNode = React.cloneElement(lightingNodeItemsRef.current[i2], {
        currentColor: presetColor.current
      });
      nodes.push(updatedNode);
    }
    return nodes;
  };
  reactExports.useRef(new AnimationProperties_RippleGraff());
  const initRippleGraff = () => {
    getCurrentProfile();
  };
  const getNodeColors_RippleGraff = (animationSpeed) => {
    const nodes = [];
    for (let i2 = 0; i2 < lightingNodeItemsRef.current.length; i2++) {
      const updatedNode = React.cloneElement(lightingNodeItemsRef.current[i2], {
        currentColor: presetColor.current
      });
      nodes.push(updatedNode);
    }
    return nodes;
  };
  reactExports.useRef(new AnimationProperties_PassWithoutTrace());
  const initPassWithoutTrace = () => {
    getCurrentProfile();
  };
  const getNodeColors_PassWithoutTrace = (animationSpeed) => {
    const nodes = [];
    for (let i2 = 0; i2 < lightingNodeItemsRef.current.length; i2++) {
      const updatedNode = React.cloneElement(lightingNodeItemsRef.current[i2], {
        currentColor: presetColor.current
      });
      nodes.push(updatedNode);
    }
    return nodes;
  };
  reactExports.useRef(new AnimationProperties_FastRunWithoutTrace());
  const initFastRunWithoutTrace = () => {
    getCurrentProfile();
  };
  const getNodeColors_FastRunWithoutTrace = (animationSpeed) => {
    const nodes = [];
    for (let i2 = 0; i2 < lightingNodeItemsRef.current.length; i2++) {
      const updatedNode = React.cloneElement(lightingNodeItemsRef.current[i2], {
        currentColor: presetColor.current
      });
      nodes.push(updatedNode);
    }
    return nodes;
  };
  const matrix2Mode = reactExports.useRef(new AnimationProperties_Matrix2());
  const initMatrix2 = () => {
    const profile = getCurrentProfile();
    matrix2Mode.current.layoutColors = [
      [255, 0, 0, 1],
      [0, 255, 0, 1],
      [0, 0, 255, 1]
    ].map((item) => RGBAColor.fromRGB(item[0], item[1], item[2], item[3]));
    matrix2Mode.current.layoutColors = [
      RGBAColor.fromHex(profile.light_PRESETS_Data.colors[0]),
      RGBAColor.fromRGB(0, 0, 0, 1)
    ];
    matrix2Mode.current.totalStep = 30;
    matrix2Mode.current.intervalCount = 0;
    matrix2Mode.current.startPoint = lightingNodeItems.length ? lightingNodeItems[0].props?.centerPoint || new Point() : new Point();
    setAllNodes(RGBAColor.fromRGB(0, 0, 0, 1));
    matrix2Mode.current.repeatCountList = [];
    matrix2Mode.current.RanRange = [10, 100];
    for (let index2 = 0; index2 < lightingNodeItems.length; index2++) {
      var modStep = lightingNodeItems[index2].props.centerPoint.x % devicesContext.previewDevice.deviceRenderAttributes.large.width / devicesContext.previewDevice.deviceRenderAttributes.large.width;
      var ran = matrix2Mode.current.layoutColors.length - 1 - Math.round(modStep * (matrix2Mode.current.layoutColors.length - 1));
      matrix2Mode.current.repeatCountList.push({
        color: 0,
        nowPos: 0,
        nowstep: 0,
        repeatCount: 1,
        repeatTime: getRandom(matrix2Mode.current.RanRange[0], matrix2Mode.current.RanRange[1])
      });
      matrix2Mode.current.layoutColors[0];
      matrix2Mode.current.layoutColors[1];
      if (uiContext.lightingSelectedColorStyle?.optionKey == "rgbGradient") {
        matrix2Mode.current.repeatCountList[index2].nowPos = ran;
        if (ran < matrix2Mode.current.layoutColors.length - 1) {
          matrix2Mode.current.layoutColors[ran];
          matrix2Mode.current.layoutColors[ran + 1];
        } else {
          matrix2Mode.current.layoutColors[0];
          matrix2Mode.current.layoutColors[0];
        }
      }
    }
    matrix2Mode.current.repeatCount = 0;
  };
  const getNodeColors_Matrix2 = (animationSpeed) => {
    const nodes = [];
    const updatedColors = /* @__PURE__ */ new Map();
    var exist = [];
    for (let index2 = 0; index2 < lightingNodeItems.length; index2++) {
      lightingNodeItems[index2];
      exist.push(index2);
      var temp_block = matrix2Mode.current.repeatCountList[index2];
      var tempColors = matrix2Mode.current.layoutColors.map((item) => item.toArray_rgba());
      var nextColor;
      if (temp_block.repeatTime > 0) {
        temp_block.repeatTime -= 1;
      }
      if (temp_block.repeatTime == 0) {
        if (temp_block.nowStep + 1 < matrix2Mode.current.totalStep) {
          temp_block.nowStep += 1;
        } else {
          temp_block.nowStep = 0;
          var newRand = getRandom(matrix2Mode.current.RanRange[0], matrix2Mode.current.RanRange[1]);
          temp_block.repeatTime = newRand;
          if (temp_block.nowPos + 1 < tempColors.length) {
            temp_block.nowPos += 1;
          } else {
            temp_block.nowPos = 0;
          }
        }
        var temp_C = tempColors[temp_block.nowPos];
        if (temp_block.nowPos + 1 < tempColors.length) {
          nextColor = tempColors[temp_block.nowPos + 1];
        } else {
          nextColor = tempColors[0];
        }
        var temp_colorData = [0, 0, 0, 1];
        for (let i2 = 0; i2 < 3; i2++) {
          temp_colorData[i2] = (temp_C[i2] * (matrix2Mode.current.totalStep - temp_block.nowStep) + nextColor[i2] * temp_block.nowStep) / matrix2Mode.current.totalStep;
        }
        updatedColors.set(index2, temp_colorData);
      }
    }
    if (matrix2Mode.current.intervalCount * 50 < devicesContext.previewDevice.deviceRenderAttributes.large.width) {
      matrix2Mode.current.intervalCount += 1;
    } else {
      matrix2Mode.current.intervalCount = 0;
      exist = [];
      matrix2Mode.current.repeatCount += 1;
    }
    for (let i2 = 0; i2 < lightingNodeItemsRef.current.length; i2++) {
      const updatedColor = updatedColors.get(i2) ?? lightingNodeItemsRef.current[i2].props.currentColor;
      const updatedNode = React.cloneElement(lightingNodeItemsRef.current[i2], {
        currentColor: RGBAColor.fromRGB(updatedColor[0], updatedColor[1], updatedColor[2], updatedColor[3])
      });
      nodes.push(updatedNode);
    }
    return nodes;
  };
  reactExports.useRef(new AnimationProperties_Matrix3());
  const initMatrix3 = () => {
    const profile = getCurrentProfile();
    matrix2Mode.current.layoutColors = [
      [255, 0, 0, 1],
      [0, 255, 0, 1],
      [0, 0, 255, 1]
    ].map((item) => RGBAColor.fromRGB(item[0], item[1], item[2], item[3]));
    matrix2Mode.current.layoutColors = [
      RGBAColor.fromHex(profile.light_PRESETS_Data.colors[0]),
      RGBAColor.fromRGB(0, 0, 0, 1)
    ];
    matrix2Mode.current.totalStep = 30;
    matrix2Mode.current.startPoint = lightingNodeItems.length ? lightingNodeItems[0].props?.centerPoint || new Point() : new Point();
    setAllNodes(RGBAColor.fromRGB(0, 0, 0, 1));
    matrix2Mode.current.repeatCountList = [];
    matrix2Mode.current.RanRange = [1, 25];
    for (let index2 = 0; index2 < lightingNodeItems.length; index2++) {
      var modStep = lightingNodeItems[index2].props.centerPoint.x % devicesContext.previewDevice.deviceRenderAttributes.large.width / devicesContext.previewDevice.deviceRenderAttributes.large.width;
      matrix2Mode.current.layoutColors.length - 1 - Math.round(modStep * (matrix2Mode.current.layoutColors.length - 1));
      matrix2Mode.current.repeatCountList.push({
        color: 0,
        nowPos: 0,
        nowstep: 0,
        repeatCount: 1,
        repeatTime: getRandom(matrix2Mode.current.RanRange[0], matrix2Mode.current.RanRange[1])
      });
    }
    matrix2Mode.current.repeatCount = 0;
  };
  const getNodeColors_Matrix3 = (animationSpeed) => {
    const nodes = [];
    const updatedColors = /* @__PURE__ */ new Map();
    var exist = [];
    for (let index2 = 0; index2 < lightingNodeItems.length; index2++) {
      exist.push(index2);
      var temp_block = matrix2Mode.current.repeatCountList[index2];
      var tempColors = matrix2Mode.current.layoutColors.map((item) => item.toArray_rgba());
      var nextColor;
      if (temp_block.repeatTime > 0) {
        temp_block.repeatTime -= 1;
      }
      if (temp_block.repeatTime == 0) {
        if (temp_block.nowStep + 1 < matrix2Mode.current.totalStep) {
          temp_block.nowStep += 1;
        } else {
          temp_block.nowStep = 0;
          var newRand = getRandom(matrix2Mode.current.RanRange[0], matrix2Mode.current.RanRange[1]);
          temp_block.repeatTime = newRand;
          if (temp_block.nowPos + 1 < tempColors.length) {
            temp_block.nowPos += 1;
          } else {
            temp_block.nowPos = 0;
          }
        }
        var temp_C = tempColors[temp_block.nowPos];
        if (temp_block.nowPos + 1 < tempColors.length) {
          nextColor = tempColors[temp_block.nowPos + 1];
        } else {
          nextColor = tempColors[0];
        }
        var temp_colorData = [0, 0, 0, 1];
        for (let index22 = 0; index22 < 3; index22++) {
          temp_colorData[index22] = (temp_C[index22] * (matrix2Mode.current.totalStep - temp_block.nowStep) + nextColor[index22] * temp_block.nowStep) / matrix2Mode.current.totalStep;
        }
        updatedColors.set(index2, temp_colorData);
      }
    }
    if (matrix2Mode.current.intervalCount * 50 < devicesContext.previewDevice.deviceRenderAttributes.large.width) {
      matrix2Mode.current.intervalCount += 1;
    } else {
      matrix2Mode.current.intervalCount = 0;
      exist = [];
      matrix2Mode.current.repeatCount += 1;
    }
    for (let i2 = 0; i2 < lightingNodeItemsRef.current.length; i2++) {
      const updatedColor = updatedColors.get(i2) ?? lightingNodeItemsRef.current[i2].props.currentColor;
      const updatedNode = React.cloneElement(lightingNodeItemsRef.current[i2], {
        currentColor: RGBAColor.fromRGB(updatedColor[0], updatedColor[1], updatedColor[2], updatedColor[3])
      });
      nodes.push(updatedNode);
    }
    return nodes;
  };
  const rainbowMode = reactExports.useRef(new AnimationProperties_Rainbow());
  const initRainbow = () => {
    const profile = getCurrentProfile();
    if (uiContext.lightingSelectedColorStyle?.optionKey == "rgbGradient") {
      rainbowMode.current.layoutColors = profile.light_PRESETS_Data.colors.map(
        (item) => RGBAColor.fromHex(item)
      );
    } else {
      var maxPercent = 55;
      var currentPercent = 55;
      var tempColorArray = [];
      var inputColor_T = RGBAColor.fromHex(profile.light_PRESETS_Data.colors[0]);
      while (currentPercent > 25) {
        currentPercent -= 5;
        var tempColor = [0, 0, 0, 1];
        tempColor[0] = inputColor_T.r * currentPercent / maxPercent;
        tempColor[1] = inputColor_T.g * currentPercent / maxPercent;
        tempColor[2] = inputColor_T.b * currentPercent / maxPercent;
        tempColorArray.push(tempColor);
      }
      rainbowMode.current.layoutColors = tempColorArray.map(
        (item) => RGBAColor.fromRGB(item[0], item[1], item[2])
      );
    }
    setAllNodes(RGBAColor.fromRGB(0, 0, 0, 1));
    rainbowMode.current.angle = -270;
    rainbowMode.current.theta = Math.PI * rainbowMode.current.angle / 180;
    rainbowMode.current.dx = Math.cos(rainbowMode.current.theta);
    rainbowMode.current.dy = -Math.sin(rainbowMode.current.theta);
    if (Math.abs(rainbowMode.current.dx) < 1e-5)
      rainbowMode.current.dx = 0;
    if (Math.abs(rainbowMode.current.dy) < 1e-5)
      rainbowMode.current.dy = 0;
    rainbowMode.current.position += 5;
  };
  const getNodeColors_Rainbow = (animationSpeed) => {
    const nodes = [];
    rainbowMode.current.position += 50;
    rainbowMode.current.position %= rainbowMode.current.bandwidth * rainbowMode.current.layoutColors.length;
    for (let index2 = 0; index2 < lightingNodeItems.length; index2++) {
      var element = lightingNodeItems[index2];
      var OffsetValue = element.props.centerPoint.x * rainbowMode.current.dx + element.props.centerPoint.y * rainbowMode.current.dy;
      var scale = (OffsetValue - rainbowMode.current.position) / rainbowMode.current.bandwidth / rainbowMode.current.layoutColors.length;
      var defaultscales = [0, 0.2, 0.4, 0.6, 0.8];
      var scales = defaultscales.slice(0);
      scale -= Math.floor(scale);
      var lower_index = -1;
      var lower_scale = 0;
      rainbowMode.current.layoutColors.length;
      var upper_scale = 1;
      for (let i2 = 0; i2 < rainbowMode.current.layoutColors.length; ++i2) {
        if (scales[i2] <= scale) {
          if (scales[i2] >= lower_scale)
            lower_scale = scales[lower_index = i2];
        } else {
          if (scales[i2] < upper_scale)
            upper_scale = scales[i2];
        }
      }
      const updatedNode = React.cloneElement(lightingNodeItems[index2], {
        currentColor: rainbowMode.current.layoutColors[lower_index] ?? lightingNodeItems[index2].props.currentColor
      });
      nodes.push(updatedNode);
    }
    return nodes;
  };
  const heartbeatSensorMode = reactExports.useRef(new AnimationProperties_HeartbeatSensor());
  const initHeartbeatSensor = () => {
    getCurrentProfile();
    if (uiContext.lightingSelectedColorStyle?.optionKey == "customColor")
      ;
    console.log("%c Enter_mode_HeartbeatSensor", "color:rgb(255,77,255)", heartbeatSensorMode.current.layoutColors);
    heartbeatSensorMode.current.startPoint = lightingNodeItems.length ? lightingNodeItems[lightingNodeItems.length - 1].props?.centerPoint || new Point() : new Point();
    heartbeatSensorMode.current.share_RepeatCount = 0;
    heartbeatSensorMode.current.horizontalList = [];
    for (let index2 = 0; index2 < devicesContext.previewDevice.deviceRenderAttributes.large.width; index2 += heartbeatSensorMode.current.minKeyWidth / 2) {
      var ratio = Math.sin(index2 * Math.PI / 180);
      var ypos = (ratio + 1) * devicesContext.previewDevice.deviceRenderAttributes.large.height;
      heartbeatSensorMode.current.horizontalList.push({
        repeatCount: 0,
        coordinate: [index2, +ypos]
        //StartPoint.top_Left[0]+ypos
        //StartPoint[1]+ypos
      });
    }
  };
  const getNodeColors_HeartbeatSensor = (animationSpeed) => {
    const nodes = [];
    const indexesToUpdate = /* @__PURE__ */ new Map();
    setAllNodes(RGBAColor.fromRGB(0, 0, 0, 1));
    for (let index2 = 0; index2 < heartbeatSensorMode.current.horizontalList.length; index2++) {
      var h_Item = heartbeatSensorMode.current.horizontalList[index2];
      if (h_Item.coordinate[1] <= 0 || h_Item.coordinate[1] >= devicesContext.previewDevice.deviceRenderAttributes.large.height) {
        h_Item["repeatCount"] += 1;
      }
      if (h_Item["repeatCount"] % 2 == 0) {
        h_Item["coordinate"][1] -= 40;
        if (h_Item["coordinate"][1] <= 0) {
          h_Item["coordinate"][1] = 0;
        }
      } else {
        h_Item["coordinate"][1] += 40;
        if (h_Item["coordinate"][1] >= devicesContext.previewDevice.deviceRenderAttributes.large.height) {
          h_Item["coordinate"][1] = devicesContext.previewDevice.deviceRenderAttributes.large.height;
        }
      }
    }
    console.log(
      "horizontalList",
      heartbeatSensorMode.current.horizontalList,
      heartbeatSensorMode.current.share_RepeatCount % 2
    );
    for (let index2 = 0; index2 < lightingNodeItems.length; index2++) {
      const element = lightingNodeItems[index2];
      for (let i2 = 0; i2 < heartbeatSensorMode.current.horizontalList.length; i2++) {
        var T2 = heartbeatSensorMode.current.horizontalList[i2].coordinate;
        if (T2[0] >= element.props.x && T2[0] <= element.props.topRightPoint.x && T2[1] >= element.props.y && T2[1] <= element.props.bottomLeftPoint.y) {
          const toUpdate = heartbeatSensorMode.current.layoutColors[getRandom(0, heartbeatSensorMode.current.layoutColors.length - 1)];
          if (toUpdate != null) {
            indexesToUpdate.set(index2, toUpdate);
          }
          continue;
        }
      }
    }
    console.log(indexesToUpdate);
    for (let i2 = 0; i2 < lightingNodeItemsRef.current.length; i2++) {
      const updatedColor = indexesToUpdate.get(i2) ?? RGBAColor.fromRGB(0, 0, 0, 1);
      const updatedNode = React.cloneElement(lightingNodeItemsRef.current[i2], {
        currentColor: updatedColor
      });
      nodes.push(updatedNode);
    }
    return nodes;
  };
  reactExports.useRef(new AnimationProperties_DigitalTimes());
  const initDigitalTimes = () => {
    getCurrentProfile();
  };
  const getNodeColors_DigitalTimes = (animationSpeed) => {
    const nodes = [];
    for (let i2 = 0; i2 < lightingNodeItemsRef.current.length; i2++) {
      const updatedNode = React.cloneElement(lightingNodeItemsRef.current[i2], {
        currentColor: presetColor.current
      });
      nodes.push(updatedNode);
    }
    return nodes;
  };
  const kamehamehaMode = reactExports.useRef(new AnimationProperties_Kamehameha());
  const initKamehameha = () => {
    const profile = getCurrentProfile();
    if (uiContext.lightingSelectedColorStyle?.optionKey == "rgbGradient") {
      kamehamehaMode.current.layoutColors = profile.light_PRESETS_Data.colors.map(
        (item) => RGBAColor.fromHex(item)
      );
    }
    kamehamehaMode.current.centerBlockIndex = 38;
    kamehamehaMode.current.repeatCount = 0;
    kamehamehaMode.current.startPoint = lightingNodeItems.length ? lightingNodeItems[lightingNodeItems.length - 1].props?.centerPoint || new Point() : new Point();
    setAllNodes(RGBAColor.fromRGB(0, 0, 0, 1));
    kamehamehaMode.current.setRGB = profile.light_PRESETS_Data.colors.map(
      (item) => RGBAColor.fromHex(item).toArray_rgba()
    );
    kamehamehaMode.current.setArray = JSON.parse(JSON.stringify(kamehamehaMode.current.Step1_Range));
    console.log("enter mode_Kamehemeha");
  };
  const getNodeColors_Kamehameha = (animationSpeed) => {
    const nodes = [];
    const indexesToUpdate = /* @__PURE__ */ new Map();
    for (let index2 = 0; index2 < kamehamehaMode.current.setArray.length; index2++) {
      var temp_colorData = JSON.parse(
        JSON.stringify(
          kamehamehaMode.current.layoutColors[getRandom(0, kamehamehaMode.current.layoutColors.length - 1)]
        )
      );
      indexesToUpdate.set(kamehamehaMode.current.setArray[index2], temp_colorData);
    }
    for (let index2 = 0; index2 < kamehamehaMode.current.setArray.length; index2++) {
      if (kamehamehaMode.current.setArray[index2] < kamehamehaMode.current.centerBlockIndex) {
        kamehamehaMode.current.setArray[index2] += 1;
      } else {
        if (lightingNodeItems[kamehamehaMode.current.setArray[index2]].props.centerPoint.x > kamehamehaMode.current.startPoint.x) {
          kamehamehaMode.current.setArray[index2] -= 1;
        }
      }
    }
    kamehamehaMode.current.repeatCount += 1;
    if (kamehamehaMode.current.repeatCount > 7) {
      getNodeColors_Kamehameha2(
        kamehamehaMode.current.layoutColors.map((item) => item.toArray_rgba()),
        uiContext.lightingSelectedColorStyle?.optionKey == "rgbGradient"
      );
    }
    console.log(indexesToUpdate);
    for (let i2 = 0; i2 < lightingNodeItemsRef.current.length; i2++) {
      const updatedColor = indexesToUpdate.get(i2) ?? RGBAColor.fromRGB(0, 0, 0, 1);
      const updatedNode = React.cloneElement(lightingNodeItemsRef.current[i2], {
        currentColor: updatedColor
      });
      nodes.push(updatedNode);
    }
    return nodes;
  };
  const getNodeColors_Kamehameha2 = (colors = [
    [255, 0, 0, 1],
    [0, 255, 0, 1],
    [0, 0, 255, 1]
  ], isRainbow = true) => {
  };
  const pingPongMode = reactExports.useRef(new AnimationProperties_PingPong());
  const initPingPong = () => {
    getCurrentProfile();
    pingPongMode.current.intervalCount = 0;
    pingPongMode.current.startPoint = lightingNodeItems.length ? lightingNodeItems[0].props?.centerPoint || new Point() : new Point();
    pingPongMode.current.repeatCount = 0;
  };
  const getNodeColors_PingPong = (animationSpeed) => {
    const nodes = [];
    const indexesToUpdate = /* @__PURE__ */ new Map();
    setAllNodes(RGBAColor.fromRGB(0, 0, 0, 1));
    var horizontalList = [];
    pingPongMode.current.layoutColors[getRandom(0, pingPongMode.current.layoutColors.length - 1)];
    var spacing = -5;
    if (pingPongMode.current.repeatCount % 2 == 0) {
      for (let index2 = 0; index2 < devicesContext.previewDevice.deviceRenderAttributes.large.height; index2 += 50) {
        var ypos = index2;
        spacing += 1;
        var min = pingPongMode.current.intervalCount * 50 + spacing * 22;
        var max = pingPongMode.current.intervalCount * 100 * 4 + spacing * 22;
        for (let index22 = min; index22 < max; index22 += 1) {
          var xpos = index22;
          horizontalList.push([xpos, ypos]);
        }
      }
    } else {
      var spacing = -5;
      for (let index2 = 0; index2 < devicesContext.previewDevice.deviceRenderAttributes.large.height; index2 += 50) {
        spacing += 1;
        var ypos = index2;
        var min = devicesContext.previewDevice.deviceRenderAttributes.large.width - pingPongMode.current.intervalCount * 50 - spacing * 22 - 50 * 4;
        var max = devicesContext.previewDevice.deviceRenderAttributes.large.width - pingPongMode.current.intervalCount * 50 - spacing * 22;
        for (let index22 = max; index22 > min; index22 -= 1) {
          var xpos = index22;
          horizontalList.push([xpos, ypos]);
        }
      }
    }
    for (let index2 = 0; index2 < lightingNodeItems.length; index2++) {
      const element = lightingNodeItems[index2];
      for (let i2 = 0; i2 < horizontalList.length; i2++) {
        var T2 = horizontalList[i2];
        if (T2[0] > element.props.x && T2[0] < element.props.topRightPoint.x && T2[1] > element.props.y && T2[1] < element.props.bottomLeftPoint.y) {
          var temp_colorData = JSON.parse(
            JSON.stringify(
              pingPongMode.current.layoutColors[getRandom(0, pingPongMode.current.layoutColors.length - 1)]
            )
          );
          indexesToUpdate.set(index2, temp_colorData);
          continue;
        }
      }
    }
    if (pingPongMode.current.intervalCount * 50 * 2 < devicesContext.previewDevice.deviceRenderAttributes.large.width) {
      pingPongMode.current.intervalCount += 1;
    } else {
      pingPongMode.current.intervalCount = 0;
      pingPongMode.current.repeatCount += 1;
    }
    console.log(indexesToUpdate);
    for (let i2 = 0; i2 < lightingNodeItemsRef.current.length; i2++) {
      const updatedColor = indexesToUpdate.get(i2) ?? [0, 0, 0, 1];
      const updatedNode = React.cloneElement(lightingNodeItemsRef.current[i2], {
        currentColor: RGBAColor.fromRGB(updatedColor[0], updatedColor[1], updatedColor[2], updatedColor[3])
      });
      nodes.push(updatedNode);
    }
    return nodes;
  };
  const surmountMode = reactExports.useRef(new AnimationProperties_Surmount());
  const initSurmount = () => {
    getCurrentProfile();
    surmountMode.current.repeatCount = 0;
    surmountMode.current.startPoint = lightingNodeItems.length ? lightingNodeItems[lightingNodeItems.length - 1].props?.centerPoint || new Point() : new Point();
    surmountMode.current.mode_step = 0;
    surmountMode.current.step = 30;
    surmountMode.current.nowStep = 0;
    setAllNodes(RGBAColor.fromRGB(0, 0, 0, 1));
  };
  const getNodeColors_Surmount = (animationSpeed) => {
    const profile = getCurrentProfile();
    const nodes = [];
    var setRGB = profile.light_PRESETS_Data.colors[getRandom(0, profile.light_PRESETS_Data.colors.length - 1)];
    var compareResult = surmountMode.current.minKeyWidth * surmountMode.current.repeatCount;
    var compareResultMax = surmountMode.current.minKeyWidth * surmountMode.current.repeatCount - surmountMode.current.minKeyWidth;
    for (let index2 = 0; index2 < lightingNodeItems.length; index2++) {
      var element = lightingNodeItems[index2];
      var dis = distanceCalculation(
        surmountMode.current.startPoint.x,
        surmountMode.current.startPoint.y,
        element.props.centerPoint.x,
        element.props.centerPoint.y
      );
      if (surmountMode.current.mode_step == 0) {
        if (dis <= compareResult && dis >= compareResultMax) {
          var temp_colorData = JSON.parse(JSON.stringify(setRGB));
          element.color = temp_colorData;
        }
      }
    }
    if (surmountMode.current.nowStep + 1 < surmountMode.current.step) {
      surmountMode.current.nowStep += 1;
    } else {
      surmountMode.current.nowStep = 0;
      surmountMode.current.mode_step = 0;
      surmountMode.current.repeatCount = 0;
      setAllNodes(RGBAColor.fromRGB(0, 0, 0, 1));
    }
    if (surmountMode.current.minKeyWidth * surmountMode.current.repeatCount < devicesContext.previewDevice.deviceRenderAttributes.large.width) {
      surmountMode.current.repeatCount += 1;
    } else {
      surmountMode.current.mode_step = 1;
    }
    for (let i2 = 0; i2 < lightingNodeItemsRef.current.length; i2++) {
      const updatedNode = React.cloneElement(lightingNodeItemsRef.current[i2], {
        currentColor: presetColor.current
      });
      nodes.push(updatedNode);
    }
    return nodes;
  };
  const getNodeColors_LEDOff = () => {
    const nodes = [];
    for (let i2 = 0; i2 < lightingNodeItemsRef.current.length; i2++) {
      const updatedNode = React.cloneElement(lightingNodeItemsRef.current[i2], {
        currentColor: RGBAColor.fromRGB(0, 0, 0, 1)
      });
      nodes.push(updatedNode);
    }
    return nodes;
  };
  const setAllNodes = (color2) => {
    const nodes = [];
    for (let i2 = 0; i2 < lightingNodeItemsRef.current.length; i2++) {
      if (lightingNodeItemsRef.current[i2] == null) {
        continue;
      }
      const updatedNode = React.cloneElement(lightingNodeItemsRef.current[i2], {
        currentColor: color2
      });
      nodes.push(updatedNode);
    }
    lightingNodeItemsRef.current = nodes;
    setLightingNodeItems(lightingNodeItemsRef.current);
  };
  const getRandom = (min, max) => {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  };
  const rotatePoint = (a, b2) => {
    var Dx = b2[0] - a[0];
    var Dy = b2[1] - a[1];
    var DRoation = Math.atan2(Dy, Dx);
    var WRotation = DRoation / Math.PI * 180;
    return WRotation;
  };
  const getCurrentBreathingSingleColor = (animationSpeed, targetColor) => {
    if (breathingMode.current.lightnessPercent <= 0) {
      breathingMode.current.lightnessPercent = 0;
      breathingMode.current.operationKey = "lighten";
    } else if (breathingMode.current.lightnessPercent >= 100) {
      breathingMode.current.lightnessPercent = 100;
      breathingMode.current.operationKey = "darken";
    }
    const breathingStep = 1 * animationSpeed;
    if (breathingMode.current.operationKey == "darken") {
      breathingMode.current.lightnessPercent = breathingMode.current.lightnessPercent - breathingStep;
    } else if (breathingMode.current.operationKey == "lighten") {
      breathingMode.current.lightnessPercent = breathingMode.current.lightnessPercent + breathingStep;
    }
    const updatedRed = breathingMode.current.lightnessPercent / 100 * targetColor.red;
    const updatedGreen = breathingMode.current.lightnessPercent / 100 * targetColor.green;
    const updatedBlue = breathingMode.current.lightnessPercent / 100 * targetColor.blue;
    return RGBAColor.fromRGB(updatedRed, updatedGreen, updatedBlue);
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "nodes", ref: lightingNodes, children: lightingNodeItems });
}
function DeviceLightingPreviewComponent(props) {
  const devicesContext = useDevicesContext();
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: devicesContext.previewDevice?.deviceCategoryName == "Mouse" ? /* @__PURE__ */ jsxRuntimeExports.jsx(MouseLightingPreviewComponent, {}) : devicesContext.previewDevice?.deviceCategoryName == "Keyboard" || devicesContext.previewDevice?.deviceCategoryName == "Numpad" ? /* @__PURE__ */ jsxRuntimeExports.jsx(KeyboardLightingPreviewComponent, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}) });
}
const deviceKeybindingSelectionNode_component = "";
function DeviceKeybindingSelectionNodeComponent(props) {
  const { title, x: x2, y: y2, width, height, onClick, selected: selected2, hasBindValue, onHoverStart, onHoverEnd, children } = props;
  const translate = useTranslate();
  const style2 = reactExports.useMemo(
    () => ({
      transform: `translate(${x2}px, ${y2}px)`,
      width: `${width}px`,
      height: `${height}px`,
      "--x": `${x2}px`,
      "--y": `${y2}px`
    }),
    [x2, y2, width, height]
  );
  const handleMouseEnter = reactExports.useCallback(() => {
    if (onHoverStart) {
      onHoverStart();
    }
  }, [onHoverStart]);
  const handleMouseLeave = reactExports.useCallback(() => {
    if (onHoverEnd) {
      onHoverEnd();
    }
  }, [onHoverEnd]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    "div",
    {
      className: "node",
      title: translate(title, title),
      style: style2,
      onClick,
      onMouseEnter: handleMouseEnter,
      onMouseLeave: handleMouseLeave,
      "data-selected": selected2 ? title : null,
      "data-bound": hasBindValue ? title : null,
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "hover-indicator" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "selected-indicator" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bound-indicator" }),
        children
      ]
    }
  );
}
const keyboardKeybindingSelection_component = "";
function KeyboardKeybindingSelectionComponent(props) {
  const [bindingTypes, setBindingTypes] = reactExports.useState([]);
  const translate = useTranslate();
  const devicesContext = useDevicesContext();
  useDevicesManagementContext();
  const uiContext = useUIContext();
  const {
    setKeybindingType,
    setKeybindSoundControlSelection,
    setKeybindAudioToggleTarget,
    setKeybindMacroSelection,
    setKeybindingSelectedNode,
    setRotaryEncoderAction,
    setKeybindingKeyCode,
    setKeybindingKeyModifier,
    setKeybindingKeyboardFunction,
    setKeybindSelectedMouseFunction,
    setKeybindSelectedMultimediaFunction,
    setKeybindDisabledIsSelected,
    setKeybindSelectedShortcutType,
    setKeybindSelectedShortcutProgramPath,
    setKeybindSelectedShortcutUrl,
    setKeybindSelectedWindowsOption
  } = useUIUpdateContext();
  const [hoverNode, setHoverNode] = reactExports.useState(null);
  const nodes = reactExports.useRef(null);
  const [nodeItems, setNodeItems] = reactExports.useState([]);
  const [currentProfile, setCurrentProfile] = reactExports.useState(null);
  const [selectedNodePosition, setSelectedNodePosition] = reactExports.useState({ x: 0, y: 0 });
  const handleNodeClick = (nodeDefinition, index2) => {
    setKeybindingSelectedNode(nodeDefinition, index2);
    if (currentProfile == null) {
      return;
    }
    const currentKeyArray = currentProfile.assignedKeyboardKeys[currentProfile.fnModeindex];
    const selectionCodeValue = KeyMapping.find(
      (item) => item.code == uiContext.keybindSelectedNode.translationKey
    );
    if (selectionCodeValue == null) {
      console.error("Could not find selectd key in keymap");
      return;
    }
    const selectionComparisonValue = selectionCodeValue.value;
    const selectedKey = currentKeyArray.find((item) => {
      if (selectionComparisonValue == "Volume") {
        return item.defaultValue == "ScrollWheel";
      }
      return item.defaultValue == selectionComparisonValue;
    });
    console.log(selectedKey);
    if (selectedKey == null || selectedKey.recordBindCodeType == "") {
      console.log(bindingTypes[0]);
      setKeybindingType(bindingTypes[0]);
      return;
    }
    const bindOption = bindingTypes.find((item) => item.data.bindingCode == selectedKey.recordBindCodeType);
    if (bindOption == null) {
      throw new Error("Unknown bind option assigned to key");
    }
    setKeybindingType(bindOption);
    if (bindOption.optionKey == "keystroke") {
      if (selectedKey.recordBindCodeName != "Default" && selectedKey.recordBindCodeName != "Option_BindingTypes_keystroke") {
        setKeybindingKeyCode(selectedKey.recordBindCodeName);
      }
      if (selectedKey.Alt == true) {
        const modifierOption = ModifierKeys.find((item) => item.value == "alt");
        if (modifierOption != null) {
          setKeybindingKeyModifier(modifierOption);
        }
      } else if (selectedKey.Ctrl == true) {
        const modifierOption = ModifierKeys.find((item) => item.value == "ctrl");
        if (modifierOption != null) {
          setKeybindingKeyModifier(modifierOption);
        }
      } else if (selectedKey.Shift == true) {
        const modifierOption = ModifierKeys.find((item) => item.value == "shift");
        if (modifierOption != null) {
          setKeybindingKeyModifier(modifierOption);
        }
      } else if (selectedKey.Windows == true) {
        const modifierOption = ModifierKeys.find((item) => item.value == "windows");
        if (modifierOption != null) {
          setKeybindingKeyModifier(modifierOption);
        }
      }
    } else if (bindOption.optionKey == "keyboardFunction") {
      const item = KeyboardFunctions.find((item2) => item2.data.bindingValue == selectedKey.recordBindCodeName);
      if (item != null) {
        setKeybindingKeyboardFunction(item);
      }
    } else if (bindOption.optionKey == "mouseFunction") {
      const item = MouseFunctions.find((item2) => item2.data.bindingValue == selectedKey.recordBindCodeName);
      if (item != null) {
        setKeybindSelectedMouseFunction(item);
      }
    } else if (bindOption.optionKey == "macro") {
      setKeybindMacroSelection(selectedKey.macro_Data);
    } else if (bindOption.optionKey == "multimedia") {
      const item = MultimediaOptions.find((item2) => item2.data.bindingValue == selectedKey.recordBindCodeName);
      if (item != null) {
        setKeybindSelectedMultimediaFunction(item);
      }
    } else if (bindOption.optionKey == "shortcuts") {
      const item = ShortcutTypes.find((item2) => item2.data.bindingValue == selectedKey.recordBindCodeName);
      if (item != null) {
        setKeybindSelectedShortcutType(item);
        if (bindOption.value == 1) {
          setKeybindSelectedShortcutProgramPath(selectedKey.ApplicationPath);
        } else if (bindOption.value == 2) {
          setKeybindSelectedShortcutUrl(selectedKey.WebsitePath);
        } else if (bindOption.value == 3) {
          const windowsOption = WindowsFunctionShortcuts.find((item2) => item2.data.bindingValue == selectedKey.recordBindCodeName);
          setKeybindSelectedWindowsOption(windowsOption);
        }
      }
    } else if (bindOption.optionKey == "audioToggle")
      ;
    else if (bindOption.optionKey == "soundControl")
      ;
    else if (bindOption.optionKey == "disable") {
      setKeybindDisabledIsSelected(true);
    }
  };
  const getKeyData2 = (profile, index2) => {
    if (profile == null) {
      return;
    }
    const currentKeyArray = profile.assignedKeyboardKeys[profile.fnModeindex];
    const currentKey = currentKeyArray[index2];
    return currentKey;
  };
  reactExports.useEffect(() => {
    const profile = DeviceService.getDeviceProfile(devicesContext.previewDevice);
    setCurrentProfile(profile);
    if (devicesContext.previewDevice == null || uiContext.keybindSelectedNode == null) {
      setBindingTypes(BindingTypes_KeyPress);
      return;
    }
    if (devicesContext.previewDevice.deviceCategoryName == "Numpad") {
      if (uiContext.keybindSelectedNode.isRotary) {
        if (uiContext.keybindSelectedRotaryEncoderAction?.value == 0) {
          setBindingTypes(BindingTypes_RotaryPress);
        } else if (uiContext.keybindSelectedRotaryEncoderAction?.value == 1) {
          setBindingTypes(BindingTypes_Rotation);
        } else {
          setBindingTypes(BindingTypes_KeyPress);
        }
      } else {
        setBindingTypes(BindingTypes_KeyPress);
      }
    } else if (devicesContext.previewDevice.deviceCategoryName == "Keyboard") {
      setBindingTypes(BindingTypes_KeyPress);
    }
  }, [devicesContext.previewDevice]);
  reactExports.useEffect(() => {
    if (devicesContext.previewDevice == null || currentProfile == null) {
      return;
    }
    const deviceInputLayout = DeviceInputLayoutMap.get(devicesContext.previewDevice.SN);
    if (deviceInputLayout == null) {
      return;
    }
    if (deviceInputLayout.selectedNodePosition != null) {
      setSelectedNodePosition(deviceInputLayout.selectedNodePosition);
    }
    const nodeItems2 = [];
    const keyNodeDefinitions = deviceInputLayout.layoutNodes.filter((item) => item.isKey == true);
    for (let i2 = 0; i2 < keyNodeDefinitions.length; i2++) {
      const nodeDefinition = keyNodeDefinitions[i2];
      const keyData = getKeyData2(currentProfile, i2);
      const hasBindValue = keyData != null && keyData.recordBindCodeName != "Default";
      const isSelected = uiContext.keybindSelectedNode?.translationKey == nodeDefinition.translationKey;
      hasBindValue == true ? keyData.recordBindCodeName : nodeDefinition.translationKey;
      const position = {
        x: deviceInputLayout.nodeBaseOffset != null ? deviceInputLayout.nodeBaseOffset.x + nodeDefinition.position.x : nodeDefinition.position.x,
        y: deviceInputLayout.nodeBaseOffset != null ? deviceInputLayout.nodeBaseOffset.y + nodeDefinition.position.y : nodeDefinition.position.y
      };
      const size = {
        width: nodeDefinition.size == null ? deviceInputLayout.nodeBaseSize?.width ?? 65 : nodeDefinition.size.width,
        height: nodeDefinition.size == null ? deviceInputLayout.nodeBaseSize?.height ?? 65 : nodeDefinition.size.height
      };
      nodeItems2.push(/* @__PURE__ */ jsxRuntimeExports.jsx(
        DeviceKeybindingSelectionNodeComponent,
        {
          title: nodeDefinition.translationKey,
          x: position.x,
          y: position.y,
          width: size.width,
          height: size.height,
          onClick: () => {
            handleNodeClick(nodeDefinition, i2);
          },
          selected: isSelected,
          hasBindValue,
          onHoverStart: () => {
            setHoverNode(nodeDefinition);
          },
          onHoverEnd: () => {
            setHoverNode(null);
          }
        },
        i2
      ));
    }
    setNodeItems(nodeItems2);
  }, [devicesContext.previewDevice, currentProfile, uiContext.keybindSelectedNode]);
  const getDisplayedNodeName = (index2, fallback) => {
    const keyData = getKeyData2(currentProfile, index2);
    if (keyData == null || keyData.recordBindCodeName == "Default") {
      return translate(fallback);
    }
    return translate(keyData.recordBindCodeName);
  };
  const getNodeItemIndex = (node) => {
    if (devicesContext.previewDevice == null) {
      return;
    }
    const deviceInputLayout = DeviceInputLayoutMap.get(devicesContext.previewDevice.SN);
    if (deviceInputLayout == null) {
      return -1;
    }
    return deviceInputLayout.layoutNodes.filter((item) => item.isKey == true).findIndex((item) => item.translationKey == node.translationKey);
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      "div",
      {
        className: "selected-node",
        style: { position: "relative", top: selectedNodePosition.y, left: selectedNodePosition.x },
        children: hoverNode != null ? /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "hover", children: getDisplayedNodeName(getNodeItemIndex(hoverNode), hoverNode.translationKey) }) : uiContext.keybindSelectedNode != null ? /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "selected", children: getDisplayedNodeName(
          uiContext.keybindSelectedNodeIndex,
          uiContext.keybindSelectedNode.translationKey
        ) }) : null
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "keybinding-selection keyboard", ref: nodes, children: nodeItems })
  ] });
}
const deviceLightingSelection_component = "";
const deviceLightingSelectionNode_component = "";
function DeviceLightingSelectionNodeComponent(props) {
  const { title, currentColor, x: x2, y: y2, width, height, onClick, selected: selected2, onHoverStart, onHoverEnd } = props;
  const [style2, setStyle] = reactExports.useState({
    translate: `${x2}px ${y2}px`,
    width: `${width}px`,
    height: `${height}px`
  });
  reactExports.useEffect(() => {
    setStyle({
      translate: `${x2}px ${y2}px`,
      width: `${width}px`,
      height: `${height}px`
    });
  }, [currentColor]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
    "div",
    {
      className: "node",
      title,
      style: style2,
      onClick,
      onMouseEnter: () => {
        if (onHoverStart == null) {
          return;
        }
        onHoverStart();
      },
      onMouseLeave: () => {
        if (onHoverEnd == null) {
          return;
        }
        onHoverEnd();
      },
      "data-selected": selected2 ? title : null,
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "hover-indicator" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "selected-indicator" })
      ]
    }
  ) });
}
function DeviceLightingSelectionComponent(props) {
  const devicesContext = useDevicesContext();
  const {
    getCurrentProfile,
    addToPerKeyLayoutSelection,
    removeFromPerKeyLayoutSelection
  } = useDevicesManagementContext();
  useRecordsContext();
  const uiContext = useUIContext();
  const [hoverNode, setHoverNode] = reactExports.useState(null);
  reactExports.useRef(null);
  const nodes = reactExports.useRef(null);
  const [nodeItems, setNodeItems] = reactExports.useState(new Array());
  const handleNodeClick = (nodeDefinition) => {
    addToPerKeyLayoutSelection([nodeDefinition.keybindArrayIndex]);
  };
  reactExports.useEffect(() => {
    if (devicesContext.previewDevice == null) {
      return;
    }
    const deviceInputLayout = DeviceInputLayoutMap.get(devicesContext.previewDevice.SN);
    if (deviceInputLayout == null) {
      return;
    }
    const colorNodes = [];
    for (let i2 = 0; i2 < deviceInputLayout.layoutNodes.length; i2++) {
      const node = deviceInputLayout.layoutNodes[i2];
      if (!node.hasLight) {
        continue;
      }
      node.keybindArrayIndex = i2;
      colorNodes.push(node);
    }
    const nodeItems2 = [];
    for (let i2 = 0; i2 < colorNodes.length; i2++) {
      const nodeDefinition = colorNodes[i2];
      const position = {
        x: deviceInputLayout.nodeBaseOffset != null ? deviceInputLayout.nodeBaseOffset.x + nodeDefinition.position.x : nodeDefinition.position.x,
        y: deviceInputLayout.nodeBaseOffset != null ? deviceInputLayout.nodeBaseOffset.y + nodeDefinition.position.y : nodeDefinition.position.y
      };
      const size = {
        width: nodeDefinition.size == null ? deviceInputLayout.nodeBaseSize?.width ?? 65 : nodeDefinition.size.width,
        height: nodeDefinition.size == null ? deviceInputLayout.nodeBaseSize?.height ?? 65 : nodeDefinition.size.height
      };
      nodeItems2.push(/* @__PURE__ */ jsxRuntimeExports.jsx(
        DeviceLightingSelectionNodeComponent,
        {
          title: nodeDefinition.translationKey,
          x: position.x,
          y: position.y,
          width: size.width,
          height: size.height,
          onClick: () => {
            handleNodeClick(nodeDefinition);
          },
          selected: uiContext.perKeyLightingSelectedNode == nodeDefinition,
          onHoverStart: () => {
            setHoverNode(nodeDefinition);
          },
          onHoverEnd: () => {
            setHoverNode(null);
          }
        },
        i2
      ));
    }
    setNodeItems(nodeItems2);
  }, [devicesContext.previewDevice]);
  return devicesContext.previewDevice?.deviceCategoryName == "Keyboard" || devicesContext.previewDevice?.deviceCategoryName == "Numpad" ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "lighting-selection", ref: nodes, children: nodeItems }) }) : /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {});
}
const mouseKeybindingSelection_component = "";
function MouseKeybindingSelectionComponent(props) {
  const devicesContext = useDevicesContext();
  const { getCurrentProfile, getCurrentProfileIndex } = useDevicesManagementContext();
  const uiContext = useUIContext();
  const translate = useTranslate();
  const { setKeybindingSelectedNode } = useUIUpdateContext();
  const nodes = reactExports.useRef(null);
  const [nodeItems, setNodeItems] = reactExports.useState([]);
  const [terminationPointItems, setTerminationPointItems] = reactExports.useState([]);
  const handleNodeClick = (nodeDefinition, index2) => {
    setKeybindingSelectedNode(nodeDefinition, index2);
  };
  const getAssignmentLabelTranslationKey = (index2) => {
    const profile = getCurrentProfile();
    if (profile == null) {
      return "Unknown";
    }
    if (profile.keybinding == null) {
      console.error("Device keybinding data is undefined");
      return "Unknown";
    }
    const group = profile.keybinding[index2].group;
    profile.keybinding[index2].value;
    if (group == 1) {
      return "MacroFunction";
    } else if (group == 2) {
      const shortcutType = profile.keybinding[index2].function;
      if (shortcutType == 1) {
        const translationKey = `File: ${profile.keybinding[index2].param}`;
        return translationKey;
      } else if (shortcutType == 2) {
        const translationKey = `URL: ${profile.keybinding[index2].param}`;
        return translationKey;
      } else if (shortcutType == 3) {
        const windowsShortcutValue = profile.keybinding[index2].param;
        const translationKey = WindowsFunctionShortcuts.find(
          (item) => item.value == windowsShortcutValue
        )?.translationKey;
        return translationKey;
      }
    } else if (group == 3) {
      const translationKey = MouseFunctions.find(
        (item) => item.value == profile.keybinding[index2].function
      )?.translationKey;
      return translationKey;
    } else if (group == 4) {
      const translationKey = DPIOptions.find(
        (item) => item.value == profile.keybinding[index2].function
      )?.translationKey;
      return translationKey;
    } else if (group == 5) {
      const translationKey = MultimediaOptions.find(
        (item) => item.value == profile.keybinding[index2].function
      )?.translationKey;
      return translationKey;
    } else if (group == 6) {
      return "Disabled";
    } else if (group == 7) {
      let keyName = profile.keybinding[index2].function;
      let modifierKey = "";
      if (profile.keybinding[index2].param != "") {
        modifierKey = profile.keybinding[index2].param[0] == true ? "Shift " : profile.keybinding[index2].param[1] == true ? "Ctrl " : profile.keybinding[index2].param[2] == true ? "Alt " : profile.keybinding[index2].param[3] == true ? "Windows " : "";
      }
      return modifierKey + keyName;
    } else if (group == 8) {
      const translationKey = KeyboardFunctions.find(
        (item) => item.value == profile.keybinding[index2].function
      )?.translationKey;
      return translationKey;
    }
    return "Unknown";
  };
  reactExports.useEffect(() => {
    if (devicesContext.previewDevice == null) {
      return;
    }
    const deviceInputLayout = DeviceInputLayoutMap.get(devicesContext.previewDevice.SN);
    if (deviceInputLayout == null) {
      return;
    }
    const nodeItems2 = [];
    const terminationPointItems2 = [];
    for (let i2 = 0; i2 < deviceInputLayout.layoutNodes.length; i2++) {
      const nodeDefinition = deviceInputLayout.layoutNodes[i2];
      const baseOffset = {
        x: deviceInputLayout.nodeBaseOffset?.x ?? 0,
        y: deviceInputLayout.nodeBaseOffset?.y ?? 0
      };
      const lineItems = [];
      if (nodeDefinition.lines != null && !nodeDefinition.hideUI) {
        const lines = deviceInputLayout.layoutNodes[i2].lines;
        if (lines == null) {
          continue;
        }
        for (let j = 0; j < lines.length; j++) {
          const lineDefinition = lines[j];
          const xTranslation = nodeDefinition.lineSide == "right" ? "100%" : "0px";
          const lineTop = `${lineDefinition.y == null ? "50%" : `calc(50% + ${lineDefinition.angle != null && lineDefinition.angle > 0 ? `${lineDefinition.y}px` : `${baseOffset.y + lineDefinition.y}px`})`}`;
          console.log(lineTop);
          lineItems.push(
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "div",
              {
                className: "line",
                style: {
                  top: lineTop,
                  left: `${lineDefinition.x == null ? xTranslation : `calc(${xTranslation} + ${lineDefinition.x}px)`}`,
                  width: `${lineDefinition.length}px`,
                  "--angle": lineDefinition.angle == null ? void 0 : `${lineDefinition.angle}deg`
                }
              },
              j
            )
          );
        }
      }
      const translationKey = getAssignmentLabelTranslationKey(i2) ?? "";
      if (nodeDefinition.terminationPoint != null && !nodeDefinition.hideUI) {
        terminationPointItems2.push(
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "div",
            {
              className: "termination-point",
              "data-node-name": translationKey,
              style: {
                "--x": `${baseOffset.x + nodeDefinition.terminationPoint.x}px`,
                "--y": `${baseOffset.y + nodeDefinition.terminationPoint.y}px`
              }
            },
            i2
          )
        );
      }
      if (!nodeDefinition.hideUI) {
        let translation = translate(translationKey, translationKey) ?? "";
        if (translation.length > 13)
          translation = translation.substring(0, 13) + "...";
        nodeItems2.push(
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            DeviceKeybindingSelectionNodeComponent,
            {
              title: translationKey,
              x: baseOffset.x + nodeDefinition.position.x,
              y: baseOffset.y + nodeDefinition.position.y,
              width: nodeDefinition.size?.width,
              height: nodeDefinition.size?.height,
              onClick: () => {
                handleNodeClick(nodeDefinition, i2);
              },
              selected: uiContext.keybindSelectedNode?.translationKey == nodeDefinition.translationKey,
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "name", children: translation }),
                lineItems
              ]
            },
            i2
          )
        );
      }
    }
    setNodeItems(nodeItems2);
    setTerminationPointItems(terminationPointItems2);
  }, [devicesContext.previewDevice, uiContext.keybindSelectedNode]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "nodes", ref: nodes, children: nodeItems }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "termination-points", children: terminationPointItems })
  ] });
}
function DeviceBreadcrumbsComponent(props) {
  const { subpage } = useParams();
  const uiContext = useUIContext();
  const { update: update2 } = useUIUpdateContext();
  const devicesContext = useDevicesContext();
  const { getCurrentProfile, getCurrentLegacyLayerIndex } = useDevicesManagementContext();
  const translate = useTranslate();
  const showLegacyCrumb = false;
  const legacyLayerBreadcrumb = devicesContext.previewDevice != null && devicesContext.previewDevice.ModelType == 2 && showLegacyCrumb ? /* @__PURE__ */ jsxRuntimeExports.jsxs("a", { className: "disabled", children: [
    translate("Device_Breadcrumb_Label_LegacyLayer", "Layer"),
    " ",
    (getCurrentLegacyLayerIndex() ?? 0) + 1
  ] }) : null;
  const hasLightingBreadcrumbs = subpage == "lighting" && uiContext.lightSettingMode != "none";
  const hasKeybindingBreadcrumbs = subpage == "keybinding" && uiContext.keybindSelectedBindingType != null && uiContext.keybindSelectedBindingType.optionKey != "none";
  const hasAdvancedKeysBreadcrumbs = subpage == "advanced-keys" && uiContext.valueCState.advancedKeysBindingMode != AdvancedKeyMode.None;
  const homeBreadcrumb = hasLightingBreadcrumbs ? /* @__PURE__ */ jsxRuntimeExports.jsx(
    "a",
    {
      onClick: () => {
        uiContext.lightSettingMode = "none";
        update2(uiContext);
      },
      children: translate("Device_Breadcrumb_Label_LightingHome", "Lighting Home")
    }
  ) : hasKeybindingBreadcrumbs ? /* @__PURE__ */ jsxRuntimeExports.jsx(
    "a",
    {
      onClick: () => {
        uiContext.keybindSelectedBindingType = BindingTypes_ButtonPress[0];
        update2(uiContext);
      },
      children: translate("Device_Breadcrumb_Label_KeybindingHome", "Keybinding Home")
    }
  ) : hasAdvancedKeysBreadcrumbs ? /* @__PURE__ */ jsxRuntimeExports.jsx(
    "a",
    {
      onClick: () => {
        uiContext.valueCState.advancedKeysBindingMode = AdvancedKeyMode.None;
        uiContext.valueCState.advancedKeysSelectedKeyTmp = null;
        update2(uiContext);
      },
      children: translate("Device_Breadcrumb_Label_AdvancedKeysHome", "Advanced Keys Home")
    }
  ) : null;
  const layerBreadcrumb = devicesContext.previewDevice?.SN == "0x093A0x821A" || devicesContext.previewDevice?.SN == "0x320F0x831A" ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}) : null;
  const processBreadcrumbs = subpage == "keybinding" && uiContext.keybindSelectedBindingType?.optionKey == "shortcuts" && uiContext.keybindSelectedShortcutType != null && uiContext.keybindSelectedShortcutType?.optionKey != "none" ? /* @__PURE__ */ jsxRuntimeExports.jsx(
    "a",
    {
      onClick: () => {
        uiContext.keybindSelectedShortcutType = ShortcutTypes[0];
        uiContext.keybindSelectedShortcutWindowsOption = WindowsFunctionShortcuts[0];
        update2(uiContext);
      },
      children: translate("Device_Breadcrumb_Label_Shortcuts", "Shortcuts")
    }
  ) : null;
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "breadcrumbs", children: [
    legacyLayerBreadcrumb,
    legacyLayerBreadcrumb != null && homeBreadcrumb != null ? ">" : null,
    homeBreadcrumb,
    homeBreadcrumb != null && layerBreadcrumb != null ? ">" : null,
    layerBreadcrumb,
    homeBreadcrumb != null && processBreadcrumbs != null ? ">" : null,
    processBreadcrumbs
  ] });
}
const actuationManagement_page = "";
function ActuationManagementPage(props) {
  const translate = useTranslate();
  const { valueCState } = useUIContext();
  const { setvalueCState, setvalueCVisualizationState } = useDevicesManagementContext();
  const toggleActuationPerKey = () => {
    valueCState.isActuationPerKey = !valueCState.isActuationPerKey;
    setvalueCState(valueCState);
  };
  const setActuationPressValue = (value2) => {
    if (valueCState.isActuationPerKey) {
      valueCState.actuationTmpPress = value2;
    } else {
      valueCState.actuationGlobalPress = value2;
    }
    setvalueCState(valueCState);
  };
  const getActuationPressValue = () => {
    return valueCState.isActuationPerKey ? valueCState.actuationTmpPress : valueCState.actuationGlobalPress;
  };
  const getActuationUIValue = (value2) => {
    return (value2 * 0.01 * 3.8 + 0.2).toFixed(1);
  };
  const setRapidTriggerEnabled = (value2) => {
    valueCState.isRapidTriggerEnabled = value2;
    setvalueCState(valueCState);
  };
  const toggleRapidTriggerPerKey = () => {
    valueCState.isRapidTriggerPerKey = !valueCState.isRapidTriggerPerKey;
    setvalueCState(valueCState);
  };
  const setRapidTriggerPressValue = (value2) => {
    if (valueCState.isRapidTriggerPerKey) {
      valueCState.rapidTriggerTmpPress = value2;
    } else {
      valueCState.rapidTriggerGlobalPress = value2;
    }
    setvalueCState(valueCState);
  };
  const getRapidTriggerPressValue = () => {
    return valueCState.isRapidTriggerPerKey ? valueCState.rapidTriggerTmpPress : valueCState.rapidTriggerGlobalPress;
  };
  const setRapidTriggerReleaseValue = (value2) => {
    if (valueCState.isRapidTriggerPerKey) {
      valueCState.rapidTriggerTmpRelease = value2;
    } else {
      valueCState.rapidTriggerGlobalRelease = value2;
    }
    setvalueCState(valueCState);
  };
  const getRapidTriggerReleaseValue = () => {
    return valueCState.isRapidTriggerPerKey ? valueCState.rapidTriggerTmpRelease : valueCState.rapidTriggerGlobalRelease;
  };
  const getRapidTriggerUIValue = (value2) => {
    return (value2 * 0.01 * 2.3 + 0.2).toFixed(1);
  };
  const columnStyle = reactExports.useMemo(() => {
    if (valueCState.isRapidTriggerPerKey || valueCState.isActuationPerKey) {
      return { ["gridTemplateColumns"]: "1fr 270px 240px" };
    }
    return { ["gridTemplateColumns"]: "1fr 270px" };
  }, [valueCState.isRapidTriggerPerKey, valueCState.isActuationPerKey]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "layout actuation keyboard", style: columnStyle, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel main", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "column", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "field", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "label label-with-action", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text", children: translate(
            "Device_Actuation_Label_CustomActuationPoint_Header",
            "Custom Actuation Point"
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(TooltipComponent, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: translate(
              "Device_Actuation_Label_CustomActuationPoint_Header",
              "Custom Actuation Point"
            ) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "message", children: translate(
              "Device_Actuation_Label_CustomActuationPoint_Description2",
              "Selecting the button below will allow you to edit the actuation point on a per key basis."
            ) })
          ] })
        ] }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: translate(
          "Device_Actuation_Label_CustomActuationPoint_Description1",
          "Use the slider to set the point where any keypress will activate."
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: translate(
          "Device_Actuation_Label_CustomActuationPoint_Description2",
          "Selecting the button below will allow you to edit the actuation point on a per key basis."
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "field visualisation-toggle", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            ToggleComponent,
            {
              value: valueCState.isVisualisationEnabled,
              onChange: (value2) => setvalueCVisualizationState(value2)
            }
          ),
          " ",
          translate("Device_Actuation_Label_ShowVisualization", "Show Visualization")
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("button", { type: "button", className: "hollow", onClick: () => toggleActuationPerKey(), children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: valueCState.isActuationPerKey ? "Revert to Global" : translate("Button_Actuation_PerKey", "Per Key") }) })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "column slider-column", children: !valueCState.isVisualisationEnabled ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "key-press-slider", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        RangeComponent,
        {
          value: getActuationPressValue(),
          className: "gauge",
          onChange: (value2) => setActuationPressValue(value2),
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "gauge-tooltip", children: [
            getActuationUIValue(getActuationPressValue()),
            " mm"
          ] })
        }
      ) }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "key-press-slider", children: /* @__PURE__ */ jsxRuntimeExports.jsx(RangeComponent, { value: valueCState.visualisationDisplayValue, className: "gauge", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "gauge-tooltip", children: [
        valueCState.visualisationDisplayValue / 100 * (0.2 + 3.8),
        " ",
        "mm"
      ] }) }) }) })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel second", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "column", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "field title", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "label label-with-action", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text", children: translate("Device_Actuation_Label_RapidTrigger_Title", "Rapid Trigger") }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(TooltipComponent, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: translate("Device_Actuation_Label_RapidTrigger_Title", "Rapid Trigger") }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "message", children: translate(
              "Device_Actuation_Label_RapidTrigger_Description",
              "Use the slider to set the point where any keypress will activate."
            ) })
          ] })
        ] }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "field rapid-toggle", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          ToggleComponent,
          {
            value: valueCState.isRapidTriggerEnabled,
            onChange: (value2) => setRapidTriggerEnabled(value2)
          }
        ) }),
        !valueCState.isRapidTriggerEnabled ? /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: translate(
          "Device_Actuation_Label_RapidTrigger_Description",
          "Use the slider to set the point where any keypress will activate."
        ) }) : /* @__PURE__ */ jsxRuntimeExports.jsx("button", { type: "button", className: "hollow", onClick: () => toggleRapidTriggerPerKey(), children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: valueCState.isRapidTriggerPerKey ? "Revert to Global" : translate("Button_Actuation_PerKey", "Per Key") }) })
      ] }),
      valueCState.isRapidTriggerEnabled && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "column rapid-trigger-value", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "key-press-slider", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            RangeComponent,
            {
              value: getRapidTriggerPressValue(),
              className: "gauge",
              onChange: (value2) => setRapidTriggerPressValue(value2),
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "gauge-tooltip", children: [
                getRapidTriggerUIValue(getRapidTriggerPressValue()),
                " mm"
              ] })
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "label", children: "Press" })
        ] }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "column rapid-trigger-value", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "key-press-slider", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            RangeComponent,
            {
              value: getRapidTriggerReleaseValue(),
              className: "gauge",
              onChange: (value2) => setRapidTriggerReleaseValue(value2),
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "gauge-tooltip", children: [
                getRapidTriggerUIValue(getRapidTriggerReleaseValue()),
                " mm"
              ] })
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "label", children: "Release" })
        ] }) })
      ] })
    ] }),
    (valueCState.isRapidTriggerPerKey || valueCState.isActuationPerKey) && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "panel third", children: /* @__PURE__ */ jsxRuntimeExports.jsx("ul", { children: valueCState.actuationSelectedNodes?.layers?.map((layer) => /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { children: [
      "++",
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: layer.nodes.map((keys) => keys.nodeDefinition.translationKey).join(", ") }),
      valueCState.isActuationPerKey && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
        getActuationUIValue(layer.actuationPress),
        " mm"
      ] }),
      valueCState.isRapidTriggerPerKey && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
        getRapidTriggerUIValue(layer.rapidTriggerPress),
        " mm"
      ] })
    ] })) }) })
  ] }) });
}
const advancedKeysManagement_page = "";
const getDynamicKeysApplied = (previewDevice) => {
  if (!previewDevice) {
    return null;
  }
  const profileIndex = previewDevice.keyboardData.profileindex;
  const profileLayerIndex = previewDevice.keyboardData.profileLayerIndex[profileIndex];
  const keyboardArray = previewDevice.keyboardData.profileLayers[profileIndex][profileLayerIndex].assignedKeyboardKeys[0];
  return keyboardArray.filter((key) => !!key.valueCKeyData);
};
const getDynamicKeysDetailsWithIcons = (previewDevice) => {
  return getDynamicKeysApplied(previewDevice)?.map(({ defaultValue, valueCKeyData }) => {
    const { DynamicKeystrokeData: DynamicKeystrokeData2, ModTapData: ModTapData2, ToggleData: ToggleData2 } = valueCKeyData;
    let bindingTypeIconSrc;
    let bindings;
    if (DynamicKeystrokeData2) {
      bindingTypeIconSrc = iconSrc(ICONS$1.dynamicKeystroke);
      bindings = DynamicKeystrokeData2.map(({ assignedKey }) => assignedKey).join(", ");
    } else if (ModTapData2) {
      bindingTypeIconSrc = iconSrc(ICONS$1.modTap);
      bindings = ModTapData2.tapAction;
    } else if (ToggleData2) {
      bindingTypeIconSrc = iconSrc(ICONS$1.toggleKey);
      bindings = ToggleData2.toggleAction;
    }
    return {
      keyName: defaultValue,
      bindingTypeIconSrc,
      bindings
    };
  }) ?? [];
};
const getBindingModeIcon = (advancedKeyMode) => {
  switch (advancedKeyMode) {
    case AdvancedKeyMode.ModTap:
      return iconSrc(ICONS$1.modTap);
    case AdvancedKeyMode.Toggle:
      return iconSrc(ICONS$1.toggleKey);
    case AdvancedKeyMode.DynamicKeystroke:
      return iconSrc(ICONS$1.dynamicKeystroke);
    default:
      return null;
  }
};
const gaugeValueToFixedNumber = (value2) => {
  if (value2 == null)
    return 0;
  return (value2 * 0.01 * 4).toFixed(1);
};
const cleanupKeyName = (keyName) => {
  if (!keyName)
    return "";
  return keyName.replace("Key", "")?.replace("Digit", "");
};
const triggerPointTooltip_component = "";
function TriggerPointTooltip({
  selectedKey,
  value: value2,
  isContinuous,
  onKeySelect,
  onRemove,
  onContinuationChange
}) {
  const [hasFocus, setHasFocus] = reactExports.useState(false);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `trigger-point-tooltip ${hasFocus ? "has-focus" : ""}`, children: [
    selectedKey && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "trigger-point-actions-selected", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "swith-keystroke", onClick: onContinuationChange, children: /* @__PURE__ */ jsxRuntimeExports.jsx(SVGIconComponent, { src: iconSrc(isContinuous ? ICONS$1.keystrokeContinuous : ICONS$1.keystrokeSignle) }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "delete-action", onClick: onRemove, children: /* @__PURE__ */ jsxRuntimeExports.jsx(SVGIconComponent, { src: iconSrc(ICONS$1.delete) }) })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "trigger-point-main-menu", onClick: onKeySelect, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "chosen-key-action", children: cleanupKeyName(selectedKey) || "+" }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "trigger-point-value", children: [
        gaugeValueToFixedNumber(value2),
        " mm"
      ] })
    ] })
  ] });
}
const ruler = "";
function Ruler({ className }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("ol", { className: `ruler ${className}`, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("li", { "data-mm": "0.0mm" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("li", {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx("li", {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx("li", {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx("li", {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx("li", {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx("li", {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx("li", {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx("li", {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx("li", {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx("li", {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx("li", {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx("li", {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx("li", {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx("li", {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx("li", {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx("li", {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx("li", {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx("li", {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx("li", {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx("li", { "data-mm": "4.0mm" })
  ] });
}
const SECOND_TRIGGER_POINT = 3.5 / 4 * 100;
function AdvancedKeysManagementPage() {
  const [selectedTriggerValue, setSelectedTriggerValueP] = reactExports.useState(0);
  const uiContext = useUIContext();
  const { update: update2, setvalueCState, setPreviewDevicePropertiesAsUnsaved } = useUIUpdateContext();
  const { valueCState } = useUIContext();
  const { savePreviewDevice, setvalueCAdvancedKeys } = useDevicesManagementContext();
  const { previewDevice } = useDevicesContext();
  const translate = useTranslate();
  const valueCKeys = getDynamicKeysDetailsWithIcons(previewDevice);
  const openSelector = () => {
    valueCState.advancedKeysShowSelector = true;
    update2(uiContext);
  };
  const setSelectedTriggerValue = (value2) => {
    if (value2 <= SECOND_TRIGGER_POINT - 0.2) {
      setSelectedTriggerValueP(value2);
    }
  };
  const setDynamicKeyStroke = (triggerPoint) => {
    valueCState.advancedKeysShowSelector = true;
    valueCState.advancedKeysSelectedTriggerPoint = triggerPoint;
    setvalueCAdvancedKeys(valueCState);
  };
  const getSelectedKeys = () => {
    switch (valueCState.advancedKeysBindingMode) {
      case AdvancedKeyMode.DynamicKeystroke:
        return valueCState.advancedKeysAssignedTmp?.dynamicKeystrokes?.keys;
      case AdvancedKeyMode.ModTap:
        return valueCState.advancedKeysAssignedTmp?.modTapPress;
      case AdvancedKeyMode.Toggle:
        return valueCState.advancedKeysAssignedTmp?.toggle;
    }
    return null;
  };
  reactExports.useEffect(() => {
    const dynamicKeystrokes = valueCState.advancedKeysAssignedTmp?.dynamicKeystrokes;
    if (dynamicKeystrokes != null && dynamicKeystrokes.firstTriggerPointValue != selectedTriggerValue) {
      dynamicKeystrokes.firstTriggerPointValue = selectedTriggerValue;
      setvalueCAdvancedKeys(valueCState);
    }
  }, [selectedTriggerValue]);
  reactExports.useEffect(() => {
    if (valueCState.advancedKeysBindingMode === AdvancedKeyMode.None) {
      setSelectedTriggerValueP(0);
    }
  }, [valueCState.advancedKeysBindingMode]);
  const removeDynamicKeyStroke = (triggerPoint) => {
    const dynamicKeystrokes = valueCState.advancedKeysAssignedTmp?.dynamicKeystrokes;
    if (dynamicKeystrokes != null && dynamicKeystrokes.keys[triggerPoint] != null) {
      delete dynamicKeystrokes.keys[triggerPoint];
      setvalueCAdvancedKeys(valueCState);
    }
  };
  const switchKeystrokeContinuation = (triggerPoint) => {
    const dynamicKeystrokes = valueCState.advancedKeysAssignedTmp?.dynamicKeystrokes;
    if (dynamicKeystrokes != null && dynamicKeystrokes.keys[triggerPoint] != null) {
      dynamicKeystrokes.keys[triggerPoint].isContinuous = !dynamicKeystrokes.keys[triggerPoint].isContinuous;
      setvalueCAdvancedKeys(valueCState);
    }
  };
  const editBinding = (keyName) => {
  };
  const removeBinding = (keyName) => {
    const binding = getDynamicKeysApplied(previewDevice).find(({ defaultValue }) => defaultValue === keyName);
    binding.changed = true;
    binding.valueCKeyData = null;
    setPreviewDevicePropertiesAsUnsaved("keybind-valueC-state");
    savePreviewDevice();
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "layout advanced-keys keyboard", children: [
    valueCState.advancedKeysBindingMode == AdvancedKeyMode.None && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "advanced-keybindings panel main", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { children: translate("Device_AdvancedKeys_Label_AdvancedKeys", "Advanced Keys") }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: translate(
          "Device_AdvancedKey_Description_Label",
          "Select a key, and then choose the type of advanced keybinding you'd like to add"
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { children: translate("Device_AdvancedKeys_Label_TestBinding", "Test Binding") }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "test-binding-container" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "your-bindings panel main", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { children: translate("Device_AdvancedKey_YourBindings_Label", "Your Bindings") }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "list", children: valueCKeys.map((binding) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "binding-row", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "binding-row-details", onClick: () => editBinding(binding.keyName), children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "binding-key", children: binding.keyName }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(SVGIconComponent, { src: binding.bindingTypeIconSrc }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: binding.bindings })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "remove-binding", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            SVGIconComponent,
            {
              src: iconSrc(ICONS$1.delete),
              selected: iconSrc(ICONS$1.deleteHover),
              onClick: () => removeBinding(binding.keyName)
            }
          ) })
        ] }, binding.keyName)) })
      ] })
    ] }),
    valueCState.advancedKeysBindingMode === AdvancedKeyMode.DynamicKeystroke && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel main", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "key-binding-mode-label", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "orange-box" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { children: translate("Device_AdvancedKeys_Label_DynamicKeystroke_Header", "Dynamic Keystroke") }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(TooltipComponent, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: translate(
              "Device_AdvancedKeys_Label_DynamicKeystroke_Header",
              "Dynamic Keystroke"
            ) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "message", children: translate(
              "Device_AdvancedKey_Description_Label",
              "Select a key, and then choose the type of advanced keybinding you'd like to add"
            ) })
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: translate(
          "Device_AdvancedKey_Description_Label",
          "Select a key, and then choose the type of advanced keybinding you'd like to add"
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { children: translate("Device_AdvancedKeys_Label_TestBinding", "Test Binding") }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "test-binding-container" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel key-press", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "key-mark", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: translate("Device_AdvancedKeys_Label_DynamicKeystroke_Header", "Key Press") }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "key-mark-box key-mark-press", children: /* @__PURE__ */ jsxRuntimeExports.jsx(SVGIconComponent, { src: iconSrc(ICONS$1.rightArrow) }) })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Ruler, { className: "right" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "key-press-slider stage-one", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          RangeComponent,
          {
            value: selectedTriggerValue,
            onChange: (value2) => setSelectedTriggerValue(value2),
            className: "gauge",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              TriggerPointTooltip,
              {
                selectedKey: getSelectedKeys()?.[TriggerPoint.StageOnePress]?.node.translationKey,
                value: selectedTriggerValue,
                isContinuous: getSelectedKeys()?.[TriggerPoint.StageOnePress]?.isContinuous,
                onKeySelect: () => setDynamicKeyStroke(TriggerPoint.StageOnePress),
                onRemove: () => removeDynamicKeyStroke(TriggerPoint.StageOnePress),
                onContinuationChange: () => switchKeystrokeContinuation(TriggerPoint.StageOnePress)
              }
            )
          }
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "key-press-slider", children: /* @__PURE__ */ jsxRuntimeExports.jsx(RangeComponent, { value: SECOND_TRIGGER_POINT, className: "gauge", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          TriggerPointTooltip,
          {
            onKeySelect: () => setDynamicKeyStroke(TriggerPoint.StageTwoPress),
            selectedKey: valueCState.advancedKeysAssignedTmp?.dynamicKeystrokes?.keys?.[TriggerPoint.StageTwoPress]?.node.translationKey,
            onRemove: () => removeDynamicKeyStroke(TriggerPoint.StageTwoPress),
            onContinuationChange: () => switchKeystrokeContinuation(TriggerPoint.StageTwoPress),
            value: SECOND_TRIGGER_POINT,
            isContinuous: getSelectedKeys()?.[TriggerPoint.StageTwoPress]?.isContinuous
          }
        ) }) })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "panel third", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "column slider-column", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "key-press-slider", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        RangeComponent,
        {
          value: selectedTriggerValue,
          onChange: (value2) => setSelectedTriggerValue(value2),
          className: "gauge"
        }
      ) }) }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel key-release", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "key-mark", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "key-mark-box key-mark-release", children: /* @__PURE__ */ jsxRuntimeExports.jsx(SVGIconComponent, { src: iconSrc(ICONS$1.rightArrow) }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: translate("Device_AdvancedKeys_Label_DynamicKeystroke_Header", "Key Release") })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "key-release-slider stage-one", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          RangeComponent,
          {
            value: selectedTriggerValue,
            onChange: (value2) => setSelectedTriggerValue(value2),
            className: "gauge",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              TriggerPointTooltip,
              {
                selectedKey: getSelectedKeys()?.[TriggerPoint.StageOneRelease]?.node.translationKey,
                value: selectedTriggerValue,
                isContinuous: getSelectedKeys()?.[TriggerPoint.StageOneRelease]?.isContinuous,
                onRemove: () => removeDynamicKeyStroke(TriggerPoint.StageOneRelease),
                onKeySelect: () => setDynamicKeyStroke(TriggerPoint.StageOneRelease),
                onContinuationChange: () => switchKeystrokeContinuation(TriggerPoint.StageOneRelease)
              }
            )
          }
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "key-release-slider", children: /* @__PURE__ */ jsxRuntimeExports.jsx(RangeComponent, { value: SECOND_TRIGGER_POINT, className: "gauge", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          TriggerPointTooltip,
          {
            selectedKey: valueCState.advancedKeysAssignedTmp?.dynamicKeystrokes?.keys?.[TriggerPoint.StageTwoRelease]?.node.translationKey,
            value: SECOND_TRIGGER_POINT,
            isContinuous: getSelectedKeys()?.[TriggerPoint.StageTwoRelease]?.isContinuous,
            onKeySelect: () => setDynamicKeyStroke(TriggerPoint.StageTwoRelease),
            onRemove: () => removeDynamicKeyStroke(TriggerPoint.StageTwoRelease),
            onContinuationChange: () => switchKeystrokeContinuation(TriggerPoint.StageTwoRelease)
          }
        ) }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Ruler, { className: "left" })
      ] })
    ] }),
    valueCState.advancedKeysBindingMode === AdvancedKeyMode.ModTap && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel main", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "key-binding-mode-label", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "orange-box" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { children: translate("Device_AdvancedKeys_Label_ModTap_Header", "Mod Tap") }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(TooltipComponent, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: translate(
              "Device_AdvancedKeys_Label_ModTap_Header",
              "Mod Tap"
            ) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "message", children: translate(
              "Device_AdvancedKey_Label_ModTap_Description",
              "2 different actions on a single key based on press behaviour. Hold the key down for the first action or tap the key for the second action."
            ) })
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: translate(
          "Device_AdvancedKey_Label_ModTap_Description",
          "2 different actions on a single key based on press behaviour. Hold the key down for the first action or tap the key for the second action."
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { children: translate("Device_AdvancedKeys_Label_TestBinding", "Test Binding") }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "test-binding-container" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel second character-selection", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "column", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { children: translate(
              "Device_AdvancedKeys_Label_CharacterSelection_Header",
              "Character Selection"
            ) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: translate(
              "Device_AdvancedKey_Label_ModTap_Description",
              "To assign you desired characters, you can first select the Hold/Tap fields and use your keyboard to input any key. You can also use the character selector module below."
            ) })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("button", { className: "secondary", onClick: openSelector, children: "Selector" })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "column", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { children: "Hold" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "keyname", children: cleanupKeyName(valueCState.advancedKeysSelectedKeyTmp?.translationKey) })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { children: "Tap" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "keyname", children: cleanupKeyName(
              valueCState.advancedKeysAssignedTmp?.modTapPress?.translationKey
            ) })
          ] })
        ] })
      ] })
    ] }),
    valueCState.advancedKeysBindingMode === AdvancedKeyMode.Toggle && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel main", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "key-binding-mode-label", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "orange-box" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { children: translate("Device_AdvancedKeys_Label_TogleKey_Header", "Toggle Key") }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(TooltipComponent, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: translate(
              "Device_AdvancedKeys_Label_TogleKey_Header",
              "Toggle Key"
            ) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "message", children: translate(
              "Device_AdvancedKey_Description_Label",
              "Select a key, and then choose the type of advanced keybinding you'd like to add"
            ) })
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: translate(
          "Device_AdvancedKey_Description_Label",
          "Select a key, and then choose the type of advanced keybinding you'd like to add"
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { children: translate("Device_AdvancedKeys_Label_TestBinding", "Test Binding") }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "test-binding-container" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel second character-selection", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "column", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { children: translate(
              "Device_AdvancedKeys_Label_CharacterSelection_Header",
              "Character Selection"
            ) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: translate(
              "Device_AdvancedKey_Label_ToggleKey_Description",
              "To assign you desired characters, you can first select the Hold/Tap fields and use your keyboard to input any key. You can also use the character selector module below."
            ) })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("button", { className: "secondary", onClick: openSelector, children: "Selector" })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "column", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { children: "Toggle" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "keyname", children: cleanupKeyName(valueCState.advancedKeysAssignedTmp?.toggle?.translationKey) })
        ] }) })
      ] })
    ] })
  ] }) });
}
const mouseHomeDash = "";
const version = "_version_1ep4d_27";
const update = "_update_1ep4d_39";
const updating = "_updating_1ep4d_81";
const rotate = "_rotate_1ep4d_1";
const styles$2 = {
  "firmware-pill": "_firmware-pill_1ep4d_1",
  version,
  update,
  "has-update": "_has-update_1ep4d_69",
  updating,
  rotate
};
var FirmwareUpdateStatus = /* @__PURE__ */ ((FirmwareUpdateStatus2) => {
  FirmwareUpdateStatus2[FirmwareUpdateStatus2["UpToDate"] = 0] = "UpToDate";
  FirmwareUpdateStatus2[FirmwareUpdateStatus2["HasUpdate"] = 1] = "HasUpdate";
  FirmwareUpdateStatus2[FirmwareUpdateStatus2["Updating"] = 2] = "Updating";
  FirmwareUpdateStatus2[FirmwareUpdateStatus2["UpdateFailed"] = 3] = "UpdateFailed";
  return FirmwareUpdateStatus2;
})(FirmwareUpdateStatus || {});
const FirmwarePill = ({
  iconColor = Color.Base50,
  size = IconSize.Small,
  version: version2 = "0.0.0.0",
  updateStatus = 0,
  updateOnClick
}) => {
  const translate = useTranslate();
  let iconType = IconType.SuccessCheck;
  let updateStatusText = translate("Device_Home_Label_UpToDate", "Up to Date");
  iconColor = Color.GreenDark60;
  if (updateStatus == 1) {
    updateStatusText = translate("Device_Home_Label_UpdateAvailable", "Update Available");
    iconType = IconType.ExclamationPoint;
    iconColor = Color.Glorange60;
  } else if (updateStatus == 2) {
    updateStatusText = translate("Device_Home_Label_Updating", "Updating...");
    iconType = IconType.CircleArrow;
    iconColor = Color.Glorange60;
  } else if (updateStatus == 3) {
    updateStatusText = translate("Device_Home_Label_UpdateFailed", "Update Failed");
    iconType = IconType.FailCross;
    iconColor = Color.RedDark60;
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$2["firmware-pill"], children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: styles$2["version"], children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "title", children: translate("Device_Home_Label_Firmware", "Firmware") }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "value", children: version2 })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "button",
      {
        className: `${styles$2["update"]}${updateStatus == 1 ? ` ${styles$2["has-update"]}` : ""}`,
        onClick: (event) => {
          if (updateOnClick != null) {
            updateOnClick(event);
          }
        },
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "status", children: updateStatusText }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { className: updateStatus == 2 ? `${styles$2["updating"]}` : void 0, size, type: iconType, color: iconColor })
        ]
      }
    )
  ] });
};
const styles$1 = {
  "wireless-connection-pill": "_wireless-connection-pill_dcff0_1"
};
var WirelessConnectionStrength = /* @__PURE__ */ ((WirelessConnectionStrength2) => {
  WirelessConnectionStrength2[WirelessConnectionStrength2["Disconnected"] = 0] = "Disconnected";
  WirelessConnectionStrength2[WirelessConnectionStrength2["Weak"] = 1] = "Weak";
  WirelessConnectionStrength2[WirelessConnectionStrength2["Medium"] = 2] = "Medium";
  WirelessConnectionStrength2[WirelessConnectionStrength2["Strong"] = 3] = "Strong";
  return WirelessConnectionStrength2;
})(WirelessConnectionStrength || {});
const WirelessConnectionPill = ({
  iconColor = Color.Base50,
  size = IconSize.Small,
  connectionStrength = 0
  /* Disconnected */
}) => {
  const translate = useTranslate();
  let iconType = IconType.WirelessConnectionDisconnected;
  let statusKey = "Device_Home_Dash_Label_ConnectionLost";
  if (connectionStrength == 1) {
    iconType = IconType.WirelessConnectionWeak;
    statusKey = "Device_Home_Dash_Label_ConnectionUnstable";
  } else if (connectionStrength == 2) {
    iconType = IconType.WirelessConnectionMedium;
    statusKey = "Device_Home_Dash_Label_Connected";
  } else if (connectionStrength == 3) {
    iconType = IconType.WirelessConnectionStrong;
    statusKey = "Device_Home_Dash_Label_Connected";
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$1["wireless-connection-pill"], children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "status", children: translate(statusKey, "Connected") }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { size: IconSize.Small, type: iconType, color: iconColor })
  ] });
};
const deviceColorsSwatch = "";
const selected = "_selected_9vo3l_39";
const color = "_color_9vo3l_1";
const value = "_value_9vo3l_91";
const styles = {
  "color-pill": "_color-pill_9vo3l_1",
  selected,
  "color-pill-default": "_color-pill-default_9vo3l_49",
  color,
  "border-color": "_border-color_9vo3l_79",
  value
};
const ColorPill = ({
  color: color2 = Color.FriendlyYellow,
  size = 16,
  padding = 7,
  title = void 0,
  useHoverEffect = true,
  isSelected = false,
  onClick
}) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    "div",
    {
      className: `${styles["color-pill"]}${isSelected == true ? ` ${styles["selected"]}` : ""}`,
      title,
      style: {
        "--padding": typeof padding == "number" ? `${padding}px` : `${padding.y}px ${padding.x}px`,
        "--hover-border-color": useHoverEffect == true ? `var(${Color.Glorange60})` : `var(${Color.Base50})`,
        "--hover-text-color": useHoverEffect == true ? `var(${Color.Glorange60})` : `var(${Color.Base20})`,
        "--hover-cursor": useHoverEffect == true ? `pointer` : `default`
      },
      onClick: () => {
        if (onClick != null) {
          onClick();
        }
      },
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "span",
          {
            className: `${styles["color"]}`,
            style: {
              "--color": color2,
              "--size": `${size}px`
            }
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: styles["value"], children: color2 })
      ]
    }
  );
};
function DeviceColorsSwatch(props) {
  const { deviceColorArray } = props;
  const { setSelectedColorIndex } = useUIUpdateContext();
  const { selectedColorIndex, lightSettingMode } = useUIContext();
  useDevicesContext();
  reactExports.useEffect(() => {
    if ((deviceColorArray?.length ?? 0) < selectedColorIndex)
      setSelectedColorIndex(0);
  }, [deviceColorArray?.length]);
  if (!Array.isArray(deviceColorArray) || deviceColorArray.length == 0) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {});
  }
  const colorToHex = (color2) => {
    return RGBAColor.fromRGB(color2.R, color2.G, color2.B).toHex();
  };
  let colorMap = /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {});
  if (deviceColorArray[0]["R"] != void 0) {
    colorMap = deviceColorArray.map((color2, index2) => {
      return (
        // <ColorPill key={index} color={colorToHex(color)} useHoverEffect={!presetEffectHasFixedColors} padding={{x: 7, y: 3} } isSelected={(lightSettingMode != 'per-key' && presetEffectHasFixedColors == false && index == selectedColorIndex)} onClick={() =>
        /* @__PURE__ */ jsxRuntimeExports.jsx(ColorPill, { color: colorToHex(color2), useHoverEffect: false, padding: { x: 7, y: 3 } }, index2)
      );
    });
  } else {
    colorMap = deviceColorArray.map((color2, index2) => {
      return (
        // <ColorPill key={index} color={color} useHoverEffect={!presetEffectHasFixedColors} padding={{x: 7, y: 3} } isSelected={(lightSettingMode != 'per-key' && presetEffectHasFixedColors == false && index == selectedColorIndex)} onClick={() =>
        /* @__PURE__ */ jsxRuntimeExports.jsx(ColorPill, { color: color2, useHoverEffect: false, padding: { x: 7, y: 3 } }, index2)
      );
    });
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "device-colors", children: colorMap }) });
}
const DisplayDeviceColorsIndexes$1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
function MouseHomeDash() {
  const { subpage } = useParams();
  const { previewDevice } = useDevicesContext();
  const { unsavedPropertyNames } = useUIContext();
  const translate = useTranslate();
  const { openDeviceUpdateModal } = useUIUpdateContext();
  const { getCurrentProfile } = useDevicesManagementContext();
  const currentActiveProfile = reactExports.useMemo(() => {
    return previewDevice?.deviceData?.profile.find(
      (profile) => profile.profileName === getCurrentProfile()?.profileName
    );
  }, [previewDevice]);
  const [defaultDPIStage, setDefaultDpiStage] = reactExports.useState(null);
  const [firmwareStatus, setFirmwareStatus] = reactExports.useState(FirmwareUpdateStatus.UpToDate);
  reactExports.useEffect(() => {
    if (getCurrentProfile()?.performance?.DpiStage == null || getCurrentProfile()?.performance?.dpiSelectIndex == null) {
      return;
    }
    setDefaultDpiStage(getCurrentProfile().performance.DpiStage[getCurrentProfile().performance.dpiSelectIndex]);
  }, [getCurrentProfile()?.performance?.DpiStage, getCurrentProfile()?.performance?.dpiSelectIndex]);
  reactExports.useEffect(() => {
    updateFirmwareStatus();
  }, [previewDevice]);
  const updateFirmwareStatus = async () => {
    if (previewDevice == null) {
      return;
    }
    const hasUpdates = await UpdatesService.checkIfDeviceHasUpdatesAvailable(previewDevice);
    setFirmwareStatus(hasUpdates == true ? FirmwareUpdateStatus.HasUpdate : FirmwareUpdateStatus.UpToDate);
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "layout home mouse-dash", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel main", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "background", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: IconType.GloriousLogo, width: "507px", height: "329px", color: Color.Base70 }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "content", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "device-name", children: /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { children: previewDevice?.devicename }) }),
      subpage == void 0 || subpage == "settings" ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "profile-tile", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "profile-name", children: currentActiveProfile?.profileName }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "status", children: currentActiveProfile != null ? "Active" : void 0 })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "device-states", children: [
          !previewDevice?.StateArray.includes("USB") && /* @__PURE__ */ jsxRuntimeExports.jsx(WirelessConnectionPill, { connectionStrength: WirelessConnectionStrength.Strong }),
          previewDevice != void 0 && previewDevice.pid.length > 1 && /* @__PURE__ */ jsxRuntimeExports.jsx(BatteryPill, { value: previewDevice?.batteryvalue })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "firmware", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          FirmwarePill,
          {
            version: previewDevice != null ? getVersion(previewDevice) : void 0,
            size: firmwareStatus == FirmwareUpdateStatus.Updating ? IconSize.Small : IconSize.XSmall,
            updateStatus: firmwareStatus,
            updateOnClick: () => {
              openDeviceUpdateModal();
            }
          }
        ) })
      ] }) : subpage == "dpi" && defaultDPIStage != null ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "dpi", children: /* @__PURE__ */ jsxRuntimeExports.jsx(DPIPill, { value: defaultDPIStage.value, color: `#${defaultDPIStage.color}`, size: 24, padding: 4, useHoverEffect: false }) }) : void 0,
      unsavedPropertyNames.size > 0 ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "unsaved-changes", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: translate("Device_Home_Dash_Label_Unsaved_Changes", "Unsaved Changes") }) }) : null,
      subpage == "lighting" && getCurrentProfile()?.lighting?.Effect != null && DisplayDeviceColorsIndexes$1.indexOf(getCurrentProfile()?.lighting?.Effect) > -1 ? /* @__PURE__ */ jsxRuntimeExports.jsx(DeviceColorsSwatch, { deviceColorArray: getCurrentProfile()?.lighting?.Color }) : /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {})
    ] })
  ] }) });
}
const keyboardKeySelection_component = "";
const getKeyData = (profile, index2) => {
  if (!profile)
    return null;
  const currentKeyArray = profile.assignedKeyboardKeys[profile.fnModeindex];
  return currentKeyArray[index2];
};
function KeyboardKeySelectionComponent(props) {
  const { selectionMode, className, onNodeClick, onNodeHover, selectedNodes } = props;
  const { previewDevice } = useDevicesContext();
  const [currentProfile, setCurrentProfile] = reactExports.useState();
  const [deviceInputLayout, setDeviceInputLayout] = reactExports.useState();
  const [hoverNode, setHoverNode] = reactExports.useState(null);
  const [selectedNodePosition, setSelectedNodePosition] = reactExports.useState({ x: 0, y: 0 });
  reactExports.useEffect(() => {
    if (!previewDevice)
      return;
    setCurrentProfile(DeviceService.getDeviceProfile(previewDevice));
    setDeviceInputLayout(DeviceInputLayoutMap.get(previewDevice.SN));
  }, [previewDevice?.devicename]);
  const handleNodeClick = reactExports.useCallback(
    (nodeDefinition, index2) => {
      onNodeClick({ nodeDefinition, index: index2 });
      if (deviceInputLayout?.selectedNodePosition)
        setSelectedNodePosition(deviceInputLayout.selectedNodePosition);
    },
    [onNodeClick]
  );
  const handleHoverStart = reactExports.useCallback(
    (nodeDefinition) => {
      if (onNodeHover)
        onNodeHover(nodeDefinition);
      if (nodeDefinition)
        setHoverNode(nodeDefinition);
    },
    [onNodeHover]
  );
  const handleHoverEnd = reactExports.useCallback(() => {
    if (onNodeHover)
      onNodeHover(null);
    setHoverNode(null);
  }, [onNodeHover]);
  const getDisplayedNodeName = reactExports.useCallback(
    (index2, fallback) => {
      const keyData = getKeyData(currentProfile, index2);
      return keyData && keyData.recordBindCodeName !== "Default" ? keyData.recordBindCodeType : fallback;
    },
    [currentProfile]
  );
  const getNodeItemIndex = reactExports.useCallback(
    (node) => {
      return deviceInputLayout?.layoutNodes.findIndex((item) => item.translationKey === node.translationKey) ?? -1;
    },
    [deviceInputLayout]
  );
  const nodeItems = reactExports.useMemo(() => {
    if (!deviceInputLayout || !currentProfile)
      return [];
    const valueCDataKeyMap = getDynamicKeysDetailsWithIcons(previewDevice)?.reduce(
      (keyMap, keyData) => ({ ...keyMap, [keyData.keyName]: keyData }),
      {}
    );
    return deviceInputLayout.layoutNodes.map((nodeDefinition, i2) => {
      const keyData = getKeyData(currentProfile, i2);
      const hasBindValue = keyData && keyData.recordBindCodeName !== "Default";
      let isSelected;
      if (selectionMode === "single") {
        isSelected = selectedNodes.length > 0 && selectedNodes[0].index === i2;
      } else {
        isSelected = selectedNodes.some((node) => node.index === i2);
      }
      const keyMapping = valueCDataKeyMap[cleanupKeyName(nodeDefinition.translationKey)];
      const position = {
        x: deviceInputLayout.nodeBaseOffset != null ? deviceInputLayout.nodeBaseOffset.x + nodeDefinition.position.x : nodeDefinition.position.x,
        y: deviceInputLayout.nodeBaseOffset != null ? deviceInputLayout.nodeBaseOffset.y + nodeDefinition.position.y : nodeDefinition.position.y
      };
      const size = {
        width: nodeDefinition.size == null ? deviceInputLayout.nodeBaseSize?.width ?? 65 : nodeDefinition.size.width,
        height: nodeDefinition.size == null ? deviceInputLayout.nodeBaseSize?.height ?? 65 : nodeDefinition.size.height
      };
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        DeviceKeybindingSelectionNodeComponent,
        {
          title: nodeDefinition.translationKey,
          x: position.x,
          y: position.y,
          width: size.width,
          height: size.height,
          onClick: () => handleNodeClick(nodeDefinition, i2),
          selected: isSelected,
          hasBindValue,
          onHoverStart: () => handleHoverStart(nodeDefinition),
          onHoverEnd: handleHoverEnd,
          children: keyMapping && /* @__PURE__ */ jsxRuntimeExports.jsx(
            "div",
            {
              style: {
                position: "absolute",
                transform: "scale(1.6) translateX(6px) translateY(-2px)"
              },
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(SVGIconComponent, { src: keyMapping.bindingTypeIconSrc })
            }
          )
        },
        i2
      );
    });
  }, [currentProfile, selectedNodes, deviceInputLayout, handleNodeClick, handleHoverStart, handleHoverEnd]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      "div",
      {
        className: "selected-node",
        style: { position: "relative", top: selectedNodePosition.y, left: selectedNodePosition.x },
        children: hoverNode != null ? /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "hover", children: getDisplayedNodeName(getNodeItemIndex(hoverNode), hoverNode.translationKey) }) : null
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `keyboard-key-selection-component ${className}`, children: nodeItems })
  ] });
}
function KeyboardActuationBindingSelectionComponent(props) {
  const { valueCState } = useUIContext();
  const { setvalueCState } = useDevicesManagementContext();
  reactExports.useState(0);
  const handleNodeClick = reactExports.useCallback(
    ({ nodeDefinition, index: index2 }) => {
      if (!valueCState.isActuationPerKey && !valueCState.isRapidTriggerPerKey)
        return;
      if (valueCState.actuationSelectedNodes.current.length <= 1) {
        valueCState.actuationSelectedNodes.current = [
          ...valueCState.actuationSelectedNodes.current,
          {
            nodeDefinition,
            index: index2
          }
        ];
      }
      if (valueCState.actuationSelectedNodes.current.length === 1) {
        valueCState.actuationSelectedNodes.layers.push({
          nodes: [...valueCState.actuationSelectedNodes.current],
          actuationPress: valueCState.isActuationPerKey ? valueCState.actuationTmpPress : void 0,
          rapidTriggerPress: valueCState.isRapidTriggerPerKey ? valueCState.rapidTriggerTmpPress : void 0
        });
        valueCState.actuationSelectedNodes.current = [];
      }
      setvalueCState(valueCState);
    },
    [valueCState.actuationSelectedNodes, valueCState.actuationTmpPress, valueCState.rapidTriggerTmpPress]
  );
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    KeyboardKeySelectionComponent,
    {
      selectedNodes: valueCState.actuationSelectedNodes.current,
      className: "actuation-selection keyboard",
      onNodeClick: handleNodeClick,
      selectionMode: "multiple"
    }
  );
}
const keyboardAdvancedKeybindingSelection_component = "";
function KeyboardAdvancedKeybindingSelectionComponent() {
  useUIContext();
  const { update: update2, setvalueCState, setvalueCAdvancedKeyBindingMode } = useUIUpdateContext();
  const translate = useTranslate();
  const deviceContext = useDevicesContext();
  const { valueCState } = useUIContext();
  const { setvalueCAdvancedKeys } = useDevicesManagementContext();
  reactExports.useEffect(() => {
    const updatedMode = valueCState.advancedKeysSelectedKeyTmp != null && valueCState.advancedKeysBindingMode == AdvancedKeyMode.None;
    if (valueCState.advancedKeysTypeSelectionOpened != updatedMode) {
      valueCState.advancedKeysTypeSelectionOpened = updatedMode;
      setvalueCState(valueCState);
    }
  }, [
    valueCState.advancedKeysTypeSelectionOpened,
    valueCState.advancedKeysSelectedKeyTmp,
    valueCState.advancedKeysBindingMode
  ]);
  const handleBindingTypeChoice = reactExports.useCallback(
    (type) => {
      valueCState.advancedKeysBindingMode = type;
      setvalueCState(valueCState);
    },
    [valueCState.advancedKeysBindingMode]
  );
  const closeKeyCharacterSelectorModal = () => {
    valueCState.advancedKeysShowSelector = false;
    setvalueCState(valueCState);
    setvalueCAdvancedKeys(valueCState);
  };
  const closeAdvancedKeysTypeSelection = reactExports.useCallback(() => {
    valueCState.advancedKeysBindingMode = AdvancedKeyMode.None;
    valueCState.advancedKeysSelectedKeyTmp = null;
    valueCState.advancedKeysTypeSelectionOpened = false;
    setvalueCState(valueCState);
  }, []);
  reactExports.useEffect(() => {
    if (!valueCState.advancedKeysTypeSelectionOpened)
      return;
    const handleKeyDown = (event) => event.key === "Escape" && closeAdvancedKeysTypeSelection();
    document.addEventListener("keydown", handleKeyDown);
    return () => {
      document.removeEventListener("keydown", handleKeyDown);
    };
  }, [valueCState.advancedKeysTypeSelectionOpened, closeAdvancedKeysTypeSelection]);
  const selectKeyBinding = reactExports.useCallback(
    (nodeDefinition) => {
      const advancedKeys = valueCState.advancedKeysAssignedTmp;
      switch (valueCState.advancedKeysBindingMode) {
        case AdvancedKeyMode.None:
          break;
        case AdvancedKeyMode.ModTap:
          advancedKeys.modTapPress = nodeDefinition;
          break;
        case AdvancedKeyMode.Toggle:
          advancedKeys.toggle = nodeDefinition;
          break;
        case AdvancedKeyMode.DynamicKeystroke:
          const triggerPoint = valueCState.advancedKeysSelectedTriggerPoint;
          if (triggerPoint == null) {
            console.warn("No trigger point selected for dynamic keystroke");
            break;
          }
          if (advancedKeys.dynamicKeystrokes) {
            advancedKeys.dynamicKeystrokes.keys[triggerPoint] = {
              node: nodeDefinition,
              isContinuous: false
            };
          } else if (!advancedKeys.dynamicKeystrokes) {
            advancedKeys.dynamicKeystrokes = {
              keys: { [triggerPoint]: { node: nodeDefinition, isContinuous: false } },
              firstTriggerPointValue: 0
            };
          }
          break;
      }
      closeKeyCharacterSelectorModal();
    },
    [valueCState.advancedKeysAssignedTmp, valueCState.advancedKeysSelectedTriggerPoint]
  );
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    "div",
    {
      className: `${"advanced-keybinding-showcase"} ${valueCState.advancedKeysTypeSelectionOpened || valueCState.advancedKeysShowSelector ? "choose-type" : ""}`,
      children: [
        valueCState.advancedKeysShowSelector && /* @__PURE__ */ jsxRuntimeExports.jsx(
          KeyCharacterSelector,
          {
            previewDevice: deviceContext.previewDevice,
            onKeySelect: selectKeyBinding,
            onClose: closeKeyCharacterSelectorModal
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bindings", children: valueCState.advancedKeysSelectedKeyTmp && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
          valueCState.advancedKeysBindingMode !== AdvancedKeyMode.None && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "current-binding binding-mode", children: /* @__PURE__ */ jsxRuntimeExports.jsx(SVGIconComponent, { src: getBindingModeIcon(valueCState.advancedKeysBindingMode) }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "current-binding", children: cleanupKeyName(valueCState.advancedKeysSelectedKeyTmp.translationKey) })
        ] }) }),
        valueCState.advancedKeysTypeSelectionOpened && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "binding-type-close", onClick: closeAdvancedKeysTypeSelection, children: /* @__PURE__ */ jsxRuntimeExports.jsx(SVGIconComponent, { src: iconSrc(ICONS$1.closeModal), selected: iconSrc(ICONS$1.closeModalHover) }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "binding-type-choose", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "div",
              {
                className: "binding-type-tile",
                onClick: () => handleBindingTypeChoice(AdvancedKeyMode.DynamicKeystroke),
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "binding-type-tile-header", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { children: translate(
                      "Advanced_Keybinding_Selection_Dynamic_Keystroke_Label",
                      "Dynamic Keystroke"
                    ) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(SVGIconComponent, { src: iconSrc(ICONS$1.dynamicKeystroke) })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: translate(
                    "Advanced_Keybinding_Selection_Dynamic_Keystroke_Description",
                    "4 different actions on a single key based on key position. Activate 1 up to 4 bindings on 4 different parts of the key press."
                  ) })
                ]
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "div",
              {
                className: "binding-type-tile",
                onClick: () => handleBindingTypeChoice(AdvancedKeyMode.ModTap),
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "binding-type-tile-header", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { children: translate("Advanced_Keybinding_Selection_Mod_Tap_Label", "Mod Tap") }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(SVGIconComponent, { src: iconSrc(ICONS$1.modTap) })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: translate(
                    "Advanced_Keybinding_Selection_Mod_Tap_Description",
                    "2 different actions on a single key based on press behaviour. Hold the key down for the first action or tap the key for the second action."
                  ) })
                ]
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "div",
              {
                className: "binding-type-tile",
                onClick: () => handleBindingTypeChoice(AdvancedKeyMode.Toggle),
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "binding-type-tile-header", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { children: translate("Advanced_Keybinding_Selection_Toggle_Key_Label", "Toggle Key") }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(SVGIconComponent, { src: iconSrc(ICONS$1.toggleKey) })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: translate(
                    "Advanced_Keybinding_Selection_Toggle_Key_Description",
                    "Lock the action between its on and off state by tapping the key. Activate the normal key behaviour by holding down the key."
                  ) })
                ]
              }
            )
          ] })
        ] })
      ]
    }
  );
}
const keyboardHomeDash = "";
const DisplayDeviceColorsIndexes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];
function KeyboardHomeDash({ onLayerClick }) {
  const { subpage } = useParams();
  const { previewDevice } = useDevicesContext();
  const { getCurrentLegacyLayerIndex, setCurrentProfileLayer, getCurrentProfile } = useDevicesManagementContext();
  const { unsavedPropertyNames, lightSettingMode, colorPickerValue_PerKeyLighting } = useUIContext();
  const { openDeviceUpdateModal } = useUIUpdateContext();
  const translate = useTranslate();
  reactExports.useState();
  const [firmwareStatus, setFirmwareStatus] = reactExports.useState(FirmwareUpdateStatus.UpToDate);
  reactExports.useEffect(() => {
    updateFirmwareStatus();
  }, [previewDevice]);
  const currentActiveProfile = reactExports.useMemo(() => {
    return previewDevice?.deviceData?.profile.find(
      (profile) => profile.profileName === getCurrentProfile()?.profileName
    );
  }, [previewDevice]);
  const updateFirmwareStatus = async () => {
    if (previewDevice == null) {
      return;
    }
    const hasUpdates = await UpdatesService.checkIfDeviceHasUpdatesAvailable(previewDevice);
    setFirmwareStatus(hasUpdates == true ? FirmwareUpdateStatus.HasUpdate : FirmwareUpdateStatus.UpToDate);
  };
  const isWireless = (pids) => {
    if (pids.length < 2) {
      return false;
    }
    if (pids[1].startsWith("0xB0")) {
      return false;
    }
    return true;
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "layout home keyboard-dash", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel main", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "background", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: IconType.GloriousLogo, width: "507px", height: "329px", color: Color.Base70 }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "content", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "dash-row", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "device-name", children: /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { children: translate(`DeviceName_${previewDevice?.SN}`, previewDevice?.devicename) }) }) }),
        subpage == void 0 || subpage == "performance" ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "profile-tile", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "profile-name", children: currentActiveProfile?.profileName }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "status", children: currentActiveProfile != null ? "Active" : void 0 })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "device-states", children: [
            previewDevice != void 0 && previewDevice.pid.length > 1 && !previewDevice?.StateArray.includes("USB") && /* @__PURE__ */ jsxRuntimeExports.jsx(
              WirelessConnectionPill,
              {
                connectionStrength: WirelessConnectionStrength.Strong
              }
            ),
            previewDevice != void 0 && isWireless(previewDevice.pid) && /* @__PURE__ */ jsxRuntimeExports.jsx(BatteryPill, { value: previewDevice?.batteryvalue })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "firmware", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            FirmwarePill,
            {
              version: previewDevice != null ? getVersion(previewDevice) : void 0,
              size: firmwareStatus == FirmwareUpdateStatus.Updating ? IconSize.Small : IconSize.XSmall,
              updateStatus: firmwareStatus,
              updateOnClick: () => {
                openDeviceUpdateModal();
              }
            }
          ) })
        ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}),
        subpage == "lighting" && DisplayDeviceColorsIndexes.indexOf(getCurrentProfile()?.light_PRESETS_Data?.value) > -1 ? lightSettingMode == "per-key" ? /* @__PURE__ */ jsxRuntimeExports.jsx(DeviceColorsSwatch, { deviceColorArray: [colorPickerValue_PerKeyLighting.toHex()] }) : /* @__PURE__ */ jsxRuntimeExports.jsx(DeviceColorsSwatch, { deviceColorArray: getCurrentProfile()?.light_PRESETS_Data?.colors }) : /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}),
        unsavedPropertyNames.size > 0 ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "unsaved-changes", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: translate("Device_Home_Dash_Label_Unsaved_Changes", "Unsaved Changes") }) }) : null
      ] })
    ] }),
    (previewDevice?.deviceCategoryName == "Keyboard" || previewDevice?.deviceCategoryName == "Numpad") && ["keybinding", "actuation", "advanced-keys"].includes(subpage ?? "") ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "layer-selection", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        SVGIconComponent,
        {
          src: "/images/icons/layer-selection-top.svg",
          active: "/images/icons/layer-selection-top_selected.svg",
          selected: "/images/icons/layer-selection-top_selected.svg",
          className: `top${getCurrentLegacyLayerIndex() == 0 ? " active" : ""}`,
          onClick: () => {
            onLayerClick(0);
          }
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        SVGIconComponent,
        {
          src: "/images/icons/layer-selection-center.svg",
          active: "/images/icons/layer-selection-center_selected.svg",
          selected: "/images/icons/layer-selection-center_selected.svg",
          className: `center${getCurrentLegacyLayerIndex() == 1 ? " active" : ""}`,
          onClick: () => {
            onLayerClick(1);
          }
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        SVGIconComponent,
        {
          src: "/images/icons/layer-selection-bottom.svg",
          active: "/images/icons/layer-selection-bottom_selected.svg",
          selected: "/images/icons/layer-selection-bottom_selected.svg",
          className: `bottom${getCurrentLegacyLayerIndex() == 2 ? " active" : ""}`,
          onClick: () => {
            onLayerClick(2);
          }
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "label", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "title", children: "Layer" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "value", children: (getCurrentLegacyLayerIndex() + 1).toString() })
      ] })
    ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {})
  ] });
}
const ManagementSectionIconMap = /* @__PURE__ */ new Map([
  ["home", IconType.Home],
  ["settings", IconType.CogOutline],
  ["performance", IconType.Speedometer],
  ["lighting", IconType.Lightbulb],
  ["dpi", IconType.LightningBolt],
  ["keybinding", IconType.Keybinding],
  ["actuation", IconType.Actuation],
  ["advanced-keys", IconType.AdvancedKeys]
]);
function DevicePage(props) {
  const navigate = useNavigate();
  const { subpage } = useParams();
  const uiContext = useUIContext();
  const devicesContext = useDevicesContext();
  const { savePreviewDevice, resetPreviewDevice, setCurrentProfileLayer, setvalueCAdvancedKeys } = useDevicesManagementContext();
  const translate = useTranslate();
  const { setDisplayNavigation, update: update2, setvalueCState, setvalueCAdvancedKeyBindingMode } = useUIUpdateContext();
  const [deviceClassName, setDeviceClassName] = reactExports.useState("");
  const [scaleClass, setScaleClass] = reactExports.useState("scale-1");
  const [renderDimensions, setRenderDimensions] = reactExports.useState({ width: 0, height: 0, renderImagesGap: 0 });
  const [moreActionsIsOpen, setMoreActionsIsOpen] = reactExports.useState(false);
  reactExports.useEffect(() => {
    if (devicesContext.previewDevice == null) {
      navigate("/");
      return;
    }
    setDeviceClassName(devicesContext.previewDevice.devicename.toLowerCase().split(" ").join("-").replace("%", ""));
  }, [devicesContext.previewDevice]);
  reactExports.useEffect(() => {
    const handler = () => {
      console.log("handler");
      updateScale();
    };
    window.addEventListener("resize", handler);
    updateScale();
    return () => window.removeEventListener("resize", handler);
  }, []);
  const updateScale = () => {
    if (devicesContext.previewDevice == null) {
      return;
    }
    let currentScaleIndex = 0;
    for (let i2 = 0; i2 < devicesContext.previewDevice.productScales.length; i2++) {
      const scale = devicesContext.previewDevice.productScales[i2];
      if (window.innerWidth > scale.breakpoint.width || window.innerHeight > scale.breakpoint.height) {
        currentScaleIndex = i2;
      }
    }
    console.log(currentScaleIndex);
    if (currentScaleIndex == 0) {
      setScaleClass("");
    }
    if (currentScaleIndex == 1) {
      setScaleClass("scale-1");
    }
    if (currentScaleIndex == 2) {
      setScaleClass("scale-2");
    }
    if (currentScaleIndex == 3) {
      setScaleClass("scale-3");
    }
    if (currentScaleIndex == 4) {
      setScaleClass("scale-4");
    }
    const width = devicesContext.previewDevice.productScales[currentScaleIndex].imageSize.width;
    const height = devicesContext.previewDevice.productScales[currentScaleIndex].imageSize.height;
    const renderImagesGap = 50;
    setRenderDimensions({ width, height, renderImagesGap });
  };
  const handleNodeClick = reactExports.useCallback(
    (element) => {
      uiContext.valueCState.advancedKeysTypeSelectionOpened = true;
      if (uiContext.valueCState.advancedKeysBindingMode == AdvancedKeyMode.None) {
        uiContext.valueCState.advancedKeysSelectedKeyTmp = element.nodeDefinition;
        setvalueCState(uiContext.valueCState);
      } else {
        uiContext.valueCState.advancedKeysBindingMode = AdvancedKeyMode.None;
        setvalueCAdvancedKeyBindingMode(uiContext.valueCState);
        uiContext.valueCState.advancedKeysSelectedKeyTmp = element.nodeDefinition;
        setvalueCState(uiContext.valueCState);
      }
    },
    [uiContext.valueCState.advancedKeysSelectedKeyTmp]
  );
  reactExports.useEffect(() => {
    if (devicesContext.previewDevice == null) {
      return;
    }
  }, [devicesContext.previewDevice]);
  const renderStyle = {
    "--render-width": `${renderDimensions.width}px`,
    "--render-height": `${renderDimensions.height}px`,
    "--render-images-gap": `${renderDimensions.renderImagesGap}px`,
    "--showcase-margin-top": "80px"
  };
  const focusStyle = {
    // '--translation': `${devicesContext.previewDevice?.imageAdjustments.translation.x}px ${devicesContext.previewDevice?.imageAdjustments.translation.y}px`,
    "--focus-z-index": `${uiContext.valueCState.advancedKeysTypeSelectionOpened ? 7 : "initial"}`
  };
  const lightingPreviewStyle = {
    "--lighting-color": "var(--brand-color-1)",
    "--webkit-mask-url": devicesContext.previewDevice?.deviceRenderAttributes.mask ? `url(${"."}${devicesContext.previewDevice?.deviceRenderAttributes.mask.path})` : ""
  };
  const deviceCategoryName = devicesContext.previewDevice?.deviceCategoryName;
  const isKeyboardOrNumpad = ["Keyboard", "Numpad"].includes(deviceCategoryName ?? "");
  const isMouse = deviceCategoryName == "Mouse";
  const isMouseHomePage = devicesContext.previewDevice?.deviceCategoryName === "Mouse";
  devicesContext.previewDevice?.deviceCategoryName === "Keyboard" && !["keybinding", "actuation", "advanced-keys"].includes(subpage ?? "");
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `device ${deviceClassName} ${scaleClass}`, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `showcase`, style: renderStyle, children: [
      isMouseHomePage ? /* @__PURE__ */ jsxRuntimeExports.jsx(MouseHomeDash, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(
        KeyboardHomeDash,
        {
          onLayerClick: (layerIndex) => {
            setCurrentProfileLayer(layerIndex);
          }
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "buffer", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "focus", style: focusStyle, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "lighting-preview", style: lightingPreviewStyle, children: /* @__PURE__ */ jsxRuntimeExports.jsx(DeviceLightingPreviewComponent, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "renders", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "img",
            {
              draggable: false,
              className: "render large",
              alt: devicesContext.previewDevice?.devicename,
              src: devicesContext.previewDevice?.deviceRenderAttributes.large.path
            }
          ),
          subpage == "lighting" && devicesContext.previewDevice?.lightingEffectRenderAttributes.map(
            (preloadedImage, index2) => {
              return /* @__PURE__ */ jsxRuntimeExports.jsx(
                "img",
                {
                  draggable: false,
                  className: "render lighting-view",
                  src: preloadedImage.path
                },
                index2
              );
            }
          )
        ] }),
        subpage == "keybinding" && devicesContext.previewDevice?.deviceCategoryName == "Keyboard" || devicesContext.previewDevice?.deviceCategoryName == "Numpad" ? /* @__PURE__ */ jsxRuntimeExports.jsx(KeyboardKeybindingSelectionComponent, {}) : subpage == "lighting" && (devicesContext.previewDevice?.deviceCategoryName == "Keyboard" || devicesContext.previewDevice?.deviceCategoryName == "Numpad") && uiContext.lightSettingMode == "per-key" ? /* @__PURE__ */ jsxRuntimeExports.jsx(DeviceLightingSelectionComponent, {}) : subpage == "actuation" ? /* @__PURE__ */ jsxRuntimeExports.jsx(KeyboardActuationBindingSelectionComponent, {}) : subpage == "advanced-keys" ? /* @__PURE__ */ jsxRuntimeExports.jsx(
          KeyboardKeySelectionComponent,
          {
            selectedNodes: uiContext.valueCState.advancedKeysSelectedKeyTmp ? [uiContext.valueCState.advancedKeysSelectedKeyTmp] : [],
            className: `actuation-selection keyboard ${uiContext.valueCState.advancedKeysTypeSelectionOpened ? "selector-active" : ""}`,
            onNodeClick: handleNodeClick
          }
        ) : /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}),
        isMouse && subpage == "keybinding" && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "keybinding-selection mouse", children: /* @__PURE__ */ jsxRuntimeExports.jsx(MouseKeybindingSelectionComponent, {}) })
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "div",
        {
          className: "showcase-actions",
          style: {
            display: ["actuation", "advanced-keys"].includes(subpage) ? "grid" : "none",
            pointerEvents: "none"
          },
          children: isKeyboardOrNumpad && subpage === "advanced-keys" && /* @__PURE__ */ jsxRuntimeExports.jsx(KeyboardAdvancedKeybindingSelectionComponent, {})
        }
      )
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "management", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("ul", { className: "tabs", children: devicesContext.previewDevice?.managementSections.map((sectionData, index2) => {
        let tabLabel = translate(sectionData.translationKey, "");
        let clickPath = `/${sectionData.optionKey}`;
        if (sectionData.optionKey == "home") {
          tabLabel = translate(
            `Device_Tabs_Label_Home_${devicesContext.previewDevice?.deviceCategoryName}`,
            translate("Device_Tabs_Label_Home_UnknownDevice", "My Device")
          );
          clickPath = "";
        }
        const classes = subpage == null || subpage == "" ? sectionData.optionKey == "home" ? "current-section" : "" : subpage == sectionData.optionKey ? "current-section" : "";
        return /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "a",
          {
            className: classes,
            onClick: () => {
              navigate(`/device${clickPath}`);
            },
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Icon,
                {
                  className: "tab-icon",
                  type: ManagementSectionIconMap.get(sectionData.optionKey),
                  size: IconSize.Small,
                  color: Color.Base20
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: tabLabel })
            ]
          }
        ) }, index2);
      }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "content", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(DeviceBreadcrumbsComponent, {}),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `page ${subpage == void 0 ? "home" : subpage}`, children: subpage == void 0 ? /* @__PURE__ */ jsxRuntimeExports.jsx(DeviceHomePage, {}) : subpage == "settings" ? /* @__PURE__ */ jsxRuntimeExports.jsx(DeviceSettingsManagementPage, {}) : subpage == "performance" ? /* @__PURE__ */ jsxRuntimeExports.jsx(PerformanceManagementPage, {}) : subpage == "lighting" ? /* @__PURE__ */ jsxRuntimeExports.jsx(LightingManagementPage, {}) : subpage == "dpi" ? /* @__PURE__ */ jsxRuntimeExports.jsx(DPIManagementPage, {}) : subpage == "keybinding" ? /* @__PURE__ */ jsxRuntimeExports.jsx(KeybindingManagementPage, {}) : subpage == "actuation" ? /* @__PURE__ */ jsxRuntimeExports.jsx(ActuationManagementPage, {}) : subpage == "advanced-keys" ? /* @__PURE__ */ jsxRuntimeExports.jsx(AdvancedKeysManagementPage, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "actions", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `more-actions-menu${moreActionsIsOpen ? " open" : ""}`, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "a",
              {
                onClick: () => {
                  resetPreviewDevice();
                  setMoreActionsIsOpen(false);
                },
                children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: translate("Device_MoreActions_Menu_ResetToDefault", "Reset to Default") })
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "a",
              {
                onClick: () => {
                  setDisplayNavigation(!uiContext.displayNavigation);
                  setMoreActionsIsOpen(false);
                },
                children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: uiContext.displayNavigation == false ? translate("Menu_MoreActions_Reveal", "Reveal Left Navigation") : translate("Menu_MoreActions_Hide", "Hide Left Navigation") })
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "a",
              {
                onClick: () => {
                  const deviceSlug = "MO2W";
                  const url = `https://www.gloriousgaming.com/pages/support?guide=${deviceSlug}`;
                  AppService.openHyperlink(url);
                  setMoreActionsIsOpen(false);
                },
                children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: translate("Menu_MoreActions_ProductGuide", "Product Guide") })
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "a",
              {
                onClick: () => {
                  const url = `https://glorious.ladesk.com/098776-Model-O-2-Wireless`;
                  AppService.openHyperlink(url);
                  setMoreActionsIsOpen(false);
                },
                children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: translate("Menu_MoreActions_ProductSupport", "Product Support") })
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "a",
              {
                className: "local-profile-import",
                onClick: () => {
                  setMoreActionsIsOpen(false);
                },
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: translate("Menu_MoreActions_ProfileImport", "Local Profile Import") }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: translate("Menu_MoreActions_ProfileImport", "Coming Soon") })
                ]
              }
            )
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "more-actions-container", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "button",
            {
              className: "action more-actions",
              onClick: () => {
                setMoreActionsIsOpen(!moreActionsIsOpen);
              },
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "display", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: IconType.VerticalEllipses, size: IconSize.Large, color: Color.Base50 }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "label", children: translate("Button_MoreActions", "More Actions") })
              ]
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "button",
            {
              className: "action save",
              onClick: () => {
                if (subpage == "lighting")
                  ;
                else if (subpage == "keybinding")
                  ;
                else if (subpage == "advanced-keys") {
                  uiContext.valueCState.advancedKeysBindingMode = AdvancedKeyMode.None;
                  uiContext.valueCState.advancedKeysSelectedKeyTmp = null;
                  uiContext.valueCState.advancedKeysAssignedTmp = {
                    toggle: null,
                    modTapHold: null,
                    modTapPress: null,
                    dynamicKeystrokes: null
                  };
                  uiContext.valueCState.advancedKeysSelectedTriggerPoint = null;
                  update2(uiContext);
                }
                savePreviewDevice();
              },
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "div",
                  {
                    className: `display${uiContext.isSaving || uiContext.showingSaveSuccess ? " outline" : ""}`,
                    children: uiContext.isSaving ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Icon,
                      {
                        type: IconType.SaveCheckRounded,
                        size: IconSize.Medium,
                        color: Color.Base20
                      }
                    ) : uiContext.showingSaveSuccess ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Icon,
                      {
                        type: IconType.SaveCheckRounded,
                        size: IconSize.Medium,
                        color: Color.GreenDark60
                      }
                    ) : /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Icon,
                      {
                        type: IconType.SaveCheckRounded,
                        size: IconSize.Medium,
                        color: Color.Base70
                      }
                    )
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "label", children: translate("Button_Save", "Save") })
              ]
            }
          )
        ] })
      ] })
    ] })
  ] });
}
const pairing_page = "";
function PairingPage(props) {
  const [selectedDevice, setSelectedDevice] = reactExports.useState(null);
  const [receiverIsConnected, setReceiverIsConnected] = reactExports.useState(false);
  const canPair = () => {
    return selectedDevice != null && receiverIsConnected == true;
  };
  const devicesContext = useDevicesContext();
  const translate = useTranslate();
  const [pairableDevices, setPairableDevices] = reactExports.useState([]);
  reactExports.useEffect(() => {
    if (devicesContext.devices == null) {
      return;
    }
    const pairable = [
      { value: "-1", label: translate("Pairing_DeviceSelect_DefaultOption", "Select Mouse") }
    ];
    for (let i2 = 0; i2 < devicesContext.devices.length; i2++) {
      const device2 = devicesContext.devices[i2];
      if (DevicePairableDevices.get(device2.SN) != null && DevicePairableDevices.get(device2.SN).length > 0) {
        pairable.push({ value: device2.SN, label: translate(`DeviceName_${device2.SN}`, device2.devicename) });
      }
    }
    setPairableDevices(pairable);
  }, [devicesContext.devices]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "pairing", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { children: translate("Pairing_Title", "GLORIOUS PAIRING UTILITY") }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "instructions", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("Pairing_List_Heading", "Pairing Steps") }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("ol", { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: translate("Pairing_List_Step1", "Unplug all Glorious mouse cables & receivers.") }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: translate(
          "Pairing_List_Step2",
          "Plug in the mouse you'd like to pair via USB cable. Plug in the wireless receiver."
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: translate("Pairing_List_Step3", "Select the mouse being paired from the utility below.") }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: translate(
          "Pairing_List_Step4",
          "When both the USB and Wireless receiver have been reconnected, click the Pair button.."
        ) })
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panels", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel device-connection", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "device-image" }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "right", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("Pairing_Device_Title", "Mouse") }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "status", children: selectedDevice != null && selectedDevice.hasWiredConnection == true ? translate("Pairing_Connection_Connected", "Connected") : translate("Pairing_Connection_Disconnected", "Disconnected") }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(OptionSelectComponent, { options: pairableDevices })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "panel receiver-connection", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "device-image" }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "right", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title", children: translate("Pairing_Receiver_Title", "Dongle") }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "status", children: receiverIsConnected == true ? translate("Pairing_Connection_Connected", "Connected") : translate("Pairing_Connection_Disconnected", "Disconnected") })
        ] })
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "actions", children: /* @__PURE__ */ jsxRuntimeExports.jsx("button", { type: "button", className: "pair", disabled: !canPair(), children: translate("Button_Pairing_Pair", "Pair") }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "help", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: translate("Pairing_DeviceSelect_DeviceNotFoundPrompt", "Don't see your mouse on the list?") }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { children: [
        translate(
          "Pairing_DeviceSelect_ClassicSupportDescription",
          "Please refer to the following link for classic device support:"
        ),
        " ",
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "a",
          {
            onClick: () => {
              console.log("todo");
            },
            children: translate("Pairing_DeviceSelect_ClassicPairingUtilityLink", "Classic Pairing Utility.")
          }
        )
      ] })
    ] })
  ] });
}
const updateManager_component = "";
const UpdateTasks_Wired$1 = [
  { key: "download", translate: "FirmwareUpdate_Task_Download", percentageOfTotal: 20 },
  { key: "updateDevice", translate: "FirmwareUpdate_Task_UpdateDevice" }
];
const UpdateTasks_WirelessReceiver$1 = [
  { key: "download", translate: "FirmwareUpdate_Task_Download", percentageOfTotal: 20 },
  { key: "updateDevice", translate: "FirmwareUpdate_Task_UpdateDevice" },
  { key: "updateReceiver", translate: "FirmwareUpdate_Task_UpdateReceiver" }
];
const DeviceUpdateTasks$1 = new Map(Object.entries(
  {
    "0x320F0x5044": UpdateTasks_Wired$1,
    // GMMK PRO
    "0x320F0x5092": UpdateTasks_Wired$1,
    // GMMK PRO
    "0x320F0x5046": UpdateTasks_Wired$1,
    // GMMK PRO ISO
    "0x320F0x5093": UpdateTasks_Wired$1,
    // GMMK PRO ISO
    "0x320F0x504A": UpdateTasks_Wired$1,
    // GMMK v2 65 ISO
    "0x320F0x5045": UpdateTasks_Wired$1,
    // GMMK v2 65 US
    "0x320F0x505A": UpdateTasks_Wired$1,
    // GMMK v2 96 ISO
    "0x320F0x504B": UpdateTasks_Wired$1,
    // GMMK v2 96 US
    "0x320F0x5088": UpdateTasks_Wired$1,
    // GMMK Numpad
    "0x320F0x8888": UpdateTasks_Wired$1,
    // Model O Wired
    "0x258A0x2011": UpdateTasks_WirelessReceiver$1,
    // Model O Wireless
    "0x258A0x2036": UpdateTasks_Wired$1,
    // Model O Minus Wired
    "0x258A0x2013": UpdateTasks_WirelessReceiver$1,
    // Model O Minus Wireless
    "0x258A0x2015": UpdateTasks_WirelessReceiver$1,
    // Model O Pro Wireless
    "0x320F0x823A": UpdateTasks_Wired$1,
    // Model O2 Wired
    "0x093A0x822A": UpdateTasks_WirelessReceiver$1,
    // Model O2 Wireless
    "0x258A0x2019": UpdateTasks_WirelessReceiver$1,
    // Model O2 Pro 1k
    "0x258A0x201B": UpdateTasks_WirelessReceiver$1,
    // Model O 2 Pro 8k
    "0x258A0x2012": UpdateTasks_WirelessReceiver$1,
    // Model D Wireless
    "0x258A0x2014": UpdateTasks_WirelessReceiver$1,
    // Model D Minus Wireless
    "0x258A0x2017": UpdateTasks_WirelessReceiver$1,
    // Model D Pro Wireless
    "0x258A0x201A": UpdateTasks_WirelessReceiver$1,
    // Model D 2 Pro 1k
    "0x258A0x201C": UpdateTasks_WirelessReceiver$1,
    // Model D 2 Pro 8k
    "0x22D40x1503": UpdateTasks_Wired$1,
    // Model I
    "0x320F0x831A": UpdateTasks_Wired$1,
    // Model valueG
    "0x093A0x821A": UpdateTasks_WirelessReceiver$1,
    // Model I2
    "0x320F0x825A": UpdateTasks_Wired$1,
    // Model D2 Wired
    "0x093A0x824A": UpdateTasks_WirelessReceiver$1,
    // Model D2 Wireless
    "0x258A0x2018": UpdateTasks_WirelessReceiver$1,
    // Series One Pro Wireless
    "0x258A0x201D": UpdateTasks_WirelessReceiver$1,
    //valueH Pro (8k wireless)
    "0x093A0x826A": UpdateTasks_WirelessReceiver$1,
    //valueF Wireless
    "0x320F0x827A": UpdateTasks_Wired$1
    //valueF
  }
));
function UpdateManagerComponent(props) {
  const [firmwareUpdaterStep, setFirmwareUpdaterStep] = reactExports.useState("device-select");
  const [confirmationDialogIsOpen, setConfirmationDialogIsOpen] = reactExports.useState(false);
  const [confirmationDialogData, setConfirmationDialogData] = reactExports.useState({ text: "", title: "", icon: "" });
  const confirmationResolve = reactExports.useRef(null);
  const [selectedDevices, setSelectedDevices] = reactExports.useState([]);
  const [devicesWithUpdatesAvailable, setDevicesWithUpdatesAvailable] = reactExports.useState([]);
  const [downloadProgressMap, setDownloadProgressMap] = reactExports.useState(/* @__PURE__ */ new Map());
  const downloadProgressMapRef = reactExports.useRef(/* @__PURE__ */ new Map());
  const [updateProgressMap, setUpdateProgressMap] = reactExports.useState(/* @__PURE__ */ new Map());
  reactExports.useRef(/* @__PURE__ */ new Map());
  const translate = useTranslate();
  const devicesContext = useDevicesContext();
  const { setDevicesCurrentlyUpdating, refreshDevices } = useDevicesManagementContext();
  const uiContext = useUIContext();
  const {
    closeUpdateManager
  } = useUIUpdateContext();
  const compareVersions = (versionA, versionB, exponent) => {
    exponent = exponent || 2;
    if (versionA === versionB) {
      return 0;
    }
    const length = Math.max(versionA.split(".").length, versionB.split(".").length);
    const getVersionNumber = function(length2, exponent2) {
      return function(version2) {
        return versionToNumber(version2, length2, exponent2);
      };
    }(length, exponent);
    versionA = getVersionNumber(versionA);
    versionB = getVersionNumber(versionB);
    return versionA > versionB ? 1 : versionA < versionB ? -1 : 0;
  };
  const versionToNumber = (version2, length, exponent) => {
    let workingString = version2;
    const metadataArray = workingString.split("+");
    workingString = metadataArray.shift();
    if (metadataArray.length > 0) {
      metadataArray[0].split(".");
    }
    const prereleaseTagArray = workingString.split("-");
    workingString = prereleaseTagArray.shift();
    if (prereleaseTagArray.length > 0) {
      prereleaseTagArray[0];
    }
    const versionNumberArray = workingString.split(".");
    let versionNumber = 0;
    versionNumberArray.forEach(function(value2, index2, array) {
      versionNumber += value2 * Math.pow(10, length * exponent - 1);
      length--;
    });
    return versionNumber.toString();
  };
  reactExports.useEffect(() => {
    refresh();
  }, [uiContext.updateManagerModal_isOpen]);
  const refresh = async () => {
    if (uiContext.updateManagerModal_isOpen == true) {
      const updatesAvailable = await getDevicesWithUpdatesAvailable(true);
      setDevicesWithUpdatesAvailable(updatesAvailable);
      console.log(updatesAvailable);
      downloadProgressMapRef.current = /* @__PURE__ */ new Map();
      const existingFirmwareUpdaters = await getDownloadedFirmwareUpdaters();
      for (let i2 = 0; i2 < existingFirmwareUpdaters.length; i2++) {
        downloadProgressMapRef.current.set(existingFirmwareUpdaters[i2].SN, 100);
      }
      setDownloadProgressMap(downloadProgressMapRef.current);
    }
  };
  const getDownloadedFirmwareUpdaters = async () => {
    const files = await UpdatesService.getDownloadedFirmwareUpdaters();
    return files;
  };
  const getDevicesWithUpdatesAvailable = async (forceUpdates = false) => {
    const versionFileUrl2 = await AppService.getVersionFileUrl();
    const versionData = await (await fetch(versionFileUrl2)).json();
    const updatesAvailable = [];
    for (let deviceIndex = 0; deviceIndex < DeviceService.pluginDeviceData.length; deviceIndex++) {
      const deviceTarget = DeviceService.pluginDeviceData[deviceIndex];
      for (let mouseIndex = 0; mouseIndex < versionData.Mouse.length; mouseIndex++) {
        const item = versionData.Mouse[mouseIndex];
        if (forceUpdates == true) {
          updatesAvailable.push(item);
          continue;
        }
        if (item.SN == deviceTarget.SN) {
          if (compareVersions(item.version_Wired, deviceTarget.version_Wired, 2) == 1) {
            item.name = deviceTarget.devicename;
            item.battery = deviceTarget.deviceData?.battery;
            updatesAvailable.push(item);
            continue;
          }
          if (compareVersions(item.version_Wireless, deviceTarget.version_Wireless, 2) == 1) {
            item.name = deviceTarget.devicename;
            item.battery = deviceTarget.deviceData?.battery;
            updatesAvailable.push(item);
            continue;
          }
        }
      }
      for (let keyboardIndex = 0; keyboardIndex < versionData.Keyboard.length; keyboardIndex++) {
        const item = versionData.Keyboard[keyboardIndex];
        if (item.SN == deviceTarget.SN) {
          if (compareVersions(item.version_Wired, deviceTarget.version_Wired, 2) == 1) {
            item.name = deviceTarget.devicename;
            updatesAvailable.push(item);
            continue;
          }
        }
      }
    }
    return updatesAvailable;
  };
  const getFirmwareVersionDataFromServer = async (deviceSN) => {
    const versionFileUrl2 = await AppService.getVersionFileUrl();
    const versionData = await (await fetch(versionFileUrl2)).json();
    for (let mouseIndex = 0; mouseIndex < versionData.Mouse.length; mouseIndex++) {
      const item = versionData.Mouse[mouseIndex];
      if (item.SN == deviceSN) {
        return item;
      }
    }
    for (let keyboardIndex = 0; keyboardIndex < versionData.Keyboard.length; keyboardIndex++) {
      const item = versionData.Keyboard[keyboardIndex];
      if (item.SN == deviceSN) {
        return item;
      }
    }
    return null;
  };
  const beginFirmwareUpdates = async () => {
    await downloadFirmware();
    console.log("all selected device firmware updateres have been downloaded");
    setDevicesCurrentlyUpdating(selectedDevices.map((item) => item.SN));
  };
  const downloadFirmware = () => {
    return new Promise(async (resolve, _) => {
      const existingFirmwareUpdaters = await getDownloadedFirmwareUpdaters();
      const toDownload = selectedDevices.filter((item) => existingFirmwareUpdaters.find((updater) => updater.SN == item.SN) == null);
      if (toDownload.length == 0) {
        resolve();
      }
      for (let i2 = 0; i2 < toDownload.length; i2++) {
        downloadProgressMapRef.current.set(toDownload[i2].SN, 0);
      }
      setDownloadProgressMap(downloadProgressMapRef.current);
      UpdatesService.downloadFirmwareUpdaters(toDownload, (update2) => {
        const deviceUpdate = downloadProgressMapRef.current.get(update2.item.SN);
        if (deviceUpdate == null) {
          return;
        }
        if (update2.type == "start") {
          downloadProgressMapRef.current.set(update2.item.SN, 0);
        } else if (update2.type == "progress") {
          downloadProgressMapRef.current.set(update2.item.SN, update2.value.progress);
        } else if (update2.type == "complete") {
          downloadProgressMapRef.current.set(update2.item.SN, 100);
          if (Array.from(downloadProgressMapRef.current.values()).find((value2) => value2 < 100) == null) {
            resolve();
          }
        } else if (update2.type == "error") {
          console.log(update2);
          downloadProgressMapRef.current.delete(update2.item.SN);
        }
        const newMap = structuredClone(downloadProgressMapRef.current);
        setDownloadProgressMap(newMap);
      });
    });
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "update-manager", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      ContentDialogComponent,
      {
        className: "monitor",
        title: translate("Dialog_UpdateManager_Title", "Update Manager"),
        icon: "",
        open: uiContext.updateManagerModal_isOpen,
        actions: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("button", { type: "button", onClick: () => {
            closeUpdateManager();
          }, children: translate("Dialog_FirmwareUpdate_CancelButton", "Cancel") }, "cancel"),
          /* @__PURE__ */ jsxRuntimeExports.jsx("button", { type: "button", onClick: () => {
            setConfirmationDialogIsOpen(true);
            confirmationResolve.current = (result) => {
              setConfirmationDialogIsOpen(false);
              if (result == false) {
                return;
              }
              beginFirmwareUpdates();
            };
          }, children: translate("Dialog_FirmwareUpdate_OkButton", "Ok") }, "ok")
        ],
        children: firmwareUpdaterStep == "device-select" ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "description", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: translate("Dialog_UpdateManager_DevicesHaveUpdates", "The highlighted devices in the device list have firmware updates available!") }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: translate("Dialog_UpdateManager_SelectDevices", "Select the devices you would like to update:") })
          ] }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "devices", children: /* @__PURE__ */ jsxRuntimeExports.jsx("ul", { className: "items", children: devicesContext.devices == null || devicesContext.devices.length == 0 ? /* @__PURE__ */ jsxRuntimeExports.jsx("li", { className: "no-items", children: /* @__PURE__ */ jsxRuntimeExports.jsx("em", { children: translate("Option_NoDevices", "No Devices Available") }) }, "Option_NoDevices") : devicesContext.devices.map((device2, index2) => {
            return /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "li",
              {
                className: `item device${selectedDevices.find((item) => item.SN == device2.SN) != null ? " selected" : ""}${devicesWithUpdatesAvailable.find((item) => item.SN == device2.SN) != null ? " has-update" : ""}`,
                onClick: async (event) => {
                  event.stopPropagation();
                  event.preventDefault();
                  const newSelectedDevicesValue = structuredClone(selectedDevices);
                  const selectedDeviceIndex = selectedDevices.findIndex((item) => item.SN == device2.SN);
                  if (selectedDeviceIndex == -1) {
                    const firmwareData = await getFirmwareVersionDataFromServer(device2.SN);
                    newSelectedDevicesValue.push(firmwareData);
                  } else {
                    newSelectedDevicesValue.splice(selectedDeviceIndex, 1);
                  }
                  setSelectedDevices(newSelectedDevicesValue);
                },
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "column", children: /* @__PURE__ */ jsxRuntimeExports.jsx(SVGIconComponent, { src: "/images/icons/save-check.svg" }) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "column", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { type: device2.iconType, size: IconSize.Larger }) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "status", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: device2.devicename }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("ul", { className: "tasks", children: selectedDevices.find((item) => item.SN == device2.SN) == null ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}) : DeviceUpdateTasks$1.get(device2.SN).map((task2, index22) => {
                      const totalAccountedPercentage = DeviceUpdateTasks$1.get(device2.SN).reduce((acc, item) => {
                        return item.percentageOfTotal == null ? acc : acc + item.percentageOfTotal;
                      }, 0);
                      const undefinedPercentageItems = DeviceUpdateTasks$1.get(device2.SN).filter((item) => item.percentageOfTotal == null);
                      const calculatedPercentage = (100 - totalAccountedPercentage) / undefinedPercentageItems.length;
                      const percentage = task2.percentageOfTotal != null ? task2.percentageOfTotal : calculatedPercentage;
                      const downloadProgress = downloadProgressMap.get(device2.SN) == null ? 0 : downloadProgressMap.get(device2.SN);
                      const updateProgressValue = updateProgressMap.get(device2.SN) == null ? 0 : updateProgressMap.get(device2.SN);
                      let updateProgressPercent_Device;
                      let updateProgressPercent_Accessory;
                      if (Array.isArray(updateProgressValue)) {
                        updateProgressPercent_Device = updateProgressValue[0];
                        updateProgressPercent_Accessory = updateProgressValue[1];
                      } else {
                        updateProgressPercent_Device = updateProgressValue;
                      }
                      console.log(downloadProgress, updateProgressMap, updateProgressValue, updateProgressPercent_Device, updateProgressPercent_Accessory);
                      const currentValue = index22 == 0 ? downloadProgress : index22 == 1 ? updateProgressPercent_Device : updateProgressPercent_Accessory;
                      return /* @__PURE__ */ jsxRuntimeExports.jsx("li", { className: "task", title: task2.translate, style: { "--width": `${percentage}%` }, children: /* @__PURE__ */ jsxRuntimeExports.jsx("progress", { max: "100", value: currentValue }) }, device2.SN + index22);
                    }) })
                  ] })
                ]
              },
              device2.SN + index2
            );
          }) }) })
        ] }) : ""
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      ContentDialogComponent,
      {
        className: "confirmation",
        title: translate("Dialog_UpdateManager_PreUpdateWarning_Title", "Warning"),
        icon: confirmationDialogData.icon,
        open: confirmationDialogIsOpen,
        actions: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("button", { type: "button", onClick: () => {
            if (confirmationResolve.current != null) {
              confirmationResolve.current(false);
            }
            setConfirmationDialogIsOpen(false);
          }, children: translate("Button_Cancel", "Cancel") }, "Button_Cancel"),
          /* @__PURE__ */ jsxRuntimeExports.jsx("button", { type: "button", onClick: () => {
            if (confirmationResolve.current != null) {
              confirmationResolve.current(true);
            }
            setConfirmationDialogIsOpen(false);
          }, children: translate("Button_Ok", "Ok") }, "Button_Ok")
        ],
        children: /* @__PURE__ */ jsxRuntimeExports.jsx("section", { children: translate("Dialog_UpdateManager_PreUpdateWarning_Description", "Some of the selected devices for updates do not have both their cable and wireless receiver plugged in. Are you sure you want to continue?") })
      }
    )
  ] });
}
const debugOverlayComponent = "";
const mockDeviceProvider_component = "";
function MockDeviceProviderComponent(props) {
  const { onDevicesLoaded, onMockDeviceConnected } = props;
  const gatherEnabled = false;
  const [devices, setDevices] = reactExports.useState();
  const [selectedDevice, setSelectedDevice] = reactExports.useState(null);
  const connectHandler = reactExports.useCallback(() => handleConnect(selectedDevice), [selectedDevice]);
  reactExports.useCallback(() => handleGather(setDevices), []);
  const disconnectHandler = reactExports.useCallback(() => handleDisconnect(selectedDevice), [selectedDevice]);
  const disconnectAllHandler = reactExports.useCallback(() => handleDisconnectAll(), []);
  const handleApiCall = async (channel, payload) => {
    const res = await IPCService.invoke(channel, payload);
    if (!res.success) {
      console.error(res);
    } else {
      return res.data;
    }
  };
  const handleConnect = async (device2) => {
    const response = await handleApiCall(MessageChannels.DeviceChannel.MockDeviceRegister, device2);
    if (response.success) {
      onMockDeviceConnected(device2);
      console.log("Device connected successfully!");
    } else {
      console.error("Failed to connect device!");
    }
  };
  const handleGather = async (setDevices2) => {
    await handleApiCall(MessageChannels.DeviceChannel.MockDeviceCollect, void 0).then((data) => setDevices2(data));
  };
  const handleLoad = async () => {
    const devices2 = await handleApiCall(MessageChannels.DeviceChannel.MockDeviceLoad, void 0);
    setDevices(devices2);
    onDevicesLoaded(devices2);
  };
  const handleDisconnect = async (device2) => {
    const response = await handleApiCall(MessageChannels.DeviceChannel.MockDeviceUnregister, device2);
    if (response.success) {
      console.log("Device connected successfully!");
    } else {
      console.error("Failed to connect device!");
    }
  };
  const handleDisconnectAll = async () => {
    handleApiCall(MessageChannels.DeviceChannel.MockDeviceUnregister, void 0);
  };
  reactExports.useEffect(() => {
    handleLoad();
  }, []);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "content", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "appConfig", children: devices && /* @__PURE__ */ jsxRuntimeExports.jsx("select", { onChange: (e) => setSelectedDevice(devices[e.target.selectedIndex]), children: devices.map((device2, index2) => /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: device2, children: device2.product + " " + device2.vendorId.toString(16).padStart(4, "0") + " " + device2.productId.toString(16).padStart(4, "0") + device2.path }, index2)) }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "appConfig", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("button", { onClick: connectHandler, children: "connect selected" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("button", { onClick: disconnectHandler, children: "disconnect selected" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("button", { onClick: disconnectAllHandler, children: "disconnect all" }),
      gatherEnabled
    ] })
  ] });
}
function FirmwareSelectorComponent() {
  const [options, setOptions] = reactExports.useState([]);
  const [selected2, setSelected] = reactExports.useState(Number);
  const inputFile = reactExports.useRef(null);
  const optionChanged = async (index2) => {
    if (index2 === 0) {
      setSelected(index2);
      firmwareOverrideSelected(null);
    } else if (index2 === options.length - 1) {
      inputFile?.current?.click();
    } else {
      setSelected(index2);
      firmwareOverrideSelected(options[index2]);
    }
  };
  const fileSelected = (file) => {
    if (file && file.name != "") {
      const position = options.length - 1;
      const fileData = { name: file.name, path: file.path };
      options.splice(position, 0, fileData);
      setSelected(position);
      firmwareOverrideSelected(fileData).then((r2) => console.log(r2.data));
    }
  };
  const firmwareOverrideSelected = async (file) => {
    const fileArray = file ? [file] : null;
    const res = await IPCService.invoke(AppChannel.SetFirmwareOverrides, fileArray);
    if (!res.success) {
      console.log("Failed to set firmware override files!");
    }
    return res;
  };
  reactExports.useEffect(() => {
    if (!options || options.length == 0) {
      setOptions([{ name: "Default (Use url)", path: "" }, { name: "Select firmware file...", path: "" }]);
    }
  }, []);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: "Firmware Selector" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("select", { value: selected2, onChange: (e) => optionChanged(e.target.selectedIndex), children: options && options.map((value2, index2) => /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: index2, children: value2.name }, index2)) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      "input",
      {
        type: "file",
        id: "file",
        ref: inputFile,
        style: { display: "none" },
        multiple: false,
        accept: ".zip,.exe",
        onChange: (e) => {
          fileSelected(e.target.files?.item(0));
        }
      }
    )
  ] });
}
const deviceHidSenderComponent = "";
const defaultVID = 12625;
const defaultPID = 16437;
const defaultReportID = 0;
const defaultUsage = 2;
const defaultUsagePage = 65535;
const minimumCommandLength = 7;
const defaultCommandLength = 8;
function HidReportSenderComponent() {
  const [vid, setVID] = reactExports.useState(defaultVID);
  const [pid, setPID] = reactExports.useState(defaultPID);
  const [usage, setUsage] = reactExports.useState(defaultUsage);
  const [usagePage, setUsagePage] = reactExports.useState(defaultUsagePage);
  const [reportID, setReportID] = reactExports.useState(defaultReportID);
  const [report, setReport] = reactExports.useState([]);
  const [messageParts, setMessageParts] = reactExports.useState(new Array(defaultCommandLength).fill(""));
  const inputRefs = new Array(8).fill(0).map(() => reactExports.createRef());
  const handlePartChange = (index2, part) => {
    if (!isHex(part))
      return;
    const newParts = [...messageParts];
    newParts[index2] = part;
    setMessageParts(newParts);
    if (isHex(part)) {
      setReport(toByteArray(newParts.join("")));
      if (part.length === 2 && index2 < defaultCommandLength) {
        inputRefs[index2 + 1].current?.focus();
      }
    }
  };
  const handleKeyDown = (event, index2) => {
    if (event.key === "Backspace" && event.currentTarget.value === "" && index2 > 0) {
      inputRefs[index2 - 1].current?.focus();
    }
  };
  const handleMessageChange = (message) => {
    const parts = message.match(/.{1,2}/g) || [];
    while (parts.length < defaultCommandLength)
      parts.push("");
    setMessageParts(parts);
    if (isHex(message)) {
      setReport(toByteArray(message));
    }
  };
  const isHex = (value2) => {
    const re2 = /^[0-9A-Fa-f]*$/g;
    return re2.test(value2);
  };
  const toHexNumber = (value2) => {
    return isHex(value2) ? parseInt(value2, 16) : 0;
  };
  const toByteArray = (value2) => {
    let byteArray = [];
    for (let i2 = 0; i2 < value2.length - 1; i2 += 2) {
      const token = value2.slice(i2, i2 + 2);
      byteArray.push(parseInt(token, 16));
    }
    return byteArray;
  };
  const send = async () => {
    if (report.length < minimumCommandLength)
      return;
    const data = { vid, pid, usagePage, usage, reportID, report };
    const response = await IPCService.invoke(MessageChannels.DeviceChannel.DeviceSendHidReport, data);
    if (response.success) {
      console.log("success, bytes written: ", response.data);
    } else {
      console.log("failure: ", response.data);
    }
  };
  const getValidColor = (val) => {
    console.log(val.length);
    return val.length >= minimumCommandLength ? "#67c900" : "black";
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("label", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { children: "Send Report To HID Device" }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { style: { display: "flex", justifyContent: "space-between" }, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "DeviceDescription", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "label-flex", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label-span", children: "ReportID:" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              style: { width: "2em" },
              value: reportID.toString(16),
              onChange: (e) => {
                const val = e.target.value;
                if (isHex(val) && val.length <= 2)
                  setReportID(toHexNumber(val.toUpperCase()));
              }
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "label-flex", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label-span", children: "VID:" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              className: "input-small-width",
              value: vid.toString(16) == "NaN" ? "" : vid.toString(16),
              onChange: (e) => {
                const val = e.target.value;
                if (isHex(val) && val.length <= 4)
                  setVID(toHexNumber(val.toUpperCase()));
              }
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "label-flex", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label-span", children: "PID:" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              className: "input-small-width",
              value: pid.toString(16) == "NaN" ? "" : pid.toString(16),
              onChange: (e) => {
                const val = e.target.value;
                if (isHex(val) && val.length <= 4)
                  setPID(toHexNumber(val.toUpperCase()));
              }
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "label-flex", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label-span", children: "Usage:" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              className: "input-small-width",
              value: usage.toString(16) == "NaN" ? "" : usage.toString(16),
              onChange: (e) => {
                const val = e.target.value;
                if (isHex(val) && val.length <= 4)
                  setUsage(toHexNumber(val.toUpperCase()));
              }
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "label-flex", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label-span", children: "Usage Page:" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              className: "input-small-width",
              value: usagePage.toString(16) == "NaN" ? "" : usagePage.toString(16),
              onChange: (e) => {
                const val = e.target.value;
                if (isHex(val) && val.length <= 4)
                  setUsagePage(toHexNumber(val.toUpperCase()));
              }
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "Message", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { children: "Message:" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: messageParts.map((part, index2) => /* @__PURE__ */ jsxRuntimeExports.jsx(
          "input",
          {
            type: "text",
            ref: inputRefs[index2],
            value: part,
            maxLength: 2,
            style: { width: "2em" },
            onChange: (e) => handlePartChange(index2, e.target.value),
            onKeyDown: (e) => handleKeyDown(e, index2)
          },
          index2
        )) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "input",
          {
            type: "text",
            value: messageParts.join(""),
            onChange: (e) => handleMessageChange(e.target.value),
            style: { color: getValidColor(report), width: `${2 * messageParts.length}em` }
          }
        )
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("button", { onClick: send, disabled: report.length < minimumCommandLength, children: "Send" })
    ] })
  ] });
}
function DebugOverlayComponent(props) {
  const { visible } = props;
  const [show, setShow] = reactExports.useState(visible);
  const [icons, setIcons] = reactExports.useState([]);
  reactExports.useEffect(() => {
    const keyPressHandler = (e) => {
      if (e.ctrlKey && e.key == "d") {
        setShow(!show);
      }
    };
    document.addEventListener("keydown", keyPressHandler);
    return () => document.removeEventListener("keydown", keyPressHandler);
  }, [show]);
  reactExports.useEffect(() => {
    const icons2 = [];
    for (const [key, value2] of Object.entries(IconType)) {
      let iconDimensions = void 0;
      switch (value2) {
        case IconType.ModelODevice:
          iconDimensions = UniqueIconSizeMap.get(UniqueIconSize.ModelO);
          break;
        case IconType.ModelDDevice:
          iconDimensions = UniqueIconSizeMap.get(UniqueIconSize.ModelD);
          break;
        case IconType.ModelIDevice:
          iconDimensions = UniqueIconSizeMap.get(UniqueIconSize.ModelI);
          break;
        case IconType.GMMKPRODevice:
          iconDimensions = UniqueIconSizeMap.get(UniqueIconSize.GMMKPRO);
          break;
        case IconType.GMMK265Device:
          iconDimensions = UniqueIconSizeMap.get(UniqueIconSize.GMMK265);
          break;
        case IconType.GMMK296Device:
          iconDimensions = UniqueIconSizeMap.get(UniqueIconSize.GMMK296);
          break;
        case IconType.NumpadDevice:
          iconDimensions = UniqueIconSizeMap.get(UniqueIconSize.Numpad);
          break;
        case IconType.Drag:
          iconDimensions = UniqueIconSizeMap.get(UniqueIconSize.Drag);
          break;
        case IconType.LayerTop:
          iconDimensions = UniqueIconSizeMap.get(UniqueIconSize.LayerTop);
          break;
        case IconType.LayerUnderneath:
          iconDimensions = UniqueIconSizeMap.get(UniqueIconSize.LayerUnderneath);
          break;
        case IconType.NavigationArrow:
          iconDimensions = UniqueIconSizeMap.get(UniqueIconSize.NavigationArrow);
          break;
        case IconType.DocumentMagnifyingGlass:
          iconDimensions = UniqueIconSizeMap.get(UniqueIconSize.DocumentMagnifyingGlass);
          break;
        case IconType.USBSymbol:
          iconDimensions = UniqueIconSizeMap.get(UniqueIconSize.USBSymbol);
          break;
        default:
          iconDimensions = void 0;
      }
      icons2.push(/* @__PURE__ */ jsxRuntimeExports.jsx(
        Icon,
        {
          type: value2,
          size: IconSize.Medium,
          width: iconDimensions == void 0 ? void 0 : iconDimensions.width,
          height: iconDimensions == void 0 ? void 0 : iconDimensions.height
        },
        key
      ));
    }
    setIcons(icons2);
  }, [IconType]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("dialog", { className: "debug-overlay", open: show, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: "Debug settings" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      MockDeviceProviderComponent,
      {
        onDevicesLoaded: (devices) => {
          console.log(devices);
        }
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(FirmwareSelectorComponent, {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx(HidReportSenderComponent, {}),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("section", { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("header", { children: "Icons" }),
      icons
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      "button",
      {
        onClick: () => {
          setShow(false);
        },
        children: "Close overlay"
      }
    )
  ] }) });
}
const device = "_device_kudpw_1";
const monitor = "_monitor_kudpw_11";
const tasks = "_tasks_kudpw_25";
const task = "_task_kudpw_25";
const taskprogress = "_taskprogress_kudpw_51";
const style = {
  device,
  monitor,
  tasks,
  task,
  taskprogress
};
const UpdateTasks_Wired = [
  { key: "download", translate: "FirmwareUpdate_Task_Download", percentageOfTotal: 20 },
  { key: "updateDevice", translate: "FirmwareUpdate_Task_UpdateDevice" }
];
const UpdateTasks_WirelessReceiver = [
  { key: "download", translate: "FirmwareUpdate_Task_Download", percentageOfTotal: 20 },
  { key: "updateDevice", translate: "FirmwareUpdate_Task_UpdateDevice" },
  { key: "updateReceiver", translate: "FirmwareUpdate_Task_UpdateReceiver" }
];
const DeviceUpdateTasks = new Map(
  Object.entries(
    {
      "0x320F0x5044": UpdateTasks_Wired,
      // GMMK PRO
      "0x320F0x5092": UpdateTasks_Wired,
      // GMMK PRO
      "0x320F0x5046": UpdateTasks_Wired,
      // GMMK PRO ISO
      "0x320F0x5093": UpdateTasks_Wired,
      // GMMK PRO ISO
      "0x320F0x504A": UpdateTasks_Wired,
      // GMMK v2 65 ISO
      "0x320F0x5045": UpdateTasks_Wired,
      // GMMK v2 65 US
      "0x320F0x505A": UpdateTasks_Wired,
      // GMMK v2 96 ISO
      "0x320F0x504B": UpdateTasks_Wired,
      // GMMK v2 96 US
      "0x320F0x5088": UpdateTasks_Wired,
      // GMMK Numpad
      "0x342D0xE3C5": UpdateTasks_Wired,
      // valueB
      "0x342D0xE3CE": UpdateTasks_Wired,
      // valueBISO
      "0x342D0xE3CB": UpdateTasks_WirelessReceiver,
      // valueBWireless
      "0x342D0xE3D4": UpdateTasks_WirelessReceiver,
      // valueBWirelessISO
      "0x342D0xE3C7": UpdateTasks_Wired,
      // valueB65
      "0x342D0xE3D0": UpdateTasks_Wired,
      // valueB65ISO
      "0x342D0xE3CD": UpdateTasks_WirelessReceiver,
      // valueB65Wireless
      "0x342D0xE3D6": UpdateTasks_WirelessReceiver,
      // valueB65WirelessISO
      "0x342D0xE3C6": UpdateTasks_Wired,
      // valueB75
      "0x342D0xE3CF": UpdateTasks_Wired,
      // valueB75ISO
      "0x342D0xE3CC": UpdateTasks_WirelessReceiver,
      // valueB75Wireless
      "0x342D0xE3D5": UpdateTasks_WirelessReceiver,
      // valueB75WirelessISO
      "0x342D0xE3C8": UpdateTasks_Wired,
      // valueD100
      "0x342D0xE3D1": UpdateTasks_Wired,
      // valueD100ISO
      "0x342D0xE3C9": UpdateTasks_Wired,
      // valueD75
      "0x342D0xE3D2": UpdateTasks_Wired,
      // valueD75ISO
      "0x342D0xE3CA": UpdateTasks_Wired,
      // valueD65
      "0x342D0xE3D3": UpdateTasks_Wired,
      // valueD65ISO
      "0x342D0xE3D7": UpdateTasks_WirelessReceiver,
      // valueC 65% Wireless ANSI
      "0x342D0xE3D8": UpdateTasks_WirelessReceiver,
      // valueC 75% Wireless ANSI
      "0x342D0xE3D9": UpdateTasks_WirelessReceiver,
      // valueC 100% Wireless ANSI
      "0x342D0xE3EC": UpdateTasks_WirelessReceiver,
      // valueC 65% Wireless ISO
      "0x342D0xE3ED": UpdateTasks_WirelessReceiver,
      // valueC 75% Wireless ISO
      "0x342D0xE3EE": UpdateTasks_WirelessReceiver,
      // valueC 100% Wireless ISO
      "0x342D0xE3DA": UpdateTasks_Wired,
      // valueC 65% ANSI
      "0x342D0xE3DB": UpdateTasks_Wired,
      // valueC 75% ANSI
      "0x342D0xE3DC": UpdateTasks_Wired,
      // valueC 100% ANSI
      "0x342D0xE3EF": UpdateTasks_Wired,
      // valueC 65% ISO
      "0x342D0xE3F0": UpdateTasks_Wired,
      // valueC 75% ISO
      "0x342D0xE3F1": UpdateTasks_Wired,
      // valueC 100% ISO
      "0x342D0xE3DD": UpdateTasks_Wired,
      // valueA valueD HE 65% ANSI
      "0x342D0xE3F2": UpdateTasks_Wired,
      // valueA valueD HE 65% ISO
      "0x342D0xE3DE": UpdateTasks_Wired,
      // valueA valueD HE 75% ANSI
      "0x342D0xE3F3": UpdateTasks_Wired,
      // valueA valueD HE 75% ISO
      "0x342D0xE3DF": UpdateTasks_Wired,
      // valueA valueD HE 100% ANSI
      "0x342D0xE3F4": UpdateTasks_Wired,
      // valueA valueD HE 100% ISO
      "0x320F0x8888": UpdateTasks_Wired,
      // Model O Wired
      "0x258A0x2011": UpdateTasks_WirelessReceiver,
      // Model O Wireless
      "0x258A0x2036": UpdateTasks_Wired,
      // Model O Minus Wired
      "0x258A0x2013": UpdateTasks_WirelessReceiver,
      // Model O Minus Wireless
      "0x258A0x2015": UpdateTasks_WirelessReceiver,
      // Model O Pro Wireless
      "0x320F0x823A": UpdateTasks_Wired,
      // Model O2 Wired
      "0x093A0x822A": UpdateTasks_WirelessReceiver,
      // Model O2 Wireless
      "0x258A0x2019": UpdateTasks_WirelessReceiver,
      // Model O2 Pro 1k
      "0x258A0x201B": UpdateTasks_WirelessReceiver,
      // Model O 2 Pro 8k
      "0x258A0x2012": UpdateTasks_WirelessReceiver,
      // Model D Wireless
      "0x258A0x2014": UpdateTasks_WirelessReceiver,
      // Model D Minus Wireless
      "0x258A0x2017": UpdateTasks_WirelessReceiver,
      // Model D Pro Wireless
      "0x258A0x201A": UpdateTasks_WirelessReceiver,
      // Model D 2 Pro 1k
      "0x258A0x201C": UpdateTasks_WirelessReceiver,
      // Model D 2 Pro 8k
      "0x22D40x1503": UpdateTasks_Wired,
      // Model I
      "0x093A0x821A": UpdateTasks_WirelessReceiver,
      // Model I2
      "0x320F0x831A": UpdateTasks_Wired,
      // Model valueG
      "0x320F0x825A": UpdateTasks_Wired,
      // Model D2 Wired
      "0x093A0x824A": UpdateTasks_WirelessReceiver,
      // Model D2 Wireless
      "0x258A0x2018": UpdateTasks_WirelessReceiver,
      // Series One Pro Wireless
      "0x258A0x201D": UpdateTasks_WirelessReceiver,
      //valueH Pro (8k wireless)
      "0x093A0x826A": UpdateTasks_WirelessReceiver,
      //valueF Wireless
      "0x320F0x827A": UpdateTasks_Wired,
      //valueF
      "0x12CF0x0491": UpdateTasks_Wired,
      //GMP 2 GLO
      "0x24420x2682": UpdateTasks_Wired,
      // temporary valueB
      "0x24420x0056": UpdateTasks_WirelessReceiver,
      // temporary valueB Wireless
      "0x24420x0052": UpdateTasks_Wired,
      // temporary valueB 65%
      "0x24420x0054": UpdateTasks_WirelessReceiver,
      // temporary valueB 65% Wireless
      "0x24420x0053": UpdateTasks_Wired,
      // temporary valueB 75%
      "0x24420x0055": UpdateTasks_WirelessReceiver
      // temporary valueB 75% Wireless
    }
  )
);
class ComponentState {
  deviceIcon = IconType.ModelODevice;
  deviceSN = "";
}
const WiredDeviceSet = /* @__PURE__ */ new Set(["USB"]);
const WirelessMouseSet = /* @__PURE__ */ new Set(["USB", "Dongle"]);
const WirelessKeyboardSet = /* @__PURE__ */ new Set(["USB", "Dongle"]);
const ValidUpdateDeviceStateArray = new Map(
  Object.entries({
    "0x320F0x5044": WiredDeviceSet,
    // GMMK PRO
    "0x320F0x5092": WiredDeviceSet,
    // GMMK PRO
    "0x320F0x5046": WiredDeviceSet,
    // GMMK PRO ISO
    "0x320F0x5093": WiredDeviceSet,
    // GMMK PRO ISO
    "0x320F0x504A": WiredDeviceSet,
    // GMMK v2 65 ISO
    "0x320F0x5045": WiredDeviceSet,
    // GMMK v2 65 US
    "0x320F0x505A": WiredDeviceSet,
    // GMMK v2 96 ISO
    "0x320F0x504B": WiredDeviceSet,
    // GMMK v2 96 US
    "0x320F0x5088": WiredDeviceSet,
    // GMMK Numpad
    "0x342D0xE3C5": WiredDeviceSet,
    // valueB
    "0x342D0xE3CE": WiredDeviceSet,
    // valueBISO
    "0x342D0xE3CB": WirelessKeyboardSet,
    // valueBWireless
    "0x342D0xE3D4": WirelessKeyboardSet,
    // valueBWirelessISO
    "0x342D0xE3C7": WiredDeviceSet,
    // valueB65
    "0x342D0xE3D0": WiredDeviceSet,
    // valueB65ISO
    "0x342D0xE3CD": WirelessKeyboardSet,
    // valueB65Wireless
    "0x342D0xE3D6": WirelessKeyboardSet,
    // valueB65WirelessISO
    "0x342D0xE3C6": WiredDeviceSet,
    // valueB75
    "0x342D0xE3CF": WiredDeviceSet,
    // valueB75ISO
    "0x342D0xE3CC": WirelessKeyboardSet,
    // valueB75Wireless
    "0x342D0xE3D5": WirelessKeyboardSet,
    // valueB75WirelessISO
    "0x342D0xE3C8": WiredDeviceSet,
    // valueD100
    "0x342D0xE3D1": WiredDeviceSet,
    // valueD100ISO
    "0x342D0xE3C9": WiredDeviceSet,
    // valueD75
    "0x342D0xE3D2": WiredDeviceSet,
    // valueD75ISO
    "0x342D0xE3CA": WiredDeviceSet,
    // valueD65
    "0x342D0xE3D3": WiredDeviceSet,
    // valueD65ISO
    "0x342D0xE3D7": WirelessKeyboardSet,
    // valueC 65% Wireless ANSI
    "0x342D0xE3D8": WirelessKeyboardSet,
    // valueC 75% Wireless ANSI
    "0x342D0xE3D9": WirelessKeyboardSet,
    // valueC 100% Wireless ANSI
    "0x342D0xE3EC": WirelessKeyboardSet,
    // valueC 65% Wireless ISO
    "0x342D0xE3ED": WirelessKeyboardSet,
    // valueC 75% Wireless ISO
    "0x342D0xE3EE": WirelessKeyboardSet,
    // valueC 100% Wireless ISO
    "0x342D0xE3DA": WiredDeviceSet,
    // valueC 65% ANSI
    "0x342D0xE3DB": WiredDeviceSet,
    // valueC 75% ANSI
    "0x342D0xE3DC": WiredDeviceSet,
    // valueC 100% ANSI
    "0x342D0xE3EF": WiredDeviceSet,
    // valueC 65% ISO
    "0x342D0xE3F0": WiredDeviceSet,
    // valueC 75% ISO
    "0x342D0xE3F1": WiredDeviceSet,
    // valueC 100% ISO
    "0x342D0xE3DD": WiredDeviceSet,
    // valueA valueD HE 65% ANSI
    "0x342D0xE3F2": WiredDeviceSet,
    // valueA valueD HE 65% ISO
    "0x342D0xE3DE": WiredDeviceSet,
    // valueA valueD HE 75% ANSI
    "0x342D0xE3F3": WiredDeviceSet,
    // valueA valueD HE 75% ISO
    "0x342D0xE3DF": WiredDeviceSet,
    // valueA valueD HE 100% ANSI
    "0x342D0xE3F4": WiredDeviceSet,
    // valueA valueD HE 100% ISO
    "0x320F0x8888": WiredDeviceSet,
    // Model O Wired
    "0x258A0x2011": WirelessMouseSet,
    // Model O Wireless
    "0x258A0x2036": WiredDeviceSet,
    // Model O Minus Wired
    "0x258A0x2013": WirelessMouseSet,
    // Model O Minus Wireless
    "0x258A0x2015": WirelessMouseSet,
    // Model O Pro Wireless
    "0x320F0x823A": WiredDeviceSet,
    // Model O2 Wired
    "0x093A0x822A": WirelessMouseSet,
    // Model O2 Wireless
    "0x258A0x2019": WirelessMouseSet,
    // Model O2 Pro 1k
    "0x258A0x201B": WirelessMouseSet,
    // Model O 2 Pro 8k
    "0x258A0x2012": WirelessMouseSet,
    // Model D Wireless
    "0x258A0x2014": WirelessMouseSet,
    // Model D Minus Wireless
    "0x258A0x2017": WirelessMouseSet,
    // Model D Pro Wireless
    "0x258A0x201A": WirelessMouseSet,
    // Model D 2 Pro 1k
    "0x258A0x201C": WirelessMouseSet,
    // Model D 2 Pro 8k
    "0x22D40x1503": WiredDeviceSet,
    // Model I
    "0x093A0x821A": WirelessMouseSet,
    // Model I2
    "0x320F0x831A": WiredDeviceSet,
    // Model valueG
    "0x320F0x825A": WiredDeviceSet,
    // Model D2 Wired
    "0x093A0x824A": WirelessMouseSet,
    // Model D2 Wireless
    "0x258A0x2018": WirelessMouseSet,
    // Series One Pro Wireless
    "0x258A0x201D": WirelessMouseSet,
    //valueH Pro (8k wireless)
    "0x093A0x826A": WirelessMouseSet,
    //valueF Wireless
    "0x320F0x827A": WiredDeviceSet,
    //valueF
    // '0x12CF0x0491': [], // RGB valueJ
    "0x12CF0x0491": WiredDeviceSet,
    //GMP 2 GLO
    "0x24420x2682": WiredDeviceSet,
    // temporary valueB
    "0x24420x0056": WirelessKeyboardSet,
    // temporary valueB Wireless
    "0x24420x0052": WiredDeviceSet,
    // temporary valueB 65%
    "0x24420x0054": WirelessKeyboardSet,
    // temporary valueB 65% Wireless
    "0x24420x0053": WiredDeviceSet,
    // temporary valueB 75%
    "0x24420x0055": WirelessKeyboardSet
    // temporary valueB 75% Wireless
  })
);
function UpdateDeviceComponent(props) {
  reactExports.useState("pending");
  const [confirmationDialogIsOpen, setConfirmationDialogIsOpen] = reactExports.useState(false);
  const [confirmationDialogData, setConfirmationDialogData] = reactExports.useState({ text: "", title: "", icon: "" });
  const confirmationResolve = reactExports.useRef(null);
  reactExports.useState([]);
  reactExports.useState([]);
  const [downloadProgress, setDownloadProgress] = reactExports.useState(0);
  const [deviceProgress, setDeviceProgress] = reactExports.useState(0);
  const [accessoryProgress, setAccessoryProgress] = reactExports.useState(0);
  const [statusMessage, setStatusMessage] = reactExports.useState("");
  reactExports.useRef(/* @__PURE__ */ new Map());
  reactExports.useState(/* @__PURE__ */ new Map());
  reactExports.useRef(/* @__PURE__ */ new Map());
  const [componentState, setComponentState] = reactExports.useState(new ComponentState());
  const translate = useTranslate();
  const devicesContext = useDevicesContext();
  const { setDevicesCurrentlyUpdating, refreshDevices } = useDevicesManagementContext();
  const uiContext = useUIContext();
  const { closeDeviceUpdateModal } = useUIUpdateContext();
  const [isUpdating, setIsUpdating] = reactExports.useState(false);
  reactExports.useEffect(() => {
    console.log("update model isOpen changed");
    setDownloadProgress(0);
    setDeviceProgress(0);
    setAccessoryProgress(0);
    setStatusMessage("");
  }, [uiContext.updateDeviceModal_isOpen]);
  reactExports.useEffect(() => {
    if (devicesContext.previewDevice == null) {
      return;
    }
    componentState.deviceSN = devicesContext.previewDevice.SN;
  }, [devicesContext.previewDevice]);
  const getDownloadedFirmwareUpdaters = async () => {
    const files = await UpdatesService.getDownloadedFirmwareUpdaters();
    return files;
  };
  const getFirmwareVersionDataFromServer = async (deviceSN) => {
    const versionData = await UpdatesService.getRemoteVersionManifest();
    const mouseData = versionData?.Mouse?.find((item) => item.SN == deviceSN);
    if (mouseData)
      return mouseData;
    const keyboardData = versionData?.Keyboard?.find((item) => item.SN == deviceSN);
    if (keyboardData)
      return keyboardData;
    const valueJData = versionData?.valueJ?.find((item) => item.SN == deviceSN);
    if (valueJData)
      return valueJData;
    console.error(`Failed to find update url for: ${deviceSN}`, versionData);
    return null;
  };
  const beginFirmwareUpdates = async () => {
    setIsUpdating(true);
    await downloadFirmware();
    console.log("all selected device firmware updaters have been downloaded");
    setDevicesCurrentlyUpdating([componentState.deviceSN]);
    const success = await updateSelectedDevices();
    if (success == true) {
      setStatusMessage("Update completed successfully!");
    } else {
      setStatusMessage("An error occurred during the update.");
    }
    setIsUpdating(false);
  };
  const downloadFirmware = () => {
    setDownloadProgress(0);
    setDeviceProgress(0);
    setAccessoryProgress(0);
    return new Promise(async (resolve, _) => {
      const existingFirmwareUpdaters = await getDownloadedFirmwareUpdaters();
      const existingDeviceUpdate = existingFirmwareUpdaters.find(
        (updater) => updater.SN == componentState.deviceSN
      );
      if (existingDeviceUpdate != null) {
        setDownloadProgress(100);
        resolve();
        return;
      }
      const firmwareData = await getFirmwareVersionDataFromServer(componentState.deviceSN);
      if (firmwareData == null)
        return;
      UpdatesService.downloadFirmwareUpdaters([firmwareData], (update2) => {
        if (update2.type == "start") {
          setDownloadProgress(0);
        } else if (update2.type == "progress") {
          setDownloadProgress(update2.value.progress);
        } else if (update2.type == "complete") {
          setDownloadProgress(100);
          resolve();
        } else if (update2.type == "error") {
          setStatusMessage("An error occurred during the update.");
          setIsUpdating(false);
          resolve();
          console.log(update2);
        }
      });
    });
  };
  const updateSelectedDevices = async () => {
    setDeviceProgress(0);
    setAccessoryProgress(0);
    return new Promise(async (resolve) => {
      try {
        const firmwareData = await getFirmwareVersionDataFromServer(componentState.deviceSN);
        UpdatesService.beginFirmwareUpdates([firmwareData], (update2) => {
          console.log(update2);
          if (update2.type == "start") {
            setDeviceProgress(0);
            setAccessoryProgress(0);
          } else if (update2.type == "progress") {
            const validSet = ValidUpdateDeviceStateArray.get(devicesContext.previewDevice?.SN ?? "");
            if (validSet == null) {
              setDeviceProgress(update2.value);
            } else {
              if (validSet.has("Dongle")) {
                const valueIndex = update2.value <= 50 ? 0 : 1;
                if (valueIndex == 0) {
                  setDeviceProgress(update2.value * 2);
                } else if (valueIndex == 1) {
                  setAccessoryProgress((update2.value - 50) * 2);
                }
              } else {
                setDeviceProgress(update2.value);
              }
            }
          } else if (update2.type == "complete") {
            setDeviceProgress(100);
            setAccessoryProgress(100);
            resolve(true);
          } else if (update2.type == "error") {
            setIsUpdating(false);
            resolve(false);
            setStatusMessage("An error occurred during the update.");
            console.log(update2);
          }
        });
      } finally {
      }
    });
  };
  const getDeviceUpdateTasks = (deviceSN) => {
    if (deviceSN == null || deviceSN == "")
      return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {});
    const deviceUpdateTasks = DeviceUpdateTasks.get(deviceSN);
    if (deviceUpdateTasks == null || deviceUpdateTasks.length == 0)
      return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {});
    return deviceUpdateTasks.map((task2, index2) => {
      const totalAccountedPercentage = deviceUpdateTasks.reduce((acc, item) => {
        return item.percentageOfTotal == null ? acc : acc + item.percentageOfTotal;
      }, 0);
      const undefinedPercentageItems = deviceUpdateTasks.filter((item) => item.percentageOfTotal == null);
      const calculatedPercentage = (100 - totalAccountedPercentage) / undefinedPercentageItems.length;
      const percentage = task2.percentageOfTotal != null ? task2.percentageOfTotal : calculatedPercentage;
      const currentValue = index2 == 0 ? downloadProgress : index2 == 1 ? deviceProgress : accessoryProgress;
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        "li",
        {
          className: style.task,
          title: translate(task2.translate),
          style: { "--width": `${percentage}%` },
          children: /* @__PURE__ */ jsxRuntimeExports.jsx("progress", { className: style.taskprogress, max: "100", value: currentValue })
        },
        deviceSN + index2
      );
    });
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "update-device", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      ContentDialogComponent,
      {
        className: style.monitor,
        title: `${translate("Dialog_UpdateDevice_Title", "Update")} ${translate(`DeviceName_${devicesContext.previewDevice?.SN}`, devicesContext.previewDevice?.devicename)}`,
        icon: /* @__PURE__ */ jsxRuntimeExports.jsx(
          Icon,
          {
            type: IconType.CircleArrow,
            color: Color.Glorange60,
            size: IconSize.Large,
            className: "update-icon"
          }
        ),
        open: uiContext.updateDeviceModal_isOpen,
        actions: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              style: { display: statusMessage != "" ? "none" : void 0 },
              type: "button",
              onClick: () => {
                setIsUpdating(false);
                closeDeviceUpdateModal();
              },
              children: translate("Dialog_FirmwareUpdate_CancelButton", "Cancel")
            },
            "cancel"
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              type: "button",
              disabled: isUpdating,
              onClick: () => {
                if (statusMessage != "") {
                  closeDeviceUpdateModal();
                  return;
                }
                if (devicesContext.previewDevice == null) {
                  return;
                }
                const validSet = ValidUpdateDeviceStateArray.get(devicesContext.previewDevice.SN);
                if (validSet == null) {
                  console.error("Unable to find device's valid update set");
                  return;
                }
                const hasValidConnectionState = Array.from(validSet).every(
                  (item) => devicesContext.previewDevice.StateArray.includes(item)
                );
                if (hasValidConnectionState == false) {
                  setConfirmationDialogIsOpen(true);
                  confirmationResolve.current = (result) => {
                    setConfirmationDialogIsOpen(false);
                    if (result == false) {
                      return;
                    }
                    beginFirmwareUpdates();
                  };
                } else {
                  beginFirmwareUpdates();
                }
              },
              children: translate("Dialog_FirmwareUpdate_OkButton", "Ok")
            },
            "ok"
          )
        ],
        children: statusMessage != "" ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: style.statusMessage, children: statusMessage }) : /* @__PURE__ */ jsxRuntimeExports.jsx("ul", { className: style.tasks, children: getDeviceUpdateTasks(componentState.deviceSN) })
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      ContentDialogComponent,
      {
        className: "confirmation",
        title: translate("Dialog_UpdateManager_PreUpdateWarning_Title", "Warning"),
        icon: confirmationDialogData.icon,
        open: confirmationDialogIsOpen,
        actions: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              type: "button",
              onClick: () => {
                if (confirmationResolve.current != null) {
                  confirmationResolve.current(false);
                }
                setConfirmationDialogIsOpen(false);
              },
              children: translate("Button_Cancel", "Cancel")
            },
            "Button_Cancel"
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              type: "button",
              onClick: () => {
                if (confirmationResolve.current != null) {
                  confirmationResolve.current(true);
                }
                setConfirmationDialogIsOpen(false);
              },
              children: translate("Button_Ok", "Ok")
            },
            "Button_Ok"
          )
        ],
        children: /* @__PURE__ */ jsxRuntimeExports.jsx("section", { children: translate(
          "Dialog_UpdateDevice_PreUpdateWarning_Description",
          "The selected device does not have both its cable and wireless receiver plugged in. Are you sure you want to continue?"
        ) })
      }
    )
  ] });
}
const showDebugOverlay = false;
function App() {
  reactExports.useEffect(() => {
    console.log("Environment", { "BASE_URL": "./", "MODE": "production", "DEV": false, "PROD": true, "SSR": false });
  }, []);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(UIContext, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(DevicesContext, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(AppDataContext, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(CloudContext, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(RecordsContext, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(TranslationsContext, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "title-bar", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "actions", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("button", { type: "button", className: "embed action minimize", title: "Minimize", onClick: () => {
        AppService.runWindowCommand(MessageChannels.AppChannel.CommandMin);
      }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(SVGIconComponent, { src: "/images/icons/system_minimize-window.svg", selected: "/images/icons/system_minimize-window.svg" }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "button",
        {
          type: "button",
          className: "embed action maximize",
          title: "Maximize / Restore",
          onClick: () => {
            AppService.runWindowCommand(MessageChannels.AppChannel.CommandMax);
          },
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(SVGIconComponent, { src: "/images/icons/system_maximize-window.svg", selected: "/images/icons/system_maximize-window.svg" })
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "button",
        {
          type: "button",
          className: "embed action close",
          title: "Close",
          onClick: () => {
            AppService.runWindowCommand(MessageChannels.AppChannel.CommandClose);
          },
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(SVGIconComponent, { src: "/images/icons/system_close-window.svg", selected: "/images/icons/system_close-window.svg" })
        }
      )
    ] }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(NavigationComponent, {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "content", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Routes, { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/", element: /* @__PURE__ */ jsxRuntimeExports.jsx(ConnectedDevicesPage, {}) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/settings", element: /* @__PURE__ */ jsxRuntimeExports.jsx(SettingsPage, {}) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/rgbsync", element: /* @__PURE__ */ jsxRuntimeExports.jsx(RGBSyncPage, {}) }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(Route, { path: "/device", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { index: true, element: /* @__PURE__ */ jsxRuntimeExports.jsx(DevicePage, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: ":subpage", element: /* @__PURE__ */ jsxRuntimeExports.jsx(DevicePage, {}) })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/pairing", element: /* @__PURE__ */ jsxRuntimeExports.jsx(PairingPage, {}) })
    ] }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(UpdateDeviceComponent, {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx(UpdateManagerComponent, {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx(DebugOverlayComponent, { visible: showDebugOverlay })
  ] }) }) }) }) }) }) });
}
const default_theme = "";
const index = "";
client.createRoot(document.getElementById("root")).render(
  /* @__PURE__ */ jsxRuntimeExports.jsx(React.StrictMode, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(HashRouter, { basename: "/", children: /* @__PURE__ */ jsxRuntimeExports.jsx(App, {}) }) })
);
export {
  jsxRuntimeExports as j
};
